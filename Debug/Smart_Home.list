
Smart_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001420  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc0  0800acc0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc8  0800acc8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800acd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f4  20000090  0800ad5c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002584  0800ad5c  00022584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185a8  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358b  00000000  00000000  000386a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112d  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d090  00000000  00000000  0003e37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b577  00000000  00000000  0006b40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123adf  00000000  00000000  00086984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068f4  00000000  00000000  001aa464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001b0d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009888 	.word	0x08009888

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	08009888 	.word	0x08009888

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2120      	movs	r1, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fabe 	bl	8002b40 <SENSOR_IO_Read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f023 0304 	bic.w	r3, r3, #4
 80005ce:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f023 0303 	bic.w	r3, r3, #3
 80005de:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ee:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	7bfa      	ldrb	r2, [r7, #15]
 80005f6:	2120      	movs	r1, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fa87 	bl	8002b0c <SENSOR_IO_Write>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b088      	sub	sp, #32
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	b2d8      	uxtb	r0, r3
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	2302      	movs	r3, #2
 800061a:	21b2      	movs	r1, #178	; 0xb2
 800061c:	f002 faae 	bl	8002b7c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2135      	movs	r1, #53	; 0x35
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa8a 	bl	8002b40 <SENSOR_IO_Read>
 800062c:	4603      	mov	r3, r0
 800062e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21b      	sxth	r3, r3
 8000636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800063a:	b21a      	sxth	r2, r3
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000644:	7ffb      	ldrb	r3, [r7, #31]
 8000646:	019b      	lsls	r3, r3, #6
 8000648:	b21b      	sxth	r3, r3
 800064a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800064e:	b21a      	sxth	r2, r3
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000658:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800065c:	10db      	asrs	r3, r3, #3
 800065e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000660:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000664:	10db      	asrs	r3, r3, #3
 8000666:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	f107 0208 	add.w	r2, r7, #8
 8000670:	2304      	movs	r3, #4
 8000672:	21bc      	movs	r1, #188	; 0xbc
 8000674:	f002 fa82 	bl	8002b7c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	b21a      	sxth	r2, r3
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	b21b      	sxth	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7abb      	ldrb	r3, [r7, #10]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	b2d8      	uxtb	r0, r3
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	2302      	movs	r3, #2
 800069e:	21aa      	movs	r1, #170	; 0xaa
 80006a0:	f002 fa6c 	bl	8002b7c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006a4:	7a7b      	ldrb	r3, [r7, #9]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	7a3b      	ldrb	r3, [r7, #8]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80006b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	ee07 3a90 	vmov	s15, r3
 80006d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80006de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000700:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	ee07 3a90 	vmov	s15, r3
}
 800070a:	eeb0 0a67 	vmov.f32	s0, s15
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b2f      	cmp	r3, #47	; 0x2f
 8000722:	d906      	bls.n	8000732 <Hex2Num+0x1e>
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b39      	cmp	r3, #57	; 0x39
 8000728:	d803      	bhi.n	8000732 <Hex2Num+0x1e>
        return a - '0';
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	3b30      	subs	r3, #48	; 0x30
 800072e:	b2db      	uxtb	r3, r3
 8000730:	e014      	b.n	800075c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b60      	cmp	r3, #96	; 0x60
 8000736:	d906      	bls.n	8000746 <Hex2Num+0x32>
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b66      	cmp	r3, #102	; 0x66
 800073c:	d803      	bhi.n	8000746 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3b57      	subs	r3, #87	; 0x57
 8000742:	b2db      	uxtb	r3, r3
 8000744:	e00a      	b.n	800075c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b40      	cmp	r3, #64	; 0x40
 800074a:	d906      	bls.n	800075a <Hex2Num+0x46>
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b46      	cmp	r3, #70	; 0x46
 8000750:	d803      	bhi.n	800075a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3b37      	subs	r3, #55	; 0x37
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e000      	b.n	800075c <Hex2Num+0x48>
    }

    return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800077a:	e012      	b.n	80007a2 <ParseHexNumber+0x3a>
        sum <<= 4;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffc4 	bl	8000714 <Hex2Num>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4413      	add	r3, r2
 8000794:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
        done_count++;
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	3301      	adds	r3, #1
 80007a0:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b2f      	cmp	r3, #47	; 0x2f
 80007a8:	d903      	bls.n	80007b2 <ParseHexNumber+0x4a>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	; 0x39
 80007b0:	d90f      	bls.n	80007d2 <ParseHexNumber+0x6a>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b60      	cmp	r3, #96	; 0x60
 80007b8:	d903      	bls.n	80007c2 <ParseHexNumber+0x5a>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b66      	cmp	r3, #102	; 0x66
 80007c0:	d907      	bls.n	80007d2 <ParseHexNumber+0x6a>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b40      	cmp	r3, #64	; 0x40
 80007c8:	d906      	bls.n	80007d8 <ParseHexNumber+0x70>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b46      	cmp	r3, #70	; 0x46
 80007d0:	d802      	bhi.n	80007d8 <ParseHexNumber+0x70>
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d9d1      	bls.n	800077c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	7bba      	ldrb	r2, [r7, #14]
 80007e2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b2d      	cmp	r3, #45	; 0x2d
 800080a:	d119      	bne.n	8000840 <ParseNumber+0x52>
        minus = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
        done_count++;
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800081c:	e010      	b.n	8000840 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b30      	subs	r3, #48	; 0x30
 8000830:	4413      	add	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3301      	adds	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
        done_count++;
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b2f      	cmp	r3, #47	; 0x2f
 8000846:	d903      	bls.n	8000850 <ParseNumber+0x62>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b39      	cmp	r3, #57	; 0x39
 800084e:	d9e6      	bls.n	800081e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <ParseNumber+0x6e>
        *cnt = done_count;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	7bba      	ldrb	r2, [r7, #14]
 800085a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <ParseNumber+0x7a>
        return 0 - sum;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	425b      	negs	r3, r3
 8000866:	e000      	b.n	800086a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000868:	68bb      	ldr	r3, [r7, #8]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b087      	sub	sp, #28
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d027      	beq.n	80008dc <ParseMAC+0x66>
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000892:	e018      	b.n	80008c6 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b3a      	cmp	r3, #58	; 0x3a
 800089e:	d00d      	beq.n	80008bc <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	75fa      	strb	r2, [r7, #23]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	189c      	adds	r4, r3, r2
 80008ac:	f107 0316 	add.w	r3, r7, #22
 80008b0:	4619      	mov	r1, r3
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ff58 	bl	8000768 <ParseHexNumber>
 80008b8:	4603      	mov	r3, r0
 80008ba:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80008bc:	7dbb      	ldrb	r3, [r7, #22]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d906      	bls.n	80008dc <ParseMAC+0x66>
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d803      	bhi.n	80008dc <ParseMAC+0x66>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1db      	bne.n	8000894 <ParseMAC+0x1e>
   }
  }
}
 80008dc:	bf00      	nop
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d027      	beq.n	800094a <ParseIP+0x66>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d024      	beq.n	800094a <ParseIP+0x66>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d921      	bls.n	800094a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000906:	e019      	b.n	800093c <ParseIP+0x58>
    uint8_t done_count = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b2e      	cmp	r3, #46	; 0x2e
 8000912:	d00e      	beq.n	8000932 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000914:	f107 0316 	add.w	r3, r7, #22
 8000918:	4619      	mov	r1, r3
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff ff67 	bl	80007ee <ParseNumber>
 8000920:	4601      	mov	r1, r0
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	75fa      	strb	r2, [r7, #23]
 8000928:	461a      	mov	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8000932:	7dbb      	ldrb	r3, [r7, #22]
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d803      	bhi.n	800094a <ParseIP+0x66>
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1de      	bne.n	8000908 <ParseIP+0x24>
   }
  }
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3302      	adds	r3, #2
 8000966:	4940      	ldr	r1, [pc, #256]	; (8000a68 <AT_ParseInfo+0x114>)
 8000968:	4618      	mov	r0, r3
 800096a:	f007 ffdf 	bl	800892c <strtok>
 800096e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000970:	e071      	b.n	8000a56 <AT_ParseInfo+0x102>
    switch (num++) {
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	72fa      	strb	r2, [r7, #11]
 8000978:	2b06      	cmp	r3, #6
 800097a:	d866      	bhi.n	8000a4a <AT_ParseInfo+0xf6>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <AT_ParseInfo+0x30>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b5 	.word	0x080009b5
 800098c:	080009cd 	.word	0x080009cd
 8000990:	080009e5 	.word	0x080009e5
 8000994:	080009fd 	.word	0x080009fd
 8000998:	08000a15 	.word	0x08000a15
 800099c:	08000a29 	.word	0x08000a29
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	221f      	movs	r2, #31
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 ffad 	bl	8008906 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	77da      	strb	r2, [r3, #31]
      break;
 80009b2:	e04b      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3320      	adds	r3, #32
 80009b8:	2217      	movs	r2, #23
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 ffa2 	bl	8008906 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80009ca:	e03f      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3338      	adds	r3, #56	; 0x38
 80009d0:	220f      	movs	r2, #15
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f007 ff96 	bl	8008906 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80009e2:	e033      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3348      	adds	r3, #72	; 0x48
 80009e8:	220f      	movs	r2, #15
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 ff8a 	bl	8008906 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 80009fa:	e027      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3358      	adds	r3, #88	; 0x58
 8000a00:	220f      	movs	r2, #15
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 ff7e 	bl	8008906 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8000a12:	e01b      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000a14:	2100      	movs	r1, #0
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fee9 	bl	80007ee <ParseNumber>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000a26:	e011      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <AT_ParseInfo+0x118>)
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f007 ff7e 	bl	800892c <strtok>
 8000a30:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3368      	adds	r3, #104	; 0x68
 8000a36:	221f      	movs	r2, #31
 8000a38:	68f9      	ldr	r1, [r7, #12]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 ff63 	bl	8008906 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8000a48:	e000      	b.n	8000a4c <AT_ParseInfo+0xf8>

    default: break;
 8000a4a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <AT_ParseInfo+0x114>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f007 ff6c 	bl	800892c <strtok>
 8000a54:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d18a      	bne.n	8000972 <AT_ParseInfo+0x1e>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	080098d0 	.word	0x080098d0
 8000a6c:	080098d4 	.word	0x080098d4

08000a70 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3302      	adds	r3, #2
 8000a82:	4959      	ldr	r1, [pc, #356]	; (8000be8 <AT_ParseConnSettings+0x178>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 ff51 	bl	800892c <strtok>
 8000a8a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000a8c:	e0a2      	b.n	8000bd4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	73fa      	strb	r2, [r7, #15]
 8000a94:	2b0b      	cmp	r3, #11
 8000a96:	f200 808c 	bhi.w	8000bb2 <AT_ParseConnSettings+0x142>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <AT_ParseConnSettings+0x30>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ad1 	.word	0x08000ad1
 8000aa4:	08000ae7 	.word	0x08000ae7
 8000aa8:	08000aff 	.word	0x08000aff
 8000aac:	08000b13 	.word	0x08000b13
 8000ab0:	08000b27 	.word	0x08000b27
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b4b 	.word	0x08000b4b
 8000abc:	08000b5b 	.word	0x08000b5b
 8000ac0:	08000b6b 	.word	0x08000b6b
 8000ac4:	08000b7b 	.word	0x08000b7b
 8000ac8:	08000b8b 	.word	0x08000b8b
 8000acc:	08000b9f 	.word	0x08000b9f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 ff15 	bl	8008906 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8000ae4:	e066      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3321      	adds	r3, #33	; 0x21
 8000aea:	2220      	movs	r2, #32
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f007 ff09 	bl	8008906 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8000afc:	e05a      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000afe:	2100      	movs	r1, #0
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f7ff fe74 	bl	80007ee <ParseNumber>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000b10:	e050      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000b12:	2100      	movs	r1, #0
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff fe6a 	bl	80007ee <ParseNumber>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000b24:	e046      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000b26:	2100      	movs	r1, #0
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fe60 	bl	80007ee <ParseNumber>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000b38:	e03c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f7ff fece 	bl	80008e4 <ParseIP>
      break;
 8000b48:	e034      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	334c      	adds	r3, #76	; 0x4c
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	f7ff fec6 	bl	80008e4 <ParseIP>
      break;
 8000b58:	e02c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3350      	adds	r3, #80	; 0x50
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	68b8      	ldr	r0, [r7, #8]
 8000b64:	f7ff febe 	bl	80008e4 <ParseIP>
      break;
 8000b68:	e024      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3354      	adds	r3, #84	; 0x54
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	68b8      	ldr	r0, [r7, #8]
 8000b74:	f7ff feb6 	bl	80008e4 <ParseIP>
      break;
 8000b78:	e01c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	3358      	adds	r3, #88	; 0x58
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	f7ff feae 	bl	80008e4 <ParseIP>
      break;
 8000b88:	e014      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f7ff fe2e 	bl	80007ee <ParseNumber>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000b9c:	e00a      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f7ff fe24 	bl	80007ee <ParseNumber>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000bb0:	e000      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    default:
      break;
 8000bb2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <AT_ParseConnSettings+0x178>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f007 feb8 	bl	800892c <strtok>
 8000bbc:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <AT_ParseConnSettings+0x164>
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b2c      	cmp	r3, #44	; 0x2c
 8000bcc:	d102      	bne.n	8000bd4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f af59 	bne.w	8000a8e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	080098d0 	.word	0x080098d0

08000bec <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d056      	beq.n	8000cb8 <AT_ExecuteCommand+0xcc>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d051      	beq.n	8000cb8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f7ff faf0 	bl	8000200 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b299      	uxth	r1, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	47a0      	blx	r4
 8000c30:	4603      	mov	r3, r0
 8000c32:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dd3e      	ble.n	8000cb8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000c46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	4798      	blx	r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd27      	ble.n	8000caa <AT_ExecuteCommand+0xbe>
 8000c5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c62:	dc22      	bgt.n	8000caa <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000c64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c6c:	d105      	bne.n	8000c7a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8000c6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000c7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8000c86:	490f      	ldr	r1, [pc, #60]	; (8000cc4 <AT_ExecuteCommand+0xd8>)
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f007 feab 	bl	80089e4 <strstr>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e010      	b.n	8000cba <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8000c98:	490b      	ldr	r1, [pc, #44]	; (8000cc8 <AT_ExecuteCommand+0xdc>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f007 fea2 	bl	80089e4 <strstr>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e007      	b.n	8000cba <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000caa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cae:	f113 0f04 	cmn.w	r3, #4
 8000cb2:	d101      	bne.n	8000cb8 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	e000      	b.n	8000cba <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000cb8:	2304      	movs	r3, #4
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	080098e8 	.word	0x080098e8
 8000cc8:	080098f4 	.word	0x080098f4

08000ccc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8000ce6:	68b8      	ldr	r0, [r7, #8]
 8000ce8:	f7ff fa8a 	bl	8000200 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000cf0:	8a7b      	ldrh	r3, [r7, #18]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <AT_RequestSendData+0x32>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e05d      	b.n	8000dba <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d057      	beq.n	8000db8 <AT_RequestSendData+0xec>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d052      	beq.n	8000db8 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d1e:	8a79      	ldrh	r1, [r7, #18]
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	4798      	blx	r3
 8000d24:	4603      	mov	r3, r0
 8000d26:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000d28:	8a3a      	ldrh	r2, [r7, #16]
 8000d2a:	8a7b      	ldrh	r3, [r7, #18]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d143      	bne.n	8000db8 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d3c:	8879      	ldrh	r1, [r7, #2]
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000d46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d131      	bne.n	8000db4 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6a38      	ldr	r0, [r7, #32]
 8000d60:	4798      	blx	r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000d66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd19      	ble.n	8000da2 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8000d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000d7a:	4912      	ldr	r1, [pc, #72]	; (8000dc4 <AT_RequestSendData+0xf8>)
 8000d7c:	6a38      	ldr	r0, [r7, #32]
 8000d7e:	f007 fe31 	bl	80089e4 <strstr>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e016      	b.n	8000dba <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <AT_RequestSendData+0xfc>)
 8000d8e:	6a38      	ldr	r0, [r7, #32]
 8000d90:	f007 fe28 	bl	80089e4 <strstr>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e00d      	b.n	8000dba <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e00b      	b.n	8000dba <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000da6:	f113 0f04 	cmn.w	r3, #4
 8000daa:	d101      	bne.n	8000db0 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000dac:	2306      	movs	r3, #6
 8000dae:	e004      	b.n	8000dba <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000db4:	2302      	movs	r3, #2
 8000db6:	e000      	b.n	8000dba <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8000db8:	2304      	movs	r3, #4
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	080098e8 	.word	0x080098e8
 8000dc8:	080098f4 	.word	0x080098f4

08000dcc <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000de0:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 8087 	beq.w	8000efc <AT_RequestReceiveData+0x130>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8081 	beq.w	8000efc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000e00:	68b8      	ldr	r0, [r7, #8]
 8000e02:	f7ff f9fd 	bl	8000200 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000e10:	461a      	mov	r2, r3
 8000e12:	68b8      	ldr	r0, [r7, #8]
 8000e14:	47a0      	blx	r4
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd6f      	ble.n	8000efc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6938      	ldr	r0, [r7, #16]
 8000e2c:	4798      	blx	r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b0d      	cmp	r3, #13
 8000e38:	d104      	bne.n	8000e44 <AT_RequestReceiveData+0x78>
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d001      	beq.n	8000e48 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8000e44:	2304      	movs	r3, #4
 8000e46:	e05a      	b.n	8000efe <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
    p += 2;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	3302      	adds	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b07      	cmp	r3, #7
 8000e58:	d94a      	bls.n	8000ef0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8000e5a:	e002      	b.n	8000e62 <AT_RequestReceiveData+0x96>
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <AT_RequestReceiveData+0xaa>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b15      	cmp	r3, #21
 8000e74:	d0f2      	beq.n	8000e5c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3b08      	subs	r3, #8
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	491f      	ldr	r1, [pc, #124]	; (8000f08 <AT_RequestReceiveData+0x13c>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fdaa 	bl	80089e4 <strstr>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d016      	beq.n	8000ec4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3b08      	subs	r3, #8
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d202      	bcs.n	8000eb2 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f007 fe2b 	bl	8008b16 <memcpy>
       return ES_WIFI_STATUS_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e01c      	b.n	8000efe <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4413      	add	r3, r2
 8000ecc:	2204      	movs	r2, #4
 8000ece:	490f      	ldr	r1, [pc, #60]	; (8000f0c <AT_RequestReceiveData+0x140>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fcdf 	bl	8008894 <memcmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d104      	bne.n	8000ee6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e00b      	b.n	8000efe <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000eec:	2305      	movs	r3, #5
 8000eee:	e006      	b.n	8000efe <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f113 0f04 	cmn.w	r3, #4
 8000ef6:	d101      	bne.n	8000efc <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e000      	b.n	8000efe <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 8000efc:	2304      	movs	r3, #4
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	080098e8 	.word	0x080098e8
 8000f0c:	080098fc 	.word	0x080098fc

08000f10 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000f22:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d01b      	beq.n	8000f68 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000f36:	2000      	movs	r0, #0
 8000f38:	4798      	blx	r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d113      	bne.n	8000f68 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f46:	461a      	mov	r2, r3
 8000f48:	490a      	ldr	r1, [pc, #40]	; (8000f74 <ES_WIFI_Init+0x64>)
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe4e 	bl	8000bec <AT_ExecuteCommand>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fcf6 	bl	8000954 <AT_ParseInfo>
    }
   }
  }
  return ret;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08009904 	.word	0x08009904

08000f78 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d008      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e014      	b.n	8000fd2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4932      	ldr	r1, [pc, #200]	; (80010c0 <ES_WIFI_Connect+0xe0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 fb53 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800100a:	461a      	mov	r2, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fded 	bl	8000bec <AT_ExecuteCommand>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d14b      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4927      	ldr	r1, [pc, #156]	; (80010c4 <ES_WIFI_Connect+0xe4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f007 fb3c 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001038:	461a      	mov	r2, r3
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fdd6 	bl	8000bec <AT_ExecuteCommand>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d134      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	491b      	ldr	r1, [pc, #108]	; (80010c8 <ES_WIFI_Connect+0xe8>)
 800105c:	4618      	mov	r0, r3
 800105e:	f007 fb21 	bl	80086a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800106e:	461a      	mov	r2, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fdbb 	bl	8000bec <AT_ExecuteCommand>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d119      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001086:	4911      	ldr	r1, [pc, #68]	; (80010cc <ES_WIFI_Connect+0xec>)
 8001088:	4618      	mov	r0, r3
 800108a:	f007 fb0b 	bl	80086a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800109a:	461a      	mov	r2, r3
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fda5 	bl	8000bec <AT_ExecuteCommand>
 80010a2:	4603      	mov	r3, r0
 80010a4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	0800991c 	.word	0x0800991c
 80010c4:	08009924 	.word	0x08009924
 80010c8:	0800992c 	.word	0x0800992c
 80010cc:	08009934 	.word	0x08009934

080010d0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <ES_WIFI_IsConnected+0x5c>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 fadf 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010f2:	461a      	mov	r2, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fd79 	bl	8000bec <AT_ExecuteCommand>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800110a:	2b31      	cmp	r3, #49	; 0x31
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08009938 	.word	0x08009938

08001130 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800113e:	4910      	ldr	r1, [pc, #64]	; (8001180 <ES_WIFI_GetNetworkSettings+0x50>)
 8001140:	4618      	mov	r0, r3
 8001142:	f007 faaf 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001152:	461a      	mov	r2, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fd49 	bl	8000bec <AT_ExecuteCommand>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d108      	bne.n	8001176 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	338d      	adds	r3, #141	; 0x8d
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f7ff fc7d 	bl	8000a70 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08009940 	.word	0x08009940

08001184 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	4613      	mov	r3, r2
 8001190:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001198:	4913      	ldr	r1, [pc, #76]	; (80011e8 <ES_WIFI_GetMACAddress+0x64>)
 800119a:	4618      	mov	r0, r3
 800119c:	f007 fa82 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ac:	461a      	mov	r2, r3
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff fd1c 	bl	8000bec <AT_ExecuteCommand>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10e      	bne.n	80011dc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c4:	3302      	adds	r3, #2
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <ES_WIFI_GetMACAddress+0x68>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f007 fbaf 	bl	800892c <strtok>
 80011ce:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6938      	ldr	r0, [r7, #16]
 80011d8:	f7ff fb4d 	bl	8000876 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08009990 	.word	0x08009990
 80011ec:	08009994 	.word	0x08009994

080011f0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	461a      	mov	r2, r3
 800120a:	4949      	ldr	r1, [pc, #292]	; (8001330 <ES_WIFI_StartServerSingleConn+0x140>)
 800120c:	f007 fa4a 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800121c:	461a      	mov	r2, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fce4 	bl	8000bec <AT_ExecuteCommand>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	e079      	b.n	8001326 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d016      	beq.n	8001268 <ES_WIFI_StartServerSingleConn+0x78>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d012      	beq.n	8001268 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001248:	493a      	ldr	r1, [pc, #232]	; (8001334 <ES_WIFI_StartServerSingleConn+0x144>)
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fa2a 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800125c:	461a      	mov	r2, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fcc4 	bl	8000bec <AT_ExecuteCommand>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d15a      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <ES_WIFI_StartServerSingleConn+0x148>)
 800127c:	f007 fa12 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800128c:	461a      	mov	r2, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fcac 	bl	8000bec <AT_ExecuteCommand>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d142      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	7c1b      	ldrb	r3, [r3, #16]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4924      	ldr	r1, [pc, #144]	; (800133c <ES_WIFI_StartServerSingleConn+0x14c>)
 80012ac:	f007 f9fa 	bl	80086a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012bc:	461a      	mov	r2, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fc94 	bl	8000bec <AT_ExecuteCommand>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d12a      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	88db      	ldrh	r3, [r3, #6]
 80012d8:	461a      	mov	r2, r3
 80012da:	4919      	ldr	r1, [pc, #100]	; (8001340 <ES_WIFI_StartServerSingleConn+0x150>)
 80012dc:	f007 f9e2 	bl	80086a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012ec:	461a      	mov	r2, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fc7c 	bl	8000bec <AT_ExecuteCommand>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d112      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001304:	490f      	ldr	r1, [pc, #60]	; (8001344 <ES_WIFI_StartServerSingleConn+0x154>)
 8001306:	4618      	mov	r0, r3
 8001308:	f007 f9cc 	bl	80086a4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001318:	461a      	mov	r2, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fc66 	bl	8000bec <AT_ExecuteCommand>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	080099f8 	.word	0x080099f8
 8001334:	08009a40 	.word	0x08009a40
 8001338:	08009a00 	.word	0x08009a00
 800133c:	08009a4c 	.word	0x08009a4c
 8001340:	08009a08 	.word	0x08009a08
 8001344:	08009a54 	.word	0x08009a54

08001348 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 800135a:	f001 ff7d 	bl	8003258 <HAL_GetTick>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8001360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	429a      	cmp	r2, r3
 800136e:	d201      	bcs.n	8001374 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800137a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f007 fa97 	bl	80088b4 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800138c:	495f      	ldr	r1, [pc, #380]	; (800150c <ES_WIFI_WaitServerConnection+0x1c4>)
 800138e:	4618      	mov	r0, r3
 8001390:	f007 f988 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a0:	461a      	mov	r2, r3
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff fc22 	bl	8000bec <AT_ExecuteCommand>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 80013ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d129      	bne.n	800140a <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013bc:	4954      	ldr	r1, [pc, #336]	; (8001510 <ES_WIFI_WaitServerConnection+0x1c8>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fb10 	bl	80089e4 <strstr>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d021      	beq.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013d0:	4950      	ldr	r1, [pc, #320]	; (8001514 <ES_WIFI_WaitServerConnection+0x1cc>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 fb06 	bl	80089e4 <strstr>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d017      	beq.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013e4:	494c      	ldr	r1, [pc, #304]	; (8001518 <ES_WIFI_WaitServerConnection+0x1d0>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 fafc 	bl	80089e4 <strstr>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013f8:	4948      	ldr	r1, [pc, #288]	; (800151c <ES_WIFI_WaitServerConnection+0x1d4>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 faf2 	bl	80089e4 <strstr>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8001406:	2302      	movs	r3, #2
 8001408:	e07c      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 800140a:	2302      	movs	r3, #2
 800140c:	e07a      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fa4a 	bl	80088b4 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001426:	493e      	ldr	r1, [pc, #248]	; (8001520 <ES_WIFI_WaitServerConnection+0x1d8>)
 8001428:	4618      	mov	r0, r3
 800142a:	f007 f93b 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143a:	461a      	mov	r2, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fbd5 	bl	8000bec <AT_ExecuteCommand>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800144c:	2b00      	cmp	r3, #0
 800144e:	d140      	bne.n	80014d2 <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001456:	220c      	movs	r2, #12
 8001458:	4932      	ldr	r1, [pc, #200]	; (8001524 <ES_WIFI_WaitServerConnection+0x1dc>)
 800145a:	4618      	mov	r0, r3
 800145c:	f007 fa41 	bl	80088e2 <strncmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d037      	beq.n	80014d6 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800146c:	3302      	adds	r3, #2
 800146e:	492e      	ldr	r1, [pc, #184]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001470:	4618      	mov	r0, r3
 8001472:	f007 fa5b 	bl	800892c <strtok>
 8001476:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8001478:	492b      	ldr	r1, [pc, #172]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 800147a:	2000      	movs	r0, #0
 800147c:	f007 fa56 	bl	800892c <strtok>
 8001480:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3308      	adds	r3, #8
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff fa2a 	bl	80008e4 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8001490:	4925      	ldr	r1, [pc, #148]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001492:	2000      	movs	r0, #0
 8001494:	f007 fa4a 	bl	800892c <strtok>
 8001498:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 800149a:	2100      	movs	r1, #0
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff f9a6 	bl	80007ee <ParseNumber>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f007 fa3d 	bl	800892c <strtok>
 80014b2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 80014b4:	491c      	ldr	r1, [pc, #112]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f007 fa38 	bl	800892c <strtok>
 80014bc:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80014be:	2100      	movs	r1, #0
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff f994 	bl	80007ee <ParseNumber>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e018      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e016      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80014dc:	2064      	movs	r0, #100	; 0x64
 80014de:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 80014e0:	f001 feba 	bl	8003258 <HAL_GetTick>
 80014e4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f43f af43 	beq.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	f4ff af3e 	bcc.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f4ff af39 	bcc.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8001502:	2303      	movs	r3, #3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	08009914 	.word	0x08009914
 8001510:	08009a5c 	.word	0x08009a5c
 8001514:	08009a64 	.word	0x08009a64
 8001518:	08009a6c 	.word	0x08009a6c
 800151c:	08009a78 	.word	0x08009a78
 8001520:	08009a88 	.word	0x08009a88
 8001524:	08009a8c 	.word	0x08009a8c
 8001528:	080098d0 	.word	0x080098d0

0800152c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	4916      	ldr	r1, [pc, #88]	; (800159c <ES_WIFI_CloseServerConnection+0x70>)
 8001542:	4618      	mov	r0, r3
 8001544:	f007 f8ae 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001554:	461a      	mov	r2, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fb48 	bl	8000bec <AT_ExecuteCommand>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	e013      	b.n	8001592 <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001570:	490b      	ldr	r1, [pc, #44]	; (80015a0 <ES_WIFI_CloseServerConnection+0x74>)
 8001572:	4618      	mov	r0, r3
 8001574:	f007 f896 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001584:	461a      	mov	r2, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fb30 	bl	8000bec <AT_ExecuteCommand>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	080099f8 	.word	0x080099f8
 80015a0:	08009a9c 	.word	0x08009a9c

080015a4 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	4918      	ldr	r1, [pc, #96]	; (800161c <ES_WIFI_StopServerSingleConn+0x78>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f007 f872 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015cc:	461a      	mov	r2, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fb0c 	bl	8000bec <AT_ExecuteCommand>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <ES_WIFI_StopServerSingleConn+0x3e>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	e018      	b.n	8001614 <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e8:	490d      	ldr	r1, [pc, #52]	; (8001620 <ES_WIFI_StopServerSingleConn+0x7c>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f007 f85a 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015fc:	461a      	mov	r2, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff faf4 	bl	8000bec <AT_ExecuteCommand>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	e000      	b.n	8001614 <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080099f8 	.word	0x080099f8
 8001620:	08009aa4 	.word	0x08009aa4

08001624 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	460b      	mov	r3, r1
 8001632:	72fb      	strb	r3, [r7, #11]
 8001634:	4613      	mov	r3, r2
 8001636:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001638:	2302      	movs	r3, #2
 800163a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e001      	b.n	800164c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001652:	4293      	cmp	r3, r2
 8001654:	d902      	bls.n	800165c <ES_WIFI_SendData+0x38>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001656:	f241 3388 	movw	r3, #5000	; 0x1388
 800165a:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	893a      	ldrh	r2, [r7, #8]
 8001660:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001668:	7afa      	ldrb	r2, [r7, #11]
 800166a:	492d      	ldr	r1, [pc, #180]	; (8001720 <ES_WIFI_SendData+0xfc>)
 800166c:	4618      	mov	r0, r3
 800166e:	f007 f819 	bl	80086a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800167e:	461a      	mov	r2, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fab3 	bl	8000bec <AT_ExecuteCommand>
 8001686:	4603      	mov	r3, r0
 8001688:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d13c      	bne.n	800170a <ES_WIFI_SendData+0xe6>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4922      	ldr	r1, [pc, #136]	; (8001724 <ES_WIFI_SendData+0x100>)
 800169a:	4618      	mov	r0, r3
 800169c:	f007 f802 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ac:	461a      	mov	r2, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fa9c 	bl	8000bec <AT_ExecuteCommand>
 80016b4:	4603      	mov	r3, r0
 80016b6:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d125      	bne.n	800170a <ES_WIFI_SendData+0xe6>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c4:	893a      	ldrh	r2, [r7, #8]
 80016c6:	4918      	ldr	r1, [pc, #96]	; (8001728 <ES_WIFI_SendData+0x104>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 ffeb 	bl	80086a4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016da:	893a      	ldrh	r2, [r7, #8]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff faf2 	bl	8000ccc <AT_RequestSendData>
 80016e8:	4603      	mov	r3, r0
 80016ea:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10b      	bne.n	800170a <ES_WIFI_SendData+0xe6>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <ES_WIFI_SendData+0x108>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f972 	bl	80089e4 <strstr>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <ES_WIFI_SendData+0xe6>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8001706:	2302      	movs	r3, #2
 8001708:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800170a:	7cfb      	ldrb	r3, [r7, #19]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d102      	bne.n	8001716 <ES_WIFI_SendData+0xf2>
  {
    *SentLen = 0;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2200      	movs	r2, #0
 8001714:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8001716:	7cfb      	ldrb	r3, [r7, #19]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	080099f8 	.word	0x080099f8
 8001724:	08009ad4 	.word	0x08009ad4
 8001728:	08009adc 	.word	0x08009adc
 800172c:	08009ae8 	.word	0x08009ae8

08001730 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	460b      	mov	r3, r1
 800173e:	72fb      	strb	r3, [r7, #11]
 8001740:	4613      	mov	r3, r2
 8001742:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001744:	2302      	movs	r3, #2
 8001746:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e001      	b.n	8001758 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001758:	893b      	ldrh	r3, [r7, #8]
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d862      	bhi.n	8001828 <ES_WIFI_ReceiveData+0xf8>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001768:	7afa      	ldrb	r2, [r7, #11]
 800176a:	4932      	ldr	r1, [pc, #200]	; (8001834 <ES_WIFI_ReceiveData+0x104>)
 800176c:	4618      	mov	r0, r3
 800176e:	f006 ff99 	bl	80086a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800177e:	461a      	mov	r2, r3
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fa33 	bl	8000bec <AT_ExecuteCommand>
 8001786:	4603      	mov	r3, r0
 8001788:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d146      	bne.n	800181e <ES_WIFI_ReceiveData+0xee>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001796:	893a      	ldrh	r2, [r7, #8]
 8001798:	4927      	ldr	r1, [pc, #156]	; (8001838 <ES_WIFI_ReceiveData+0x108>)
 800179a:	4618      	mov	r0, r3
 800179c:	f006 ff82 	bl	80086a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ac:	461a      	mov	r2, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff fa1c 	bl	8000bec <AT_ExecuteCommand>
 80017b4:	4603      	mov	r3, r0
 80017b6:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d12b      	bne.n	8001816 <ES_WIFI_ReceiveData+0xe6>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	491d      	ldr	r1, [pc, #116]	; (800183c <ES_WIFI_ReceiveData+0x10c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f006 ff6b 	bl	80086a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017da:	461a      	mov	r2, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fa05 	bl	8000bec <AT_ExecuteCommand>
 80017e2:	4603      	mov	r3, r0
 80017e4:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11d      	bne.n	8001828 <ES_WIFI_ReceiveData+0xf8>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f2:	4913      	ldr	r1, [pc, #76]	; (8001840 <ES_WIFI_ReceiveData+0x110>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 ff55 	bl	80086a4 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4613      	mov	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fade 	bl	8000dcc <AT_RequestReceiveData>
 8001810:	4603      	mov	r3, r0
 8001812:	74fb      	strb	r3, [r7, #19]
 8001814:	e008      	b.n	8001828 <ES_WIFI_ReceiveData+0xf8>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e004      	b.n	8001828 <ES_WIFI_ReceiveData+0xf8>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <ES_WIFI_ReceiveData+0x114>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <ES_WIFI_ReceiveData+0x114>)
 8001826:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001828:	7cfb      	ldrb	r3, [r7, #19]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	080099f8 	.word	0x080099f8
 8001838:	08009af0 	.word	0x08009af0
 800183c:	08009af8 	.word	0x08009af8
 8001840:	08009b00 	.word	0x08009b00
 8001844:	200000ac 	.word	0x200000ac

08001848 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001850:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b54      	ldr	r3, [pc, #336]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001898:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a44      	ldr	r2, [pc, #272]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	483f      	ldr	r0, [pc, #252]	; (80019b4 <SPI_WIFI_MspInit+0x16c>)
 80018b8:	f002 f818 	bl	80038ec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80018bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4837      	ldr	r0, [pc, #220]	; (80019b4 <SPI_WIFI_MspInit+0x16c>)
 80018d6:	f001 fe5f 	bl	8003598 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 80018f4:	f001 fe50 	bl	8003598 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4828      	ldr	r0, [pc, #160]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 8001916:	f001 fe3f 	bl	8003598 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800191a:	2201      	movs	r2, #1
 800191c:	2101      	movs	r1, #1
 800191e:	4826      	ldr	r0, [pc, #152]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 8001920:	f001 ffe4 	bl	80038ec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 800193c:	f001 fe2c 	bl	8003598 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800194e:	2301      	movs	r3, #1
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001952:	2306      	movs	r3, #6
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4817      	ldr	r0, [pc, #92]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 800195e:	f001 fe1b 	bl	8003598 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001970:	2301      	movs	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001974:	2306      	movs	r3, #6
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 8001980:	f001 fe0a 	bl	8003598 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001992:	2301      	movs	r3, #1
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001996:	2306      	movs	r3, #6
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4806      	ldr	r0, [pc, #24]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 80019a2:	f001 fdf9 	bl	8003598 <HAL_GPIO_Init>
}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48000800 	.word	0x48000800

080019c0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d145      	bne.n	8001a60 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019d6:	4a28      	ldr	r2, [pc, #160]	; (8001a78 <SPI_WIFI_Init+0xb8>)
 80019d8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80019da:	4826      	ldr	r0, [pc, #152]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019dc:	f7ff ff34 	bl	8001848 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019f0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019f4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a2a:	f003 fc97 	bl	800535c <HAL_SPI_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e018      	b.n	8001a6c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2007      	movs	r0, #7
 8001a40:	f001 fd15 	bl	800346e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001a44:	2007      	movs	r0, #7
 8001a46:	f001 fd2e 	bl	80034a6 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2033      	movs	r0, #51	; 0x33
 8001a50:	f001 fd0d 	bl	800346e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001a54:	2033      	movs	r0, #51	; 0x33
 8001a56:	f001 fd26 	bl	80034a6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f000 f9fe 	bl	8001e5c <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001a60:	f000 f80c 	bl	8001a7c <SPI_WIFI_ResetModule>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000b0 	.word	0x200000b0
 8001a78:	40003c00 	.word	0x40003c00

08001a7c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f001 fbe9 	bl	8003258 <HAL_GetTick>
 8001a86:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a92:	4830      	ldr	r0, [pc, #192]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001a94:	f001 ff2a 	bl	80038ec <HAL_GPIO_WritePin>
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f001 fbe9 	bl	8003270 <HAL_Delay>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001aa6:	f001 ff21 	bl	80038ec <HAL_GPIO_WritePin>
 8001aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aae:	f001 fbdf 	bl	8003270 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4827      	ldr	r0, [pc, #156]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001ab8:	f001 ff18 	bl	80038ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001abc:	200f      	movs	r0, #15
 8001abe:	f000 f9cd 	bl	8001e5c <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001ac2:	e020      	b.n	8001b06 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	463a      	mov	r2, r7
 8001ac8:	18d1      	adds	r1, r2, r3
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <SPI_WIFI_ResetModule+0xdc>)
 8001ad2:	f003 fd4b 	bl	800556c <HAL_SPI_Receive>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3302      	adds	r3, #2
 8001ade:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001ae0:	f001 fbba 	bl	8003258 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d202      	bcs.n	8001af6 <SPI_WIFI_ResetModule+0x7a>
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001af6:	2201      	movs	r2, #1
 8001af8:	2101      	movs	r1, #1
 8001afa:	4816      	ldr	r0, [pc, #88]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001afc:	f001 fef6 	bl	80038ec <HAL_GPIO_WritePin>
      return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e021      	b.n	8001b4a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001b06:	2102      	movs	r1, #2
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001b0a:	f001 fed7 	bl	80038bc <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d0d7      	beq.n	8001ac4 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001b14:	2201      	movs	r2, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001b1a:	f001 fee7 	bl	80038ec <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001b1e:	783b      	ldrb	r3, [r7, #0]
 8001b20:	2b15      	cmp	r3, #21
 8001b22:	d10e      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b15      	cmp	r3, #21
 8001b28:	d10b      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b0d      	cmp	r3, #13
 8001b2e:	d108      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001b30:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d105      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001b36:	793b      	ldrb	r3, [r7, #4]
 8001b38:	2b3e      	cmp	r3, #62	; 0x3e
 8001b3a:	d102      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d002      	beq.n	8001b48 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e000      	b.n	8001b4a <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	48001000 	.word	0x48001000
 8001b58:	200000b0 	.word	0x200000b0

08001b5c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <SPI_WIFI_DeInit+0x10>)
 8001b62:	f003 fcc7 	bl	80054f4 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200000b0 	.word	0x200000b0

08001b70 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001b78:	f001 fb6e 	bl	8003258 <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001b80:	e00a      	b.n	8001b98 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b82:	f001 fb69 	bl	8003258 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d902      	bls.n	8001b98 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e007      	b.n	8001ba8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <wait_cmddata_rdy_high+0x40>)
 8001b9c:	f001 fe8e 	bl	80038bc <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1ed      	bne.n	8001b82 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	48001000 	.word	0x48001000

08001bb4 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001bbc:	f001 fb4c 	bl	8003258 <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001bc4:	e00a      	b.n	8001bdc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bc6:	f001 fb47 	bl	8003258 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad2      	subs	r2, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d902      	bls.n	8001bdc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e004      	b.n	8001be6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <wait_cmddata_rdy_rising_event+0x3c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d0f0      	beq.n	8001bc6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001be4:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000011c 	.word	0x2000011c

08001bf4 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001bfc:	f001 fb2c 	bl	8003258 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001c04:	e00a      	b.n	8001c1c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c06:	f001 fb27 	bl	8003258 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d902      	bls.n	8001c1c <wait_spi_rx_event+0x28>
    {
      return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e004      	b.n	8001c26 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <wait_spi_rx_event+0x3c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d0f0      	beq.n	8001c06 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001c24:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000114 	.word	0x20000114

08001c34 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001c3c:	f001 fb0c 	bl	8003258 <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001c44:	e00a      	b.n	8001c5c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c46:	f001 fb07 	bl	8003258 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d902      	bls.n	8001c5c <wait_spi_tx_event+0x28>
    {
      return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e004      	b.n	8001c66 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <wait_spi_tx_event+0x3c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d0f0      	beq.n	8001c46 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001c64:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000118 	.word	0x20000118

08001c74 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001c86:	2201      	movs	r2, #1
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4834      	ldr	r0, [pc, #208]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001c8c:	f001 fe2e 	bl	80038ec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f8e3 	bl	8001e5c <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff8b 	bl	8001bb4 <wait_cmddata_rdy_rising_event>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da02      	bge.n	8001caa <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001ca4:	f06f 0302 	mvn.w	r3, #2
 8001ca8:	e054      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	482b      	ldr	r0, [pc, #172]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001cb0:	f001 fe1c 	bl	80038ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f000 f8d1 	bl	8001e5c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001cba:	e03d      	b.n	8001d38 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001cbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	db02      	blt.n	8001ccc <SPI_WIFI_ReceiveData+0x58>
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13c      	bne.n	8001d46 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <SPI_WIFI_ReceiveData+0xec>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4822      	ldr	r0, [pc, #136]	; (8001d64 <SPI_WIFI_ReceiveData+0xf0>)
 8001cdc:	f004 fa14 	bl	8006108 <HAL_SPI_Receive_IT>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	481c      	ldr	r0, [pc, #112]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001cec:	f001 fdfe 	bl	80038ec <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e02e      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff7b 	bl	8001bf4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001cfe:	7d3a      	ldrb	r2, [r7, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3301      	adds	r3, #1
 8001d08:	7d7a      	ldrb	r2, [r7, #21]
 8001d0a:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001d0c:	8afb      	ldrh	r3, [r7, #22]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3302      	adds	r3, #2
 8001d18:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8001d1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d22:	db09      	blt.n	8001d38 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001d24:	2201      	movs	r2, #1
 8001d26:	2101      	movs	r1, #1
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d2a:	f001 fddf 	bl	80038ec <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001d2e:	f7ff fea5 	bl	8001a7c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d32:	f06f 0303 	mvn.w	r3, #3
 8001d36:	e00d      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d3c:	f001 fdbe 	bl	80038bc <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d0ba      	beq.n	8001cbc <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001d46:	2201      	movs	r2, #1
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d4c:	f001 fdce 	bl	80038ec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	48001000 	.word	0x48001000
 8001d60:	20000114 	.word	0x20000114
 8001d64:	200000b0 	.word	0x200000b0

08001d68 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	460b      	mov	r3, r1
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fef9 	bl	8001b70 <wait_cmddata_rdy_high>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da02      	bge.n	8001d8a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e04f      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <SPI_WIFI_SendData+0xcc>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d90:	2200      	movs	r2, #0
 8001d92:	2101      	movs	r1, #1
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001d96:	f001 fda9 	bl	80038ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f85e 	bl	8001e5c <SPI_WIFI_DelayUs>
  if (len > 1)
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d919      	bls.n	8001dda <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <SPI_WIFI_SendData+0xd4>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001dac:	897b      	ldrh	r3, [r7, #10]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	4822      	ldr	r0, [pc, #136]	; (8001e40 <SPI_WIFI_SendData+0xd8>)
 8001db8:	f004 f906 	bl	8005fc8 <HAL_SPI_Transmit_IT>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001dc8:	f001 fd90 	bl	80038ec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	e02b      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff2d 	bl	8001c34 <wait_spi_tx_event>
  }

  if (len & 1)
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8001de4:	897b      	ldrh	r3, [r7, #10]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001df0:	230a      	movs	r3, #10
 8001df2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <SPI_WIFI_SendData+0xd4>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4619      	mov	r1, r3
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <SPI_WIFI_SendData+0xd8>)
 8001e04:	f004 f8e0 	bl	8005fc8 <HAL_SPI_Transmit_IT>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2101      	movs	r1, #1
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001e14:	f001 fd6a 	bl	80038ec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e005      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff07 	bl	8001c34 <wait_spi_tx_event>
  }
  return len;
 8001e26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000011c 	.word	0x2000011c
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	20000118 	.word	0x20000118
 8001e40:	200000b0 	.word	0x200000b0

08001e44 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f001 fa0f 	bl	8003270 <HAL_Delay>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d122      	bne.n	8001eba <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <SPI_WIFI_DelayUs+0x98>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <SPI_WIFI_DelayUs+0x9c>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001e8a:	f001 f9e5 	bl	8003258 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001e90:	e002      	b.n	8001e98 <SPI_WIFI_DelayUs+0x3c>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8001e9e:	f001 f9db 	bl	8003258 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eaa:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <SPI_WIFI_DelayUs+0x5e>
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <SPI_WIFI_DelayUs+0x98>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <SPI_WIFI_DelayUs+0xa0>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9a      	lsrs	r2, r3, #18
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001eda:	e002      	b.n	8001ee2 <SPI_WIFI_DelayUs+0x86>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <SPI_WIFI_DelayUs+0x80>
  return;
 8001ee8:	bf00      	nop
}
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000120 	.word	0x20000120
 8001ef4:	20000024 	.word	0x20000024
 8001ef8:	10624dd3 	.word	0x10624dd3
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_SPI_RxCpltCallback+0x24>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_SPI_RxCpltCallback+0x24>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000114 	.word	0x20000114

08001f28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_SPI_TxCpltCallback+0x24>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_SPI_TxCpltCallback+0x24>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000118 	.word	0x20000118

08001f50 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SPI_WIFI_ISR+0x1c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <SPI_WIFI_ISR+0x1c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
   }
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	2000011c 	.word	0x2000011c

08001f70 <inject>:
#include <stdio.h>


const char html[] = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>Document</title></head><body><h1>Smart Home System - Online</h1><div class=\"card\"><div class=\"title\"><h2>Alarm</h2><label class=\"switch\"><input type=\"checkbox\" id=\"alarm-checkbox\"              > <span class=\"slider round\"></span></label></div><div>Status: Nothing to report</div></div><div class=\"card\"><div class=\"title\"><h2>Temperature</h2></div><div class=\"temp\"><div class=\"thermometer\"><div class=\"stem\"><div class=\"stem-perct\"></div></div><div class=\"bulb\"></div></div><div class=\"temp-value\">                 </div></div></div></body></html><style>html{--background-color:#303030;--color-accent-extra-light:#437e56;--color-accent-light:#2a4e36;background-color:var(--background-color);color:#fff;font-family:sans-serif}h2{margin:0}.card{max-width:30rem;padding:1.5rem;background-color:var(--color-accent-extra-light);border-radius:1rem;margin-bottom:2rem}.title{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem}.switch{position:relative;display:inline-block;--switch-height:1.5rem;--switch-width:3rem;width:var(--switch-width);height:var(--switch-height)}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:\"\";height:calc(var(--switch-height) - .2rem);width:calc(var(--switch-height) - .2rem);left:.09rem;bottom:.11rem;background-color:#fff;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider:before{-webkit-transform:translateX(calc(var(--switch-width) - var(--switch-height)));-ms-transform:translateX(calc(var(--switch-width) - var(--switch-height)));transform:translateX(calc(var(--switch-width) - var(--switch-height)))}.slider.round{border-radius:calc(var(--switch-height)/ 2)}.slider.round:before{border-radius:50%}.thermometer{display:block;position:relative;height:100px}.bulb{display:inline-block;border:2px solid #222;width:25px;height:25px;border-radius:50%;position:absolute;left:0;bottom:0;box-shadow:0 0 0 2px #fff inset;background:red}.stem{display:inline-block;border:2px solid #222;width:14px;height:80px;border-radius:0 0 20px 20px;border-top:2px solid transparent;position:absolute;bottom:24px;left:5px;box-shadow:0 0 0 2px #fff inset;transform:rotate(180deg);z-index:10;padding-bottom:3px}.stem-perct{height:calc(             + 6px);width:10px;background:red;display:block;margin:0 auto;border-radius:10px;transform:translateY(-5px)}.temp{width:100%;padding:3rem 0;justify-content:center;display:flex;align-items:center}.temp-value{font-size:2rem;margin-left:3rem}</style><script>document.getElementById(\"alarm-checkbox\").addEventListener('change', (event) => {\n    if (event.currentTarget.checked) {\n      fetch(\"/?radio=1\", { method: \"POST\" });\n    } else {\n      fetch('/?radio=0', { method: \"POST\" });\n    }\n  });</script>";

char* inject(int alarmEnabled, int temp, int thermPercent){
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
    char* injected = malloc(sizeof(char) * strlen(html));
 8001f7c:	f640 400a 	movw	r0, #3082	; 0xc0a
 8001f80:	f006 f9a4 	bl	80082cc <malloc>
 8001f84:	4603      	mov	r3, r0
 8001f86:	61fb      	str	r3, [r7, #28]
    strcpy(injected, html);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <inject+0xac>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4611      	mov	r1, r2
 8001f90:	f640 430b 	movw	r3, #3083	; 0xc0b
 8001f94:	461a      	mov	r2, r3
 8001f96:	f006 fdbe 	bl	8008b16 <memcpy>

    strncpy(&injected[313], alarmEnabled ? "checked" : "       ", 7);
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f203 1039 	addw	r0, r3, #313	; 0x139
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <inject+0x3a>
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <inject+0xb0>)
 8001fa8:	e000      	b.n	8001fac <inject+0x3c>
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <inject+0xb4>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f006 fca9 	bl	8008906 <strncpy>

    char* tempStr = malloc(sizeof(char) * 20);
 8001fb4:	2014      	movs	r0, #20
 8001fb6:	f006 f989 	bl	80082cc <malloc>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	61bb      	str	r3, [r7, #24]
    sprintf(tempStr, "%d&deg;C", temp);
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4919      	ldr	r1, [pc, #100]	; (8002028 <inject+0xb8>)
 8001fc2:	69b8      	ldr	r0, [r7, #24]
 8001fc4:	f006 fb6e 	bl	80086a4 <siprintf>
    strncpy(&injected[632], tempStr, strlen(tempStr) - 1);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	f7fe f916 	bl	8000200 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	461a      	mov	r2, r3
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f006 fc92 	bl	8008906 <strncpy>

    char* thermPercentStr = malloc(sizeof(char) * 20);
 8001fe2:	2014      	movs	r0, #20
 8001fe4:	f006 f972 	bl	80082cc <malloc>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]
    sprintf(thermPercentStr, "%d%s", thermPercent, "%%");
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <inject+0xbc>)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	490f      	ldr	r1, [pc, #60]	; (8002030 <inject+0xc0>)
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f006 fb56 	bl	80086a4 <siprintf>
    strncpy(&injected[2569], thermPercentStr, strlen(thermPercentStr) - 1);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f603 2409 	addw	r4, r3, #2569	; 0xa09
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7fe f8fe 	bl	8000200 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	3b01      	subs	r3, #1
 8002008:	461a      	mov	r2, r3
 800200a:	6979      	ldr	r1, [r7, #20]
 800200c:	4620      	mov	r0, r4
 800200e:	f006 fc7a 	bl	8008906 <strncpy>

    return injected;
 8002012:	69fb      	ldr	r3, [r7, #28]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	08009f74 	.word	0x08009f74
 8002020:	08009b40 	.word	0x08009b40
 8002024:	08009b48 	.word	0x08009b48
 8002028:	08009b50 	.word	0x08009b50
 800202c:	08009b5c 	.word	0x08009b5c
 8002030:	08009b60 	.word	0x08009b60

08002034 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002038:	f001 f8b3 	bl	80031a2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800203c:	f000 faba 	bl	80025b4 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 fb4b 	bl	80026dc <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002046:	2101      	movs	r1, #1
 8002048:	2000      	movs	r0, #0
 800204a:	f000 fba3 	bl	8002794 <BSP_PB_Init>

  BSP_TSENSOR_Init();
 800204e:	f000 fdb3 	bl	8002bb8 <BSP_TSENSOR_Init>


  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <main+0x74>)
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <main+0x78>)
 8002056:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <main+0x74>)
 800205a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205e:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <main+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <main+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <main+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <main+0x74>)
 8002074:	220c      	movs	r2, #12
 8002076:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <main+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <main+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <main+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <main+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8002090:	4905      	ldr	r1, [pc, #20]	; (80020a8 <main+0x74>)
 8002092:	2000      	movs	r0, #0
 8002094:	f000 fbd4 	bl	8002840 <BSP_COM_Init>

  printf("\n****** WIFI Web Server demonstration ******\n\r");
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <main+0x7c>)
 800209a:	f006 fa8d 	bl	80085b8 <iprintf>
//	/* definition and creation of taskBtnInput */
//	osThreadDef(taskSensors, StartTaskSensors, osPriorityNormal, 0, 256);
//	taskSensorsHandle = osThreadCreate(osThread(taskSensors), NULL);
//
//	osKernelStart();
  wifi_server();
 800209e:	f000 f8b9 	bl	8002214 <wifi_server>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200019e4 	.word	0x200019e4
 80020ac:	40013800 	.word	0x40013800
 80020b0:	08009b68 	.word	0x08009b68

080020b4 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80020ba:	f000 fecb 	bl	8002e54 <WIFI_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d124      	bne.n	800210e <wifi_start+0x5a>
  {
    printf("eS-WiFi Initialized.\n\r");
 80020c4:	4815      	ldr	r0, [pc, #84]	; (800211c <wifi_start+0x68>)
 80020c6:	f006 fa77 	bl	80085b8 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2106      	movs	r1, #6
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 ff0e 	bl	8002ef0 <WIFI_GetMAC_Address>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <wifi_start+0x4e>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 80020da:	783b      	ldrb	r3, [r7, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	787b      	ldrb	r3, [r7, #1]
 80020e0:	461c      	mov	r4, r3
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	461d      	mov	r5, r3
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	793a      	ldrb	r2, [r7, #4]
 80020ea:	7979      	ldrb	r1, [r7, #5]
 80020ec:	9102      	str	r1, [sp, #8]
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	462b      	mov	r3, r5
 80020f4:	4622      	mov	r2, r4
 80020f6:	4601      	mov	r1, r0
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <wifi_start+0x6c>)
 80020fa:	f006 fa5d 	bl	80085b8 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	e007      	b.n	8002112 <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n\r"));
 8002102:	4808      	ldr	r0, [pc, #32]	; (8002124 <wifi_start+0x70>)
 8002104:	f006 fa58 	bl	80085b8 <iprintf>
      return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	e001      	b.n	8002112 <wifi_start+0x5e>
    return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	bf00      	nop
 800211c:	08009b98 	.word	0x08009b98
 8002120:	08009bb0 	.word	0x08009bb0
 8002124:	08009bf0 	.word	0x08009bf0

08002128 <wifi_connect>:



int wifi_connect(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af02      	add	r7, sp, #8
  wifi_start();
 800212e:	f7ff ffc1 	bl	80020b4 <wifi_start>

  memset(&user_config, 0, sizeof(user_config));
 8002132:	22d8      	movs	r2, #216	; 0xd8
 8002134:	2100      	movs	r1, #0
 8002136:	482c      	ldr	r0, [pc, #176]	; (80021e8 <wifi_connect+0xc0>)
 8002138:	f006 fbbc 	bl	80088b4 <memset>

//  Set wifi config
  printf("Configuring SSID and password.\n\r");
 800213c:	482b      	ldr	r0, [pc, #172]	; (80021ec <wifi_connect+0xc4>)
 800213e:	f006 fa3b 	bl	80085b8 <iprintf>
  strcpy(user_config.wifi_config.ssid, "Philippe");
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <wifi_connect+0xc8>)
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <wifi_connect+0xcc>)
 8002146:	ca07      	ldmia	r2, {r0, r1, r2}
 8002148:	c303      	stmia	r3!, {r0, r1}
 800214a:	701a      	strb	r2, [r3, #0]
  char c = '3';
 800214c:	2333      	movs	r3, #51	; 0x33
 800214e:	71fb      	strb	r3, [r7, #7]
  user_config.wifi_config.security = c - '0';
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3b30      	subs	r3, #48	; 0x30
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <wifi_connect+0xc0>)
 8002158:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  strcpy(user_config.wifi_config.password, "hahahaha");
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <wifi_connect+0xd0>)
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <wifi_connect+0xd4>)
 8002160:	ca07      	ldmia	r2, {r0, r1, r2}
 8002162:	c303      	stmia	r3!, {r0, r1}
 8002164:	701a      	strb	r2, [r3, #0]
  user_config.wifi_config_magic = USER_CONF_MAGIC;
 8002166:	4920      	ldr	r1, [pc, #128]	; (80021e8 <wifi_connect+0xc0>)
 8002168:	a31d      	add	r3, pc, #116	; (adr r3, 80021e0 <wifi_connect+0xb8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	e9c1 2300 	strd	r2, r3, [r1]
// Try to connect to wifi
  printf("Connecting to %s\n\r", user_config.wifi_config.ssid);
 8002172:	491f      	ldr	r1, [pc, #124]	; (80021f0 <wifi_connect+0xc8>)
 8002174:	4822      	ldr	r0, [pc, #136]	; (8002200 <wifi_connect+0xd8>)
 8002176:	f006 fa1f 	bl	80085b8 <iprintf>
  WIFI_Ecn_t security =  WIFI_ECN_WPA2_PSK;
 800217a:	2303      	movs	r3, #3
 800217c:	71bb      	strb	r3, [r7, #6]

  if (WIFI_Connect(user_config.wifi_config.ssid, user_config.wifi_config.password, security) == WIFI_STATUS_OK)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	491d      	ldr	r1, [pc, #116]	; (80021f8 <wifi_connect+0xd0>)
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <wifi_connect+0xc8>)
 8002186:	f000 fe91 	bl	8002eac <WIFI_Connect>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11e      	bne.n	80021ce <wifi_connect+0xa6>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8002190:	2104      	movs	r1, #4
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <wifi_connect+0xdc>)
 8002194:	f000 fecc 	bl	8002f30 <WIFI_GetIP_Address>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d111      	bne.n	80021c2 <wifi_connect+0x9a>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n\r",
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <wifi_connect+0xdc>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <wifi_connect+0xdc>)
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <wifi_connect+0xdc>)
 80021ac:	789b      	ldrb	r3, [r3, #2]
 80021ae:	4618      	mov	r0, r3
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <wifi_connect+0xdc>)
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <wifi_connect+0xe0>)
 80021ba:	f006 f9fd 	bl	80085b8 <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
     return -1;
  }
  return 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	e00a      	b.n	80021d8 <wifi_connect+0xb0>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
 80021c2:	4812      	ldr	r0, [pc, #72]	; (800220c <wifi_connect+0xe4>)
 80021c4:	f006 f9f8 	bl	80085b8 <iprintf>
      return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e004      	b.n	80021d8 <wifi_connect+0xb0>
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
 80021ce:	4810      	ldr	r0, [pc, #64]	; (8002210 <wifi_connect+0xe8>)
 80021d0:	f006 f9f2 	bl	80085b8 <iprintf>
     return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	89abcdef 	.word	0x89abcdef
 80021e4:	01234567 	.word	0x01234567
 80021e8:	20000128 	.word	0x20000128
 80021ec:	08009c14 	.word	0x08009c14
 80021f0:	20000130 	.word	0x20000130
 80021f4:	08009c38 	.word	0x08009c38
 80021f8:	20000194 	.word	0x20000194
 80021fc:	08009c44 	.word	0x08009c44
 8002200:	08009c50 	.word	0x08009c50
 8002204:	20001588 	.word	0x20001588
 8002208:	08009c64 	.word	0x08009c64
 800220c:	08009ca0 	.word	0x08009ca0
 8002210:	08009cd0 	.word	0x08009cd0

08002214 <wifi_server>:

int wifi_server(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af02      	add	r7, sp, #8
  bool StopServer = false;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n\r"));
 800221e:	4840      	ldr	r0, [pc, #256]	; (8002320 <wifi_server+0x10c>)
 8002220:	f006 f9ca 	bl	80085b8 <iprintf>
  if (wifi_connect()!=0) return -1;
 8002224:	f7ff ff80 	bl	8002128 <wifi_connect>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <wifi_server+0x20>
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e070      	b.n	8002316 <wifi_server+0x102>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8002234:	2350      	movs	r3, #80	; 0x50
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <wifi_server+0x110>)
 800223a:	2201      	movs	r2, #1
 800223c:	2100      	movs	r1, #0
 800223e:	2000      	movs	r0, #0
 8002240:	f000 fe9a 	bl	8002f78 <WIFI_StartServer>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 800224a:	4837      	ldr	r0, [pc, #220]	; (8002328 <wifi_server+0x114>)
 800224c:	f006 fa22 	bl	8008694 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <wifi_server+0x118>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <wifi_server+0x118>)
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	461a      	mov	r2, r3
 800225c:	4b33      	ldr	r3, [pc, #204]	; (800232c <wifi_server+0x118>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	4618      	mov	r0, r3
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <wifi_server+0x118>)
 8002264:	78db      	ldrb	r3, [r3, #3]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	4831      	ldr	r0, [pc, #196]	; (8002330 <wifi_server+0x11c>)
 800226c:	f006 f9a4 	bl	80085b8 <iprintf>
  {
//	osDelay(100);
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <wifi_server+0x118>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <wifi_server+0x118>)
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	461a      	mov	r2, r3
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <wifi_server+0x118>)
 800227e:	789b      	ldrb	r3, [r3, #2]
 8002280:	4618      	mov	r0, r3
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <wifi_server+0x118>)
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	482a      	ldr	r0, [pc, #168]	; (8002334 <wifi_server+0x120>)
 800228c:	f006 f994 	bl	80085b8 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002290:	e002      	b.n	8002298 <wifi_server+0x84>
    {
        LOG(("."));
 8002292:	202e      	movs	r0, #46	; 0x2e
 8002294:	f006 f9a2 	bl	80085dc <putchar>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002298:	f107 0208 	add.w	r2, r7, #8
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2304      	movs	r3, #4
 80022a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 fe96 	bl	8002fd8 <WIFI_WaitServerConnection>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ef      	bne.n	8002292 <wifi_server+0x7e>
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80022b2:	7a3b      	ldrb	r3, [r7, #8]
 80022b4:	4619      	mov	r1, r3
 80022b6:	7a7b      	ldrb	r3, [r7, #9]
 80022b8:	4618      	mov	r0, r3
 80022ba:	7abb      	ldrb	r3, [r7, #10]
 80022bc:	461c      	mov	r4, r3
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	9201      	str	r2, [sp, #4]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4623      	mov	r3, r4
 80022c8:	4602      	mov	r2, r0
 80022ca:	481b      	ldr	r0, [pc, #108]	; (8002338 <wifi_server+0x124>)
 80022cc:	f006 f974 	bl	80085b8 <iprintf>

    StopServer = WebServerProcess();
 80022d0:	f000 f83a 	bl	8002348 <WebServerProcess>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 fec5 	bl	8003068 <WIFI_CloseServerConnection>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <wifi_server+0xdc>
    {
      LOG(("ERROR: failed to close current Server connection\n\r"));
 80022e4:	4815      	ldr	r0, [pc, #84]	; (800233c <wifi_server+0x128>)
 80022e6:	f006 f967 	bl	80085b8 <iprintf>
      return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	e012      	b.n	8002316 <wifi_server+0x102>
    }
  }
  while(StopServer == false);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1b9      	bne.n	8002270 <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 fecb 	bl	8003098 <WIFI_StopServer>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <wifi_server+0xfa>
  {
    LOG(("ERROR: Cannot stop server.\n\r"));
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <wifi_server+0x12c>)
 800230a:	f006 f955 	bl	80085b8 <iprintf>
  }

  LOG(("Server is stop\n"));
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <wifi_server+0x130>)
 8002310:	f006 f9c0 	bl	8008694 <puts>
  return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	08009cf8 	.word	0x08009cf8
 8002324:	08009d14 	.word	0x08009d14
 8002328:	08009d18 	.word	0x08009d18
 800232c:	20001588 	.word	0x20001588
 8002330:	08009d34 	.word	0x08009d34
 8002334:	08009d84 	.word	0x08009d84
 8002338:	08009db0 	.word	0x08009db0
 800233c:	08009dd4 	.word	0x08009dd4
 8002340:	08009e08 	.word	0x08009e08
 8002344:	08009e28 	.word	0x08009e28

08002348 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint8_t pres;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	f242 7210 	movw	r2, #10000	; 0x2710
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002360:	4954      	ldr	r1, [pc, #336]	; (80024b4 <WebServerProcess+0x16c>)
 8002362:	2000      	movs	r0, #0
 8002364:	f000 fed2 	bl	800310c <WIFI_ReceiveData>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 809a 	bne.w	80024a4 <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n\r",respLen));
 8002370:	89bb      	ldrh	r3, [r7, #12]
 8002372:	4619      	mov	r1, r3
 8002374:	4850      	ldr	r0, [pc, #320]	; (80024b8 <WebServerProcess+0x170>)
 8002376:	f006 f91f 	bl	80085b8 <iprintf>

   if( respLen > 0)
 800237a:	89bb      	ldrh	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8094 	beq.w	80024aa <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8002382:	494e      	ldr	r1, [pc, #312]	; (80024bc <WebServerProcess+0x174>)
 8002384:	484b      	ldr	r0, [pc, #300]	; (80024b4 <WebServerProcess+0x16c>)
 8002386:	f006 fb2d 	bl	80089e4 <strstr>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <WebServerProcess+0x82>
      {
        temp = (uint8_t) BSP_TSENSOR_ReadTemp();
 8002390:	f000 fc2e 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 8002394:	eef0 7a40 	vmov.f32	s15, s0
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	edc7 7a01 	vstr	s15, [r7, #4]
 80023a0:	793b      	ldrb	r3, [r7, #4]
 80023a2:	73bb      	strb	r3, [r7, #14]
//        pres = (uint8_t) BSP_PSENSOR_ReadPres();
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <WebServerProcess+0x178>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	7bba      	ldrb	r2, [r7, #14]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f8a0 	bl	80024f4 <SendWebPage>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n\r"));
 80023ba:	4842      	ldr	r0, [pc, #264]	; (80024c4 <WebServerProcess+0x17c>)
 80023bc:	f006 f8fc 	bl	80085b8 <iprintf>
 80023c0:	e073      	b.n	80024aa <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n\r"));
 80023c2:	4841      	ldr	r0, [pc, #260]	; (80024c8 <WebServerProcess+0x180>)
 80023c4:	f006 f8f8 	bl	80085b8 <iprintf>
 80023c8:	e06f      	b.n	80024aa <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80023ca:	4940      	ldr	r1, [pc, #256]	; (80024cc <WebServerProcess+0x184>)
 80023cc:	4839      	ldr	r0, [pc, #228]	; (80024b4 <WebServerProcess+0x16c>)
 80023ce:	f006 fb09 	bl	80089e4 <strstr>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d068      	beq.n	80024aa <WebServerProcess+0x162>
       {
         LOG(("Post request\n\r"));
 80023d8:	483d      	ldr	r0, [pc, #244]	; (80024d0 <WebServerProcess+0x188>)
 80023da:	f006 f8ed 	bl	80085b8 <iprintf>

         if(strstr((char *)resp, "radio"))
 80023de:	493d      	ldr	r1, [pc, #244]	; (80024d4 <WebServerProcess+0x18c>)
 80023e0:	4834      	ldr	r0, [pc, #208]	; (80024b4 <WebServerProcess+0x16c>)
 80023e2:	f006 faff 	bl	80089e4 <strstr>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d024      	beq.n	8002436 <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 80023ec:	493a      	ldr	r1, [pc, #232]	; (80024d8 <WebServerProcess+0x190>)
 80023ee:	4831      	ldr	r0, [pc, #196]	; (80024b4 <WebServerProcess+0x16c>)
 80023f0:	f006 faf8 	bl	80089e4 <strstr>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <WebServerProcess+0xc0>
           {
             LedState = 0;
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <WebServerProcess+0x178>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f9b1 	bl	8002768 <BSP_LED_Off>
 8002406:	e00c      	b.n	8002422 <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 8002408:	4934      	ldr	r1, [pc, #208]	; (80024dc <WebServerProcess+0x194>)
 800240a:	482a      	ldr	r0, [pc, #168]	; (80024b4 <WebServerProcess+0x16c>)
 800240c:	f006 faea 	bl	80089e4 <strstr>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <WebServerProcess+0xda>
           {
             LedState = 1;
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <WebServerProcess+0x178>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f98d 	bl	800273c <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8002422:	f000 fbe5 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 8002426:	eef0 7a40 	vmov.f32	s15, s0
 800242a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002432:	793b      	ldrb	r3, [r7, #4]
 8002434:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <WebServerProcess+0x198>)
 8002438:	481e      	ldr	r0, [pc, #120]	; (80024b4 <WebServerProcess+0x16c>)
 800243a:	f006 fad3 	bl	80089e4 <strstr>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d012      	beq.n	800246a <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8002444:	4927      	ldr	r1, [pc, #156]	; (80024e4 <WebServerProcess+0x19c>)
 8002446:	481b      	ldr	r0, [pc, #108]	; (80024b4 <WebServerProcess+0x16c>)
 8002448:	f006 facc 	bl	80089e4 <strstr>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <WebServerProcess+0x110>
           {
             stopserver = false;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e008      	b.n	800246a <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8002458:	4923      	ldr	r1, [pc, #140]	; (80024e8 <WebServerProcess+0x1a0>)
 800245a:	4816      	ldr	r0, [pc, #88]	; (80024b4 <WebServerProcess+0x16c>)
 800245c:	f006 fac2 	bl	80089e4 <strstr>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <WebServerProcess+0x122>
           {
             stopserver = true;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 800246a:	f000 fbc1 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	edc7 7a01 	vstr	s15, [r7, #4]
 800247a:	793b      	ldrb	r3, [r7, #4]
 800247c:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <WebServerProcess+0x178>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	7bba      	ldrb	r2, [r7, #14]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f833 	bl	80024f4 <SendWebPage>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n\r"));
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <WebServerProcess+0x17c>)
 8002496:	f006 f88f 	bl	80085b8 <iprintf>
 800249a:	e006      	b.n	80024aa <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n\r"));
 800249c:	4813      	ldr	r0, [pc, #76]	; (80024ec <WebServerProcess+0x1a4>)
 800249e:	f006 f88b 	bl	80085b8 <iprintf>
 80024a2:	e002      	b.n	80024aa <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n\r"));
 80024a4:	4812      	ldr	r0, [pc, #72]	; (80024f0 <WebServerProcess+0x1a8>)
 80024a6:	f006 f887 	bl	80085b8 <iprintf>
  }
  return stopserver;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]

 }
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20001590 	.word	0x20001590
 80024b8:	08009e38 	.word	0x08009e38
 80024bc:	08009e54 	.word	0x08009e54
 80024c0:	2000158c 	.word	0x2000158c
 80024c4:	08009e58 	.word	0x08009e58
 80024c8:	08009e7c 	.word	0x08009e7c
 80024cc:	08009e9c 	.word	0x08009e9c
 80024d0:	08009ea4 	.word	0x08009ea4
 80024d4:	08009eb4 	.word	0x08009eb4
 80024d8:	08009ebc 	.word	0x08009ebc
 80024dc:	08009ec4 	.word	0x08009ec4
 80024e0:	08009ecc 	.word	0x08009ecc
 80024e4:	08009ed8 	.word	0x08009ed8
 80024e8:	08009ee8 	.word	0x08009ee8
 80024ec:	08009ef8 	.word	0x08009ef8
 80024f0:	08009f18 	.word	0x08009f18

080024f4 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temp)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	71bb      	strb	r3, [r7, #6]
  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <SendWebPage+0xb8>)
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <SendWebPage+0xbc>)
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800251c:	c407      	stmia	r4!, {r0, r1, r2}
 800251e:	8023      	strh	r3, [r4, #0]
 8002520:	3402      	adds	r4, #2
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, inject(0, temp, 50));
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2232      	movs	r2, #50	; 0x32
 800252a:	4619      	mov	r1, r3
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fd1f 	bl	8001f70 <inject>
 8002532:	4603      	mov	r3, r0
 8002534:	4619      	mov	r1, r3
 8002536:	481d      	ldr	r0, [pc, #116]	; (80025ac <SendWebPage+0xb8>)
 8002538:	f006 f9c4 	bl	80088c4 <strcat>

  /* http is the buffer which contains the data to send. */
  /* httpDataLength is the length of the data to be sent. */
  WIFI_Status_t ret;
  uint32_t httpDataLength = strlen(http);
 800253c:	481b      	ldr	r0, [pc, #108]	; (80025ac <SendWebPage+0xb8>)
 800253e:	f7fd fe5f 	bl	8000200 <strlen>
 8002542:	61b8      	str	r0, [r7, #24]
  uint32_t dataLengthToSend;
  uint32_t dataLengthSent = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]

  while( httpDataLength > 0 )
 8002548:	e025      	b.n	8002596 <SendWebPage+0xa2>
  {
      if(httpDataLength > 500)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002550:	d903      	bls.n	800255a <SendWebPage+0x66>
      {
          dataLengthToSend = 500;
 8002552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e001      	b.n	800255e <SendWebPage+0x6a>
      }
      else
      {
          dataLengthToSend = httpDataLength;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	617b      	str	r3, [r7, #20]
      }

      uint16_t curDataLengthSent;
      ret = WIFI_SendData(0, &http[dataLengthSent], dataLengthToSend, &curDataLengthSent, WIFI_WRITE_TIMEOUT );
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <SendWebPage+0xb8>)
 8002562:	1899      	adds	r1, r3, r2
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f107 030e 	add.w	r3, r7, #14
 800256c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002570:	9000      	str	r0, [sp, #0]
 8002572:	2000      	movs	r0, #0
 8002574:	f000 fda8 	bl	80030c8 <WIFI_SendData>
 8002578:	4603      	mov	r3, r0
 800257a:	77fb      	strb	r3, [r7, #31]

      if( ret != WIFI_STATUS_OK)
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <SendWebPage+0xaa>
          break;
      }
      else
      {
          /* Update what is left to send based on the length of the data actually sent. */
    	  dataLengthSent += curDataLengthSent;
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	461a      	mov	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
          httpDataLength -= curDataLengthSent;
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	461a      	mov	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
  while( httpDataLength > 0 )
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1d6      	bne.n	800254a <SendWebPage+0x56>
 800259c:	e000      	b.n	80025a0 <SendWebPage+0xac>
          break;
 800259e:	bf00      	nop
//  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
//  {
//    ret = WIFI_STATUS_ERROR;
//  }

  return ret;
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000200 	.word	0x20000200
 80025b0:	08009f34 	.word	0x08009f34

080025b4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b096      	sub	sp, #88	; 0x58
 80025b8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025ba:	2310      	movs	r3, #16
 80025bc:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025c2:	2360      	movs	r3, #96	; 0x60
 80025c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ca:	2302      	movs	r3, #2
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025ce:	2301      	movs	r3, #1
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80025d6:	2328      	movs	r3, #40	; 0x28
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025da:	2302      	movs	r3, #2
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80025de:	2307      	movs	r3, #7
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e2:	2304      	movs	r3, #4
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 ffdf 	bl	80045ac <HAL_RCC_OscConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d000      	beq.n	80025f6 <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 80025f4:	e7fe      	b.n	80025f4 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80025f6:	230f      	movs	r3, #15
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fa:	2303      	movs	r3, #3
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800260a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800260e:	2104      	movs	r1, #4
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fbe5 	bl	8004de0 <HAL_RCC_ClockConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d000      	beq.n	800261e <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 800261c:	e7fe      	b.n	800261c <SystemClock_Config+0x68>
  }
}
 800261e:	bf00      	nop
 8002620:	3758      	adds	r7, #88	; 0x58
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002630:	1d39      	adds	r1, r7, #4
 8002632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002636:	2201      	movs	r2, #1
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <__io_putchar+0x20>)
 800263a:	f004 fde2 	bl	8007202 <HAL_UART_Transmit>

  return ch;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200019e4 	.word	0x200019e4

0800264c <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 8002656:	bf00      	nop
 8002658:	1df9      	adds	r1, r7, #7
 800265a:	f247 5330 	movw	r3, #30000	; 0x7530
 800265e:	2201      	movs	r2, #1
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <__io_getchar+0x2c>)
 8002662:	f004 fe5d 	bl	8007320 <HAL_UART_Receive>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f5      	bne.n	8002658 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 800266c:	79fb      	ldrb	r3, [r7, #7]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200019e4 	.word	0x200019e4

0800267c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d005      	beq.n	8002698 <HAL_GPIO_EXTI_Callback+0x1c>
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002690:	d105      	bne.n	800269e <HAL_GPIO_EXTI_Callback+0x22>
  {
    case (USER_BUTTON_PIN):
    {
      Button_ISR();
 8002692:	f000 f813 	bl	80026bc <Button_ISR>
      break;
 8002696:	e003      	b.n	80026a0 <HAL_GPIO_EXTI_Callback+0x24>
    }
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002698:	f7ff fc5a 	bl	8001f50 <SPI_WIFI_ISR>
      break;
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_EXTI_Callback+0x24>
    }
    default:
    {
      break;
 800269e:	bf00      	nop
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <SPI3_IRQHandler+0x10>)
 80026ae:	f003 fed7 	bl	8006460 <HAL_SPI_IRQHandler>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200000b0 	.word	0x200000b0

080026bc <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  button_flag++;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <Button_ISR+0x1c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <Button_ISR+0x1c>)
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20000124 	.word	0x20000124

080026dc <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <BSP_LED_Init+0x28>
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <BSP_LED_Init+0x58>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a10      	ldr	r2, [pc, #64]	; (8002734 <BSP_LED_Init+0x58>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <BSP_LED_Init+0x58>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002708:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <BSP_LED_Init+0x5c>)
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	f107 020c 	add.w	r2, r7, #12
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 ff37 	bl	8003598 <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	20000010 	.word	0x20000010

0800273c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <BSP_LED_On+0x28>)
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002752:	b291      	uxth	r1, r2
 8002754:	2201      	movs	r2, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f8c8 	bl	80038ec <HAL_GPIO_WritePin>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000010 	.word	0x20000010

08002768 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <BSP_LED_Off+0x28>)
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800277e:	b291      	uxth	r1, r2
 8002780:	2200      	movs	r2, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f8b2 	bl	80038ec <HAL_GPIO_WritePin>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000010 	.word	0x20000010

08002794 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <BSP_PB_Init+0xa4>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <BSP_PB_Init+0xa4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <BSP_PB_Init+0xa4>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <BSP_PB_Init+0xa8>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fed8 	bl	8003598 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80027e8:	79bb      	ldrb	r3, [r7, #6]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d11f      	bne.n	800282e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80027fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002800:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <BSP_PB_Init+0xa8>)
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	f107 020c 	add.w	r2, r7, #12
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fec1 	bl	8003598 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002816:	2328      	movs	r3, #40	; 0x28
 8002818:	b25b      	sxtb	r3, r3
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fe25 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002824:	2328      	movs	r3, #40	; 0x28
 8002826:	b25b      	sxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fe3c 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  }
}
 800282e:	bf00      	nop
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	20000014 	.word	0x20000014

08002840 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <BSP_COM_Init+0x2a>
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <BSP_COM_Init+0xc8>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <BSP_COM_Init+0xc8>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <BSP_COM_Init+0xc8>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <BSP_COM_Init+0x48>
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <BSP_COM_Init+0xc8>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4a24      	ldr	r2, [pc, #144]	; (8002908 <BSP_COM_Init+0xc8>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <BSP_COM_Init+0xc8>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <BSP_COM_Init+0x66>
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <BSP_COM_Init+0xc8>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <BSP_COM_Init+0xc8>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002898:	6613      	str	r3, [r2, #96]	; 0x60
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <BSP_COM_Init+0xc8>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ae:	2302      	movs	r3, #2
 80028b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80028b6:	2307      	movs	r3, #7
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <BSP_COM_Init+0xcc>)
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	f107 0214 	add.w	r2, r7, #20
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fe65 	bl	8003598 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80028d6:	2307      	movs	r3, #7
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <BSP_COM_Init+0xd0>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	f107 0214 	add.w	r2, r7, #20
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe55 	bl	8003598 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <BSP_COM_Init+0xd4>)
 80028f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f004 fc27 	bl	800714e <HAL_UART_Init>
}
 8002900:	bf00      	nop
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	2000001c 	.word	0x2000001c
 8002910:	20000020 	.word	0x20000020
 8002914:	20000018 	.word	0x20000018

08002918 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002938:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800293c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002942:	2301      	movs	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800294a:	2304      	movs	r3, #4
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	481b      	ldr	r0, [pc, #108]	; (80029c4 <I2Cx_MspInit+0xac>)
 8002956:	f000 fe1f 	bl	8003598 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4818      	ldr	r0, [pc, #96]	; (80029c4 <I2Cx_MspInit+0xac>)
 8002962:	f000 fe19 	bl	8003598 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800296c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002990:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002994:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	2021      	movs	r0, #33	; 0x21
 800299c:	f000 fd67 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029a0:	2021      	movs	r0, #33	; 0x21
 80029a2:	f000 fd80 	bl	80034a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	210f      	movs	r1, #15
 80029aa:	2022      	movs	r0, #34	; 0x22
 80029ac:	f000 fd5f 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80029b0:	2022      	movs	r0, #34	; 0x22
 80029b2:	f000 fd78 	bl	80034a6 <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	48000400 	.word	0x48000400

080029c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <I2Cx_Init+0x54>)
 80029d4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <I2Cx_Init+0x58>)
 80029da:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff89 	bl	8002918 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 ffa0 	bl	800394c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 fd60 	bl	80044d4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005800 	.word	0x40005800
 8002a20:	00702681 	.word	0x00702681

08002a24 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	72fb      	strb	r3, [r7, #11]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a42:	7afb      	ldrb	r3, [r7, #11]
 8002a44:	b299      	uxth	r1, r3
 8002a46:	88f8      	ldrh	r0, [r7, #6]
 8002a48:	893a      	ldrh	r2, [r7, #8]
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f001 f968 	bl	8003d30 <HAL_I2C_Mem_Read>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f832 	bl	8002ad8 <I2Cx_Error>
  }
  return status;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af04      	add	r7, sp, #16
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	72fb      	strb	r3, [r7, #11]
 8002a90:	460b      	mov	r3, r1
 8002a92:	813b      	strh	r3, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	88f8      	ldrh	r0, [r7, #6]
 8002aa2:	893a      	ldrh	r2, [r7, #8]
 8002aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f001 f827 	bl	8003b08 <HAL_I2C_Mem_Write>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f805 	bl	8002ad8 <I2Cx_Error>
  }
  return status;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ffcc 	bl	8003a82 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff6c 	bl	80029c8 <I2Cx_Init>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <SENSOR_IO_Init+0x10>)
 8002afe:	f7ff ff63 	bl	80029c8 <I2Cx_Init>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20001990 	.word	0x20001990

08002b0c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	460b      	mov	r3, r1
 8002b18:	71bb      	strb	r3, [r7, #6]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	79f9      	ldrb	r1, [r7, #7]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	1d7b      	adds	r3, r7, #5
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4803      	ldr	r0, [pc, #12]	; (8002b3c <SENSOR_IO_Write+0x30>)
 8002b30:	f7ff ffa5 	bl	8002a7e <I2Cx_WriteMultiple>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20001990 	.word	0x20001990

08002b40 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	79f9      	ldrb	r1, [r7, #7]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	f107 030f 	add.w	r3, r7, #15
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2301      	movs	r3, #1
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <SENSOR_IO_Read+0x38>)
 8002b68:	f7ff ff5c 	bl	8002a24 <I2Cx_ReadMultiple>

  return read_value;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20001990 	.word	0x20001990

08002b7c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	603a      	str	r2, [r7, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	71bb      	strb	r3, [r7, #6]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	79f9      	ldrb	r1, [r7, #7]
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <SENSOR_IO_ReadMultiple+0x38>)
 8002ba4:	f7ff ff3e 	bl	8002a24 <I2Cx_ReadMultiple>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29b      	uxth	r3, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20001990 	.word	0x20001990

08002bb8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <BSP_TSENSOR_Init+0x30>)
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <BSP_TSENSOR_Init+0x34>)
 8002bc6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002bc8:	f7ff ff96 	bl	8002af8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <BSP_TSENSOR_Init+0x30>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	20be      	movs	r0, #190	; 0xbe
 8002bd6:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20001a78 	.word	0x20001a78
 8002bec:	20000000 	.word	0x20000000

08002bf0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <BSP_TSENSOR_ReadTemp+0x18>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	20be      	movs	r0, #190	; 0xbe
 8002bfc:	4798      	blx	r3
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20001a78 	.word	0x20001a78

08002c0c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c44:	2002      	movs	r0, #2
 8002c46:	f000 fe69 	bl	800391c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8002c52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c56:	f000 fe61 	bl	800391c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return 1;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_kill>:

int _kill(int pid, int sig)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c78:	f005 ff20 	bl	8008abc <__errno>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2216      	movs	r2, #22
 8002c80:	601a      	str	r2, [r3, #0]
  return -1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_exit>:

void _exit (int status)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c96:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffe7 	bl	8002c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ca0:	e7fe      	b.n	8002ca0 <_exit+0x12>

08002ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e00a      	b.n	8002cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cb4:	f7ff fcca 	bl	800264c <__io_getchar>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	60ba      	str	r2, [r7, #8]
 8002cc0:	b2ca      	uxtb	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dbf0      	blt.n	8002cb4 <_read+0x12>
  }

  return len;
 8002cd2:	687b      	ldr	r3, [r7, #4]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e009      	b.n	8002d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	60ba      	str	r2, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fc96 	bl	8002628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	dbf1      	blt.n	8002cee <_write+0x12>
  }
  return len;
 8002d0a:	687b      	ldr	r3, [r7, #4]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_close>:

int _close(int file)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_isatty>:

int _isatty(int file)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d54:	2301      	movs	r3, #1
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <_sbrk+0x5c>)
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_sbrk+0x60>)
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <_sbrk+0x64>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <_sbrk+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d207      	bcs.n	8002dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dac:	f005 fe86 	bl	8008abc <__errno>
 8002db0:	4603      	mov	r3, r0
 8002db2:	220c      	movs	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	e009      	b.n	8002dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <_sbrk+0x64>)
 8002dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200a0000 	.word	0x200a0000
 8002ddc:	00000400 	.word	0x00000400
 8002de0:	20001a7c 	.word	0x20001a7c
 8002de4:	20002588 	.word	0x20002588

08002de8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <SystemInit+0x64>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <SystemInit+0x64>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <SystemInit+0x68>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <SystemInit+0x68>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <SystemInit+0x68>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <SystemInit+0x68>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <SystemInit+0x68>)
 8002e14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <SystemInit+0x68>)
 8002e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <SystemInit+0x68>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <SystemInit+0x68>)
 8002e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <SystemInit+0x68>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SystemInit+0x64>)
 8002e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00
 8002e50:	40021000 	.word	0x40021000

08002e54 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <WIFI_Init+0x40>)
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <WIFI_Init+0x44>)
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <WIFI_Init+0x48>)
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <WIFI_Init+0x4c>)
 8002e6a:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <WIFI_Init+0x50>)
 8002e6c:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <WIFI_Init+0x54>)
 8002e6e:	f7fe f883 	bl	8000f78 <ES_WIFI_RegisterBusIO>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <WIFI_Init+0x54>)
 8002e7a:	f7fe f849 	bl	8000f10 <ES_WIFI_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	08001c75 	.word	0x08001c75
 8002e98:	08001d69 	.word	0x08001d69
 8002e9c:	08001e45 	.word	0x08001e45
 8002ea0:	08001b5d 	.word	0x08001b5d
 8002ea4:	080019c1 	.word	0x080019c1
 8002ea8:	20001a80 	.word	0x20001a80

08002eac <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	4809      	ldr	r0, [pc, #36]	; (8002eec <WIFI_Connect+0x40>)
 8002ec6:	f7fe f88b 	bl	8000fe0 <ES_WIFI_Connect>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002ed0:	4806      	ldr	r0, [pc, #24]	; (8002eec <WIFI_Connect+0x40>)
 8002ed2:	f7fe f92d 	bl	8001130 <ES_WIFI_GetNetworkSettings>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20001a80 	.word	0x20001a80

08002ef0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <WIFI_GetMAC_Address+0x32>
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <WIFI_GetMAC_Address+0x3c>)
 8002f14:	f7fe f936 	bl	8001184 <ES_WIFI_GetMACAddress>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20001a80 	.word	0x20001a80

08002f30 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <WIFI_GetIP_Address+0x38>
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d90d      	bls.n	8002f68 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <WIFI_GetIP_Address+0x44>)
 8002f4e:	f7fe f8bf 	bl	80010d0 <ES_WIFI_IsConnected>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <WIFI_GetIP_Address+0x38>
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <WIFI_GetIP_Address+0x44>)
 8002f5a:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002f5e:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20001a80 	.word	0x20001a80

08002f78 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	4613      	mov	r3, r2
 8002f88:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 8002f96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f98:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <WIFI_StartServer+0x5c>)
 8002fb8:	f7fe f91a 	bl	80011f0 <ES_WIFI_StartServerSingleConn>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20001a80 	.word	0x20001a80

08002fd8 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	481b      	ldr	r0, [pc, #108]	; (8003064 <WIFI_WaitServerConnection+0x8c>)
 8002ff6:	f7fe f9a7 	bl	8001348 <ES_WIFI_WaitServerConnection>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8003000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003004:	2b00      	cmp	r3, #0
 8003006:	d110      	bne.n	800302a <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 800300e:	8aba      	ldrh	r2, [r7, #20]
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <WIFI_WaitServerConnection+0x4e>
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d902      	bls.n	8003026 <WIFI_WaitServerConnection+0x4e>
 8003020:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e017      	b.n	800305a <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 800302a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302e:	2b03      	cmp	r3, #3
 8003030:	d112      	bne.n	8003058 <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <WIFI_WaitServerConnection+0x7c>
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d904      	bls.n	8003054 <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 800304a:	2204      	movs	r2, #4
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f005 fc30 	bl	80088b4 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8003054:	2305      	movs	r3, #5
 8003056:	e000      	b.n	800305a <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20001a80 	.word	0x20001a80

08003068 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <WIFI_CloseServerConnection+0x2c>)
 800307c:	f7fe fa56 	bl	800152c <ES_WIFI_CloseServerConnection>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20001a80 	.word	0x20001a80

08003098 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <WIFI_StopServer+0x2c>)
 80030ac:	f7fe fa7a 	bl	80015a4 <ES_WIFI_StopServerSingleConn>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20001a80 	.word	0x20001a80

080030c8 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	4806      	ldr	r0, [pc, #24]	; (8003108 <WIFI_SendData+0x40>)
 80030f0:	f7fe fa98 	bl	8001624 <ES_WIFI_SendData>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20001a80 	.word	0x20001a80

0800310c <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	b2d9      	uxtb	r1, r3
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4806      	ldr	r0, [pc, #24]	; (800314c <WIFI_ReceiveData+0x40>)
 8003134:	f7fe fafc 	bl	8001730 <ES_WIFI_ReceiveData>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20001a80 	.word	0x20001a80

08003150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003154:	f7ff fe48 	bl	8002de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003158:	480c      	ldr	r0, [pc, #48]	; (800318c <LoopForever+0x6>)
  ldr r1, =_edata
 800315a:	490d      	ldr	r1, [pc, #52]	; (8003190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <LoopForever+0xe>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003160:	e002      	b.n	8003168 <LoopCopyDataInit>

08003162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003166:	3304      	adds	r3, #4

08003168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800316c:	d3f9      	bcc.n	8003162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003170:	4c0a      	ldr	r4, [pc, #40]	; (800319c <LoopForever+0x16>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003174:	e001      	b.n	800317a <LoopFillZerobss>

08003176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003178:	3204      	adds	r2, #4

0800317a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800317c:	d3fb      	bcc.n	8003176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800317e:	f005 fca3 	bl	8008ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003182:	f7fe ff57 	bl	8002034 <main>

08003186 <LoopForever>:

LoopForever:
    b LoopForever
 8003186:	e7fe      	b.n	8003186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003188:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003194:	0800acd0 	.word	0x0800acd0
  ldr r2, =_sbss
 8003198:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800319c:	20002584 	.word	0x20002584

080031a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC1_IRQHandler>

080031a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f953 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b2:	200f      	movs	r0, #15
 80031b4:	f000 f814 	bl	80031e0 <HAL_InitTick>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	71fb      	strb	r3, [r7, #7]
 80031c2:	e001      	b.n	80031c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031c4:	f000 f805 	bl	80031d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_InitTick+0x6c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d023      	beq.n	800323c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_InitTick+0x70>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_InitTick+0x6c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f959 	bl	80034c2 <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d809      	bhi.n	8003230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f000 f923 	bl	800346e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_InitTick+0x74>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e007      	b.n	8003240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e004      	b.n	8003240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e001      	b.n	8003240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000002c 	.word	0x2000002c
 8003250:	20000024 	.word	0x20000024
 8003254:	20000028 	.word	0x20000028

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20002380 	.word	0x20002380

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff ffee 	bl	8003258 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffde 	bl	8003258 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000002c 	.word	0x2000002c

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff29 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff3e 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff31 	bl	800331c <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffa2 	bl	8003414 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d005      	beq.n	80034fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e047      	b.n	800358e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 020e 	bic.w	r2, r2, #14
 800350c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f003 021c 	and.w	r2, r3, #28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800354a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003562:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800356c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
    }
  }
  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	e166      	b.n	8003876 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8158 	beq.w	8003870 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d017      	beq.n	8003676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d123      	bne.n	80036ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	6939      	ldr	r1, [r7, #16]
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80b2 	beq.w	8003870 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	4a60      	ldr	r2, [pc, #384]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6613      	str	r3, [r2, #96]	; 0x60
 8003718:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003724:	4a5c      	ldr	r2, [pc, #368]	; (8003898 <HAL_GPIO_Init+0x300>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800374e:	d02b      	beq.n	80037a8 <HAL_GPIO_Init+0x210>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_GPIO_Init+0x304>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d025      	beq.n	80037a4 <HAL_GPIO_Init+0x20c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_GPIO_Init+0x308>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01f      	beq.n	80037a0 <HAL_GPIO_Init+0x208>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a50      	ldr	r2, [pc, #320]	; (80038a4 <HAL_GPIO_Init+0x30c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d019      	beq.n	800379c <HAL_GPIO_Init+0x204>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a4f      	ldr	r2, [pc, #316]	; (80038a8 <HAL_GPIO_Init+0x310>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_GPIO_Init+0x200>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <HAL_GPIO_Init+0x314>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00d      	beq.n	8003794 <HAL_GPIO_Init+0x1fc>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a4d      	ldr	r2, [pc, #308]	; (80038b0 <HAL_GPIO_Init+0x318>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <HAL_GPIO_Init+0x1f8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_GPIO_Init+0x31c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_GPIO_Init+0x1f4>
 8003788:	2307      	movs	r3, #7
 800378a:	e00e      	b.n	80037aa <HAL_GPIO_Init+0x212>
 800378c:	2308      	movs	r3, #8
 800378e:	e00c      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003790:	2306      	movs	r3, #6
 8003792:	e00a      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003794:	2305      	movs	r3, #5
 8003796:	e008      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003798:	2304      	movs	r3, #4
 800379a:	e006      	b.n	80037aa <HAL_GPIO_Init+0x212>
 800379c:	2303      	movs	r3, #3
 800379e:	e004      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a8:	2300      	movs	r3, #0
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	f002 0203 	and.w	r2, r2, #3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	4093      	lsls	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ba:	4937      	ldr	r1, [pc, #220]	; (8003898 <HAL_GPIO_Init+0x300>)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037c8:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ec:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003816:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800381c:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_GPIO_Init+0x320>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003846:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <HAL_GPIO_Init+0x320>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f ae91 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	40010000 	.word	0x40010000
 800389c:	48000400 	.word	0x48000400
 80038a0:	48000800 	.word	0x48000800
 80038a4:	48000c00 	.word	0x48000c00
 80038a8:	48001000 	.word	0x48001000
 80038ac:	48001400 	.word	0x48001400
 80038b0:	48001800 	.word	0x48001800
 80038b4:	48001c00 	.word	0x48001c00
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003908:	e002      	b.n	8003910 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fe9e 	bl	800267c <HAL_GPIO_EXTI_Callback>
  }
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e08d      	b.n	8003a7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8b4 	bl	8003ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800399c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	e006      	b.n	80039d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d108      	bne.n	80039ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	e007      	b.n	80039fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e021      	b.n	8003ad8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f821 	bl	8003af4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	f040 80f9 	bne.w	8003d22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x34>
 8003b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d105      	bne.n	8003b48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0ed      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_Mem_Write+0x4e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0e6      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b5e:	f7ff fb7b 	bl	8003258 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2319      	movs	r3, #25
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fac3 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0d1      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2221      	movs	r2, #33	; 0x21
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba8:	88f8      	ldrh	r0, [r7, #6]
 8003baa:	893a      	ldrh	r2, [r7, #8]
 8003bac:	8979      	ldrh	r1, [r7, #10]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f9d3 	bl	8003f64 <I2C_RequestMemoryWrite>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a9      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d90e      	bls.n	8003bf8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	8979      	ldrh	r1, [r7, #10]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fc3d 	bl	8004470 <I2C_TransferConfig>
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fc2c 	bl	8004470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fabc 	bl	800419a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e07b      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d034      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x1c8>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d130      	bne.n	8003cd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa3f 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e04d      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2bff      	cmp	r3, #255	; 0xff
 8003c90:	d90e      	bls.n	8003cb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fbe1 	bl	8004470 <I2C_TransferConfig>
 8003cae:	e00f      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8979      	ldrh	r1, [r7, #10]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fbd0 	bl	8004470 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d19e      	bne.n	8003c18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 faa2 	bl	8004228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e01a      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_I2C_Mem_Write+0x224>)
 8003d02:	400b      	ands	r3, r1
 8003d04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	fe00e800 	.word	0xfe00e800

08003d30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	f040 80fd 	bne.w	8003f52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x34>
 8003d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0f1      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x4e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0ea      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d86:	f7ff fa67 	bl	8003258 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2319      	movs	r3, #25
 8003d92:	2201      	movs	r2, #1
 8003d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f9af 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0d5      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2222      	movs	r2, #34	; 0x22
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd0:	88f8      	ldrh	r0, [r7, #6]
 8003dd2:	893a      	ldrh	r2, [r7, #8]
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4603      	mov	r3, r0
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f913 	bl	800400c <I2C_RequestMemoryRead>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0ad      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2bff      	cmp	r3, #255	; 0xff
 8003e00:	d90e      	bls.n	8003e20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	4b52      	ldr	r3, [pc, #328]	; (8003f5c <HAL_I2C_Mem_Read+0x22c>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fb29 	bl	8004470 <I2C_TransferConfig>
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	8979      	ldrh	r1, [r7, #10]
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_I2C_Mem_Read+0x22c>)
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fb18 	bl	8004470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2200      	movs	r2, #0
 8003e48:	2104      	movs	r1, #4
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f956 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07c      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d034      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x1d0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d130      	bne.n	8003f00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f927 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e04d      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2bff      	cmp	r3, #255	; 0xff
 8003ec0:	d90e      	bls.n	8003ee0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	8979      	ldrh	r1, [r7, #10]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fac9 	bl	8004470 <I2C_TransferConfig>
 8003ede:	e00f      	b.n	8003f00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fab8 	bl	8004470 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d19a      	bne.n	8003e40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f98a 	bl	8004228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e01a      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2220      	movs	r2, #32
 8003f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_I2C_Mem_Read+0x230>)
 8003f32:	400b      	ands	r3, r1
 8003f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	80002400 	.word	0x80002400
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	460b      	mov	r3, r1
 8003f78:	813b      	strh	r3, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <I2C_RequestMemoryWrite+0xa4>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa6f 	bl	8004470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f8ff 	bl	800419a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e02c      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb6:	e015      	b.n	8003fe4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb8:	893b      	ldrh	r3, [r7, #8]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8e5 	bl	800419a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e012      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f884 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	80002000 	.word	0x80002000

0800400c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <I2C_RequestMemoryRead+0xa4>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fa1c 	bl	8004470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f8ac 	bl	800419a <I2C_WaitOnTXISFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e02c      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004052:	893b      	ldrh	r3, [r7, #8]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
 800405c:	e015      	b.n	800408a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	b29b      	uxth	r3, r3
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f892 	bl	800419a <I2C_WaitOnTXISFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e012      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f831 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	80002000 	.word	0x80002000

080040b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d103      	bne.n	80040d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d007      	beq.n	80040f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	619a      	str	r2, [r3, #24]
  }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410c:	e031      	b.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d02d      	beq.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7ff f89f 	bl	8003258 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d122      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	429a      	cmp	r2, r3
 8004148:	d113      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d0be      	beq.n	800410e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a6:	e033      	b.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f87f 	bl	80042b0 <I2C_IsErrorOccurred>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e031      	b.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	d025      	beq.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c4:	f7ff f848 	bl	8003258 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d302      	bcc.n	80041da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11a      	bne.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d013      	beq.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d1c4      	bne.n	80041a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004234:	e02f      	b.n	8004296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f838 	bl	80042b0 <I2C_IsErrorOccurred>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e02d      	b.n	80042a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7ff f805 	bl	8003258 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11a      	bne.n	8004296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	d013      	beq.n	8004296 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d1c8      	bne.n	8004236 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d068      	beq.n	80043ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2210      	movs	r2, #16
 80042e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042e4:	e049      	b.n	800437a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d045      	beq.n	800437a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe ffb3 	bl	8003258 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_IsErrorOccurred+0x54>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d13a      	bne.n	800437a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004316:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d121      	bne.n	800436c <I2C_IsErrorOccurred+0xbc>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432e:	d01d      	beq.n	800436c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d01a      	beq.n	800436c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004344:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004346:	f7fe ff87 	bl	8003258 <HAL_GetTick>
 800434a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800434c:	e00e      	b.n	800436c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800434e:	f7fe ff83 	bl	8003258 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b19      	cmp	r3, #25
 800435a:	d907      	bls.n	800436c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f043 0320 	orr.w	r3, r3, #32
 8004362:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800436a:	e006      	b.n	800437a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b20      	cmp	r3, #32
 8004378:	d1e9      	bne.n	800434e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d003      	beq.n	8004390 <I2C_IsErrorOccurred+0xe0>
 8004388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0aa      	beq.n	80042e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f043 0302 	orr.w	r3, r3, #2
 800440a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800441c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01c      	beq.n	800445e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fe45 	bl	80040b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <I2C_IsErrorOccurred+0x1bc>)
 8004436:	400b      	ands	r3, r1
 8004438:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800445e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004462:	4618      	mov	r0, r3
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	fe00e800 	.word	0xfe00e800

08004470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	817b      	strh	r3, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004488:	7a7b      	ldrb	r3, [r7, #9]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004490:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	4313      	orrs	r3, r2
 800449a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800449e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	0d5b      	lsrs	r3, r3, #21
 80044aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <I2C_TransferConfig+0x60>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	43db      	mvns	r3, r3
 80044b4:	ea02 0103 	and.w	r1, r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	03ff63ff 	.word	0x03ff63ff

080044d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d138      	bne.n	800455c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e032      	b.n	800455e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d102      	bne.n	8004584 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	e00b      	b.n	800459c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004592:	d102      	bne.n	800459a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004598:	e000      	b.n	800459c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800459a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f000 bc08 	b.w	8004dd0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c0:	4b96      	ldr	r3, [pc, #600]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ca:	4b94      	ldr	r3, [pc, #592]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80e4 	beq.w	80047aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4c>
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	f040 808b 	bne.w	8004706 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 8087 	bne.w	8004706 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f8:	4b88      	ldr	r3, [pc, #544]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x64>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e3df      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_RCC_OscConfig+0x7e>
 8004620:	4b7e      	ldr	r3, [pc, #504]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004628:	e005      	b.n	8004636 <HAL_RCC_OscConfig+0x8a>
 800462a:	4b7c      	ldr	r3, [pc, #496]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800462c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004636:	4293      	cmp	r3, r2
 8004638:	d223      	bcs.n	8004682 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fdcc 	bl	80051dc <RCC_SetFlashLatencyFromMSIRange>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e3c0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800464e:	4b73      	ldr	r3, [pc, #460]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a72      	ldr	r2, [pc, #456]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b70      	ldr	r3, [pc, #448]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	496d      	ldr	r1, [pc, #436]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466c:	4b6b      	ldr	r3, [pc, #428]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	4968      	ldr	r1, [pc, #416]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
 8004680:	e025      	b.n	80046ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	4b66      	ldr	r3, [pc, #408]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a65      	ldr	r2, [pc, #404]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4960      	ldr	r1, [pc, #384]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	4b5e      	ldr	r3, [pc, #376]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	495b      	ldr	r1, [pc, #364]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fd8c 	bl	80051dc <RCC_SetFlashLatencyFromMSIRange>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e380      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ce:	f000 fcc1 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b51      	ldr	r3, [pc, #324]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	4950      	ldr	r1, [pc, #320]	; (8004820 <HAL_RCC_OscConfig+0x274>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a4e      	ldr	r2, [pc, #312]	; (8004824 <HAL_RCC_OscConfig+0x278>)
 80046ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ee:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fd74 	bl	80031e0 <HAL_InitTick>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d052      	beq.n	80047a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	e364      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d032      	beq.n	8004774 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800470e:	4b43      	ldr	r3, [pc, #268]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a42      	ldr	r2, [pc, #264]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800471a:	f7fe fd9d 	bl	8003258 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004722:	f7fe fd99 	bl	8003258 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e34d      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004740:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a35      	ldr	r2, [pc, #212]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004746:	f043 0308 	orr.w	r3, r3, #8
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b33      	ldr	r3, [pc, #204]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4930      	ldr	r1, [pc, #192]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	492b      	ldr	r1, [pc, #172]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
 8004772:	e01a      	b.n	80047aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004780:	f7fe fd6a 	bl	8003258 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004788:	f7fe fd66 	bl	8003258 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e31a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCC_OscConfig+0x270>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x1dc>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d073      	beq.n	800489e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_OscConfig+0x21c>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d10e      	bne.n	80047e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d063      	beq.n	800489c <HAL_RCC_OscConfig+0x2f0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d15f      	bne.n	800489c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e2f7      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x24c>
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <HAL_RCC_OscConfig+0x270>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e025      	b.n	8004844 <HAL_RCC_OscConfig+0x298>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d114      	bne.n	800482c <HAL_RCC_OscConfig+0x280>
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a05      	ldr	r2, [pc, #20]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a02      	ldr	r2, [pc, #8]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e013      	b.n	8004844 <HAL_RCC_OscConfig+0x298>
 800481c:	40021000 	.word	0x40021000
 8004820:	0800ab80 	.word	0x0800ab80
 8004824:	20000024 	.word	0x20000024
 8004828:	20000028 	.word	0x20000028
 800482c:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a9f      	ldr	r2, [pc, #636]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b9d      	ldr	r3, [pc, #628]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a9c      	ldr	r2, [pc, #624]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe fd04 	bl	8003258 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe fd00 	bl	8003258 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e2b4      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004866:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2a8>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fe fcf0 	bl	8003258 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fe fcec 	bl	8003258 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e2a0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x2d0>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d060      	beq.n	800496c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_OscConfig+0x310>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d116      	bne.n	80048ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048bc:	4b7c      	ldr	r3, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_OscConfig+0x328>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e27d      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	4973      	ldr	r1, [pc, #460]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	e040      	b.n	800496c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d023      	beq.n	800493a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f2:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6e      	ldr	r2, [pc, #440]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe fcab 	bl	8003258 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe fca7 	bl	8003258 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e25b      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b65      	ldr	r3, [pc, #404]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b62      	ldr	r3, [pc, #392]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	495f      	ldr	r1, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
 8004938:	e018      	b.n	800496c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b5d      	ldr	r3, [pc, #372]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5c      	ldr	r2, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fe fc87 	bl	8003258 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494e:	f7fe fc83 	bl	8003258 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e237      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d03c      	beq.n	80049f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01c      	beq.n	80049ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004986:	4a4a      	ldr	r2, [pc, #296]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fe fc62 	bl	8003258 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004998:	f7fe fc5e 	bl	8003258 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e212      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049aa:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ef      	beq.n	8004998 <HAL_RCC_OscConfig+0x3ec>
 80049b8:	e01b      	b.n	80049f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ba:	4b3d      	ldr	r3, [pc, #244]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c0:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fe fc45 	bl	8003258 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d2:	f7fe fc41 	bl	8003258 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1f5      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e4:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ef      	bne.n	80049d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a6 	beq.w	8004b4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a00:	2300      	movs	r3, #0
 8004a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a04:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1c:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <HAL_RCC_OscConfig+0x508>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d118      	bne.n	8004a6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_RCC_OscConfig+0x508>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <HAL_RCC_OscConfig+0x508>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a44:	f7fe fc08 	bl	8003258 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fe fc04 	bl	8003258 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1b8      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <HAL_RCC_OscConfig+0x508>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d108      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4d8>
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a82:	e029      	b.n	8004ad8 <HAL_RCC_OscConfig+0x52c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d115      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x50c>
 8004a8c:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <HAL_RCC_OscConfig+0x504>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aac:	e014      	b.n	8004ad8 <HAL_RCC_OscConfig+0x52c>
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a9c      	ldr	r2, [pc, #624]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	4b99      	ldr	r3, [pc, #612]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	4a98      	ldr	r2, [pc, #608]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe fbba 	bl	8003258 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fbb6 	bl	8003258 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e168      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ed      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x53c>
 8004b0c:	e015      	b.n	8004b3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fba3 	bl	8003258 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fe fb9f 	bl	8003258 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e151      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2c:	4b80      	ldr	r3, [pc, #512]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ed      	bne.n	8004b16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b40:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03c      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b60:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b66:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fe fb72 	bl	8003258 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b78:	f7fe fb6e 	bl	8003258 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e122      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b8a:	4b69      	ldr	r3, [pc, #420]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ef      	beq.n	8004b78 <HAL_RCC_OscConfig+0x5cc>
 8004b98:	e01b      	b.n	8004bd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba0:	4a63      	ldr	r2, [pc, #396]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fe fb55 	bl	8003258 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb2:	f7fe fb51 	bl	8003258 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e105      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc4:	4b5a      	ldr	r3, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ef      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80f9 	beq.w	8004dce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	f040 80cf 	bne.w	8004d84 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004be6:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0203 	and.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d12c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	3b01      	subs	r3, #1
 8004c06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d123      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d11b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d113      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d109      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d071      	beq.n	8004d38 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d068      	beq.n	8004d2c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c5a:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c66:	4b32      	ldr	r3, [pc, #200]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0ac      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c76:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2d      	ldr	r2, [pc, #180]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c82:	f7fe fae9 	bl	8003258 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fe fae5 	bl	8003258 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e099      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9c:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x788>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc2:	0212      	lsls	r2, r2, #8
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0552      	lsls	r2, r2, #21
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cd6:	0852      	lsrs	r2, r2, #1
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0652      	lsls	r2, r2, #25
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce2:	06d2      	lsls	r2, r2, #27
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	4912      	ldr	r1, [pc, #72]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d04:	f7fe faa8 	bl	8003258 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe faa4 	bl	8003258 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e058      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_RCC_OscConfig+0x784>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2a:	e050      	b.n	8004dce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
 8004d30:	40021000 	.word	0x40021000
 8004d34:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d38:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d144      	bne.n	8004dce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d50:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d5c:	f7fe fa7c 	bl	8003258 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fe fa78 	bl	8003258 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e02c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x7b8>
 8004d82:	e024      	b.n	8004dce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d01f      	beq.n	8004dca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fe fa5f 	bl	8003258 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fe fa5b 	bl	8003258 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e00f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4905      	ldr	r1, [pc, #20]	; (8004dd8 <HAL_RCC_OscConfig+0x82c>)
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCC_OscConfig+0x830>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60cb      	str	r3, [r1, #12]
 8004dc8:	e001      	b.n	8004dce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	feeefffc 	.word	0xfeeefffc

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e11d      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df8:	4b90      	ldr	r3, [pc, #576]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d910      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b8d      	ldr	r3, [pc, #564]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 020f 	bic.w	r2, r3, #15
 8004e0e:	498b      	ldr	r1, [pc, #556]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b89      	ldr	r3, [pc, #548]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e105      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	4b81      	ldr	r3, [pc, #516]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d908      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e44:	4b7e      	ldr	r3, [pc, #504]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	497b      	ldr	r1, [pc, #492]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d079      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d11e      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	4b75      	ldr	r3, [pc, #468]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0dc      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004e7a:	f000 fa09 	bl	8005290 <RCC_GetSysClockFreqFromPLLSource>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4a70      	ldr	r2, [pc, #448]	; (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d946      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e86:	4b6e      	ldr	r3, [pc, #440]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d140      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e92:	4b6b      	ldr	r3, [pc, #428]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9a:	4a69      	ldr	r2, [pc, #420]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e035      	b.n	8004f14 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb0:	4b63      	ldr	r3, [pc, #396]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d115      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b9      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ec8:	4b5d      	ldr	r3, [pc, #372]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0ad      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0a5      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004ee8:	f000 f8b4 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a55      	ldr	r2, [pc, #340]	; (8005044 <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d90f      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ef4:	4b52      	ldr	r3, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d109      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f00:	4b4f      	ldr	r3, [pc, #316]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f08:	4a4d      	ldr	r2, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f14:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 0203 	bic.w	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4947      	ldr	r1, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fe f997 	bl	8003258 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2e:	f7fe f993 	bl	8003258 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e077      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f44:	4b3e      	ldr	r3, [pc, #248]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 020c 	and.w	r2, r3, #12
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d1eb      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f5c:	4b38      	ldr	r3, [pc, #224]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a37      	ldr	r2, [pc, #220]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f66:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4b31      	ldr	r3, [pc, #196]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d208      	bcs.n	8004f96 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f84:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	492b      	ldr	r1, [pc, #172]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f96:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d210      	bcs.n	8004fc6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 020f 	bic.w	r2, r3, #15
 8004fac:	4923      	ldr	r1, [pc, #140]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb4:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCC_ClockConfig+0x25c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e036      	b.n	8005034 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd2:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4918      	ldr	r1, [pc, #96]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff0:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4910      	ldr	r1, [pc, #64]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005004:	f000 f826 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <HAL_RCC_ClockConfig+0x260>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	490c      	ldr	r1, [pc, #48]	; (8005048 <HAL_RCC_ClockConfig+0x268>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x26c>)
 8005022:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x270>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe f8d9 	bl	80031e0 <HAL_InitTick>
 800502e:	4603      	mov	r3, r0
 8005030:	73fb      	strb	r3, [r7, #15]

  return status;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40022000 	.word	0x40022000
 8005040:	40021000 	.word	0x40021000
 8005044:	04c4b400 	.word	0x04c4b400
 8005048:	0800ab80 	.word	0x0800ab80
 800504c:	20000024 	.word	0x20000024
 8005050:	20000028 	.word	0x20000028

08005054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	4b3e      	ldr	r3, [pc, #248]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506c:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x34>
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d121      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d11e      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005088:	4b34      	ldr	r3, [pc, #208]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005094:	4b31      	ldr	r3, [pc, #196]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	e005      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050a4:	4b2d      	ldr	r3, [pc, #180]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050b0:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10d      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d102      	bne.n	80050d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050cc:	4b25      	ldr	r3, [pc, #148]	; (8005164 <HAL_RCC_GetSysClockFreq+0x110>)
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e004      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <HAL_RCC_GetSysClockFreq+0x114>)
 80050da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d134      	bne.n	800514c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d003      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0xa6>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d003      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0xac>
 80050f8:	e005      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050fa:	4b1a      	ldr	r3, [pc, #104]	; (8005164 <HAL_RCC_GetSysClockFreq+0x110>)
 80050fc:	617b      	str	r3, [r7, #20]
      break;
 80050fe:	e005      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RCC_GetSysClockFreq+0x114>)
 8005102:	617b      	str	r3, [r7, #20]
      break;
 8005104:	e002      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	617b      	str	r3, [r7, #20]
      break;
 800510a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	3301      	adds	r3, #1
 8005118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	fb03 f202 	mul.w	r2, r3, r2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_GetSysClockFreq+0x108>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	0e5b      	lsrs	r3, r3, #25
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	3301      	adds	r3, #1
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800514c:	69bb      	ldr	r3, [r7, #24]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	0800ab98 	.word	0x0800ab98
 8005164:	00f42400 	.word	0x00f42400
 8005168:	007a1200 	.word	0x007a1200

0800516c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <HAL_RCC_GetHCLKFreq+0x14>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000024 	.word	0x20000024

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005188:	f7ff fff0 	bl	800516c <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4904      	ldr	r1, [pc, #16]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40021000 	.word	0x40021000
 80051ac:	0800ab90 	.word	0x0800ab90

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051b4:	f7ff ffda 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0adb      	lsrs	r3, r3, #11
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4904      	ldr	r1, [pc, #16]	; (80051d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000
 80051d8:	0800ab90 	.word	0x0800ab90

080051dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051f4:	f7ff f9ba 	bl	800456c <HAL_PWREx_GetVoltageRange>
 80051f8:	6178      	str	r0, [r7, #20]
 80051fa:	e014      	b.n	8005226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	6593      	str	r3, [r2, #88]	; 0x58
 8005208:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005214:	f7ff f9aa 	bl	800456c <HAL_PWREx_GetVoltageRange>
 8005218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522c:	d10b      	bne.n	8005246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d913      	bls.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2ba0      	cmp	r3, #160	; 0xa0
 8005238:	d902      	bls.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800523a:	2302      	movs	r3, #2
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e00d      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005240:	2301      	movs	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	e00a      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b7f      	cmp	r3, #127	; 0x7f
 800524a:	d902      	bls.n	8005252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800524c:	2302      	movs	r3, #2
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e004      	b.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d101      	bne.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005258:	2301      	movs	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 020f 	bic.w	r2, r3, #15
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000
 800528c:	40022000 	.word	0x40022000

08005290 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d00b      	beq.n	80052be <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d825      	bhi.n	80052f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d008      	beq.n	80052c4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d11f      	bne.n	80052f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80052b8:	4b25      	ldr	r3, [pc, #148]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052ba:	613b      	str	r3, [r7, #16]
    break;
 80052bc:	e01f      	b.n	80052fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80052be:	4b25      	ldr	r3, [pc, #148]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80052c0:	613b      	str	r3, [r7, #16]
    break;
 80052c2:	e01c      	b.n	80052fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052d0:	4b1e      	ldr	r3, [pc, #120]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e005      	b.n	80052ec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80052ec:	4a1a      	ldr	r2, [pc, #104]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f4:	613b      	str	r3, [r7, #16]
    break;
 80052f6:	e002      	b.n	80052fe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
    break;
 80052fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	3301      	adds	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	fb03 f202 	mul.w	r2, r3, r2
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	0e5b      	lsrs	r3, r3, #25
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800533e:	683b      	ldr	r3, [r7, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40021000 	.word	0x40021000
 8005350:	00f42400 	.word	0x00f42400
 8005354:	007a1200 	.word	0x007a1200
 8005358:	0800ab98 	.word	0x0800ab98

0800535c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0be      	b.n	80054ec <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537e:	d009      	beq.n	8005394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	61da      	str	r2, [r3, #28]
 8005386:	e005      	b.n	8005394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8cb 	bl	8005544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ce:	d902      	bls.n	80053d6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053e4:	d007      	beq.n	80053f6 <HAL_SPI_Init+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	ea42 0103 	orr.w	r1, r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005454:	d11b      	bne.n	800548e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005466:	d903      	bls.n	8005470 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
 800546e:	e002      	b.n	8005476 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	2b02      	cmp	r3, #2
 800547c:	d107      	bne.n	800548e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	f003 0204 	and.w	r2, r3, #4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054b4:	ea42 0103 	orr.w	r1, r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ce:	d105      	bne.n	80054dc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	b292      	uxth	r2, r2
 80054da:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e01a      	b.n	800553c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f81a 	bl	8005558 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	; 0x30
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d003      	beq.n	800559e <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8005596:	2302      	movs	r3, #2
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800559c:	e1cc      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a6:	d112      	bne.n	80055ce <HAL_SPI_Receive+0x62>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10e      	bne.n	80055ce <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9c1 	bl	800594c <HAL_SPI_TransmitReceive>
 80055ca:	4603      	mov	r3, r0
 80055cc:	e1ba      	b.n	8005944 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_SPI_Receive+0x70>
 80055d8:	2302      	movs	r3, #2
 80055da:	e1b3      	b.n	8005944 <HAL_SPI_Receive+0x3d8>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055e4:	f7fd fe38 	bl	8003258 <HAL_GetTick>
 80055e8:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Receive+0x8a>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80055fc:	e19c      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2204      	movs	r2, #4
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d118      	bne.n	800567c <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005668:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005684:	d908      	bls.n	8005698 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	e007      	b.n	80056a8 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b0:	d10f      	bne.n	80056d2 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d007      	beq.n	80056f0 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f8:	d871      	bhi.n	80057de <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056fa:	e035      	b.n	8005768 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d117      	bne.n	800573a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f103 020c 	add.w	r2, r3, #12
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005738:	e016      	b.n	8005768 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573a:	f7fd fd8d 	bl	8003258 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d803      	bhi.n	8005752 <HAL_SPI_Receive+0x1e6>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d102      	bne.n	8005758 <HAL_SPI_Receive+0x1ec>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005766:	e0e7      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1c3      	bne.n	80056fc <HAL_SPI_Receive+0x190>
 8005774:	e039      	b.n	80057ea <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d115      	bne.n	80057b0 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	b292      	uxth	r2, r2
 8005790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057ae:	e016      	b.n	80057de <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b0:	f7fd fd52 	bl	8003258 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d803      	bhi.n	80057c8 <HAL_SPI_Receive+0x25c>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d102      	bne.n	80057ce <HAL_SPI_Receive+0x262>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057dc:	e0ac      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1c5      	bne.n	8005776 <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f2:	d178      	bne.n	80058e6 <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005802:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	2101      	movs	r1, #1
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f001 fa00 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005820:	e08a      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800582a:	d907      	bls.n	800583c <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	b292      	uxth	r2, r2
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e008      	b.n	800584e <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f103 020c 	add.w	r2, r3, #12
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	2101      	movs	r1, #1
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 f9db 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f043 0202 	orr.w	r2, r3, #2
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005876:	e05f      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005880:	d105      	bne.n	800588e <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	e02b      	b.n	80058e6 <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800589e:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a8:	d11d      	bne.n	80058e6 <HAL_SPI_Receive+0x37a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d119      	bne.n	80058e6 <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	2101      	movs	r1, #1
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f001 f9a9 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	f043 0202 	orr.w	r2, r3, #2
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80058da:	e02d      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 fab0 	bl	8006e50 <SPI_EndRxTransaction>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b10      	cmp	r3, #16
 8005908:	d10a      	bne.n	8005920 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590e:	f043 0202 	orr.w	r2, r3, #2
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800591e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800592e:	e003      	b.n	8005938 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b092      	sub	sp, #72	; 0x48
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_SPI_TransmitReceive+0x2e>
 8005976:	2302      	movs	r3, #2
 8005978:	e322      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x674>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005982:	f7fd fc69 	bl	8003258 <HAL_GetTick>
 8005986:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8005998:	887b      	ldrh	r3, [r7, #2]
 800599a:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d00f      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x8c>
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059be:	d107      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x84>
 80059c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d003      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80059d6:	e2ed      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x9e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x9e>
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80059f0:	e2e0      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d003      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2205      	movs	r2, #5
 8005a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	887a      	ldrh	r2, [r7, #2]
 8005a1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	887a      	ldrh	r2, [r7, #2]
 8005a32:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a48:	d10f      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a68:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a72:	d802      	bhi.n	8005a7a <HAL_SPI_TransmitReceive+0x12e>
 8005a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d908      	bls.n	8005a8c <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	e007      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d007      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac2:	f240 80ce 	bls.w	8005c62 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x18a>
 8005ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f040 80b8 	bne.w	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 80a0 	bne.w	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0e:	f040 809a 	bne.w	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10c      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x1ea>
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b34:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b44:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b46:	e07e      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d13f      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x28a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03a      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x28a>
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d137      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d11e      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x28a>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba0:	d119      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x27a>
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bd4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d11c      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x2d2>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d016      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c1e:	f7fd fb1b 	bl	8003258 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d80b      	bhi.n	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d007      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005c44:	e1b6      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f af7b 	bne.w	8005b48 <HAL_SPI_TransmitReceive+0x1fc>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f47f af74 	bne.w	8005b48 <HAL_SPI_TransmitReceive+0x1fc>
 8005c60:	e12d      	b.n	8005ebe <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x326>
 8005c6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f040 8119 	bne.w	8005ea4 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d912      	bls.n	8005ca2 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b02      	subs	r3, #2
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca0:	e100      	b.n	8005ea4 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f040 80e8 	bne.w	8005ea4 <HAL_SPI_TransmitReceive+0x558>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cdc:	f040 80e2 	bne.w	8005ea4 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x3b8>
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d12:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d14:	e0c6      	b.n	8005ea4 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d158      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x48a>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d053      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x48a>
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d150      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d912      	bls.n	8005d64 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	881a      	ldrh	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	1c9a      	adds	r2, r3, #2
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b02      	subs	r3, #2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d62:	e012      	b.n	8005d8a <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11e      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x48a>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da0:	d119      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x47a>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dd4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d148      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x52a>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d042      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d923      	bls.n	8005e44 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	b292      	uxth	r2, r2
 8005e08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	1c9a      	adds	r2, r3, #2
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b02      	subs	r3, #2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d81f      	bhi.n	8005e72 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e016      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f103 020c 	add.w	r2, r3, #12
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e72:	2301      	movs	r3, #1
 8005e74:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e76:	f7fd f9ef 	bl	8003258 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d803      	bhi.n	8005e8e <HAL_SPI_TransmitReceive+0x542>
 8005e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d102      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x548>
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005ea2:	e087      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f47f af33 	bne.w	8005d16 <HAL_SPI_TransmitReceive+0x3ca>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f af2c 	bne.w	8005d16 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec6:	d146      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ece:	2201      	movs	r2, #1
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fe9e 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8005ef0:	e060      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005efa:	d105      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	e026      	b.n	8005f56 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f18:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d119      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f28:	2201      	movs	r2, #1
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fe71 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8005f4a:	e033      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d10d      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f68:	f043 0202 	orr.w	r2, r3, #2
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005f78:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 ffbb 	bl	8006f00 <SPI_EndRxTxTransaction>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005faa:	e003      	b.n	8005fb4 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3740      	adds	r7, #64	; 0x40
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_SPI_Transmit_IT+0x1e>
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fea:	e082      	b.n	80060f2 <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ffc:	e079      	b.n	80060f2 <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_SPI_Transmit_IT+0x44>
 8006008:	2302      	movs	r3, #2
 800600a:	e073      	b.n	80060f4 <HAL_SPI_Transmit_IT+0x12c>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2203      	movs	r2, #3
 8006018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006058:	d903      	bls.n	8006062 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a28      	ldr	r2, [pc, #160]	; (8006100 <HAL_SPI_Transmit_IT+0x138>)
 800605e:	651a      	str	r2, [r3, #80]	; 0x50
 8006060:	e002      	b.n	8006068 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a27      	ldr	r2, [pc, #156]	; (8006104 <HAL_SPI_Transmit_IT+0x13c>)
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006070:	d10f      	bne.n	8006092 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006090:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	d10f      	bne.n	80060bc <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d007      	beq.n	80060da <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80060f0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	08006bb5 	.word	0x08006bb5
 8006104:	08006b55 	.word	0x08006b55

08006108 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d002      	beq.n	800612c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8006126:	2302      	movs	r3, #2
 8006128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800612a:	e0ba      	b.n	80062a2 <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <HAL_SPI_Receive_IT+0x4e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613c:	d10b      	bne.n	8006156 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2204      	movs	r2, #4
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f8b1 	bl	80062b4 <HAL_SPI_TransmitReceive_IT>
 8006152:	4603      	mov	r3, r0
 8006154:	e0a6      	b.n	80062a4 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_SPI_Receive_IT+0x5a>
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006166:	e09c      	b.n	80062a2 <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_SPI_Receive_IT+0x6e>
 8006172:	2302      	movs	r3, #2
 8006174:	e096      	b.n	80062a4 <HAL_SPI_Receive_IT+0x19c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2204      	movs	r2, #4
 8006182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	88fa      	ldrh	r2, [r7, #6]
 800619e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061c2:	d90b      	bls.n	80061dc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a35      	ldr	r2, [pc, #212]	; (80062ac <HAL_SPI_Receive_IT+0x1a4>)
 80061d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80061da:	e00a      	b.n	80061f2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ea:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a30      	ldr	r2, [pc, #192]	; (80062b0 <HAL_SPI_Receive_IT+0x1a8>)
 80061f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fa:	d10f      	bne.n	800621c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800621a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006224:	d11f      	bne.n	8006266 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006234:	d806      	bhi.n	8006244 <HAL_SPI_Receive_IT+0x13c>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	2b02      	cmp	r3, #2
 800623c:	d102      	bne.n	8006244 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2202      	movs	r2, #2
 8006242:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e002      	b.n	800626c <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d007      	beq.n	800628a <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80062a0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	08006acd 	.word	0x08006acd
 80062b0:	08006a0d 	.word	0x08006a0d

080062b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062cc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062d4:	7dbb      	ldrb	r3, [r7, #22]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d00d      	beq.n	80062f6 <HAL_SPI_TransmitReceive_IT+0x42>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e0:	d106      	bne.n	80062f0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80062ea:	7dbb      	ldrb	r3, [r7, #22]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d002      	beq.n	80062f6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
 80062f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062f4:	e0a5      	b.n	8006442 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_SPI_TransmitReceive_IT+0x54>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_TransmitReceive_IT+0x54>
 8006302:	887b      	ldrh	r3, [r7, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800630c:	e099      	b.n	8006442 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_SPI_TransmitReceive_IT+0x68>
 8006318:	2302      	movs	r3, #2
 800631a:	e093      	b.n	8006444 <HAL_SPI_TransmitReceive_IT+0x190>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b04      	cmp	r3, #4
 800632e:	d003      	beq.n	8006338 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2205      	movs	r2, #5
 8006334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	887a      	ldrh	r2, [r7, #2]
 800634e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	887a      	ldrh	r2, [r7, #2]
 800635a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	887a      	ldrh	r2, [r7, #2]
 8006362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800636e:	d906      	bls.n	800637e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a37      	ldr	r2, [pc, #220]	; (8006450 <HAL_SPI_TransmitReceive_IT+0x19c>)
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a36      	ldr	r2, [pc, #216]	; (8006454 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 800637a:	651a      	str	r2, [r3, #80]	; 0x50
 800637c:	e005      	b.n	800638a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a35      	ldr	r2, [pc, #212]	; (8006458 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8006382:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a35      	ldr	r2, [pc, #212]	; (800645c <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8006388:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	d11f      	bne.n	80063d4 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a2:	d806      	bhi.n	80063b2 <HAL_SPI_TransmitReceive_IT+0xfe>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2202      	movs	r2, #2
 80063b0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e002      	b.n	80063da <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063e2:	d802      	bhi.n	80063ea <HAL_SPI_TransmitReceive_IT+0x136>
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d908      	bls.n	80063fc <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	e007      	b.n	800640c <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800640a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d007      	beq.n	800642a <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006428:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006440:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
}
 8006444:	4618      	mov	r0, r3
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	08006895 	.word	0x08006895
 8006454:	08006945 	.word	0x08006945
 8006458:	0800669d 	.word	0x0800669d
 800645c:	080067d9 	.word	0x080067d9

08006460 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10e      	bne.n	80064a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
    return;
 800649e:	e0ce      	b.n	800663e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_SPI_IRQHandler+0x5e>
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
    return;
 80064bc:	e0bf      	b.n	800663e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <HAL_SPI_IRQHandler+0x7e>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80b0 	beq.w	800663e <HAL_SPI_IRQHandler+0x1de>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80aa 	beq.w	800663e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d023      	beq.n	800653c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d011      	beq.n	8006524 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	f043 0204 	orr.w	r2, r3, #4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	e00b      	b.n	800653c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]
        return;
 800653a:	e080      	b.n	800663e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d014      	beq.n	8006570 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657e:	f043 0208 	orr.w	r2, r3, #8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	2b00      	cmp	r3, #0
 800659a:	d04f      	beq.n	800663c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <HAL_SPI_IRQHandler+0x168>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d034      	beq.n	8006632 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0203 	bic.w	r2, r2, #3
 80065d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d011      	beq.n	8006604 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <HAL_SPI_IRQHandler+0x1e4>)
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fc ff74 	bl	80034da <HAL_DMA_Abort_IT>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <HAL_SPI_IRQHandler+0x1e4>)
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	4618      	mov	r0, r3
 800661a:	f7fc ff5e 	bl	80034da <HAL_DMA_Abort_IT>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006630:	e003      	b.n	800663a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f812 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006638:	e000      	b.n	800663c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800663a:	bf00      	nop
    return;
 800663c:	bf00      	nop
  }
}
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	08006671 	.word	0x08006671

08006648 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff ffe5 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d923      	bls.n	80066f8 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	b292      	uxth	r2, r2
 80066bc:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	1c9a      	adds	r2, r3, #2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b02      	subs	r3, #2
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d11f      	bne.n	8006726 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	e016      	b.n	8006726 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f103 020c 	add.w	r2, r3, #12
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d120      	bne.n	8006774 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673a:	d10b      	bne.n	8006754 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800674a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a0b      	ldr	r2, [pc, #44]	; (800677c <SPI_2linesRxISR_8BIT+0xe0>)
 8006750:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006752:	e00f      	b.n	8006774 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006762:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc0c 	bl	8006f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	08006781 	.word	0x08006781

08006780 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800679c:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	1e5a      	subs	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fbde 	bl	8006f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d912      	bls.n	8006810 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	881a      	ldrh	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b02      	subs	r3, #2
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800680e:	e012      	b.n	8006836 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d126      	bne.n	800688e <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006848:	d110      	bne.n	800686c <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006858:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006868:	605a      	str	r2, [r3, #4]
      return;
 800686a:	e010      	b.n	800688e <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fb7f 	bl	8006f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	b292      	uxth	r2, r2
 80068a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d118      	bne.n	8006904 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068da:	d103      	bne.n	80068e4 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0b      	ldr	r2, [pc, #44]	; (800690c <SPI_2linesRxISR_16BIT+0x78>)
 80068e0:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80068e2:	e00f      	b.n	8006904 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb44 	bl	8006f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	08006911 	.word	0x08006911

08006910 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006924:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006934:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fb28 	bl	8006f8c <SPI_CloseRxTx_ISR>
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d126      	bne.n	80069c8 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006982:	d110      	bne.n	80069a6 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006992:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a2:	605a      	str	r2, [r3, #4]
      return;
 80069a4:	e010      	b.n	80069c8 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069b4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fae2 	bl	8006f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80069ea:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fb20 	bl	8007044 <SPI_CloseRx_ISR>
  }
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f103 020c 	add.w	r2, r3, #12
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	7812      	ldrb	r2, [r2, #0]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10c      	bne.n	8006a68 <SPI_RxISR_8BIT+0x5c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a56:	d107      	bne.n	8006a68 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a66:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d103      	bne.n	8006a86 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <SPI_RxISR_8BIT+0x88>)
 8006a82:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006a84:	e002      	b.n	8006a8c <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fadc 	bl	8007044 <SPI_CloseRx_ISR>
  }
}
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	080069cf 	.word	0x080069cf

08006a98 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006aac:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006abc:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fac0 	bl	8007044 <SPI_CloseRx_ISR>
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	b292      	uxth	r2, r2
 8006ae0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	1c9a      	adds	r2, r3, #2
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d10c      	bne.n	8006b24 <SPI_RxISR_16BIT+0x58>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	d107      	bne.n	8006b24 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b22:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d103      	bne.n	8006b42 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <SPI_RxISR_16BIT+0x84>)
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006b40:	e002      	b.n	8006b48 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa7e 	bl	8007044 <SPI_CloseRx_ISR>
  }
}
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	08006a99 	.word	0x08006a99

08006b54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b94:	d107      	bne.n	8006ba6 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba4:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa92 	bl	80070d0 <SPI_CloseTx_ISR>
  }
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	881a      	ldrh	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	1c9a      	adds	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf2:	d107      	bne.n	8006c04 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c02:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa63 	bl	80070d0 <SPI_CloseTx_ISR>
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c24:	f7fc fb18 	bl	8003258 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	4413      	add	r3, r2
 8006c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c34:	f7fc fb10 	bl	8003258 <HAL_GetTick>
 8006c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c3a:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	015b      	lsls	r3, r3, #5
 8006c40:	0d1b      	lsrs	r3, r3, #20
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4a:	e054      	b.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d050      	beq.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c54:	f7fc fb00 	bl	8003258 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d902      	bls.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d13d      	bne.n	8006ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c82:	d111      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8c:	d004      	beq.n	8006c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c96:	d107      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb0:	d10f      	bne.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e017      	b.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d19b      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000024 	.word	0x20000024

08006d24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d36:	f7fc fa8f 	bl	8003258 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	4413      	add	r3, r2
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d46:	f7fc fa87 	bl	8003258 <HAL_GetTick>
 8006d4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d54:	4b3d      	ldr	r3, [pc, #244]	; (8006e4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00da      	lsls	r2, r3, #3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	0d1b      	lsrs	r3, r3, #20
 8006d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d6c:	e060      	b.n	8006e30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d74:	d107      	bne.n	8006d86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d050      	beq.n	8006e30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d8e:	f7fc fa63 	bl	8003258 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d902      	bls.n	8006da4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d13d      	bne.n	8006e20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbc:	d111      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d004      	beq.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd0:	d107      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dea:	d10f      	bne.n	8006e0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e010      	b.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d196      	bne.n	8006d6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3728      	adds	r7, #40	; 0x28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000024 	.word	0x20000024

08006e50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e64:	d111      	bne.n	8006e8a <SPI_EndRxTransaction+0x3a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d004      	beq.n	8006e7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e78:	d107      	bne.n	8006e8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff febd 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e023      	b.n	8006ef8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb8:	d11d      	bne.n	8006ef6 <SPI_EndRxTransaction+0xa6>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec2:	d004      	beq.n	8006ece <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ecc:	d113      	bne.n	8006ef6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff ff22 	bl	8006d24 <SPI_WaitFifoStateUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eea:	f043 0220 	orr.w	r2, r3, #32
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e000      	b.n	8006ef8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff ff03 	bl	8006d24 <SPI_WaitFifoStateUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e027      	b.n	8006f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff fe68 	bl	8006c14 <SPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e014      	b.n	8006f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff fedc 	bl	8006d24 <SPI_WaitFifoStateUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e000      	b.n	8006f84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f94:	f7fc f960 	bl	8003258 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0220 	bic.w	r2, r2, #32
 8006fa8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	2164      	movs	r1, #100	; 0x64
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff ffa6 	bl	8006f00 <SPI_EndRxTxTransaction>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbe:	f043 0220 	orr.w	r2, r3, #32
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d112      	bne.n	8006ffa <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe0:	f043 0202 	orr.w	r2, r3, #2
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006ff0:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff fb32 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006ff8:	e020      	b.n	800703c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d115      	bne.n	800702e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b04      	cmp	r3, #4
 800700c:	d107      	bne.n	800701e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fa ff72 	bl	8001f00 <HAL_SPI_RxCpltCallback>
}
 800701c:	e00e      	b.n	800703c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fb0e 	bl	8006648 <HAL_SPI_TxRxCpltCallback>
}
 800702c:	e006      	b.n	800703c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fb10 	bl	800665c <HAL_SPI_ErrorCallback>
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800705a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800705c:	f7fc f8fc 	bl	8003258 <HAL_GetTick>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	2164      	movs	r1, #100	; 0x64
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fef2 	bl	8006e50 <SPI_EndRxTransaction>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007076:	f043 0220 	orr.w	r2, r3, #32
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b10      	cmp	r3, #16
 8007092:	d10e      	bne.n	80070b2 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007098:	f043 0202 	orr.w	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80070a8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff fad6 	bl	800665c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80070b0:	e00a      	b.n	80070c8 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fa ff20 	bl	8001f00 <HAL_SPI_RxCpltCallback>
}
 80070c0:	e002      	b.n	80070c8 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff faca 	bl	800665c <HAL_SPI_ErrorCallback>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070d8:	f7fc f8be 	bl	8003258 <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	2164      	movs	r1, #100	; 0x64
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff04 	bl	8006f00 <SPI_EndRxTxTransaction>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007102:	f043 0220 	orr.w	r2, r3, #32
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fa8f 	bl	800665c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800713e:	e002      	b.n	8007146 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fa fef1 	bl	8001f28 <HAL_SPI_TxCpltCallback>
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e042      	b.n	80071e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f83b 	bl	80071ee <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2224      	movs	r2, #36	; 0x24
 800717c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fc87 	bl	8007aac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f988 	bl	80074b4 <UART_SetConfig>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e01b      	b.n	80071e6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fd06 	bl	8007bf0 <UART_CheckIdleState>
 80071e4:	4603      	mov	r3, r0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b08a      	sub	sp, #40	; 0x28
 8007206:	af02      	add	r7, sp, #8
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	2b20      	cmp	r3, #32
 800721a:	d17c      	bne.n	8007316 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_UART_Transmit+0x26>
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e075      	b.n	8007318 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2221      	movs	r2, #33	; 0x21
 8007238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800723c:	f7fc f80c 	bl	8003258 <HAL_GetTick>
 8007240:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725a:	d108      	bne.n	800726e <HAL_UART_Transmit+0x6c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e003      	b.n	8007276 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007276:	e031      	b.n	80072dc <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	2180      	movs	r1, #128	; 0x80
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fd5e 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e03e      	b.n	8007318 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10b      	bne.n	80072b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ac:	b292      	uxth	r2, r2
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	3302      	adds	r3, #2
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e008      	b.n	80072ca <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	b292      	uxth	r2, r2
 80072c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1c7      	bne.n	8007278 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2200      	movs	r2, #0
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fd26 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e006      	b.n	8007318 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007336:	2b20      	cmp	r3, #32
 8007338:	f040 80b6 	bne.w	80074a8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <HAL_UART_Receive+0x28>
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0ae      	b.n	80074aa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2222      	movs	r2, #34	; 0x22
 8007358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007362:	f7fb ff79 	bl	8003258 <HAL_GetTick>
 8007366:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d10e      	bne.n	80073a0 <HAL_UART_Receive+0x80>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <HAL_UART_Receive+0x76>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007394:	e02d      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800739e:	e028      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10d      	bne.n	80073c4 <HAL_UART_Receive+0xa4>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <HAL_UART_Receive+0x9a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	22ff      	movs	r2, #255	; 0xff
 80073b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073b8:	e01b      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	227f      	movs	r2, #127	; 0x7f
 80073be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c2:	e016      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073cc:	d10d      	bne.n	80073ea <HAL_UART_Receive+0xca>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <HAL_UART_Receive+0xc0>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	227f      	movs	r2, #127	; 0x7f
 80073da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073de:	e008      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	223f      	movs	r2, #63	; 0x3f
 80073e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073e8:	e003      	b.n	80073f2 <HAL_UART_Receive+0xd2>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d108      	bne.n	8007416 <HAL_UART_Receive+0xf6>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	e003      	b.n	800741e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800741e:	e037      	b.n	8007490 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	2120      	movs	r1, #32
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fc8a 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e033      	b.n	80074aa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10c      	bne.n	8007462 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800744e:	b29a      	uxth	r2, r3
 8007450:	8a7b      	ldrh	r3, [r7, #18]
 8007452:	4013      	ands	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	3302      	adds	r3, #2
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e00d      	b.n	800747e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007468:	b29b      	uxth	r3, r3
 800746a:	b2da      	uxtb	r2, r3
 800746c:	8a7b      	ldrh	r3, [r7, #18]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4013      	ands	r3, r2
 8007472:	b2da      	uxtb	r2, r3
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1c1      	bne.n	8007420 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b8:	b08c      	sub	sp, #48	; 0x30
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4313      	orrs	r3, r2
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4baa      	ldr	r3, [pc, #680]	; (800778c <UART_SetConfig+0x2d8>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a9f      	ldr	r2, [pc, #636]	; (8007790 <UART_SetConfig+0x2dc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751c:	4313      	orrs	r3, r2
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800752a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007534:	430b      	orrs	r3, r1
 8007536:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f023 010f 	bic.w	r1, r3, #15
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a90      	ldr	r2, [pc, #576]	; (8007794 <UART_SetConfig+0x2e0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d125      	bne.n	80075a4 <UART_SetConfig+0xf0>
 8007558:	4b8f      	ldr	r3, [pc, #572]	; (8007798 <UART_SetConfig+0x2e4>)
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	2b03      	cmp	r3, #3
 8007564:	d81a      	bhi.n	800759c <UART_SetConfig+0xe8>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0xb8>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800758d 	.word	0x0800758d
 8007574:	08007585 	.word	0x08007585
 8007578:	08007595 	.word	0x08007595
 800757c:	2301      	movs	r3, #1
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007582:	e116      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007584:	2302      	movs	r3, #2
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758a:	e112      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007592:	e10e      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759a:	e10a      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a2:	e106      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a7c      	ldr	r2, [pc, #496]	; (800779c <UART_SetConfig+0x2e8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d138      	bne.n	8007620 <UART_SetConfig+0x16c>
 80075ae:	4b7a      	ldr	r3, [pc, #488]	; (8007798 <UART_SetConfig+0x2e4>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b4:	f003 030c 	and.w	r3, r3, #12
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d82d      	bhi.n	8007618 <UART_SetConfig+0x164>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x110>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	08007619 	.word	0x08007619
 80075cc:	08007619 	.word	0x08007619
 80075d0:	08007619 	.word	0x08007619
 80075d4:	08007609 	.word	0x08007609
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007619 	.word	0x08007619
 80075f0:	08007619 	.word	0x08007619
 80075f4:	08007611 	.word	0x08007611
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e0d8      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007600:	2302      	movs	r3, #2
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007606:	e0d4      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760e:	e0d0      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007616:	e0cc      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761e:	e0c8      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a5e      	ldr	r2, [pc, #376]	; (80077a0 <UART_SetConfig+0x2ec>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d125      	bne.n	8007676 <UART_SetConfig+0x1c2>
 800762a:	4b5b      	ldr	r3, [pc, #364]	; (8007798 <UART_SetConfig+0x2e4>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007634:	2b30      	cmp	r3, #48	; 0x30
 8007636:	d016      	beq.n	8007666 <UART_SetConfig+0x1b2>
 8007638:	2b30      	cmp	r3, #48	; 0x30
 800763a:	d818      	bhi.n	800766e <UART_SetConfig+0x1ba>
 800763c:	2b20      	cmp	r3, #32
 800763e:	d00a      	beq.n	8007656 <UART_SetConfig+0x1a2>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d814      	bhi.n	800766e <UART_SetConfig+0x1ba>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <UART_SetConfig+0x19a>
 8007648:	2b10      	cmp	r3, #16
 800764a:	d008      	beq.n	800765e <UART_SetConfig+0x1aa>
 800764c:	e00f      	b.n	800766e <UART_SetConfig+0x1ba>
 800764e:	2300      	movs	r3, #0
 8007650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007654:	e0ad      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007656:	2302      	movs	r3, #2
 8007658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765c:	e0a9      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800765e:	2304      	movs	r3, #4
 8007660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007664:	e0a5      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007666:	2308      	movs	r3, #8
 8007668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766c:	e0a1      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800766e:	2310      	movs	r3, #16
 8007670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007674:	e09d      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a4a      	ldr	r2, [pc, #296]	; (80077a4 <UART_SetConfig+0x2f0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d125      	bne.n	80076cc <UART_SetConfig+0x218>
 8007680:	4b45      	ldr	r3, [pc, #276]	; (8007798 <UART_SetConfig+0x2e4>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800768a:	2bc0      	cmp	r3, #192	; 0xc0
 800768c:	d016      	beq.n	80076bc <UART_SetConfig+0x208>
 800768e:	2bc0      	cmp	r3, #192	; 0xc0
 8007690:	d818      	bhi.n	80076c4 <UART_SetConfig+0x210>
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d00a      	beq.n	80076ac <UART_SetConfig+0x1f8>
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	d814      	bhi.n	80076c4 <UART_SetConfig+0x210>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <UART_SetConfig+0x1f0>
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d008      	beq.n	80076b4 <UART_SetConfig+0x200>
 80076a2:	e00f      	b.n	80076c4 <UART_SetConfig+0x210>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076aa:	e082      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076b2:	e07e      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ba:	e07a      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e076      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e072      	b.n	80077b2 <UART_SetConfig+0x2fe>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a35      	ldr	r2, [pc, #212]	; (80077a8 <UART_SetConfig+0x2f4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12a      	bne.n	800772c <UART_SetConfig+0x278>
 80076d6:	4b30      	ldr	r3, [pc, #192]	; (8007798 <UART_SetConfig+0x2e4>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d01a      	beq.n	800771c <UART_SetConfig+0x268>
 80076e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ea:	d81b      	bhi.n	8007724 <UART_SetConfig+0x270>
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	d00c      	beq.n	800770c <UART_SetConfig+0x258>
 80076f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f6:	d815      	bhi.n	8007724 <UART_SetConfig+0x270>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <UART_SetConfig+0x250>
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007700:	d008      	beq.n	8007714 <UART_SetConfig+0x260>
 8007702:	e00f      	b.n	8007724 <UART_SetConfig+0x270>
 8007704:	2300      	movs	r3, #0
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e052      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007712:	e04e      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771a:	e04a      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007722:	e046      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772a:	e042      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a17      	ldr	r2, [pc, #92]	; (8007790 <UART_SetConfig+0x2dc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d13a      	bne.n	80077ac <UART_SetConfig+0x2f8>
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <UART_SetConfig+0x2e4>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007744:	d01a      	beq.n	800777c <UART_SetConfig+0x2c8>
 8007746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800774a:	d81b      	bhi.n	8007784 <UART_SetConfig+0x2d0>
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007750:	d00c      	beq.n	800776c <UART_SetConfig+0x2b8>
 8007752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007756:	d815      	bhi.n	8007784 <UART_SetConfig+0x2d0>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <UART_SetConfig+0x2b0>
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007760:	d008      	beq.n	8007774 <UART_SetConfig+0x2c0>
 8007762:	e00f      	b.n	8007784 <UART_SetConfig+0x2d0>
 8007764:	2300      	movs	r3, #0
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776a:	e022      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007772:	e01e      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777a:	e01a      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007782:	e016      	b.n	80077b2 <UART_SetConfig+0x2fe>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778a:	e012      	b.n	80077b2 <UART_SetConfig+0x2fe>
 800778c:	cfff69f3 	.word	0xcfff69f3
 8007790:	40008000 	.word	0x40008000
 8007794:	40013800 	.word	0x40013800
 8007798:	40021000 	.word	0x40021000
 800779c:	40004400 	.word	0x40004400
 80077a0:	40004800 	.word	0x40004800
 80077a4:	40004c00 	.word	0x40004c00
 80077a8:	40005000 	.word	0x40005000
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4aae      	ldr	r2, [pc, #696]	; (8007a70 <UART_SetConfig+0x5bc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	f040 8097 	bne.w	80078ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d823      	bhi.n	800780e <UART_SetConfig+0x35a>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0x318>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	0800780f 	.word	0x0800780f
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	0800780f 	.word	0x0800780f
 80077dc:	080077ff 	.word	0x080077ff
 80077e0:	0800780f 	.word	0x0800780f
 80077e4:	0800780f 	.word	0x0800780f
 80077e8:	0800780f 	.word	0x0800780f
 80077ec:	08007807 	.word	0x08007807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f0:	f7fd fcc8 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80077f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077f6:	e010      	b.n	800781a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f8:	4b9e      	ldr	r3, [pc, #632]	; (8007a74 <UART_SetConfig+0x5c0>)
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077fc:	e00d      	b.n	800781a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fe:	f7fd fc29 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8007802:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007804:	e009      	b.n	800781a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800780c:	e005      	b.n	800781a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8130 	beq.w	8007a82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	4a94      	ldr	r2, [pc, #592]	; (8007a78 <UART_SetConfig+0x5c4>)
 8007828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800782c:	461a      	mov	r2, r3
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	fbb3 f3f2 	udiv	r3, r3, r2
 8007834:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	d305      	bcc.n	8007852 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	429a      	cmp	r2, r3
 8007850:	d903      	bls.n	800785a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007858:	e113      	b.n	8007a82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	2200      	movs	r2, #0
 800785e:	60bb      	str	r3, [r7, #8]
 8007860:	60fa      	str	r2, [r7, #12]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	4a84      	ldr	r2, [pc, #528]	; (8007a78 <UART_SetConfig+0x5c4>)
 8007868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786c:	b29b      	uxth	r3, r3
 800786e:	2200      	movs	r2, #0
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800787c:	f7f8 fd18 	bl	80002b0 <__aeabi_uldivmod>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	020b      	lsls	r3, r1, #8
 8007892:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007896:	0202      	lsls	r2, r0, #8
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	6849      	ldr	r1, [r1, #4]
 800789c:	0849      	lsrs	r1, r1, #1
 800789e:	2000      	movs	r0, #0
 80078a0:	460c      	mov	r4, r1
 80078a2:	4605      	mov	r5, r0
 80078a4:	eb12 0804 	adds.w	r8, r2, r4
 80078a8:	eb43 0905 	adc.w	r9, r3, r5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	469a      	mov	sl, r3
 80078b4:	4693      	mov	fp, r2
 80078b6:	4652      	mov	r2, sl
 80078b8:	465b      	mov	r3, fp
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 fcf7 	bl	80002b0 <__aeabi_uldivmod>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4613      	mov	r3, r2
 80078c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d0:	d308      	bcc.n	80078e4 <UART_SetConfig+0x430>
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d8:	d204      	bcs.n	80078e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e0ce      	b.n	8007a82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078ea:	e0ca      	b.n	8007a82 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f4:	d166      	bne.n	80079c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d827      	bhi.n	800794e <UART_SetConfig+0x49a>
 80078fe:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x450>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	0800794f 	.word	0x0800794f
 8007914:	0800793f 	.word	0x0800793f
 8007918:	0800794f 	.word	0x0800794f
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800794f 	.word	0x0800794f
 8007924:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fd fc2c 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 800792c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800792e:	e014      	b.n	800795a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007930:	f7fd fc3e 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 8007934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007936:	e010      	b.n	800795a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007938:	4b4e      	ldr	r3, [pc, #312]	; (8007a74 <UART_SetConfig+0x5c0>)
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800793c:	e00d      	b.n	800795a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793e:	f7fd fb89 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8007942:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007944:	e009      	b.n	800795a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800794c:	e005      	b.n	800795a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8090 	beq.w	8007a82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	4a44      	ldr	r2, [pc, #272]	; (8007a78 <UART_SetConfig+0x5c4>)
 8007968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796c:	461a      	mov	r2, r3
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	fbb3 f3f2 	udiv	r3, r3, r2
 8007974:	005a      	lsls	r2, r3, #1
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	441a      	add	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	2b0f      	cmp	r3, #15
 800798c:	d916      	bls.n	80079bc <UART_SetConfig+0x508>
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d212      	bcs.n	80079bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	b29b      	uxth	r3, r3
 800799a:	f023 030f 	bic.w	r3, r3, #15
 800799e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	8bfb      	ldrh	r3, [r7, #30]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	8bfa      	ldrh	r2, [r7, #30]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	e062      	b.n	8007a82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079c2:	e05e      	b.n	8007a82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d828      	bhi.n	8007a1e <UART_SetConfig+0x56a>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <UART_SetConfig+0x520>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a1f 	.word	0x08007a1f
 80079e4:	08007a0f 	.word	0x08007a0f
 80079e8:	08007a1f 	.word	0x08007a1f
 80079ec:	08007a1f 	.word	0x08007a1f
 80079f0:	08007a1f 	.word	0x08007a1f
 80079f4:	08007a17 	.word	0x08007a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f8:	f7fd fbc4 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80079fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079fe:	e014      	b.n	8007a2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a00:	f7fd fbd6 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 8007a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a06:	e010      	b.n	8007a2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a08:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <UART_SetConfig+0x5c0>)
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a0c:	e00d      	b.n	8007a2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0e:	f7fd fb21 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8007a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a14:	e009      	b.n	8007a2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a1c:	e005      	b.n	8007a2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a28:	bf00      	nop
    }

    if (pclk != 0U)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d028      	beq.n	8007a82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <UART_SetConfig+0x5c4>)
 8007a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	441a      	add	r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d910      	bls.n	8007a7c <UART_SetConfig+0x5c8>
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a60:	d20c      	bcs.n	8007a7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60da      	str	r2, [r3, #12]
 8007a6c:	e009      	b.n	8007a82 <UART_SetConfig+0x5ce>
 8007a6e:	bf00      	nop
 8007a70:	40008000 	.word	0x40008000
 8007a74:	00f42400 	.word	0x00f42400
 8007a78:	0800abc8 	.word	0x0800abc8
      }
      else
      {
        ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2200      	movs	r2, #0
 8007a96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3730      	adds	r7, #48	; 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	d10a      	bne.n	8007bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b098      	sub	sp, #96	; 0x60
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c00:	f7fb fb2a 	bl	8003258 <HAL_GetTick>
 8007c04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d12f      	bne.n	8007c74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f88e 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d022      	beq.n	8007c74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c42:	653b      	str	r3, [r7, #80]	; 0x50
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e6      	bne.n	8007c2e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e063      	b.n	8007d3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d149      	bne.n	8007d16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f857 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03c      	beq.n	8007d16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30
 8007cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cee:	61fa      	str	r2, [r7, #28]
 8007cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e012      	b.n	8007d3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3758      	adds	r7, #88	; 0x58
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	e049      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d045      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fb fa7b 	bl	8003258 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e048      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d031      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d110      	bne.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2208      	movs	r2, #8
 8007d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f838 	bl	8007e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2208      	movs	r2, #8
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e029      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc4:	d111      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f81e 	bl	8007e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e00f      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d0a6      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b095      	sub	sp, #84	; 0x54
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e38:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e3      	bne.n	8007e4c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d118      	bne.n	8007ebe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f023 0310 	bic.w	r3, r3, #16
 8007ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e6      	bne.n	8007e8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007ed2:	bf00      	nop
 8007ed4:	3754      	adds	r7, #84	; 0x54
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6892      	ldr	r2, [r2, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6852      	ldr	r2, [r2, #4]
 8007f46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d103      	bne.n	8007f5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f86:	4b4e      	ldr	r3, [pc, #312]	; (80080c0 <xTaskIncrementTick+0x144>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 808e 	bne.w	80080ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f90:	4b4c      	ldr	r3, [pc, #304]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f98:	4a4a      	ldr	r2, [pc, #296]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d120      	bne.n	8007fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa4:	4b48      	ldr	r3, [pc, #288]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xTaskIncrementTick+0x46>
 8007fc4:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b40      	ldr	r3, [pc, #256]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3e      	ldr	r2, [pc, #248]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a3c      	ldr	r2, [pc, #240]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f000 f8df 	bl	80081a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe6:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d348      	bcc.n	8008082 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff0:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	4b36      	ldr	r3, [pc, #216]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	601a      	str	r2, [r3, #0]
					break;
 8008002:	e03e      	b.n	8008082 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d203      	bcs.n	8008024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800801c:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <xTaskIncrementTick+0x158>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008022:	e02e      	b.n	8008082 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff ff7c 	bl	8007f26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff ff73 	bl	8007f26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2201      	movs	r2, #1
 8008046:	409a      	lsls	r2, r3
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <xTaskIncrementTick+0x15c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4313      	orrs	r3, r2
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <xTaskIncrementTick+0x160>)
 8008060:	441a      	add	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7ff ff38 	bl	8007ede <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d3b9      	bcc.n	8007ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008080:	e7b6      	b.n	8007ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4914      	ldr	r1, [pc, #80]	; (80080dc <xTaskIncrementTick+0x160>)
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d901      	bls.n	800809e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <xTaskIncrementTick+0x168>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e004      	b.n	80080b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b6:	697b      	ldr	r3, [r7, #20]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20002434 	.word	0x20002434
 80080c4:	2000241c 	.word	0x2000241c
 80080c8:	20002414 	.word	0x20002414
 80080cc:	20002418 	.word	0x20002418
 80080d0:	2000242c 	.word	0x2000242c
 80080d4:	20002430 	.word	0x20002430
 80080d8:	20002420 	.word	0x20002420
 80080dc:	20002388 	.word	0x20002388
 80080e0:	20002384 	.word	0x20002384
 80080e4:	20002428 	.word	0x20002428
 80080e8:	20002424 	.word	0x20002424

080080ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f2:	4b27      	ldr	r3, [pc, #156]	; (8008190 <vTaskSwitchContext+0xa4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fa:	4b26      	ldr	r3, [pc, #152]	; (8008194 <vTaskSwitchContext+0xa8>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008100:	e03f      	b.n	8008182 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008102:	4b24      	ldr	r3, [pc, #144]	; (8008194 <vTaskSwitchContext+0xa8>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	4b23      	ldr	r3, [pc, #140]	; (8008198 <vTaskSwitchContext+0xac>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	fab3 f383 	clz	r3, r3
 8008114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	f1c3 031f 	rsb	r3, r3, #31
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	491f      	ldr	r1, [pc, #124]	; (800819c <vTaskSwitchContext+0xb0>)
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	607b      	str	r3, [r7, #4]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskSwitchContext+0x5a>
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a12      	ldr	r2, [pc, #72]	; (800819c <vTaskSwitchContext+0xb0>)
 8008154:	4413      	add	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	3308      	adds	r3, #8
 800816a:	429a      	cmp	r2, r3
 800816c:	d104      	bne.n	8008178 <vTaskSwitchContext+0x8c>
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <vTaskSwitchContext+0xb4>)
 8008180:	6013      	str	r3, [r2, #0]
}
 8008182:	bf00      	nop
 8008184:	371c      	adds	r7, #28
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20002434 	.word	0x20002434
 8008194:	20002428 	.word	0x20002428
 8008198:	20002420 	.word	0x20002420
 800819c:	20002388 	.word	0x20002388
 80081a0:	20002384 	.word	0x20002384

080081a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081aa:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <prvResetNextTaskUnblockTime+0x38>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081b4:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <prvResetNextTaskUnblockTime+0x3c>)
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081bc:	e008      	b.n	80081d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <prvResetNextTaskUnblockTime+0x38>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a04      	ldr	r2, [pc, #16]	; (80081e0 <prvResetNextTaskUnblockTime+0x3c>)
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20002414 	.word	0x20002414
 80081e0:	20002430 	.word	0x20002430
	...

080081f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <pxCurrentTCBConst2>)
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	f380 8809 	msr	PSP, r0
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	4770      	bx	lr
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst2>:
 8008210:	20002384 	.word	0x20002384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
	...

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008244:	f380 8811 	msr	BASEPRI, r0
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f7ff ff4c 	bl	80080ec <vTaskSwitchContext>
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f380 8811 	msr	BASEPRI, r0
 800825c:	bc09      	pop	{r0, r3}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f01e 0f10 	tst.w	lr, #16
 800826a:	bf08      	it	eq
 800826c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008270:	f380 8809 	msr	PSP, r0
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst>:
 8008280:	20002384 	.word	0x20002384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a2:	f7ff fe6b 	bl	8007f7c <xTaskIncrementTick>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <SysTick_Handler+0x40>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	2300      	movs	r3, #0
 80082b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <malloc>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <malloc+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f000 b823 	b.w	800831c <_malloc_r>
 80082d6:	bf00      	nop
 80082d8:	20000088 	.word	0x20000088

080082dc <sbrk_aligned>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4e0e      	ldr	r6, [pc, #56]	; (8008318 <sbrk_aligned+0x3c>)
 80082e0:	460c      	mov	r4, r1
 80082e2:	6831      	ldr	r1, [r6, #0]
 80082e4:	4605      	mov	r5, r0
 80082e6:	b911      	cbnz	r1, 80082ee <sbrk_aligned+0x12>
 80082e8:	f000 fbc6 	bl	8008a78 <_sbrk_r>
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 fbc1 	bl	8008a78 <_sbrk_r>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d00a      	beq.n	8008310 <sbrk_aligned+0x34>
 80082fa:	1cc4      	adds	r4, r0, #3
 80082fc:	f024 0403 	bic.w	r4, r4, #3
 8008300:	42a0      	cmp	r0, r4
 8008302:	d007      	beq.n	8008314 <sbrk_aligned+0x38>
 8008304:	1a21      	subs	r1, r4, r0
 8008306:	4628      	mov	r0, r5
 8008308:	f000 fbb6 	bl	8008a78 <_sbrk_r>
 800830c:	3001      	adds	r0, #1
 800830e:	d101      	bne.n	8008314 <sbrk_aligned+0x38>
 8008310:	f04f 34ff 	mov.w	r4, #4294967295
 8008314:	4620      	mov	r0, r4
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	2000243c 	.word	0x2000243c

0800831c <_malloc_r>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	1ccd      	adds	r5, r1, #3
 8008322:	f025 0503 	bic.w	r5, r5, #3
 8008326:	3508      	adds	r5, #8
 8008328:	2d0c      	cmp	r5, #12
 800832a:	bf38      	it	cc
 800832c:	250c      	movcc	r5, #12
 800832e:	2d00      	cmp	r5, #0
 8008330:	4607      	mov	r7, r0
 8008332:	db01      	blt.n	8008338 <_malloc_r+0x1c>
 8008334:	42a9      	cmp	r1, r5
 8008336:	d905      	bls.n	8008344 <_malloc_r+0x28>
 8008338:	230c      	movs	r3, #12
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	2600      	movs	r6, #0
 800833e:	4630      	mov	r0, r6
 8008340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008418 <_malloc_r+0xfc>
 8008348:	f000 f868 	bl	800841c <__malloc_lock>
 800834c:	f8d8 3000 	ldr.w	r3, [r8]
 8008350:	461c      	mov	r4, r3
 8008352:	bb5c      	cbnz	r4, 80083ac <_malloc_r+0x90>
 8008354:	4629      	mov	r1, r5
 8008356:	4638      	mov	r0, r7
 8008358:	f7ff ffc0 	bl	80082dc <sbrk_aligned>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	4604      	mov	r4, r0
 8008360:	d155      	bne.n	800840e <_malloc_r+0xf2>
 8008362:	f8d8 4000 	ldr.w	r4, [r8]
 8008366:	4626      	mov	r6, r4
 8008368:	2e00      	cmp	r6, #0
 800836a:	d145      	bne.n	80083f8 <_malloc_r+0xdc>
 800836c:	2c00      	cmp	r4, #0
 800836e:	d048      	beq.n	8008402 <_malloc_r+0xe6>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	4631      	mov	r1, r6
 8008374:	4638      	mov	r0, r7
 8008376:	eb04 0903 	add.w	r9, r4, r3
 800837a:	f000 fb7d 	bl	8008a78 <_sbrk_r>
 800837e:	4581      	cmp	r9, r0
 8008380:	d13f      	bne.n	8008402 <_malloc_r+0xe6>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	1a6d      	subs	r5, r5, r1
 8008386:	4629      	mov	r1, r5
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ffa7 	bl	80082dc <sbrk_aligned>
 800838e:	3001      	adds	r0, #1
 8008390:	d037      	beq.n	8008402 <_malloc_r+0xe6>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	442b      	add	r3, r5
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	f8d8 3000 	ldr.w	r3, [r8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d038      	beq.n	8008412 <_malloc_r+0xf6>
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	42a2      	cmp	r2, r4
 80083a4:	d12b      	bne.n	80083fe <_malloc_r+0xe2>
 80083a6:	2200      	movs	r2, #0
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	e00f      	b.n	80083cc <_malloc_r+0xb0>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	1b52      	subs	r2, r2, r5
 80083b0:	d41f      	bmi.n	80083f2 <_malloc_r+0xd6>
 80083b2:	2a0b      	cmp	r2, #11
 80083b4:	d917      	bls.n	80083e6 <_malloc_r+0xca>
 80083b6:	1961      	adds	r1, r4, r5
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	6025      	str	r5, [r4, #0]
 80083bc:	bf18      	it	ne
 80083be:	6059      	strne	r1, [r3, #4]
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	bf08      	it	eq
 80083c4:	f8c8 1000 	streq.w	r1, [r8]
 80083c8:	5162      	str	r2, [r4, r5]
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	4638      	mov	r0, r7
 80083ce:	f104 060b 	add.w	r6, r4, #11
 80083d2:	f000 f829 	bl	8008428 <__malloc_unlock>
 80083d6:	f026 0607 	bic.w	r6, r6, #7
 80083da:	1d23      	adds	r3, r4, #4
 80083dc:	1af2      	subs	r2, r6, r3
 80083de:	d0ae      	beq.n	800833e <_malloc_r+0x22>
 80083e0:	1b9b      	subs	r3, r3, r6
 80083e2:	50a3      	str	r3, [r4, r2]
 80083e4:	e7ab      	b.n	800833e <_malloc_r+0x22>
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	d1dd      	bne.n	80083a8 <_malloc_r+0x8c>
 80083ec:	f8c8 2000 	str.w	r2, [r8]
 80083f0:	e7ec      	b.n	80083cc <_malloc_r+0xb0>
 80083f2:	4623      	mov	r3, r4
 80083f4:	6864      	ldr	r4, [r4, #4]
 80083f6:	e7ac      	b.n	8008352 <_malloc_r+0x36>
 80083f8:	4634      	mov	r4, r6
 80083fa:	6876      	ldr	r6, [r6, #4]
 80083fc:	e7b4      	b.n	8008368 <_malloc_r+0x4c>
 80083fe:	4613      	mov	r3, r2
 8008400:	e7cc      	b.n	800839c <_malloc_r+0x80>
 8008402:	230c      	movs	r3, #12
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	4638      	mov	r0, r7
 8008408:	f000 f80e 	bl	8008428 <__malloc_unlock>
 800840c:	e797      	b.n	800833e <_malloc_r+0x22>
 800840e:	6025      	str	r5, [r4, #0]
 8008410:	e7dc      	b.n	80083cc <_malloc_r+0xb0>
 8008412:	605b      	str	r3, [r3, #4]
 8008414:	deff      	udf	#255	; 0xff
 8008416:	bf00      	nop
 8008418:	20002438 	.word	0x20002438

0800841c <__malloc_lock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_lock+0x8>)
 800841e:	f000 bb78 	b.w	8008b12 <__retarget_lock_acquire_recursive>
 8008422:	bf00      	nop
 8008424:	20002580 	.word	0x20002580

08008428 <__malloc_unlock>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__malloc_unlock+0x8>)
 800842a:	f000 bb73 	b.w	8008b14 <__retarget_lock_release_recursive>
 800842e:	bf00      	nop
 8008430:	20002580 	.word	0x20002580

08008434 <std>:
 8008434:	2300      	movs	r3, #0
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	e9c0 3300 	strd	r3, r3, [r0]
 800843e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008442:	6083      	str	r3, [r0, #8]
 8008444:	8181      	strh	r1, [r0, #12]
 8008446:	6643      	str	r3, [r0, #100]	; 0x64
 8008448:	81c2      	strh	r2, [r0, #14]
 800844a:	6183      	str	r3, [r0, #24]
 800844c:	4619      	mov	r1, r3
 800844e:	2208      	movs	r2, #8
 8008450:	305c      	adds	r0, #92	; 0x5c
 8008452:	f000 fa2f 	bl	80088b4 <memset>
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <std+0x58>)
 8008458:	6263      	str	r3, [r4, #36]	; 0x24
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <std+0x5c>)
 800845c:	62a3      	str	r3, [r4, #40]	; 0x28
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <std+0x60>)
 8008460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <std+0x64>)
 8008464:	6323      	str	r3, [r4, #48]	; 0x30
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <std+0x68>)
 8008468:	6224      	str	r4, [r4, #32]
 800846a:	429c      	cmp	r4, r3
 800846c:	d006      	beq.n	800847c <std+0x48>
 800846e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008472:	4294      	cmp	r4, r2
 8008474:	d002      	beq.n	800847c <std+0x48>
 8008476:	33d0      	adds	r3, #208	; 0xd0
 8008478:	429c      	cmp	r4, r3
 800847a:	d105      	bne.n	8008488 <std+0x54>
 800847c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008484:	f000 bb44 	b.w	8008b10 <__retarget_lock_init_recursive>
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	080086e5 	.word	0x080086e5
 8008490:	08008707 	.word	0x08008707
 8008494:	0800873f 	.word	0x0800873f
 8008498:	08008763 	.word	0x08008763
 800849c:	20002440 	.word	0x20002440

080084a0 <stdio_exit_handler>:
 80084a0:	4a02      	ldr	r2, [pc, #8]	; (80084ac <stdio_exit_handler+0xc>)
 80084a2:	4903      	ldr	r1, [pc, #12]	; (80084b0 <stdio_exit_handler+0x10>)
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <stdio_exit_handler+0x14>)
 80084a6:	f000 b869 	b.w	800857c <_fwalk_sglue>
 80084aa:	bf00      	nop
 80084ac:	20000030 	.word	0x20000030
 80084b0:	0800956d 	.word	0x0800956d
 80084b4:	2000003c 	.word	0x2000003c

080084b8 <cleanup_stdio>:
 80084b8:	6841      	ldr	r1, [r0, #4]
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <cleanup_stdio+0x34>)
 80084bc:	4299      	cmp	r1, r3
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
 80084c2:	d001      	beq.n	80084c8 <cleanup_stdio+0x10>
 80084c4:	f001 f852 	bl	800956c <_fflush_r>
 80084c8:	68a1      	ldr	r1, [r4, #8]
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <cleanup_stdio+0x38>)
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d002      	beq.n	80084d6 <cleanup_stdio+0x1e>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f001 f84b 	bl	800956c <_fflush_r>
 80084d6:	68e1      	ldr	r1, [r4, #12]
 80084d8:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <cleanup_stdio+0x3c>)
 80084da:	4299      	cmp	r1, r3
 80084dc:	d004      	beq.n	80084e8 <cleanup_stdio+0x30>
 80084de:	4620      	mov	r0, r4
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f001 b842 	b.w	800956c <_fflush_r>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	20002440 	.word	0x20002440
 80084f0:	200024a8 	.word	0x200024a8
 80084f4:	20002510 	.word	0x20002510

080084f8 <global_stdio_init.part.0>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <global_stdio_init.part.0+0x30>)
 80084fc:	4c0b      	ldr	r4, [pc, #44]	; (800852c <global_stdio_init.part.0+0x34>)
 80084fe:	4a0c      	ldr	r2, [pc, #48]	; (8008530 <global_stdio_init.part.0+0x38>)
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	4620      	mov	r0, r4
 8008504:	2200      	movs	r2, #0
 8008506:	2104      	movs	r1, #4
 8008508:	f7ff ff94 	bl	8008434 <std>
 800850c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008510:	2201      	movs	r2, #1
 8008512:	2109      	movs	r1, #9
 8008514:	f7ff ff8e 	bl	8008434 <std>
 8008518:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800851c:	2202      	movs	r2, #2
 800851e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008522:	2112      	movs	r1, #18
 8008524:	f7ff bf86 	b.w	8008434 <std>
 8008528:	20002578 	.word	0x20002578
 800852c:	20002440 	.word	0x20002440
 8008530:	080084a1 	.word	0x080084a1

08008534 <__sfp_lock_acquire>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__sfp_lock_acquire+0x8>)
 8008536:	f000 baec 	b.w	8008b12 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	20002581 	.word	0x20002581

08008540 <__sfp_lock_release>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__sfp_lock_release+0x8>)
 8008542:	f000 bae7 	b.w	8008b14 <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	20002581 	.word	0x20002581

0800854c <__sinit>:
 800854c:	b510      	push	{r4, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	f7ff fff0 	bl	8008534 <__sfp_lock_acquire>
 8008554:	6a23      	ldr	r3, [r4, #32]
 8008556:	b11b      	cbz	r3, 8008560 <__sinit+0x14>
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f7ff bff0 	b.w	8008540 <__sfp_lock_release>
 8008560:	4b04      	ldr	r3, [pc, #16]	; (8008574 <__sinit+0x28>)
 8008562:	6223      	str	r3, [r4, #32]
 8008564:	4b04      	ldr	r3, [pc, #16]	; (8008578 <__sinit+0x2c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f5      	bne.n	8008558 <__sinit+0xc>
 800856c:	f7ff ffc4 	bl	80084f8 <global_stdio_init.part.0>
 8008570:	e7f2      	b.n	8008558 <__sinit+0xc>
 8008572:	bf00      	nop
 8008574:	080084b9 	.word	0x080084b9
 8008578:	20002578 	.word	0x20002578

0800857c <_fwalk_sglue>:
 800857c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008580:	4607      	mov	r7, r0
 8008582:	4688      	mov	r8, r1
 8008584:	4614      	mov	r4, r2
 8008586:	2600      	movs	r6, #0
 8008588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800858c:	f1b9 0901 	subs.w	r9, r9, #1
 8008590:	d505      	bpl.n	800859e <_fwalk_sglue+0x22>
 8008592:	6824      	ldr	r4, [r4, #0]
 8008594:	2c00      	cmp	r4, #0
 8008596:	d1f7      	bne.n	8008588 <_fwalk_sglue+0xc>
 8008598:	4630      	mov	r0, r6
 800859a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d907      	bls.n	80085b4 <_fwalk_sglue+0x38>
 80085a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a8:	3301      	adds	r3, #1
 80085aa:	d003      	beq.n	80085b4 <_fwalk_sglue+0x38>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c0      	blx	r8
 80085b2:	4306      	orrs	r6, r0
 80085b4:	3568      	adds	r5, #104	; 0x68
 80085b6:	e7e9      	b.n	800858c <_fwalk_sglue+0x10>

080085b8 <iprintf>:
 80085b8:	b40f      	push	{r0, r1, r2, r3}
 80085ba:	b507      	push	{r0, r1, r2, lr}
 80085bc:	4906      	ldr	r1, [pc, #24]	; (80085d8 <iprintf+0x20>)
 80085be:	ab04      	add	r3, sp, #16
 80085c0:	6808      	ldr	r0, [r1, #0]
 80085c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c6:	6881      	ldr	r1, [r0, #8]
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	f000 fc9f 	bl	8008f0c <_vfiprintf_r>
 80085ce:	b003      	add	sp, #12
 80085d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085d4:	b004      	add	sp, #16
 80085d6:	4770      	bx	lr
 80085d8:	20000088 	.word	0x20000088

080085dc <putchar>:
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <putchar+0xc>)
 80085de:	4601      	mov	r1, r0
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	6882      	ldr	r2, [r0, #8]
 80085e4:	f001 b85e 	b.w	80096a4 <_putc_r>
 80085e8:	20000088 	.word	0x20000088

080085ec <_puts_r>:
 80085ec:	6a03      	ldr	r3, [r0, #32]
 80085ee:	b570      	push	{r4, r5, r6, lr}
 80085f0:	6884      	ldr	r4, [r0, #8]
 80085f2:	4605      	mov	r5, r0
 80085f4:	460e      	mov	r6, r1
 80085f6:	b90b      	cbnz	r3, 80085fc <_puts_r+0x10>
 80085f8:	f7ff ffa8 	bl	800854c <__sinit>
 80085fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d405      	bmi.n	800860e <_puts_r+0x22>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	0598      	lsls	r0, r3, #22
 8008606:	d402      	bmi.n	800860e <_puts_r+0x22>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f000 fa82 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d513      	bpl.n	800863c <_puts_r+0x50>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b18b      	cbz	r3, 800863c <_puts_r+0x50>
 8008618:	3e01      	subs	r6, #1
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	b9e9      	cbnz	r1, 8008662 <_puts_r+0x76>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da2e      	bge.n	8008688 <_puts_r+0x9c>
 800862a:	4622      	mov	r2, r4
 800862c:	210a      	movs	r1, #10
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f89b 	bl	800876a <__swbuf_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d007      	beq.n	8008648 <_puts_r+0x5c>
 8008638:	250a      	movs	r5, #10
 800863a:	e007      	b.n	800864c <_puts_r+0x60>
 800863c:	4621      	mov	r1, r4
 800863e:	4628      	mov	r0, r5
 8008640:	f000 f8d0 	bl	80087e4 <__swsetup_r>
 8008644:	2800      	cmp	r0, #0
 8008646:	d0e7      	beq.n	8008618 <_puts_r+0x2c>
 8008648:	f04f 35ff 	mov.w	r5, #4294967295
 800864c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864e:	07da      	lsls	r2, r3, #31
 8008650:	d405      	bmi.n	800865e <_puts_r+0x72>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d402      	bmi.n	800865e <_puts_r+0x72>
 8008658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865a:	f000 fa5b 	bl	8008b14 <__retarget_lock_release_recursive>
 800865e:	4628      	mov	r0, r5
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	2b00      	cmp	r3, #0
 8008664:	da04      	bge.n	8008670 <_puts_r+0x84>
 8008666:	69a2      	ldr	r2, [r4, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	dc06      	bgt.n	800867a <_puts_r+0x8e>
 800866c:	290a      	cmp	r1, #10
 800866e:	d004      	beq.n	800867a <_puts_r+0x8e>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	7019      	strb	r1, [r3, #0]
 8008678:	e7cf      	b.n	800861a <_puts_r+0x2e>
 800867a:	4622      	mov	r2, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 f874 	bl	800876a <__swbuf_r>
 8008682:	3001      	adds	r0, #1
 8008684:	d1c9      	bne.n	800861a <_puts_r+0x2e>
 8008686:	e7df      	b.n	8008648 <_puts_r+0x5c>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	250a      	movs	r5, #10
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	701d      	strb	r5, [r3, #0]
 8008692:	e7db      	b.n	800864c <_puts_r+0x60>

08008694 <puts>:
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <puts+0xc>)
 8008696:	4601      	mov	r1, r0
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	f7ff bfa7 	b.w	80085ec <_puts_r>
 800869e:	bf00      	nop
 80086a0:	20000088 	.word	0x20000088

080086a4 <siprintf>:
 80086a4:	b40e      	push	{r1, r2, r3}
 80086a6:	b500      	push	{lr}
 80086a8:	b09c      	sub	sp, #112	; 0x70
 80086aa:	ab1d      	add	r3, sp, #116	; 0x74
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	9006      	str	r0, [sp, #24]
 80086b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b4:	4809      	ldr	r0, [pc, #36]	; (80086dc <siprintf+0x38>)
 80086b6:	9107      	str	r1, [sp, #28]
 80086b8:	9104      	str	r1, [sp, #16]
 80086ba:	4909      	ldr	r1, [pc, #36]	; (80086e0 <siprintf+0x3c>)
 80086bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c0:	9105      	str	r1, [sp, #20]
 80086c2:	6800      	ldr	r0, [r0, #0]
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	a902      	add	r1, sp, #8
 80086c8:	f000 faf8 	bl	8008cbc <_svfiprintf_r>
 80086cc:	9b02      	ldr	r3, [sp, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	b01c      	add	sp, #112	; 0x70
 80086d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d8:	b003      	add	sp, #12
 80086da:	4770      	bx	lr
 80086dc:	20000088 	.word	0x20000088
 80086e0:	ffff0208 	.word	0xffff0208

080086e4 <__sread>:
 80086e4:	b510      	push	{r4, lr}
 80086e6:	460c      	mov	r4, r1
 80086e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ec:	f000 f9b2 	bl	8008a54 <_read_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	bfab      	itete	ge
 80086f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086f6:	89a3      	ldrhlt	r3, [r4, #12]
 80086f8:	181b      	addge	r3, r3, r0
 80086fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086fe:	bfac      	ite	ge
 8008700:	6563      	strge	r3, [r4, #84]	; 0x54
 8008702:	81a3      	strhlt	r3, [r4, #12]
 8008704:	bd10      	pop	{r4, pc}

08008706 <__swrite>:
 8008706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870a:	461f      	mov	r7, r3
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	05db      	lsls	r3, r3, #23
 8008710:	4605      	mov	r5, r0
 8008712:	460c      	mov	r4, r1
 8008714:	4616      	mov	r6, r2
 8008716:	d505      	bpl.n	8008724 <__swrite+0x1e>
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	2302      	movs	r3, #2
 800871e:	2200      	movs	r2, #0
 8008720:	f000 f986 	bl	8008a30 <_lseek_r>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	4628      	mov	r0, r5
 8008736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873a:	f000 b9ad 	b.w	8008a98 <_write_r>

0800873e <__sseek>:
 800873e:	b510      	push	{r4, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008746:	f000 f973 	bl	8008a30 <_lseek_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	bf15      	itete	ne
 8008750:	6560      	strne	r0, [r4, #84]	; 0x54
 8008752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875a:	81a3      	strheq	r3, [r4, #12]
 800875c:	bf18      	it	ne
 800875e:	81a3      	strhne	r3, [r4, #12]
 8008760:	bd10      	pop	{r4, pc}

08008762 <__sclose>:
 8008762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008766:	f000 b953 	b.w	8008a10 <_close_r>

0800876a <__swbuf_r>:
 800876a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876c:	460e      	mov	r6, r1
 800876e:	4614      	mov	r4, r2
 8008770:	4605      	mov	r5, r0
 8008772:	b118      	cbz	r0, 800877c <__swbuf_r+0x12>
 8008774:	6a03      	ldr	r3, [r0, #32]
 8008776:	b90b      	cbnz	r3, 800877c <__swbuf_r+0x12>
 8008778:	f7ff fee8 	bl	800854c <__sinit>
 800877c:	69a3      	ldr	r3, [r4, #24]
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	071a      	lsls	r2, r3, #28
 8008784:	d525      	bpl.n	80087d2 <__swbuf_r+0x68>
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	b31b      	cbz	r3, 80087d2 <__swbuf_r+0x68>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	6922      	ldr	r2, [r4, #16]
 800878e:	1a98      	subs	r0, r3, r2
 8008790:	6963      	ldr	r3, [r4, #20]
 8008792:	b2f6      	uxtb	r6, r6
 8008794:	4283      	cmp	r3, r0
 8008796:	4637      	mov	r7, r6
 8008798:	dc04      	bgt.n	80087a4 <__swbuf_r+0x3a>
 800879a:	4621      	mov	r1, r4
 800879c:	4628      	mov	r0, r5
 800879e:	f000 fee5 	bl	800956c <_fflush_r>
 80087a2:	b9e0      	cbnz	r0, 80087de <__swbuf_r+0x74>
 80087a4:	68a3      	ldr	r3, [r4, #8]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	701e      	strb	r6, [r3, #0]
 80087b2:	6962      	ldr	r2, [r4, #20]
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d004      	beq.n	80087c4 <__swbuf_r+0x5a>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	07db      	lsls	r3, r3, #31
 80087be:	d506      	bpl.n	80087ce <__swbuf_r+0x64>
 80087c0:	2e0a      	cmp	r6, #10
 80087c2:	d104      	bne.n	80087ce <__swbuf_r+0x64>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 fed0 	bl	800956c <_fflush_r>
 80087cc:	b938      	cbnz	r0, 80087de <__swbuf_r+0x74>
 80087ce:	4638      	mov	r0, r7
 80087d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 f805 	bl	80087e4 <__swsetup_r>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0d5      	beq.n	800878a <__swbuf_r+0x20>
 80087de:	f04f 37ff 	mov.w	r7, #4294967295
 80087e2:	e7f4      	b.n	80087ce <__swbuf_r+0x64>

080087e4 <__swsetup_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <__swsetup_r+0xac>)
 80087e8:	4605      	mov	r5, r0
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	460c      	mov	r4, r1
 80087ee:	b118      	cbz	r0, 80087f8 <__swsetup_r+0x14>
 80087f0:	6a03      	ldr	r3, [r0, #32]
 80087f2:	b90b      	cbnz	r3, 80087f8 <__swsetup_r+0x14>
 80087f4:	f7ff feaa 	bl	800854c <__sinit>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087fe:	0718      	lsls	r0, r3, #28
 8008800:	d422      	bmi.n	8008848 <__swsetup_r+0x64>
 8008802:	06d9      	lsls	r1, r3, #27
 8008804:	d407      	bmi.n	8008816 <__swsetup_r+0x32>
 8008806:	2309      	movs	r3, #9
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	e034      	b.n	8008880 <__swsetup_r+0x9c>
 8008816:	0758      	lsls	r0, r3, #29
 8008818:	d512      	bpl.n	8008840 <__swsetup_r+0x5c>
 800881a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881c:	b141      	cbz	r1, 8008830 <__swsetup_r+0x4c>
 800881e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008822:	4299      	cmp	r1, r3
 8008824:	d002      	beq.n	800882c <__swsetup_r+0x48>
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f9a2 	bl	8008b70 <_free_r>
 800882c:	2300      	movs	r3, #0
 800882e:	6363      	str	r3, [r4, #52]	; 0x34
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	2300      	movs	r3, #0
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f043 0308 	orr.w	r3, r3, #8
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b94b      	cbnz	r3, 8008860 <__swsetup_r+0x7c>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008856:	d003      	beq.n	8008860 <__swsetup_r+0x7c>
 8008858:	4621      	mov	r1, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f000 fee6 	bl	800962c <__smakebuf_r>
 8008860:	89a0      	ldrh	r0, [r4, #12]
 8008862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008866:	f010 0301 	ands.w	r3, r0, #1
 800886a:	d00a      	beq.n	8008882 <__swsetup_r+0x9e>
 800886c:	2300      	movs	r3, #0
 800886e:	60a3      	str	r3, [r4, #8]
 8008870:	6963      	ldr	r3, [r4, #20]
 8008872:	425b      	negs	r3, r3
 8008874:	61a3      	str	r3, [r4, #24]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	b943      	cbnz	r3, 800888c <__swsetup_r+0xa8>
 800887a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800887e:	d1c4      	bne.n	800880a <__swsetup_r+0x26>
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	0781      	lsls	r1, r0, #30
 8008884:	bf58      	it	pl
 8008886:	6963      	ldrpl	r3, [r4, #20]
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	e7f4      	b.n	8008876 <__swsetup_r+0x92>
 800888c:	2000      	movs	r0, #0
 800888e:	e7f7      	b.n	8008880 <__swsetup_r+0x9c>
 8008890:	20000088 	.word	0x20000088

08008894 <memcmp>:
 8008894:	b510      	push	{r4, lr}
 8008896:	3901      	subs	r1, #1
 8008898:	4402      	add	r2, r0
 800889a:	4290      	cmp	r0, r2
 800889c:	d101      	bne.n	80088a2 <memcmp+0xe>
 800889e:	2000      	movs	r0, #0
 80088a0:	e005      	b.n	80088ae <memcmp+0x1a>
 80088a2:	7803      	ldrb	r3, [r0, #0]
 80088a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	d001      	beq.n	80088b0 <memcmp+0x1c>
 80088ac:	1b18      	subs	r0, r3, r4
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	3001      	adds	r0, #1
 80088b2:	e7f2      	b.n	800889a <memcmp+0x6>

080088b4 <memset>:
 80088b4:	4402      	add	r2, r0
 80088b6:	4603      	mov	r3, r0
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d100      	bne.n	80088be <memset+0xa>
 80088bc:	4770      	bx	lr
 80088be:	f803 1b01 	strb.w	r1, [r3], #1
 80088c2:	e7f9      	b.n	80088b8 <memset+0x4>

080088c4 <strcat>:
 80088c4:	b510      	push	{r4, lr}
 80088c6:	4602      	mov	r2, r0
 80088c8:	7814      	ldrb	r4, [r2, #0]
 80088ca:	4613      	mov	r3, r2
 80088cc:	3201      	adds	r2, #1
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	d1fa      	bne.n	80088c8 <strcat+0x4>
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088dc:	2a00      	cmp	r2, #0
 80088de:	d1f9      	bne.n	80088d4 <strcat+0x10>
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <strncmp>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	b16a      	cbz	r2, 8008902 <strncmp+0x20>
 80088e6:	3901      	subs	r1, #1
 80088e8:	1884      	adds	r4, r0, r2
 80088ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d103      	bne.n	80088fe <strncmp+0x1c>
 80088f6:	42a0      	cmp	r0, r4
 80088f8:	d001      	beq.n	80088fe <strncmp+0x1c>
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	d1f5      	bne.n	80088ea <strncmp+0x8>
 80088fe:	1ad0      	subs	r0, r2, r3
 8008900:	bd10      	pop	{r4, pc}
 8008902:	4610      	mov	r0, r2
 8008904:	e7fc      	b.n	8008900 <strncmp+0x1e>

08008906 <strncpy>:
 8008906:	b510      	push	{r4, lr}
 8008908:	3901      	subs	r1, #1
 800890a:	4603      	mov	r3, r0
 800890c:	b132      	cbz	r2, 800891c <strncpy+0x16>
 800890e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008912:	f803 4b01 	strb.w	r4, [r3], #1
 8008916:	3a01      	subs	r2, #1
 8008918:	2c00      	cmp	r4, #0
 800891a:	d1f7      	bne.n	800890c <strncpy+0x6>
 800891c:	441a      	add	r2, r3
 800891e:	2100      	movs	r1, #0
 8008920:	4293      	cmp	r3, r2
 8008922:	d100      	bne.n	8008926 <strncpy+0x20>
 8008924:	bd10      	pop	{r4, pc}
 8008926:	f803 1b01 	strb.w	r1, [r3], #1
 800892a:	e7f9      	b.n	8008920 <strncpy+0x1a>

0800892c <strtok>:
 800892c:	4b16      	ldr	r3, [pc, #88]	; (8008988 <strtok+0x5c>)
 800892e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008930:	681e      	ldr	r6, [r3, #0]
 8008932:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008934:	4605      	mov	r5, r0
 8008936:	b9fc      	cbnz	r4, 8008978 <strtok+0x4c>
 8008938:	2050      	movs	r0, #80	; 0x50
 800893a:	9101      	str	r1, [sp, #4]
 800893c:	f7ff fcc6 	bl	80082cc <malloc>
 8008940:	9901      	ldr	r1, [sp, #4]
 8008942:	6470      	str	r0, [r6, #68]	; 0x44
 8008944:	4602      	mov	r2, r0
 8008946:	b920      	cbnz	r0, 8008952 <strtok+0x26>
 8008948:	4b10      	ldr	r3, [pc, #64]	; (800898c <strtok+0x60>)
 800894a:	4811      	ldr	r0, [pc, #68]	; (8008990 <strtok+0x64>)
 800894c:	215b      	movs	r1, #91	; 0x5b
 800894e:	f000 f8f1 	bl	8008b34 <__assert_func>
 8008952:	e9c0 4400 	strd	r4, r4, [r0]
 8008956:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800895a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800895e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008962:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008966:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800896a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800896e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008972:	6184      	str	r4, [r0, #24]
 8008974:	7704      	strb	r4, [r0, #28]
 8008976:	6244      	str	r4, [r0, #36]	; 0x24
 8008978:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800897a:	2301      	movs	r3, #1
 800897c:	4628      	mov	r0, r5
 800897e:	b002      	add	sp, #8
 8008980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008984:	f000 b806 	b.w	8008994 <__strtok_r>
 8008988:	20000088 	.word	0x20000088
 800898c:	0800abe0 	.word	0x0800abe0
 8008990:	0800abf7 	.word	0x0800abf7

08008994 <__strtok_r>:
 8008994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008996:	b908      	cbnz	r0, 800899c <__strtok_r+0x8>
 8008998:	6810      	ldr	r0, [r2, #0]
 800899a:	b188      	cbz	r0, 80089c0 <__strtok_r+0x2c>
 800899c:	4604      	mov	r4, r0
 800899e:	4620      	mov	r0, r4
 80089a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089a4:	460f      	mov	r7, r1
 80089a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089aa:	b91e      	cbnz	r6, 80089b4 <__strtok_r+0x20>
 80089ac:	b965      	cbnz	r5, 80089c8 <__strtok_r+0x34>
 80089ae:	6015      	str	r5, [r2, #0]
 80089b0:	4628      	mov	r0, r5
 80089b2:	e005      	b.n	80089c0 <__strtok_r+0x2c>
 80089b4:	42b5      	cmp	r5, r6
 80089b6:	d1f6      	bne.n	80089a6 <__strtok_r+0x12>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f0      	bne.n	800899e <__strtok_r+0xa>
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	7003      	strb	r3, [r0, #0]
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c2:	461c      	mov	r4, r3
 80089c4:	e00c      	b.n	80089e0 <__strtok_r+0x4c>
 80089c6:	b915      	cbnz	r5, 80089ce <__strtok_r+0x3a>
 80089c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089cc:	460e      	mov	r6, r1
 80089ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089d2:	42ab      	cmp	r3, r5
 80089d4:	d1f7      	bne.n	80089c6 <__strtok_r+0x32>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f3      	beq.n	80089c2 <__strtok_r+0x2e>
 80089da:	2300      	movs	r3, #0
 80089dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	e7ed      	b.n	80089c0 <__strtok_r+0x2c>

080089e4 <strstr>:
 80089e4:	780a      	ldrb	r2, [r1, #0]
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	b96a      	cbnz	r2, 8008a06 <strstr+0x22>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d109      	bne.n	8008a04 <strstr+0x20>
 80089f0:	460c      	mov	r4, r1
 80089f2:	4605      	mov	r5, r0
 80089f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f6      	beq.n	80089ea <strstr+0x6>
 80089fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008a00:	429e      	cmp	r6, r3
 8008a02:	d0f7      	beq.n	80089f4 <strstr+0x10>
 8008a04:	3001      	adds	r0, #1
 8008a06:	7803      	ldrb	r3, [r0, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1ef      	bne.n	80089ec <strstr+0x8>
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	e7ec      	b.n	80089ea <strstr+0x6>

08008a10 <_close_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d06      	ldr	r5, [pc, #24]	; (8008a2c <_close_r+0x1c>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7fa f97a 	bl	8002d14 <_close>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_close_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_close_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	2000257c 	.word	0x2000257c

08008a30 <_lseek_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_lseek_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7fa f98f 	bl	8002d62 <_lseek>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_lseek_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_lseek_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	2000257c 	.word	0x2000257c

08008a54 <_read_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d07      	ldr	r5, [pc, #28]	; (8008a74 <_read_r+0x20>)
 8008a58:	4604      	mov	r4, r0
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	602a      	str	r2, [r5, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7fa f91d 	bl	8002ca2 <_read>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_read_r+0x1e>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_read_r+0x1e>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	2000257c 	.word	0x2000257c

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7fa f97a 	bl	8002d7c <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	2000257c 	.word	0x2000257c

08008a98 <_write_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	; (8008ab8 <_write_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7fa f918 	bl	8002cdc <_write>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_write_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_write_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	2000257c 	.word	0x2000257c

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	; (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000088 	.word	0x20000088

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	; (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	; (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	; (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	; (8008b0c <__libc_init_array+0x44>)
 8008adc:	f000 fed4 	bl	8009888 <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	0800acc8 	.word	0x0800acc8
 8008b04:	0800acc8 	.word	0x0800acc8
 8008b08:	0800acc8 	.word	0x0800acc8
 8008b0c:	0800accc 	.word	0x0800accc

08008b10 <__retarget_lock_init_recursive>:
 8008b10:	4770      	bx	lr

08008b12 <__retarget_lock_acquire_recursive>:
 8008b12:	4770      	bx	lr

08008b14 <__retarget_lock_release_recursive>:
 8008b14:	4770      	bx	lr

08008b16 <memcpy>:
 8008b16:	440a      	add	r2, r1
 8008b18:	4291      	cmp	r1, r2
 8008b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b1e:	d100      	bne.n	8008b22 <memcpy+0xc>
 8008b20:	4770      	bx	lr
 8008b22:	b510      	push	{r4, lr}
 8008b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b2c:	4291      	cmp	r1, r2
 8008b2e:	d1f9      	bne.n	8008b24 <memcpy+0xe>
 8008b30:	bd10      	pop	{r4, pc}
	...

08008b34 <__assert_func>:
 8008b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b36:	4614      	mov	r4, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <__assert_func+0x2c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4605      	mov	r5, r0
 8008b40:	68d8      	ldr	r0, [r3, #12]
 8008b42:	b14c      	cbz	r4, 8008b58 <__assert_func+0x24>
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <__assert_func+0x30>)
 8008b46:	9100      	str	r1, [sp, #0]
 8008b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b4c:	4906      	ldr	r1, [pc, #24]	; (8008b68 <__assert_func+0x34>)
 8008b4e:	462b      	mov	r3, r5
 8008b50:	f000 fd34 	bl	80095bc <fiprintf>
 8008b54:	f000 fe16 	bl	8009784 <abort>
 8008b58:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <__assert_func+0x38>)
 8008b5a:	461c      	mov	r4, r3
 8008b5c:	e7f3      	b.n	8008b46 <__assert_func+0x12>
 8008b5e:	bf00      	nop
 8008b60:	20000088 	.word	0x20000088
 8008b64:	0800ac51 	.word	0x0800ac51
 8008b68:	0800ac5e 	.word	0x0800ac5e
 8008b6c:	0800ac8c 	.word	0x0800ac8c

08008b70 <_free_r>:
 8008b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d044      	beq.n	8008c00 <_free_r+0x90>
 8008b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7a:	9001      	str	r0, [sp, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b82:	bfb8      	it	lt
 8008b84:	18e4      	addlt	r4, r4, r3
 8008b86:	f7ff fc49 	bl	800841c <__malloc_lock>
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <_free_r+0x94>)
 8008b8c:	9801      	ldr	r0, [sp, #4]
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	b933      	cbnz	r3, 8008ba0 <_free_r+0x30>
 8008b92:	6063      	str	r3, [r4, #4]
 8008b94:	6014      	str	r4, [r2, #0]
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b9c:	f7ff bc44 	b.w	8008428 <__malloc_unlock>
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d908      	bls.n	8008bb6 <_free_r+0x46>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	1961      	adds	r1, r4, r5
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf01      	itttt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	1949      	addeq	r1, r1, r5
 8008bb2:	6021      	streq	r1, [r4, #0]
 8008bb4:	e7ed      	b.n	8008b92 <_free_r+0x22>
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b10b      	cbz	r3, 8008bc0 <_free_r+0x50>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d9fa      	bls.n	8008bb6 <_free_r+0x46>
 8008bc0:	6811      	ldr	r1, [r2, #0]
 8008bc2:	1855      	adds	r5, r2, r1
 8008bc4:	42a5      	cmp	r5, r4
 8008bc6:	d10b      	bne.n	8008be0 <_free_r+0x70>
 8008bc8:	6824      	ldr	r4, [r4, #0]
 8008bca:	4421      	add	r1, r4
 8008bcc:	1854      	adds	r4, r2, r1
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	d1e0      	bne.n	8008b96 <_free_r+0x26>
 8008bd4:	681c      	ldr	r4, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	6053      	str	r3, [r2, #4]
 8008bda:	440c      	add	r4, r1
 8008bdc:	6014      	str	r4, [r2, #0]
 8008bde:	e7da      	b.n	8008b96 <_free_r+0x26>
 8008be0:	d902      	bls.n	8008be8 <_free_r+0x78>
 8008be2:	230c      	movs	r3, #12
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	e7d6      	b.n	8008b96 <_free_r+0x26>
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	428b      	cmp	r3, r1
 8008bee:	bf04      	itt	eq
 8008bf0:	6819      	ldreq	r1, [r3, #0]
 8008bf2:	685b      	ldreq	r3, [r3, #4]
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	bf04      	itt	eq
 8008bf8:	1949      	addeq	r1, r1, r5
 8008bfa:	6021      	streq	r1, [r4, #0]
 8008bfc:	6054      	str	r4, [r2, #4]
 8008bfe:	e7ca      	b.n	8008b96 <_free_r+0x26>
 8008c00:	b003      	add	sp, #12
 8008c02:	bd30      	pop	{r4, r5, pc}
 8008c04:	20002438 	.word	0x20002438

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	461f      	mov	r7, r3
 8008c10:	42be      	cmp	r6, r7
 8008c12:	680b      	ldr	r3, [r1, #0]
 8008c14:	4682      	mov	sl, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	d82c      	bhi.n	8008c76 <__ssputs_r+0x6e>
 8008c1c:	898a      	ldrh	r2, [r1, #12]
 8008c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c22:	d026      	beq.n	8008c72 <__ssputs_r+0x6a>
 8008c24:	6965      	ldr	r5, [r4, #20]
 8008c26:	6909      	ldr	r1, [r1, #16]
 8008c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c2c:	eba3 0901 	sub.w	r9, r3, r1
 8008c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c34:	1c7b      	adds	r3, r7, #1
 8008c36:	444b      	add	r3, r9
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf38      	it	cc
 8008c3e:	461d      	movcc	r5, r3
 8008c40:	0553      	lsls	r3, r2, #21
 8008c42:	d527      	bpl.n	8008c94 <__ssputs_r+0x8c>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7ff fb69 	bl	800831c <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b360      	cbz	r0, 8008ca8 <__ssputs_r+0xa0>
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	464a      	mov	r2, r9
 8008c52:	f7ff ff60 	bl	8008b16 <memcpy>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	6126      	str	r6, [r4, #16]
 8008c64:	6165      	str	r5, [r4, #20]
 8008c66:	444e      	add	r6, r9
 8008c68:	eba5 0509 	sub.w	r5, r5, r9
 8008c6c:	6026      	str	r6, [r4, #0]
 8008c6e:	60a5      	str	r5, [r4, #8]
 8008c70:	463e      	mov	r6, r7
 8008c72:	42be      	cmp	r6, r7
 8008c74:	d900      	bls.n	8008c78 <__ssputs_r+0x70>
 8008c76:	463e      	mov	r6, r7
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	f000 fd45 	bl	800970c <memmove>
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	4433      	add	r3, r6
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	462a      	mov	r2, r5
 8008c96:	f000 fd7c 	bl	8009792 <_realloc_r>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d1e0      	bne.n	8008c62 <__ssputs_r+0x5a>
 8008ca0:	6921      	ldr	r1, [r4, #16]
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f7ff ff64 	bl	8008b70 <_free_r>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	f8ca 3000 	str.w	r3, [sl]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	e7e9      	b.n	8008c90 <__ssputs_r+0x88>

08008cbc <_svfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	898b      	ldrh	r3, [r1, #12]
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	4607      	mov	r7, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	4614      	mov	r4, r2
 8008cce:	d50e      	bpl.n	8008cee <_svfiprintf_r+0x32>
 8008cd0:	690b      	ldr	r3, [r1, #16]
 8008cd2:	b963      	cbnz	r3, 8008cee <_svfiprintf_r+0x32>
 8008cd4:	2140      	movs	r1, #64	; 0x40
 8008cd6:	f7ff fb21 	bl	800831c <_malloc_r>
 8008cda:	6028      	str	r0, [r5, #0]
 8008cdc:	6128      	str	r0, [r5, #16]
 8008cde:	b920      	cbnz	r0, 8008cea <_svfiprintf_r+0x2e>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	e0d0      	b.n	8008e8c <_svfiprintf_r+0x1d0>
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	616b      	str	r3, [r5, #20]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfc:	2330      	movs	r3, #48	; 0x30
 8008cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea4 <_svfiprintf_r+0x1e8>
 8008d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d06:	f04f 0901 	mov.w	r9, #1
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d12:	b10a      	cbz	r2, 8008d18 <_svfiprintf_r+0x5c>
 8008d14:	2a25      	cmp	r2, #37	; 0x25
 8008d16:	d1f9      	bne.n	8008d0c <_svfiprintf_r+0x50>
 8008d18:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1c:	d00b      	beq.n	8008d36 <_svfiprintf_r+0x7a>
 8008d1e:	465b      	mov	r3, fp
 8008d20:	4622      	mov	r2, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff ff6f 	bl	8008c08 <__ssputs_r>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f000 80a9 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d32:	445a      	add	r2, fp
 8008d34:	9209      	str	r2, [sp, #36]	; 0x24
 8008d36:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80a1 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d40:	2300      	movs	r3, #0
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4a:	f10a 0a01 	add.w	sl, sl, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	9307      	str	r3, [sp, #28]
 8008d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d56:	931a      	str	r3, [sp, #104]	; 0x68
 8008d58:	4654      	mov	r4, sl
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d60:	4850      	ldr	r0, [pc, #320]	; (8008ea4 <_svfiprintf_r+0x1e8>)
 8008d62:	f7f7 fa55 	bl	8000210 <memchr>
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	b9d8      	cbnz	r0, 8008da2 <_svfiprintf_r+0xe6>
 8008d6a:	06d0      	lsls	r0, r2, #27
 8008d6c:	bf44      	itt	mi
 8008d6e:	2320      	movmi	r3, #32
 8008d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d74:	0711      	lsls	r1, r2, #28
 8008d76:	bf44      	itt	mi
 8008d78:	232b      	movmi	r3, #43	; 0x2b
 8008d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b2a      	cmp	r3, #42	; 0x2a
 8008d84:	d015      	beq.n	8008db2 <_svfiprintf_r+0xf6>
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4654      	mov	r4, sl
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4621      	mov	r1, r4
 8008d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d96:	3b30      	subs	r3, #48	; 0x30
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	d94d      	bls.n	8008e38 <_svfiprintf_r+0x17c>
 8008d9c:	b1b0      	cbz	r0, 8008dcc <_svfiprintf_r+0x110>
 8008d9e:	9207      	str	r2, [sp, #28]
 8008da0:	e014      	b.n	8008dcc <_svfiprintf_r+0x110>
 8008da2:	eba0 0308 	sub.w	r3, r0, r8
 8008da6:	fa09 f303 	lsl.w	r3, r9, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	46a2      	mov	sl, r4
 8008db0:	e7d2      	b.n	8008d58 <_svfiprintf_r+0x9c>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	9103      	str	r1, [sp, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfbb      	ittet	lt
 8008dbe:	425b      	neglt	r3, r3
 8008dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc4:	9307      	strge	r3, [sp, #28]
 8008dc6:	9307      	strlt	r3, [sp, #28]
 8008dc8:	bfb8      	it	lt
 8008dca:	9204      	strlt	r2, [sp, #16]
 8008dcc:	7823      	ldrb	r3, [r4, #0]
 8008dce:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd0:	d10c      	bne.n	8008dec <_svfiprintf_r+0x130>
 8008dd2:	7863      	ldrb	r3, [r4, #1]
 8008dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd6:	d134      	bne.n	8008e42 <_svfiprintf_r+0x186>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9203      	str	r2, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfb8      	it	lt
 8008de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de8:	3402      	adds	r4, #2
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008eb4 <_svfiprintf_r+0x1f8>
 8008df0:	7821      	ldrb	r1, [r4, #0]
 8008df2:	2203      	movs	r2, #3
 8008df4:	4650      	mov	r0, sl
 8008df6:	f7f7 fa0b 	bl	8000210 <memchr>
 8008dfa:	b138      	cbz	r0, 8008e0c <_svfiprintf_r+0x150>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	eba0 000a 	sub.w	r0, r0, sl
 8008e02:	2240      	movs	r2, #64	; 0x40
 8008e04:	4082      	lsls	r2, r0
 8008e06:	4313      	orrs	r3, r2
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e10:	4825      	ldr	r0, [pc, #148]	; (8008ea8 <_svfiprintf_r+0x1ec>)
 8008e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e16:	2206      	movs	r2, #6
 8008e18:	f7f7 f9fa 	bl	8000210 <memchr>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d038      	beq.n	8008e92 <_svfiprintf_r+0x1d6>
 8008e20:	4b22      	ldr	r3, [pc, #136]	; (8008eac <_svfiprintf_r+0x1f0>)
 8008e22:	bb1b      	cbnz	r3, 8008e6c <_svfiprintf_r+0x1b0>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	4433      	add	r3, r6
 8008e34:	9309      	str	r3, [sp, #36]	; 0x24
 8008e36:	e768      	b.n	8008d0a <_svfiprintf_r+0x4e>
 8008e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7a6      	b.n	8008d90 <_svfiprintf_r+0xd4>
 8008e42:	2300      	movs	r3, #0
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f04f 0c0a 	mov.w	ip, #10
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e54:	3a30      	subs	r2, #48	; 0x30
 8008e56:	2a09      	cmp	r2, #9
 8008e58:	d903      	bls.n	8008e62 <_svfiprintf_r+0x1a6>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0c6      	beq.n	8008dec <_svfiprintf_r+0x130>
 8008e5e:	9105      	str	r1, [sp, #20]
 8008e60:	e7c4      	b.n	8008dec <_svfiprintf_r+0x130>
 8008e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e66:	4604      	mov	r4, r0
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f0      	b.n	8008e4e <_svfiprintf_r+0x192>
 8008e6c:	ab03      	add	r3, sp, #12
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e74:	a904      	add	r1, sp, #16
 8008e76:	4638      	mov	r0, r7
 8008e78:	f3af 8000 	nop.w
 8008e7c:	1c42      	adds	r2, r0, #1
 8008e7e:	4606      	mov	r6, r0
 8008e80:	d1d6      	bne.n	8008e30 <_svfiprintf_r+0x174>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	065b      	lsls	r3, r3, #25
 8008e86:	f53f af2d 	bmi.w	8008ce4 <_svfiprintf_r+0x28>
 8008e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8c:	b01d      	add	sp, #116	; 0x74
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f000 f9bd 	bl	800921c <_printf_i>
 8008ea2:	e7eb      	b.n	8008e7c <_svfiprintf_r+0x1c0>
 8008ea4:	0800ac8d 	.word	0x0800ac8d
 8008ea8:	0800ac97 	.word	0x0800ac97
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	08008c09 	.word	0x08008c09
 8008eb4:	0800ac93 	.word	0x0800ac93

08008eb8 <__sfputc_r>:
 8008eb8:	6893      	ldr	r3, [r2, #8]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	b410      	push	{r4}
 8008ec0:	6093      	str	r3, [r2, #8]
 8008ec2:	da08      	bge.n	8008ed6 <__sfputc_r+0x1e>
 8008ec4:	6994      	ldr	r4, [r2, #24]
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	db01      	blt.n	8008ece <__sfputc_r+0x16>
 8008eca:	290a      	cmp	r1, #10
 8008ecc:	d103      	bne.n	8008ed6 <__sfputc_r+0x1e>
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	f7ff bc4a 	b.w	800876a <__swbuf_r>
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	1c58      	adds	r0, r3, #1
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	7019      	strb	r1, [r3, #0]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <__sfputs_r>:
 8008ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	18d5      	adds	r5, r2, r3
 8008ef0:	42ac      	cmp	r4, r5
 8008ef2:	d101      	bne.n	8008ef8 <__sfputs_r+0x12>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e007      	b.n	8008f08 <__sfputs_r+0x22>
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	463a      	mov	r2, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ffda 	bl	8008eb8 <__sfputc_r>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d1f3      	bne.n	8008ef0 <__sfputs_r+0xa>
 8008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f0c <_vfiprintf_r>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460d      	mov	r5, r1
 8008f12:	b09d      	sub	sp, #116	; 0x74
 8008f14:	4614      	mov	r4, r2
 8008f16:	4698      	mov	r8, r3
 8008f18:	4606      	mov	r6, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <_vfiprintf_r+0x18>
 8008f1c:	6a03      	ldr	r3, [r0, #32]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <_vfiprintf_r+0x18>
 8008f20:	f7ff fb14 	bl	800854c <__sinit>
 8008f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_vfiprintf_r+0x2a>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_vfiprintf_r+0x2a>
 8008f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f32:	f7ff fdee 	bl	8008b12 <__retarget_lock_acquire_recursive>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d501      	bpl.n	8008f40 <_vfiprintf_r+0x34>
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	b99b      	cbnz	r3, 8008f68 <_vfiprintf_r+0x5c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff fc4e 	bl	80087e4 <__swsetup_r>
 8008f48:	b170      	cbz	r0, 8008f68 <_vfiprintf_r+0x5c>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07dc      	lsls	r4, r3, #31
 8008f4e:	d504      	bpl.n	8008f5a <_vfiprintf_r+0x4e>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	0598      	lsls	r0, r3, #22
 8008f5e:	d4f7      	bmi.n	8008f50 <_vfiprintf_r+0x44>
 8008f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f62:	f7ff fdd7 	bl	8008b14 <__retarget_lock_release_recursive>
 8008f66:	e7f3      	b.n	8008f50 <_vfiprintf_r+0x44>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f76:	2330      	movs	r3, #48	; 0x30
 8008f78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800912c <_vfiprintf_r+0x220>
 8008f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f80:	f04f 0901 	mov.w	r9, #1
 8008f84:	4623      	mov	r3, r4
 8008f86:	469a      	mov	sl, r3
 8008f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8c:	b10a      	cbz	r2, 8008f92 <_vfiprintf_r+0x86>
 8008f8e:	2a25      	cmp	r2, #37	; 0x25
 8008f90:	d1f9      	bne.n	8008f86 <_vfiprintf_r+0x7a>
 8008f92:	ebba 0b04 	subs.w	fp, sl, r4
 8008f96:	d00b      	beq.n	8008fb0 <_vfiprintf_r+0xa4>
 8008f98:	465b      	mov	r3, fp
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffa1 	bl	8008ee6 <__sfputs_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f000 80a9 	beq.w	80090fc <_vfiprintf_r+0x1f0>
 8008faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fac:	445a      	add	r2, fp
 8008fae:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80a1 	beq.w	80090fc <_vfiprintf_r+0x1f0>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc4:	f10a 0a01 	add.w	sl, sl, #1
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	9307      	str	r3, [sp, #28]
 8008fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd2:	4654      	mov	r4, sl
 8008fd4:	2205      	movs	r2, #5
 8008fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fda:	4854      	ldr	r0, [pc, #336]	; (800912c <_vfiprintf_r+0x220>)
 8008fdc:	f7f7 f918 	bl	8000210 <memchr>
 8008fe0:	9a04      	ldr	r2, [sp, #16]
 8008fe2:	b9d8      	cbnz	r0, 800901c <_vfiprintf_r+0x110>
 8008fe4:	06d1      	lsls	r1, r2, #27
 8008fe6:	bf44      	itt	mi
 8008fe8:	2320      	movmi	r3, #32
 8008fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fee:	0713      	lsls	r3, r2, #28
 8008ff0:	bf44      	itt	mi
 8008ff2:	232b      	movmi	r3, #43	; 0x2b
 8008ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffe:	d015      	beq.n	800902c <_vfiprintf_r+0x120>
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	4654      	mov	r4, sl
 8009004:	2000      	movs	r0, #0
 8009006:	f04f 0c0a 	mov.w	ip, #10
 800900a:	4621      	mov	r1, r4
 800900c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009010:	3b30      	subs	r3, #48	; 0x30
 8009012:	2b09      	cmp	r3, #9
 8009014:	d94d      	bls.n	80090b2 <_vfiprintf_r+0x1a6>
 8009016:	b1b0      	cbz	r0, 8009046 <_vfiprintf_r+0x13a>
 8009018:	9207      	str	r2, [sp, #28]
 800901a:	e014      	b.n	8009046 <_vfiprintf_r+0x13a>
 800901c:	eba0 0308 	sub.w	r3, r0, r8
 8009020:	fa09 f303 	lsl.w	r3, r9, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	46a2      	mov	sl, r4
 800902a:	e7d2      	b.n	8008fd2 <_vfiprintf_r+0xc6>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	1d19      	adds	r1, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	9103      	str	r1, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfbb      	ittet	lt
 8009038:	425b      	neglt	r3, r3
 800903a:	f042 0202 	orrlt.w	r2, r2, #2
 800903e:	9307      	strge	r3, [sp, #28]
 8009040:	9307      	strlt	r3, [sp, #28]
 8009042:	bfb8      	it	lt
 8009044:	9204      	strlt	r2, [sp, #16]
 8009046:	7823      	ldrb	r3, [r4, #0]
 8009048:	2b2e      	cmp	r3, #46	; 0x2e
 800904a:	d10c      	bne.n	8009066 <_vfiprintf_r+0x15a>
 800904c:	7863      	ldrb	r3, [r4, #1]
 800904e:	2b2a      	cmp	r3, #42	; 0x2a
 8009050:	d134      	bne.n	80090bc <_vfiprintf_r+0x1b0>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	1d1a      	adds	r2, r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	9203      	str	r2, [sp, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfb8      	it	lt
 800905e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009062:	3402      	adds	r4, #2
 8009064:	9305      	str	r3, [sp, #20]
 8009066:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800913c <_vfiprintf_r+0x230>
 800906a:	7821      	ldrb	r1, [r4, #0]
 800906c:	2203      	movs	r2, #3
 800906e:	4650      	mov	r0, sl
 8009070:	f7f7 f8ce 	bl	8000210 <memchr>
 8009074:	b138      	cbz	r0, 8009086 <_vfiprintf_r+0x17a>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	eba0 000a 	sub.w	r0, r0, sl
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	4082      	lsls	r2, r0
 8009080:	4313      	orrs	r3, r2
 8009082:	3401      	adds	r4, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908a:	4829      	ldr	r0, [pc, #164]	; (8009130 <_vfiprintf_r+0x224>)
 800908c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009090:	2206      	movs	r2, #6
 8009092:	f7f7 f8bd 	bl	8000210 <memchr>
 8009096:	2800      	cmp	r0, #0
 8009098:	d03f      	beq.n	800911a <_vfiprintf_r+0x20e>
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <_vfiprintf_r+0x228>)
 800909c:	bb1b      	cbnz	r3, 80090e6 <_vfiprintf_r+0x1da>
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	f023 0307 	bic.w	r3, r3, #7
 80090a6:	3308      	adds	r3, #8
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ac:	443b      	add	r3, r7
 80090ae:	9309      	str	r3, [sp, #36]	; 0x24
 80090b0:	e768      	b.n	8008f84 <_vfiprintf_r+0x78>
 80090b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b6:	460c      	mov	r4, r1
 80090b8:	2001      	movs	r0, #1
 80090ba:	e7a6      	b.n	800900a <_vfiprintf_r+0xfe>
 80090bc:	2300      	movs	r3, #0
 80090be:	3401      	adds	r4, #1
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0c0a 	mov.w	ip, #10
 80090c8:	4620      	mov	r0, r4
 80090ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ce:	3a30      	subs	r2, #48	; 0x30
 80090d0:	2a09      	cmp	r2, #9
 80090d2:	d903      	bls.n	80090dc <_vfiprintf_r+0x1d0>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0c6      	beq.n	8009066 <_vfiprintf_r+0x15a>
 80090d8:	9105      	str	r1, [sp, #20]
 80090da:	e7c4      	b.n	8009066 <_vfiprintf_r+0x15a>
 80090dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e0:	4604      	mov	r4, r0
 80090e2:	2301      	movs	r3, #1
 80090e4:	e7f0      	b.n	80090c8 <_vfiprintf_r+0x1bc>
 80090e6:	ab03      	add	r3, sp, #12
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	462a      	mov	r2, r5
 80090ec:	4b12      	ldr	r3, [pc, #72]	; (8009138 <_vfiprintf_r+0x22c>)
 80090ee:	a904      	add	r1, sp, #16
 80090f0:	4630      	mov	r0, r6
 80090f2:	f3af 8000 	nop.w
 80090f6:	4607      	mov	r7, r0
 80090f8:	1c78      	adds	r0, r7, #1
 80090fa:	d1d6      	bne.n	80090aa <_vfiprintf_r+0x19e>
 80090fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fe:	07d9      	lsls	r1, r3, #31
 8009100:	d405      	bmi.n	800910e <_vfiprintf_r+0x202>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	059a      	lsls	r2, r3, #22
 8009106:	d402      	bmi.n	800910e <_vfiprintf_r+0x202>
 8009108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800910a:	f7ff fd03 	bl	8008b14 <__retarget_lock_release_recursive>
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	065b      	lsls	r3, r3, #25
 8009112:	f53f af1d 	bmi.w	8008f50 <_vfiprintf_r+0x44>
 8009116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009118:	e71c      	b.n	8008f54 <_vfiprintf_r+0x48>
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <_vfiprintf_r+0x22c>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	4630      	mov	r0, r6
 8009126:	f000 f879 	bl	800921c <_printf_i>
 800912a:	e7e4      	b.n	80090f6 <_vfiprintf_r+0x1ea>
 800912c:	0800ac8d 	.word	0x0800ac8d
 8009130:	0800ac97 	.word	0x0800ac97
 8009134:	00000000 	.word	0x00000000
 8009138:	08008ee7 	.word	0x08008ee7
 800913c:	0800ac93 	.word	0x0800ac93

08009140 <_printf_common>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	4616      	mov	r6, r2
 8009146:	4699      	mov	r9, r3
 8009148:	688a      	ldr	r2, [r1, #8]
 800914a:	690b      	ldr	r3, [r1, #16]
 800914c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009150:	4293      	cmp	r3, r2
 8009152:	bfb8      	it	lt
 8009154:	4613      	movlt	r3, r2
 8009156:	6033      	str	r3, [r6, #0]
 8009158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800915c:	4607      	mov	r7, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b10a      	cbz	r2, 8009166 <_printf_common+0x26>
 8009162:	3301      	adds	r3, #1
 8009164:	6033      	str	r3, [r6, #0]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	0699      	lsls	r1, r3, #26
 800916a:	bf42      	ittt	mi
 800916c:	6833      	ldrmi	r3, [r6, #0]
 800916e:	3302      	addmi	r3, #2
 8009170:	6033      	strmi	r3, [r6, #0]
 8009172:	6825      	ldr	r5, [r4, #0]
 8009174:	f015 0506 	ands.w	r5, r5, #6
 8009178:	d106      	bne.n	8009188 <_printf_common+0x48>
 800917a:	f104 0a19 	add.w	sl, r4, #25
 800917e:	68e3      	ldr	r3, [r4, #12]
 8009180:	6832      	ldr	r2, [r6, #0]
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	42ab      	cmp	r3, r5
 8009186:	dc26      	bgt.n	80091d6 <_printf_common+0x96>
 8009188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800918c:	1e13      	subs	r3, r2, #0
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	bf18      	it	ne
 8009192:	2301      	movne	r3, #1
 8009194:	0692      	lsls	r2, r2, #26
 8009196:	d42b      	bmi.n	80091f0 <_printf_common+0xb0>
 8009198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800919c:	4649      	mov	r1, r9
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	3001      	adds	r0, #1
 80091a4:	d01e      	beq.n	80091e4 <_printf_common+0xa4>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	bf02      	ittt	eq
 80091b2:	68e5      	ldreq	r5, [r4, #12]
 80091b4:	6833      	ldreq	r3, [r6, #0]
 80091b6:	1aed      	subeq	r5, r5, r3
 80091b8:	68a3      	ldr	r3, [r4, #8]
 80091ba:	bf0c      	ite	eq
 80091bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c0:	2500      	movne	r5, #0
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bfc4      	itt	gt
 80091c6:	1a9b      	subgt	r3, r3, r2
 80091c8:	18ed      	addgt	r5, r5, r3
 80091ca:	2600      	movs	r6, #0
 80091cc:	341a      	adds	r4, #26
 80091ce:	42b5      	cmp	r5, r6
 80091d0:	d11a      	bne.n	8009208 <_printf_common+0xc8>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e008      	b.n	80091e8 <_printf_common+0xa8>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4652      	mov	r2, sl
 80091da:	4649      	mov	r1, r9
 80091dc:	4638      	mov	r0, r7
 80091de:	47c0      	blx	r8
 80091e0:	3001      	adds	r0, #1
 80091e2:	d103      	bne.n	80091ec <_printf_common+0xac>
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ec:	3501      	adds	r5, #1
 80091ee:	e7c6      	b.n	800917e <_printf_common+0x3e>
 80091f0:	18e1      	adds	r1, r4, r3
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	2030      	movs	r0, #48	; 0x30
 80091f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091fa:	4422      	add	r2, r4
 80091fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009204:	3302      	adds	r3, #2
 8009206:	e7c7      	b.n	8009198 <_printf_common+0x58>
 8009208:	2301      	movs	r3, #1
 800920a:	4622      	mov	r2, r4
 800920c:	4649      	mov	r1, r9
 800920e:	4638      	mov	r0, r7
 8009210:	47c0      	blx	r8
 8009212:	3001      	adds	r0, #1
 8009214:	d0e6      	beq.n	80091e4 <_printf_common+0xa4>
 8009216:	3601      	adds	r6, #1
 8009218:	e7d9      	b.n	80091ce <_printf_common+0x8e>
	...

0800921c <_printf_i>:
 800921c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	7e0f      	ldrb	r7, [r1, #24]
 8009222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009224:	2f78      	cmp	r7, #120	; 0x78
 8009226:	4691      	mov	r9, r2
 8009228:	4680      	mov	r8, r0
 800922a:	460c      	mov	r4, r1
 800922c:	469a      	mov	sl, r3
 800922e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009232:	d807      	bhi.n	8009244 <_printf_i+0x28>
 8009234:	2f62      	cmp	r7, #98	; 0x62
 8009236:	d80a      	bhi.n	800924e <_printf_i+0x32>
 8009238:	2f00      	cmp	r7, #0
 800923a:	f000 80d4 	beq.w	80093e6 <_printf_i+0x1ca>
 800923e:	2f58      	cmp	r7, #88	; 0x58
 8009240:	f000 80c0 	beq.w	80093c4 <_printf_i+0x1a8>
 8009244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800924c:	e03a      	b.n	80092c4 <_printf_i+0xa8>
 800924e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009252:	2b15      	cmp	r3, #21
 8009254:	d8f6      	bhi.n	8009244 <_printf_i+0x28>
 8009256:	a101      	add	r1, pc, #4	; (adr r1, 800925c <_printf_i+0x40>)
 8009258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800925c:	080092b5 	.word	0x080092b5
 8009260:	080092c9 	.word	0x080092c9
 8009264:	08009245 	.word	0x08009245
 8009268:	08009245 	.word	0x08009245
 800926c:	08009245 	.word	0x08009245
 8009270:	08009245 	.word	0x08009245
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009245 	.word	0x08009245
 800927c:	08009245 	.word	0x08009245
 8009280:	08009245 	.word	0x08009245
 8009284:	08009245 	.word	0x08009245
 8009288:	080093cd 	.word	0x080093cd
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009387 	.word	0x08009387
 8009294:	08009245 	.word	0x08009245
 8009298:	08009245 	.word	0x08009245
 800929c:	080093ef 	.word	0x080093ef
 80092a0:	08009245 	.word	0x08009245
 80092a4:	080092f5 	.word	0x080092f5
 80092a8:	08009245 	.word	0x08009245
 80092ac:	08009245 	.word	0x08009245
 80092b0:	0800938f 	.word	0x0800938f
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	602a      	str	r2, [r5, #0]
 80092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c4:	2301      	movs	r3, #1
 80092c6:	e09f      	b.n	8009408 <_printf_i+0x1ec>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	0607      	lsls	r7, r0, #24
 80092ce:	f103 0104 	add.w	r1, r3, #4
 80092d2:	6029      	str	r1, [r5, #0]
 80092d4:	d501      	bpl.n	80092da <_printf_i+0xbe>
 80092d6:	681e      	ldr	r6, [r3, #0]
 80092d8:	e003      	b.n	80092e2 <_printf_i+0xc6>
 80092da:	0646      	lsls	r6, r0, #25
 80092dc:	d5fb      	bpl.n	80092d6 <_printf_i+0xba>
 80092de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	da03      	bge.n	80092ee <_printf_i+0xd2>
 80092e6:	232d      	movs	r3, #45	; 0x2d
 80092e8:	4276      	negs	r6, r6
 80092ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ee:	485a      	ldr	r0, [pc, #360]	; (8009458 <_printf_i+0x23c>)
 80092f0:	230a      	movs	r3, #10
 80092f2:	e012      	b.n	800931a <_printf_i+0xfe>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	1d19      	adds	r1, r3, #4
 80092fa:	6029      	str	r1, [r5, #0]
 80092fc:	0605      	lsls	r5, r0, #24
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0xe8>
 8009300:	681e      	ldr	r6, [r3, #0]
 8009302:	e002      	b.n	800930a <_printf_i+0xee>
 8009304:	0641      	lsls	r1, r0, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0xe4>
 8009308:	881e      	ldrh	r6, [r3, #0]
 800930a:	4853      	ldr	r0, [pc, #332]	; (8009458 <_printf_i+0x23c>)
 800930c:	2f6f      	cmp	r7, #111	; 0x6f
 800930e:	bf0c      	ite	eq
 8009310:	2308      	moveq	r3, #8
 8009312:	230a      	movne	r3, #10
 8009314:	2100      	movs	r1, #0
 8009316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800931a:	6865      	ldr	r5, [r4, #4]
 800931c:	60a5      	str	r5, [r4, #8]
 800931e:	2d00      	cmp	r5, #0
 8009320:	bfa2      	ittt	ge
 8009322:	6821      	ldrge	r1, [r4, #0]
 8009324:	f021 0104 	bicge.w	r1, r1, #4
 8009328:	6021      	strge	r1, [r4, #0]
 800932a:	b90e      	cbnz	r6, 8009330 <_printf_i+0x114>
 800932c:	2d00      	cmp	r5, #0
 800932e:	d04b      	beq.n	80093c8 <_printf_i+0x1ac>
 8009330:	4615      	mov	r5, r2
 8009332:	fbb6 f1f3 	udiv	r1, r6, r3
 8009336:	fb03 6711 	mls	r7, r3, r1, r6
 800933a:	5dc7      	ldrb	r7, [r0, r7]
 800933c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009340:	4637      	mov	r7, r6
 8009342:	42bb      	cmp	r3, r7
 8009344:	460e      	mov	r6, r1
 8009346:	d9f4      	bls.n	8009332 <_printf_i+0x116>
 8009348:	2b08      	cmp	r3, #8
 800934a:	d10b      	bne.n	8009364 <_printf_i+0x148>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	07de      	lsls	r6, r3, #31
 8009350:	d508      	bpl.n	8009364 <_printf_i+0x148>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4299      	cmp	r1, r3
 8009358:	bfde      	ittt	le
 800935a:	2330      	movle	r3, #48	; 0x30
 800935c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009364:	1b52      	subs	r2, r2, r5
 8009366:	6122      	str	r2, [r4, #16]
 8009368:	f8cd a000 	str.w	sl, [sp]
 800936c:	464b      	mov	r3, r9
 800936e:	aa03      	add	r2, sp, #12
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff fee4 	bl	8009140 <_printf_common>
 8009378:	3001      	adds	r0, #1
 800937a:	d14a      	bne.n	8009412 <_printf_i+0x1f6>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	b004      	add	sp, #16
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	4833      	ldr	r0, [pc, #204]	; (800945c <_printf_i+0x240>)
 8009390:	2778      	movs	r7, #120	; 0x78
 8009392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	061f      	lsls	r7, r3, #24
 800939c:	f851 6b04 	ldr.w	r6, [r1], #4
 80093a0:	d402      	bmi.n	80093a8 <_printf_i+0x18c>
 80093a2:	065f      	lsls	r7, r3, #25
 80093a4:	bf48      	it	mi
 80093a6:	b2b6      	uxthmi	r6, r6
 80093a8:	07df      	lsls	r7, r3, #31
 80093aa:	bf48      	it	mi
 80093ac:	f043 0320 	orrmi.w	r3, r3, #32
 80093b0:	6029      	str	r1, [r5, #0]
 80093b2:	bf48      	it	mi
 80093b4:	6023      	strmi	r3, [r4, #0]
 80093b6:	b91e      	cbnz	r6, 80093c0 <_printf_i+0x1a4>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	2310      	movs	r3, #16
 80093c2:	e7a7      	b.n	8009314 <_printf_i+0xf8>
 80093c4:	4824      	ldr	r0, [pc, #144]	; (8009458 <_printf_i+0x23c>)
 80093c6:	e7e4      	b.n	8009392 <_printf_i+0x176>
 80093c8:	4615      	mov	r5, r2
 80093ca:	e7bd      	b.n	8009348 <_printf_i+0x12c>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6826      	ldr	r6, [r4, #0]
 80093d0:	6961      	ldr	r1, [r4, #20]
 80093d2:	1d18      	adds	r0, r3, #4
 80093d4:	6028      	str	r0, [r5, #0]
 80093d6:	0635      	lsls	r5, r6, #24
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0x1c4>
 80093dc:	6019      	str	r1, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0x1ca>
 80093e0:	0670      	lsls	r0, r6, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0x1c0>
 80093e4:	8019      	strh	r1, [r3, #0]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	4615      	mov	r5, r2
 80093ec:	e7bc      	b.n	8009368 <_printf_i+0x14c>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	602a      	str	r2, [r5, #0]
 80093f4:	681d      	ldr	r5, [r3, #0]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f6 ff08 	bl	8000210 <memchr>
 8009400:	b108      	cbz	r0, 8009406 <_printf_i+0x1ea>
 8009402:	1b40      	subs	r0, r0, r5
 8009404:	6060      	str	r0, [r4, #4]
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	2300      	movs	r3, #0
 800940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009410:	e7aa      	b.n	8009368 <_printf_i+0x14c>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	462a      	mov	r2, r5
 8009416:	4649      	mov	r1, r9
 8009418:	4640      	mov	r0, r8
 800941a:	47d0      	blx	sl
 800941c:	3001      	adds	r0, #1
 800941e:	d0ad      	beq.n	800937c <_printf_i+0x160>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	079b      	lsls	r3, r3, #30
 8009424:	d413      	bmi.n	800944e <_printf_i+0x232>
 8009426:	68e0      	ldr	r0, [r4, #12]
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	4298      	cmp	r0, r3
 800942c:	bfb8      	it	lt
 800942e:	4618      	movlt	r0, r3
 8009430:	e7a6      	b.n	8009380 <_printf_i+0x164>
 8009432:	2301      	movs	r3, #1
 8009434:	4632      	mov	r2, r6
 8009436:	4649      	mov	r1, r9
 8009438:	4640      	mov	r0, r8
 800943a:	47d0      	blx	sl
 800943c:	3001      	adds	r0, #1
 800943e:	d09d      	beq.n	800937c <_printf_i+0x160>
 8009440:	3501      	adds	r5, #1
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	9903      	ldr	r1, [sp, #12]
 8009446:	1a5b      	subs	r3, r3, r1
 8009448:	42ab      	cmp	r3, r5
 800944a:	dcf2      	bgt.n	8009432 <_printf_i+0x216>
 800944c:	e7eb      	b.n	8009426 <_printf_i+0x20a>
 800944e:	2500      	movs	r5, #0
 8009450:	f104 0619 	add.w	r6, r4, #25
 8009454:	e7f5      	b.n	8009442 <_printf_i+0x226>
 8009456:	bf00      	nop
 8009458:	0800ac9e 	.word	0x0800ac9e
 800945c:	0800acaf 	.word	0x0800acaf

08009460 <__sflush_r>:
 8009460:	898a      	ldrh	r2, [r1, #12]
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	4605      	mov	r5, r0
 8009468:	0710      	lsls	r0, r2, #28
 800946a:	460c      	mov	r4, r1
 800946c:	d458      	bmi.n	8009520 <__sflush_r+0xc0>
 800946e:	684b      	ldr	r3, [r1, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc05      	bgt.n	8009480 <__sflush_r+0x20>
 8009474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc02      	bgt.n	8009480 <__sflush_r+0x20>
 800947a:	2000      	movs	r0, #0
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009482:	2e00      	cmp	r6, #0
 8009484:	d0f9      	beq.n	800947a <__sflush_r+0x1a>
 8009486:	2300      	movs	r3, #0
 8009488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800948c:	682f      	ldr	r7, [r5, #0]
 800948e:	6a21      	ldr	r1, [r4, #32]
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	d032      	beq.n	80094fa <__sflush_r+0x9a>
 8009494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	075a      	lsls	r2, r3, #29
 800949a:	d505      	bpl.n	80094a8 <__sflush_r+0x48>
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	1ac0      	subs	r0, r0, r3
 80094a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a2:	b10b      	cbz	r3, 80094a8 <__sflush_r+0x48>
 80094a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	4602      	mov	r2, r0
 80094ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b0      	blx	r6
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	d106      	bne.n	80094c8 <__sflush_r+0x68>
 80094ba:	6829      	ldr	r1, [r5, #0]
 80094bc:	291d      	cmp	r1, #29
 80094be:	d82b      	bhi.n	8009518 <__sflush_r+0xb8>
 80094c0:	4a29      	ldr	r2, [pc, #164]	; (8009568 <__sflush_r+0x108>)
 80094c2:	410a      	asrs	r2, r1
 80094c4:	07d6      	lsls	r6, r2, #31
 80094c6:	d427      	bmi.n	8009518 <__sflush_r+0xb8>
 80094c8:	2200      	movs	r2, #0
 80094ca:	6062      	str	r2, [r4, #4]
 80094cc:	04d9      	lsls	r1, r3, #19
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	d504      	bpl.n	80094de <__sflush_r+0x7e>
 80094d4:	1c42      	adds	r2, r0, #1
 80094d6:	d101      	bne.n	80094dc <__sflush_r+0x7c>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b903      	cbnz	r3, 80094de <__sflush_r+0x7e>
 80094dc:	6560      	str	r0, [r4, #84]	; 0x54
 80094de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e0:	602f      	str	r7, [r5, #0]
 80094e2:	2900      	cmp	r1, #0
 80094e4:	d0c9      	beq.n	800947a <__sflush_r+0x1a>
 80094e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d002      	beq.n	80094f4 <__sflush_r+0x94>
 80094ee:	4628      	mov	r0, r5
 80094f0:	f7ff fb3e 	bl	8008b70 <_free_r>
 80094f4:	2000      	movs	r0, #0
 80094f6:	6360      	str	r0, [r4, #52]	; 0x34
 80094f8:	e7c0      	b.n	800947c <__sflush_r+0x1c>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b0      	blx	r6
 8009500:	1c41      	adds	r1, r0, #1
 8009502:	d1c8      	bne.n	8009496 <__sflush_r+0x36>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c5      	beq.n	8009496 <__sflush_r+0x36>
 800950a:	2b1d      	cmp	r3, #29
 800950c:	d001      	beq.n	8009512 <__sflush_r+0xb2>
 800950e:	2b16      	cmp	r3, #22
 8009510:	d101      	bne.n	8009516 <__sflush_r+0xb6>
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	e7b1      	b.n	800947a <__sflush_r+0x1a>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7ad      	b.n	800947c <__sflush_r+0x1c>
 8009520:	690f      	ldr	r7, [r1, #16]
 8009522:	2f00      	cmp	r7, #0
 8009524:	d0a9      	beq.n	800947a <__sflush_r+0x1a>
 8009526:	0793      	lsls	r3, r2, #30
 8009528:	680e      	ldr	r6, [r1, #0]
 800952a:	bf08      	it	eq
 800952c:	694b      	ldreq	r3, [r1, #20]
 800952e:	600f      	str	r7, [r1, #0]
 8009530:	bf18      	it	ne
 8009532:	2300      	movne	r3, #0
 8009534:	eba6 0807 	sub.w	r8, r6, r7
 8009538:	608b      	str	r3, [r1, #8]
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	dd9c      	ble.n	800947a <__sflush_r+0x1a>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009544:	4643      	mov	r3, r8
 8009546:	463a      	mov	r2, r7
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	2800      	cmp	r0, #0
 800954e:	dc06      	bgt.n	800955e <__sflush_r+0xfe>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e78e      	b.n	800947c <__sflush_r+0x1c>
 800955e:	4407      	add	r7, r0
 8009560:	eba8 0800 	sub.w	r8, r8, r0
 8009564:	e7e9      	b.n	800953a <__sflush_r+0xda>
 8009566:	bf00      	nop
 8009568:	dfbffffe 	.word	0xdfbffffe

0800956c <_fflush_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	4605      	mov	r5, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b913      	cbnz	r3, 800957c <_fflush_r+0x10>
 8009576:	2500      	movs	r5, #0
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	b118      	cbz	r0, 8009586 <_fflush_r+0x1a>
 800957e:	6a03      	ldr	r3, [r0, #32]
 8009580:	b90b      	cbnz	r3, 8009586 <_fflush_r+0x1a>
 8009582:	f7fe ffe3 	bl	800854c <__sinit>
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0f3      	beq.n	8009576 <_fflush_r+0xa>
 800958e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d404      	bmi.n	800959e <_fflush_r+0x32>
 8009594:	0599      	lsls	r1, r3, #22
 8009596:	d402      	bmi.n	800959e <_fflush_r+0x32>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f7ff faba 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800959e:	4628      	mov	r0, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7ff ff5d 	bl	8009460 <__sflush_r>
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	07da      	lsls	r2, r3, #31
 80095aa:	4605      	mov	r5, r0
 80095ac:	d4e4      	bmi.n	8009578 <_fflush_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d4e1      	bmi.n	8009578 <_fflush_r+0xc>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f7ff faad 	bl	8008b14 <__retarget_lock_release_recursive>
 80095ba:	e7dd      	b.n	8009578 <_fflush_r+0xc>

080095bc <fiprintf>:
 80095bc:	b40e      	push	{r1, r2, r3}
 80095be:	b503      	push	{r0, r1, lr}
 80095c0:	4601      	mov	r1, r0
 80095c2:	ab03      	add	r3, sp, #12
 80095c4:	4805      	ldr	r0, [pc, #20]	; (80095dc <fiprintf+0x20>)
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	6800      	ldr	r0, [r0, #0]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	f7ff fc9d 	bl	8008f0c <_vfiprintf_r>
 80095d2:	b002      	add	sp, #8
 80095d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d8:	b003      	add	sp, #12
 80095da:	4770      	bx	lr
 80095dc:	20000088 	.word	0x20000088

080095e0 <__swhatbuf_r>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	460c      	mov	r4, r1
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2900      	cmp	r1, #0
 80095ea:	b096      	sub	sp, #88	; 0x58
 80095ec:	4615      	mov	r5, r2
 80095ee:	461e      	mov	r6, r3
 80095f0:	da0d      	bge.n	800960e <__swhatbuf_r+0x2e>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095f8:	f04f 0100 	mov.w	r1, #0
 80095fc:	bf0c      	ite	eq
 80095fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009602:	2340      	movne	r3, #64	; 0x40
 8009604:	2000      	movs	r0, #0
 8009606:	6031      	str	r1, [r6, #0]
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	b016      	add	sp, #88	; 0x58
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	466a      	mov	r2, sp
 8009610:	f000 f896 	bl	8009740 <_fstat_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	dbec      	blt.n	80095f2 <__swhatbuf_r+0x12>
 8009618:	9901      	ldr	r1, [sp, #4]
 800961a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800961e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009622:	4259      	negs	r1, r3
 8009624:	4159      	adcs	r1, r3
 8009626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800962a:	e7eb      	b.n	8009604 <__swhatbuf_r+0x24>

0800962c <__smakebuf_r>:
 800962c:	898b      	ldrh	r3, [r1, #12]
 800962e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009630:	079d      	lsls	r5, r3, #30
 8009632:	4606      	mov	r6, r0
 8009634:	460c      	mov	r4, r1
 8009636:	d507      	bpl.n	8009648 <__smakebuf_r+0x1c>
 8009638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	2301      	movs	r3, #1
 8009642:	6163      	str	r3, [r4, #20]
 8009644:	b002      	add	sp, #8
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	ab01      	add	r3, sp, #4
 800964a:	466a      	mov	r2, sp
 800964c:	f7ff ffc8 	bl	80095e0 <__swhatbuf_r>
 8009650:	9900      	ldr	r1, [sp, #0]
 8009652:	4605      	mov	r5, r0
 8009654:	4630      	mov	r0, r6
 8009656:	f7fe fe61 	bl	800831c <_malloc_r>
 800965a:	b948      	cbnz	r0, 8009670 <__smakebuf_r+0x44>
 800965c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009660:	059a      	lsls	r2, r3, #22
 8009662:	d4ef      	bmi.n	8009644 <__smakebuf_r+0x18>
 8009664:	f023 0303 	bic.w	r3, r3, #3
 8009668:	f043 0302 	orr.w	r3, r3, #2
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	e7e3      	b.n	8009638 <__smakebuf_r+0xc>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	6020      	str	r0, [r4, #0]
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	6163      	str	r3, [r4, #20]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	6120      	str	r0, [r4, #16]
 8009682:	b15b      	cbz	r3, 800969c <__smakebuf_r+0x70>
 8009684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009688:	4630      	mov	r0, r6
 800968a:	f000 f86b 	bl	8009764 <_isatty_r>
 800968e:	b128      	cbz	r0, 800969c <__smakebuf_r+0x70>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	431d      	orrs	r5, r3
 80096a0:	81a5      	strh	r5, [r4, #12]
 80096a2:	e7cf      	b.n	8009644 <__smakebuf_r+0x18>

080096a4 <_putc_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	460d      	mov	r5, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	4606      	mov	r6, r0
 80096ac:	b118      	cbz	r0, 80096b6 <_putc_r+0x12>
 80096ae:	6a03      	ldr	r3, [r0, #32]
 80096b0:	b90b      	cbnz	r3, 80096b6 <_putc_r+0x12>
 80096b2:	f7fe ff4b 	bl	800854c <__sinit>
 80096b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096b8:	07d8      	lsls	r0, r3, #31
 80096ba:	d405      	bmi.n	80096c8 <_putc_r+0x24>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	0599      	lsls	r1, r3, #22
 80096c0:	d402      	bmi.n	80096c8 <_putc_r+0x24>
 80096c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c4:	f7ff fa25 	bl	8008b12 <__retarget_lock_acquire_recursive>
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	60a3      	str	r3, [r4, #8]
 80096d0:	da05      	bge.n	80096de <_putc_r+0x3a>
 80096d2:	69a2      	ldr	r2, [r4, #24]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	db12      	blt.n	80096fe <_putc_r+0x5a>
 80096d8:	b2eb      	uxtb	r3, r5
 80096da:	2b0a      	cmp	r3, #10
 80096dc:	d00f      	beq.n	80096fe <_putc_r+0x5a>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	701d      	strb	r5, [r3, #0]
 80096e6:	b2ed      	uxtb	r5, r5
 80096e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ea:	07da      	lsls	r2, r3, #31
 80096ec:	d405      	bmi.n	80096fa <_putc_r+0x56>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	059b      	lsls	r3, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_putc_r+0x56>
 80096f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f6:	f7ff fa0d 	bl	8008b14 <__retarget_lock_release_recursive>
 80096fa:	4628      	mov	r0, r5
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	4629      	mov	r1, r5
 8009700:	4622      	mov	r2, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff f831 	bl	800876a <__swbuf_r>
 8009708:	4605      	mov	r5, r0
 800970a:	e7ed      	b.n	80096e8 <_putc_r+0x44>

0800970c <memmove>:
 800970c:	4288      	cmp	r0, r1
 800970e:	b510      	push	{r4, lr}
 8009710:	eb01 0402 	add.w	r4, r1, r2
 8009714:	d902      	bls.n	800971c <memmove+0x10>
 8009716:	4284      	cmp	r4, r0
 8009718:	4623      	mov	r3, r4
 800971a:	d807      	bhi.n	800972c <memmove+0x20>
 800971c:	1e43      	subs	r3, r0, #1
 800971e:	42a1      	cmp	r1, r4
 8009720:	d008      	beq.n	8009734 <memmove+0x28>
 8009722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800972a:	e7f8      	b.n	800971e <memmove+0x12>
 800972c:	4402      	add	r2, r0
 800972e:	4601      	mov	r1, r0
 8009730:	428a      	cmp	r2, r1
 8009732:	d100      	bne.n	8009736 <memmove+0x2a>
 8009734:	bd10      	pop	{r4, pc}
 8009736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800973a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800973e:	e7f7      	b.n	8009730 <memmove+0x24>

08009740 <_fstat_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_fstat_r+0x20>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	4611      	mov	r1, r2
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f7f9 faed 	bl	8002d2c <_fstat>
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	d102      	bne.n	800975c <_fstat_r+0x1c>
 8009756:	682b      	ldr	r3, [r5, #0]
 8009758:	b103      	cbz	r3, 800975c <_fstat_r+0x1c>
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	bd38      	pop	{r3, r4, r5, pc}
 800975e:	bf00      	nop
 8009760:	2000257c 	.word	0x2000257c

08009764 <_isatty_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_isatty_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f9 faec 	bl	8002d4c <_isatty>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_isatty_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_isatty_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	2000257c 	.word	0x2000257c

08009784 <abort>:
 8009784:	b508      	push	{r3, lr}
 8009786:	2006      	movs	r0, #6
 8009788:	f000 f85a 	bl	8009840 <raise>
 800978c:	2001      	movs	r0, #1
 800978e:	f7f9 fa7e 	bl	8002c8e <_exit>

08009792 <_realloc_r>:
 8009792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009796:	4680      	mov	r8, r0
 8009798:	4614      	mov	r4, r2
 800979a:	460e      	mov	r6, r1
 800979c:	b921      	cbnz	r1, 80097a8 <_realloc_r+0x16>
 800979e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	4611      	mov	r1, r2
 80097a4:	f7fe bdba 	b.w	800831c <_malloc_r>
 80097a8:	b92a      	cbnz	r2, 80097b6 <_realloc_r+0x24>
 80097aa:	f7ff f9e1 	bl	8008b70 <_free_r>
 80097ae:	4625      	mov	r5, r4
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b6:	f000 f85f 	bl	8009878 <_malloc_usable_size_r>
 80097ba:	4284      	cmp	r4, r0
 80097bc:	4607      	mov	r7, r0
 80097be:	d802      	bhi.n	80097c6 <_realloc_r+0x34>
 80097c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097c4:	d812      	bhi.n	80097ec <_realloc_r+0x5a>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4640      	mov	r0, r8
 80097ca:	f7fe fda7 	bl	800831c <_malloc_r>
 80097ce:	4605      	mov	r5, r0
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d0ed      	beq.n	80097b0 <_realloc_r+0x1e>
 80097d4:	42bc      	cmp	r4, r7
 80097d6:	4622      	mov	r2, r4
 80097d8:	4631      	mov	r1, r6
 80097da:	bf28      	it	cs
 80097dc:	463a      	movcs	r2, r7
 80097de:	f7ff f99a 	bl	8008b16 <memcpy>
 80097e2:	4631      	mov	r1, r6
 80097e4:	4640      	mov	r0, r8
 80097e6:	f7ff f9c3 	bl	8008b70 <_free_r>
 80097ea:	e7e1      	b.n	80097b0 <_realloc_r+0x1e>
 80097ec:	4635      	mov	r5, r6
 80097ee:	e7df      	b.n	80097b0 <_realloc_r+0x1e>

080097f0 <_raise_r>:
 80097f0:	291f      	cmp	r1, #31
 80097f2:	b538      	push	{r3, r4, r5, lr}
 80097f4:	4604      	mov	r4, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	d904      	bls.n	8009804 <_raise_r+0x14>
 80097fa:	2316      	movs	r3, #22
 80097fc:	6003      	str	r3, [r0, #0]
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009806:	b112      	cbz	r2, 800980e <_raise_r+0x1e>
 8009808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800980c:	b94b      	cbnz	r3, 8009822 <_raise_r+0x32>
 800980e:	4620      	mov	r0, r4
 8009810:	f000 f830 	bl	8009874 <_getpid_r>
 8009814:	462a      	mov	r2, r5
 8009816:	4601      	mov	r1, r0
 8009818:	4620      	mov	r0, r4
 800981a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800981e:	f000 b817 	b.w	8009850 <_kill_r>
 8009822:	2b01      	cmp	r3, #1
 8009824:	d00a      	beq.n	800983c <_raise_r+0x4c>
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	d103      	bne.n	8009832 <_raise_r+0x42>
 800982a:	2316      	movs	r3, #22
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	2001      	movs	r0, #1
 8009830:	e7e7      	b.n	8009802 <_raise_r+0x12>
 8009832:	2400      	movs	r4, #0
 8009834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009838:	4628      	mov	r0, r5
 800983a:	4798      	blx	r3
 800983c:	2000      	movs	r0, #0
 800983e:	e7e0      	b.n	8009802 <_raise_r+0x12>

08009840 <raise>:
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <raise+0xc>)
 8009842:	4601      	mov	r1, r0
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	f7ff bfd3 	b.w	80097f0 <_raise_r>
 800984a:	bf00      	nop
 800984c:	20000088 	.word	0x20000088

08009850 <_kill_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d07      	ldr	r5, [pc, #28]	; (8009870 <_kill_r+0x20>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	4611      	mov	r1, r2
 800985c:	602b      	str	r3, [r5, #0]
 800985e:	f7f9 fa06 	bl	8002c6e <_kill>
 8009862:	1c43      	adds	r3, r0, #1
 8009864:	d102      	bne.n	800986c <_kill_r+0x1c>
 8009866:	682b      	ldr	r3, [r5, #0]
 8009868:	b103      	cbz	r3, 800986c <_kill_r+0x1c>
 800986a:	6023      	str	r3, [r4, #0]
 800986c:	bd38      	pop	{r3, r4, r5, pc}
 800986e:	bf00      	nop
 8009870:	2000257c 	.word	0x2000257c

08009874 <_getpid_r>:
 8009874:	f7f9 b9f3 	b.w	8002c5e <_getpid>

08009878 <_malloc_usable_size_r>:
 8009878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987c:	1f18      	subs	r0, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	bfbc      	itt	lt
 8009882:	580b      	ldrlt	r3, [r1, r0]
 8009884:	18c0      	addlt	r0, r0, r3
 8009886:	4770      	bx	lr

08009888 <_init>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	bf00      	nop
 800988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988e:	bc08      	pop	{r3}
 8009890:	469e      	mov	lr, r3
 8009892:	4770      	bx	lr

08009894 <_fini>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr
