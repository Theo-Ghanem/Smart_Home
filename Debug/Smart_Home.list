
Smart_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000addc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a98  0800af9c  0800af9c  0001af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca34  0800ca34  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca3c  0800ca3c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca3c  0800ca3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ca44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d84  200000a8  0800caec  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003e2c  0800caec  00023e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4ca  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000404a  00000000  00000000  0003b5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  0003f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  00040f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f391  00000000  00000000  000422ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f87e  00000000  00000000  0007163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012648d  00000000  00000000  00090eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074a4  00000000  00000000  001b7348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001be7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800af84 	.word	0x0800af84

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	0800af84 	.word	0x0800af84

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2120      	movs	r1, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fd2b 	bl	8003018 <SENSOR_IO_Read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f023 0304 	bic.w	r3, r3, #4
 80005cc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f023 0303 	bic.w	r3, r3, #3
 80005dc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ec:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	7bfa      	ldrb	r2, [r7, #15]
 80005f4:	2120      	movs	r1, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fcf4 	bl	8002fe4 <SENSOR_IO_Write>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000612:	f002 fcdd 	bl	8002fd0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	210f      	movs	r1, #15
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fcfb 	bl	8003018 <SENSOR_IO_Read>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2d8      	uxtb	r0, r3
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	2302      	movs	r3, #2
 8000644:	21b0      	movs	r1, #176	; 0xb0
 8000646:	f002 fd05 	bl	8003054 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800064a:	7b3b      	ldrb	r3, [r7, #12]
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	085b      	lsrs	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	2302      	movs	r3, #2
 8000664:	21b6      	movs	r1, #182	; 0xb6
 8000666:	f002 fcf5 	bl	8003054 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	b21a      	sxth	r2, r3
 8000670:	7b3b      	ldrb	r3, [r7, #12]
 8000672:	b21b      	sxth	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	b2d8      	uxtb	r0, r3
 800067c:	f107 020c 	add.w	r2, r7, #12
 8000680:	2302      	movs	r3, #2
 8000682:	21ba      	movs	r1, #186	; 0xba
 8000684:	f002 fce6 	bl	8003054 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2d8      	uxtb	r0, r3
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	2302      	movs	r3, #2
 80006a0:	21a8      	movs	r1, #168	; 0xa8
 80006a2:	f002 fcd7 	bl	8003054 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	7b3b      	ldrb	r3, [r7, #12]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80006e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000702:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8000706:	edd7 7a04 	vldr	s15, [r7, #16]
 800070a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800070e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000712:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8000716:	edd7 7a04 	vldr	s15, [r7, #16]
 800071a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000760 <HTS221_H_ReadHumidity+0x130>
 800071e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000726:	dd01      	ble.n	800072c <HTS221_H_ReadHumidity+0xfc>
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HTS221_H_ReadHumidity+0x134>)
 800072a:	e00a      	b.n	8000742 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800072c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	d502      	bpl.n	8000740 <HTS221_H_ReadHumidity+0x110>
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	e000      	b.n	8000742 <HTS221_H_ReadHumidity+0x112>
 8000740:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000742:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000744:	edd7 7a04 	vldr	s15, [r7, #16]
 8000748:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800074c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000750:	eef0 7a66 	vmov.f32	s15, s13
}
 8000754:	eeb0 0a67 	vmov.f32	s0, s15
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	447a0000 	.word	0x447a0000
 8000764:	447a0000 	.word	0x447a0000

08000768 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2120      	movs	r1, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fc4c 	bl	8003018 <SENSOR_IO_Read>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	f023 0303 	bic.w	r3, r3, #3
 800079a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007aa:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	2120      	movs	r1, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fc15 	bl	8002fe4 <SENSOR_IO_Write>
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b088      	sub	sp, #32
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	2302      	movs	r3, #2
 80007d6:	21b2      	movs	r1, #178	; 0xb2
 80007d8:	f002 fc3c 	bl	8003054 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2135      	movs	r1, #53	; 0x35
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fc18 	bl	8003018 <SENSOR_IO_Read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	7a3b      	ldrb	r3, [r7, #8]
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000800:	7ffb      	ldrb	r3, [r7, #31]
 8000802:	019b      	lsls	r3, r3, #6
 8000804:	b21b      	sxth	r3, r3
 8000806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800080a:	b21a      	sxth	r2, r3
 800080c:	7a7b      	ldrb	r3, [r7, #9]
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000814:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000818:	10db      	asrs	r3, r3, #3
 800081a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800081c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000820:	10db      	asrs	r3, r3, #3
 8000822:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	b2d8      	uxtb	r0, r3
 8000828:	f107 0208 	add.w	r2, r7, #8
 800082c:	2304      	movs	r3, #4
 800082e:	21bc      	movs	r1, #188	; 0xbc
 8000830:	f002 fc10 	bl	8003054 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000834:	7a7b      	ldrb	r3, [r7, #9]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7a3b      	ldrb	r3, [r7, #8]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21a      	sxth	r2, r3
 8000848:	7abb      	ldrb	r3, [r7, #10]
 800084a:	b21b      	sxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	b2d8      	uxtb	r0, r3
 8000854:	f107 0208 	add.w	r2, r7, #8
 8000858:	2302      	movs	r3, #2
 800085a:	21aa      	movs	r1, #170	; 0xaa
 800085c:	f002 fbfa 	bl	8003054 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	7a3b      	ldrb	r3, [r7, #8]
 8000868:	b21b      	sxth	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800086e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000872:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000880:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000884:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	ee07 3a90 	vmov	s15, r3
 800088e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000892:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000896:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800089a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008bc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	ee07 3a90 	vmov	s15, r3
}
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f879 	bl	80009d4 <LPS22HB_Init>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80008f8:	f002 fb6a 	bl	8002fd0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	210f      	movs	r1, #15
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fb88 	bl	8003018 <SENSOR_IO_Read>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	74fb      	strb	r3, [r7, #19]
 800092a:	e013      	b.n	8000954 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	7cfb      	ldrb	r3, [r7, #19]
 8000932:	3328      	adds	r3, #40	; 0x28
 8000934:	b2db      	uxtb	r3, r3
 8000936:	7cfc      	ldrb	r4, [r7, #19]
 8000938:	4619      	mov	r1, r3
 800093a:	4610      	mov	r0, r2
 800093c:	f002 fb6c 	bl	8003018 <SENSOR_IO_Read>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	f104 0318 	add.w	r3, r4, #24
 8000948:	443b      	add	r3, r7
 800094a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800094e:	7cfb      	ldrb	r3, [r7, #19]
 8000950:	3301      	adds	r3, #1
 8000952:	74fb      	strb	r3, [r7, #19]
 8000954:	7cfb      	ldrb	r3, [r7, #19]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d9e8      	bls.n	800092c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800095a:	2300      	movs	r3, #0
 800095c:	74fb      	strb	r3, [r7, #19]
 800095e:	e00f      	b.n	8000980 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8000960:	7cfb      	ldrb	r3, [r7, #19]
 8000962:	3318      	adds	r3, #24
 8000964:	443b      	add	r3, r7
 8000966:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800096a:	461a      	mov	r2, r3
 800096c:	7cfb      	ldrb	r3, [r7, #19]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	4313      	orrs	r3, r2
 8000978:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800097a:	7cfb      	ldrb	r3, [r7, #19]
 800097c:	3301      	adds	r3, #1
 800097e:	74fb      	strb	r3, [r7, #19]
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d9ec      	bls.n	8000960 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000996:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2264      	movs	r2, #100	; 0x64
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	da01      	bge.n	80009ac <LPS22HB_P_ReadPressure+0x94>
 80009a8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009ac:	131b      	asrs	r3, r3, #12
 80009ae:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80009d0 <LPS22HB_P_ReadPressure+0xb8>
 80009be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80009c6:	eeb0 0a67 	vmov.f32	s0, s15
 80009ca:	371c      	adds	r7, #28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	42c80000 	.word	0x42c80000

080009d4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	211a      	movs	r1, #26
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fb17 	bl	8003018 <SENSOR_IO_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	211a      	movs	r1, #26
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 faec 	bl	8002fe4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2110      	movs	r1, #16
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fb00 	bl	8003018 <SENSOR_IO_Read>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a22:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a2a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f023 0302 	bic.w	r3, r3, #2
 8000a32:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	2110      	movs	r1, #16
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 facd 	bl	8002fe4 <SENSOR_IO_Write>
}  
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000a60:	d906      	bls.n	8000a70 <Hex2Num+0x1e>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b39      	cmp	r3, #57	; 0x39
 8000a66:	d803      	bhi.n	8000a70 <Hex2Num+0x1e>
        return a - '0';
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	3b30      	subs	r3, #48	; 0x30
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	e014      	b.n	8000a9a <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b60      	cmp	r3, #96	; 0x60
 8000a74:	d906      	bls.n	8000a84 <Hex2Num+0x32>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b66      	cmp	r3, #102	; 0x66
 8000a7a:	d803      	bhi.n	8000a84 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3b57      	subs	r3, #87	; 0x57
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	e00a      	b.n	8000a9a <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b40      	cmp	r3, #64	; 0x40
 8000a88:	d906      	bls.n	8000a98 <Hex2Num+0x46>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b46      	cmp	r3, #70	; 0x46
 8000a8e:	d803      	bhi.n	8000a98 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3b37      	subs	r3, #55	; 0x37
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	e000      	b.n	8000a9a <Hex2Num+0x48>
    }

    return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000ab8:	e012      	b.n	8000ae0 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffc4 	bl	8000a52 <Hex2Num>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
        done_count++;
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	3301      	adds	r3, #1
 8000ade:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ae6:	d903      	bls.n	8000af0 <ParseHexNumber+0x4a>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b39      	cmp	r3, #57	; 0x39
 8000aee:	d90f      	bls.n	8000b10 <ParseHexNumber+0x6a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b60      	cmp	r3, #96	; 0x60
 8000af6:	d903      	bls.n	8000b00 <ParseHexNumber+0x5a>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b66      	cmp	r3, #102	; 0x66
 8000afe:	d907      	bls.n	8000b10 <ParseHexNumber+0x6a>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b40      	cmp	r3, #64	; 0x40
 8000b06:	d906      	bls.n	8000b16 <ParseHexNumber+0x70>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b46      	cmp	r3, #70	; 0x46
 8000b0e:	d802      	bhi.n	8000b16 <ParseHexNumber+0x70>
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d9d1      	bls.n	8000aba <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	7bba      	ldrb	r2, [r7, #14]
 8000b20:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b2d      	cmp	r3, #45	; 0x2d
 8000b48:	d119      	bne.n	8000b7e <ParseNumber+0x52>
        minus = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
        done_count++;
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000b5a:	e010      	b.n	8000b7e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3b30      	subs	r3, #48	; 0x30
 8000b6e:	4413      	add	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
        done_count++;
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b2f      	cmp	r3, #47	; 0x2f
 8000b84:	d903      	bls.n	8000b8e <ParseNumber+0x62>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b39      	cmp	r3, #57	; 0x39
 8000b8c:	d9e6      	bls.n	8000b5c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <ParseNumber+0x6e>
        *cnt = done_count;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	7bba      	ldrb	r2, [r7, #14]
 8000b98:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <ParseNumber+0x7a>
        return 0 - sum;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	e000      	b.n	8000ba8 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000ba6:	68bb      	ldr	r3, [r7, #8]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d027      	beq.n	8000c1a <ParseMAC+0x66>
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d024      	beq.n	8000c1a <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000bd0:	e018      	b.n	8000c04 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b3a      	cmp	r3, #58	; 0x3a
 8000bdc:	d00d      	beq.n	8000bfa <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	75fa      	strb	r2, [r7, #23]
 8000be4:	461a      	mov	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	189c      	adds	r4, r3, r2
 8000bea:	f107 0316 	add.w	r3, r7, #22
 8000bee:	4619      	mov	r1, r3
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff ff58 	bl	8000aa6 <ParseHexNumber>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8000bfa:	7dbb      	ldrb	r3, [r7, #22]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d906      	bls.n	8000c1a <ParseMAC+0x66>
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d803      	bhi.n	8000c1a <ParseMAC+0x66>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1db      	bne.n	8000bd2 <ParseMAC+0x1e>
   }
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}

08000c22 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d027      	beq.n	8000c88 <ParseIP+0x66>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d024      	beq.n	8000c88 <ParseIP+0x66>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d921      	bls.n	8000c88 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000c44:	e019      	b.n	8000c7a <ParseIP+0x58>
    uint8_t done_count = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8000c50:	d00e      	beq.n	8000c70 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000c52:	f107 0316 	add.w	r3, r7, #22
 8000c56:	4619      	mov	r1, r3
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff67 	bl	8000b2c <ParseNumber>
 8000c5e:	4601      	mov	r1, r0
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	75fa      	strb	r2, [r7, #23]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2ca      	uxtb	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8000c70:	7dbb      	ldrb	r3, [r7, #22]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d803      	bhi.n	8000c88 <ParseIP+0x66>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1de      	bne.n	8000c46 <ParseIP+0x24>
   }
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	4940      	ldr	r1, [pc, #256]	; (8000da4 <AT_ParseInfo+0x114>)
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f009 f9bf 	bl	800a028 <strtok>
 8000caa:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000cac:	e071      	b.n	8000d92 <AT_ParseInfo+0x102>
    switch (num++) {
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	72fa      	strb	r2, [r7, #11]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d866      	bhi.n	8000d86 <AT_ParseInfo+0xf6>
 8000cb8:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <AT_ParseInfo+0x30>)
 8000cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbe:	bf00      	nop
 8000cc0:	08000cdd 	.word	0x08000cdd
 8000cc4:	08000cf1 	.word	0x08000cf1
 8000cc8:	08000d09 	.word	0x08000d09
 8000ccc:	08000d21 	.word	0x08000d21
 8000cd0:	08000d39 	.word	0x08000d39
 8000cd4:	08000d51 	.word	0x08000d51
 8000cd8:	08000d65 	.word	0x08000d65
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	221f      	movs	r2, #31
 8000ce0:	68f9      	ldr	r1, [r7, #12]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f009 f98d 	bl	800a002 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	77da      	strb	r2, [r3, #31]
      break;
 8000cee:	e04b      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3320      	adds	r3, #32
 8000cf4:	2217      	movs	r2, #23
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f009 f982 	bl	800a002 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8000d06:	e03f      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3338      	adds	r3, #56	; 0x38
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	68f9      	ldr	r1, [r7, #12]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f009 f976 	bl	800a002 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000d1e:	e033      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3348      	adds	r3, #72	; 0x48
 8000d24:	220f      	movs	r2, #15
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f009 f96a 	bl	800a002 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8000d36:	e027      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3358      	adds	r3, #88	; 0x58
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f009 f95e 	bl	800a002 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8000d4e:	e01b      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000d50:	2100      	movs	r1, #0
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff feea 	bl	8000b2c <ParseNumber>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000d62:	e011      	b.n	8000d88 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8000d64:	4910      	ldr	r1, [pc, #64]	; (8000da8 <AT_ParseInfo+0x118>)
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f009 f95e 	bl	800a028 <strtok>
 8000d6c:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3368      	adds	r3, #104	; 0x68
 8000d72:	221f      	movs	r2, #31
 8000d74:	68f9      	ldr	r1, [r7, #12]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f009 f943 	bl	800a002 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8000d84:	e000      	b.n	8000d88 <AT_ParseInfo+0xf8>

    default: break;
 8000d86:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000d88:	4906      	ldr	r1, [pc, #24]	; (8000da4 <AT_ParseInfo+0x114>)
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f009 f94c 	bl	800a028 <strtok>
 8000d90:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d18a      	bne.n	8000cae <AT_ParseInfo+0x1e>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0800afcc 	.word	0x0800afcc
 8000da8:	0800afd0 	.word	0x0800afd0

08000dac <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	4959      	ldr	r1, [pc, #356]	; (8000f24 <AT_ParseConnSettings+0x178>)
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f009 f931 	bl	800a028 <strtok>
 8000dc6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000dc8:	e0a2      	b.n	8000f10 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	73fa      	strb	r2, [r7, #15]
 8000dd0:	2b0b      	cmp	r3, #11
 8000dd2:	f200 808c 	bhi.w	8000eee <AT_ParseConnSettings+0x142>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <AT_ParseConnSettings+0x30>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e23 	.word	0x08000e23
 8000de4:	08000e3b 	.word	0x08000e3b
 8000de8:	08000e4f 	.word	0x08000e4f
 8000dec:	08000e63 	.word	0x08000e63
 8000df0:	08000e77 	.word	0x08000e77
 8000df4:	08000e87 	.word	0x08000e87
 8000df8:	08000e97 	.word	0x08000e97
 8000dfc:	08000ea7 	.word	0x08000ea7
 8000e00:	08000eb7 	.word	0x08000eb7
 8000e04:	08000ec7 	.word	0x08000ec7
 8000e08:	08000edb 	.word	0x08000edb
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2220      	movs	r2, #32
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f009 f8f5 	bl	800a002 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8000e20:	e066      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3321      	adds	r3, #33	; 0x21
 8000e26:	2220      	movs	r2, #32
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f009 f8e9 	bl	800a002 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8000e38:	e05a      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f7ff fe75 	bl	8000b2c <ParseNumber>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000e4c:	e050      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f7ff fe6b 	bl	8000b2c <ParseNumber>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000e60:	e046      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000e62:	2100      	movs	r1, #0
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fe61 	bl	8000b2c <ParseNumber>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000e74:	e03c      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3348      	adds	r3, #72	; 0x48
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f7ff fecf 	bl	8000c22 <ParseIP>
      break;
 8000e84:	e034      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	334c      	adds	r3, #76	; 0x4c
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	68b8      	ldr	r0, [r7, #8]
 8000e90:	f7ff fec7 	bl	8000c22 <ParseIP>
      break;
 8000e94:	e02c      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3350      	adds	r3, #80	; 0x50
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68b8      	ldr	r0, [r7, #8]
 8000ea0:	f7ff febf 	bl	8000c22 <ParseIP>
      break;
 8000ea4:	e024      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3354      	adds	r3, #84	; 0x54
 8000eaa:	2204      	movs	r2, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	68b8      	ldr	r0, [r7, #8]
 8000eb0:	f7ff feb7 	bl	8000c22 <ParseIP>
      break;
 8000eb4:	e01c      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	3358      	adds	r3, #88	; 0x58
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	68b8      	ldr	r0, [r7, #8]
 8000ec0:	f7ff feaf 	bl	8000c22 <ParseIP>
      break;
 8000ec4:	e014      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f7ff fe2f 	bl	8000b2c <ParseNumber>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000ed8:	e00a      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000eda:	2100      	movs	r1, #0
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f7ff fe25 	bl	8000b2c <ParseNumber>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000eec:	e000      	b.n	8000ef0 <AT_ParseConnSettings+0x144>

    default:
      break;
 8000eee:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <AT_ParseConnSettings+0x178>)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f009 f898 	bl	800a028 <strtok>
 8000ef8:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <AT_ParseConnSettings+0x164>
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b2c      	cmp	r3, #44	; 0x2c
 8000f08:	d102      	bne.n	8000f10 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f af59 	bne.w	8000dca <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	0800afcc 	.word	0x0800afcc

08000f28 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d056      	beq.n	8000ff4 <AT_ExecuteCommand+0xcc>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d051      	beq.n	8000ff4 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff f952 	bl	8000200 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000f66:	461a      	mov	r2, r3
 8000f68:	68b8      	ldr	r0, [r7, #8]
 8000f6a:	47a0      	blx	r4
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	dd3e      	ble.n	8000ff4 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000f82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	4798      	blx	r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000f8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dd27      	ble.n	8000fe6 <AT_ExecuteCommand+0xbe>
 8000f96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f9e:	dc22      	bgt.n	8000fe6 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000fa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fa4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fa8:	d105      	bne.n	8000fb6 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8000faa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000fb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8000fc2:	490f      	ldr	r1, [pc, #60]	; (8001000 <AT_ExecuteCommand+0xd8>)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f009 f88b 	bl	800a0e0 <strstr>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e010      	b.n	8000ff6 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <AT_ExecuteCommand+0xdc>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f009 f882 	bl	800a0e0 <strstr>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e007      	b.n	8000ff6 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000fe6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fea:	f113 0f04 	cmn.w	r3, #4
 8000fee:	d101      	bne.n	8000ff4 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	e000      	b.n	8000ff6 <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000ff4:	2304      	movs	r3, #4
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800afe4 	.word	0x0800afe4
 8001004:	0800aff0 	.word	0x0800aff0

08001008 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8001022:	68b8      	ldr	r0, [r7, #8]
 8001024:	f7ff f8ec 	bl	8000200 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800102c:	8a7b      	ldrh	r3, [r7, #18]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <AT_RequestSendData+0x32>
 8001036:	2302      	movs	r3, #2
 8001038:	e05d      	b.n	80010f6 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001040:	2b00      	cmp	r3, #0
 8001042:	d057      	beq.n	80010f4 <AT_RequestSendData+0xec>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800104a:	2b00      	cmp	r3, #0
 800104c:	d052      	beq.n	80010f4 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800105a:	8a79      	ldrh	r1, [r7, #18]
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	4798      	blx	r3
 8001060:	4603      	mov	r3, r0
 8001062:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001064:	8a3a      	ldrh	r2, [r7, #16]
 8001066:	8a7b      	ldrh	r3, [r7, #18]
 8001068:	429a      	cmp	r2, r3
 800106a:	d143      	bne.n	80010f4 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001078:	8879      	ldrh	r1, [r7, #2]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
 800107e:	4603      	mov	r3, r0
 8001080:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001082:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	429a      	cmp	r2, r3
 800108a:	d131      	bne.n	80010f0 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001098:	2100      	movs	r1, #0
 800109a:	6a38      	ldr	r0, [r7, #32]
 800109c:	4798      	blx	r3
 800109e:	4603      	mov	r3, r0
 80010a0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80010a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dd19      	ble.n	80010de <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 80010aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010ae:	6a3a      	ldr	r2, [r7, #32]
 80010b0:	4413      	add	r3, r2
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80010b6:	4912      	ldr	r1, [pc, #72]	; (8001100 <AT_RequestSendData+0xf8>)
 80010b8:	6a38      	ldr	r0, [r7, #32]
 80010ba:	f009 f811 	bl	800a0e0 <strstr>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e016      	b.n	80010f6 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80010c8:	490e      	ldr	r1, [pc, #56]	; (8001104 <AT_RequestSendData+0xfc>)
 80010ca:	6a38      	ldr	r0, [r7, #32]
 80010cc:	f009 f808 	bl	800a0e0 <strstr>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80010d6:	2305      	movs	r3, #5
 80010d8:	e00d      	b.n	80010f6 <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 80010da:	2302      	movs	r3, #2
 80010dc:	e00b      	b.n	80010f6 <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80010de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010e2:	f113 0f04 	cmn.w	r3, #4
 80010e6:	d101      	bne.n	80010ec <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80010e8:	2306      	movs	r3, #6
 80010ea:	e004      	b.n	80010f6 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e000      	b.n	80010f6 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80010f4:	2304      	movs	r3, #4
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800afe4 	.word	0x0800afe4
 8001104:	0800aff0 	.word	0x0800aff0

08001108 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800111c:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8087 	beq.w	8001238 <AT_RequestReceiveData+0x130>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 8081 	beq.w	8001238 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800113c:	68b8      	ldr	r0, [r7, #8]
 800113e:	f7ff f85f 	bl	8000200 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b299      	uxth	r1, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800114c:	461a      	mov	r2, r3
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	47a0      	blx	r4
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd6f      	ble.n	8001238 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001164:	2100      	movs	r1, #0
 8001166:	6938      	ldr	r0, [r7, #16]
 8001168:	4798      	blx	r3
 800116a:	4603      	mov	r3, r0
 800116c:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b0d      	cmp	r3, #13
 8001174:	d104      	bne.n	8001180 <AT_RequestReceiveData+0x78>
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d001      	beq.n	8001184 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8001180:	2304      	movs	r3, #4
 8001182:	e05a      	b.n	800123a <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3b02      	subs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
    p += 2;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	3302      	adds	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d94a      	bls.n	800122c <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8001196:	e002      	b.n	800119e <AT_RequestReceiveData+0x96>
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3b01      	subs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <AT_RequestReceiveData+0xaa>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b15      	cmp	r3, #21
 80011b0:	d0f2      	beq.n	8001198 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3b08      	subs	r3, #8
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	491f      	ldr	r1, [pc, #124]	; (8001244 <AT_RequestReceiveData+0x13c>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 ff8a 	bl	800a0e0 <strstr>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d016      	beq.n	8001200 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b08      	subs	r3, #8
 80011d8:	b29a      	uxth	r2, r3
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d202      	bcs.n	80011ee <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f009 f80b 	bl	800a212 <memcpy>
       return ES_WIFI_STATUS_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e01c      	b.n	800123a <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3b04      	subs	r3, #4
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4413      	add	r3, r2
 8001208:	2204      	movs	r2, #4
 800120a:	490f      	ldr	r1, [pc, #60]	; (8001248 <AT_RequestReceiveData+0x140>)
 800120c:	4618      	mov	r0, r3
 800120e:	f008 febf 	bl	8009f90 <memcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800121e:	2305      	movs	r3, #5
 8001220:	e00b      	b.n	800123a <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001228:	2305      	movs	r3, #5
 800122a:	e006      	b.n	800123a <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f113 0f04 	cmn.w	r3, #4
 8001232:	d101      	bne.n	8001238 <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8001234:	2306      	movs	r3, #6
 8001236:	e000      	b.n	800123a <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 8001238:	2304      	movs	r3, #4
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	0800afe4 	.word	0x0800afe4
 8001248:	0800aff8 	.word	0x0800aff8

0800124c <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001254:	2302      	movs	r3, #2
 8001256:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f247 5230 	movw	r2, #30000	; 0x7530
 800125e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01b      	beq.n	80012a4 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001272:	2000      	movs	r0, #0
 8001274:	4798      	blx	r3
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d113      	bne.n	80012a4 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001282:	461a      	mov	r2, r3
 8001284:	490a      	ldr	r1, [pc, #40]	; (80012b0 <ES_WIFI_Init+0x64>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe4e 	bl	8000f28 <AT_ExecuteCommand>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800129c:	4619      	mov	r1, r3
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fcf6 	bl	8000c90 <AT_ParseInfo>
    }
   }
  }
  return ret;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800b000 	.word	0x0800b000

080012b4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <ES_WIFI_RegisterBusIO+0x2c>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <ES_WIFI_RegisterBusIO+0x2c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <ES_WIFI_RegisterBusIO+0x2c>
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <ES_WIFI_RegisterBusIO+0x2c>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e014      	b.n	800130e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	4932      	ldr	r1, [pc, #200]	; (80013fc <ES_WIFI_Connect+0xe0>)
 8001334:	4618      	mov	r0, r3
 8001336:	f008 fd33 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001346:	461a      	mov	r2, r3
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff fded 	bl	8000f28 <AT_ExecuteCommand>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d14b      	bne.n	80013f0 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4927      	ldr	r1, [pc, #156]	; (8001400 <ES_WIFI_Connect+0xe4>)
 8001362:	4618      	mov	r0, r3
 8001364:	f008 fd1c 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001374:	461a      	mov	r2, r3
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fdd6 	bl	8000f28 <AT_ExecuteCommand>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d134      	bne.n	80013f0 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	491b      	ldr	r1, [pc, #108]	; (8001404 <ES_WIFI_Connect+0xe8>)
 8001398:	4618      	mov	r0, r3
 800139a:	f008 fd01 	bl	8009da0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013aa:	461a      	mov	r2, r3
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff fdbb 	bl	8000f28 <AT_ExecuteCommand>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d119      	bne.n	80013f0 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013c2:	4911      	ldr	r1, [pc, #68]	; (8001408 <ES_WIFI_Connect+0xec>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fceb 	bl	8009da0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013d6:	461a      	mov	r2, r3
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fda5 	bl	8000f28 <AT_ExecuteCommand>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800b018 	.word	0x0800b018
 8001400:	0800b020 	.word	0x0800b020
 8001404:	0800b028 	.word	0x0800b028
 8001408:	0800b030 	.word	0x0800b030

0800140c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800141a:	4913      	ldr	r1, [pc, #76]	; (8001468 <ES_WIFI_IsConnected+0x5c>)
 800141c:	4618      	mov	r0, r3
 800141e:	f008 fcbf 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800142e:	461a      	mov	r2, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fd79 	bl	8000f28 <AT_ExecuteCommand>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8001446:	2b31      	cmp	r3, #49	; 0x31
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800b034 	.word	0x0800b034

0800146c <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800147a:	4910      	ldr	r1, [pc, #64]	; (80014bc <ES_WIFI_GetNetworkSettings+0x50>)
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fc8f 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800148e:	461a      	mov	r2, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd49 	bl	8000f28 <AT_ExecuteCommand>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d108      	bne.n	80014b2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	338d      	adds	r3, #141	; 0x8d
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff fc7d 	bl	8000dac <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800b03c 	.word	0x0800b03c

080014c0 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014d4:	4913      	ldr	r1, [pc, #76]	; (8001524 <ES_WIFI_GetMACAddress+0x64>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f008 fc62 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e8:	461a      	mov	r2, r3
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff fd1c 	bl	8000f28 <AT_ExecuteCommand>
 80014f0:	4603      	mov	r3, r0
 80014f2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10e      	bne.n	8001518 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001500:	3302      	adds	r3, #2
 8001502:	4909      	ldr	r1, [pc, #36]	; (8001528 <ES_WIFI_GetMACAddress+0x68>)
 8001504:	4618      	mov	r0, r3
 8001506:	f008 fd8f 	bl	800a028 <strtok>
 800150a:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff fb4e 	bl	8000bb4 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8001518:	7dfb      	ldrb	r3, [r7, #23]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	0800b08c 	.word	0x0800b08c
 8001528:	0800b090 	.word	0x0800b090

0800152c <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	461a      	mov	r2, r3
 8001546:	4949      	ldr	r1, [pc, #292]	; (800166c <ES_WIFI_StartServerSingleConn+0x140>)
 8001548:	f008 fc2a 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001558:	461a      	mov	r2, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fce4 	bl	8000f28 <AT_ExecuteCommand>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	e079      	b.n	8001662 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d016      	beq.n	80015a4 <ES_WIFI_StartServerSingleConn+0x78>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d012      	beq.n	80015a4 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001584:	493a      	ldr	r1, [pc, #232]	; (8001670 <ES_WIFI_StartServerSingleConn+0x144>)
 8001586:	4618      	mov	r0, r3
 8001588:	f008 fc0a 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001598:	461a      	mov	r2, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fcc4 	bl	8000f28 <AT_ExecuteCommand>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d15a      	bne.n	8001660 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	492f      	ldr	r1, [pc, #188]	; (8001674 <ES_WIFI_StartServerSingleConn+0x148>)
 80015b8:	f008 fbf2 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c8:	461a      	mov	r2, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fcac 	bl	8000f28 <AT_ExecuteCommand>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d142      	bne.n	8001660 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7c1b      	ldrb	r3, [r3, #16]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4924      	ldr	r1, [pc, #144]	; (8001678 <ES_WIFI_StartServerSingleConn+0x14c>)
 80015e8:	f008 fbda 	bl	8009da0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f8:	461a      	mov	r2, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fc94 	bl	8000f28 <AT_ExecuteCommand>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d12a      	bne.n	8001660 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	88db      	ldrh	r3, [r3, #6]
 8001614:	461a      	mov	r2, r3
 8001616:	4919      	ldr	r1, [pc, #100]	; (800167c <ES_WIFI_StartServerSingleConn+0x150>)
 8001618:	f008 fbc2 	bl	8009da0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001628:	461a      	mov	r2, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fc7c 	bl	8000f28 <AT_ExecuteCommand>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d112      	bne.n	8001660 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001640:	490f      	ldr	r1, [pc, #60]	; (8001680 <ES_WIFI_StartServerSingleConn+0x154>)
 8001642:	4618      	mov	r0, r3
 8001644:	f008 fbac 	bl	8009da0 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001654:	461a      	mov	r2, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fc66 	bl	8000f28 <AT_ExecuteCommand>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800b0f4 	.word	0x0800b0f4
 8001670:	0800b13c 	.word	0x0800b13c
 8001674:	0800b0fc 	.word	0x0800b0fc
 8001678:	0800b148 	.word	0x0800b148
 800167c:	0800b104 	.word	0x0800b104
 8001680:	0800b150 	.word	0x0800b150

08001684 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 8001696:	f002 f8c9 	bl	800382c <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d201      	bcs.n	80016b0 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f008 fc77 	bl	8009fb0 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c8:	495f      	ldr	r1, [pc, #380]	; (8001848 <ES_WIFI_WaitServerConnection+0x1c4>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 fb68 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016dc:	461a      	mov	r2, r3
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fc22 	bl	8000f28 <AT_ExecuteCommand>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 80016ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d129      	bne.n	8001746 <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f8:	4954      	ldr	r1, [pc, #336]	; (800184c <ES_WIFI_WaitServerConnection+0x1c8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f008 fcf0 	bl	800a0e0 <strstr>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d021      	beq.n	800174a <ES_WIFI_WaitServerConnection+0xc6>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800170c:	4950      	ldr	r1, [pc, #320]	; (8001850 <ES_WIFI_WaitServerConnection+0x1cc>)
 800170e:	4618      	mov	r0, r3
 8001710:	f008 fce6 	bl	800a0e0 <strstr>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d017      	beq.n	800174a <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001720:	494c      	ldr	r1, [pc, #304]	; (8001854 <ES_WIFI_WaitServerConnection+0x1d0>)
 8001722:	4618      	mov	r0, r3
 8001724:	f008 fcdc 	bl	800a0e0 <strstr>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10d      	bne.n	800174a <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001734:	4948      	ldr	r1, [pc, #288]	; (8001858 <ES_WIFI_WaitServerConnection+0x1d4>)
 8001736:	4618      	mov	r0, r3
 8001738:	f008 fcd2 	bl	800a0e0 <strstr>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8001742:	2302      	movs	r3, #2
 8001744:	e07c      	b.n	8001840 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001746:	2302      	movs	r3, #2
 8001748:	e07a      	b.n	8001840 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001750:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f008 fc2a 	bl	8009fb0 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001762:	493e      	ldr	r1, [pc, #248]	; (800185c <ES_WIFI_WaitServerConnection+0x1d8>)
 8001764:	4618      	mov	r0, r3
 8001766:	f008 fb1b 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001776:	461a      	mov	r2, r3
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fbd5 	bl	8000f28 <AT_ExecuteCommand>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001788:	2b00      	cmp	r3, #0
 800178a:	d140      	bne.n	800180e <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001792:	220c      	movs	r2, #12
 8001794:	4932      	ldr	r1, [pc, #200]	; (8001860 <ES_WIFI_WaitServerConnection+0x1dc>)
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fc21 	bl	8009fde <strncmp>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d037      	beq.n	8001812 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017a8:	3302      	adds	r3, #2
 80017aa:	492e      	ldr	r1, [pc, #184]	; (8001864 <ES_WIFI_WaitServerConnection+0x1e0>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f008 fc3b 	bl	800a028 <strtok>
 80017b2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 80017b4:	492b      	ldr	r1, [pc, #172]	; (8001864 <ES_WIFI_WaitServerConnection+0x1e0>)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f008 fc36 	bl	800a028 <strtok>
 80017bc:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3308      	adds	r3, #8
 80017c2:	2204      	movs	r2, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff fa2b 	bl	8000c22 <ParseIP>
        ptr = strtok(0, ","); /* port */
 80017cc:	4925      	ldr	r1, [pc, #148]	; (8001864 <ES_WIFI_WaitServerConnection+0x1e0>)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f008 fc2a 	bl	800a028 <strtok>
 80017d4:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 80017d6:	2100      	movs	r1, #0
 80017d8:	6978      	ldr	r0, [r7, #20]
 80017da:	f7ff f9a7 	bl	8000b2c <ParseNumber>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 80017e6:	491f      	ldr	r1, [pc, #124]	; (8001864 <ES_WIFI_WaitServerConnection+0x1e0>)
 80017e8:	2000      	movs	r0, #0
 80017ea:	f008 fc1d 	bl	800a028 <strtok>
 80017ee:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 80017f0:	491c      	ldr	r1, [pc, #112]	; (8001864 <ES_WIFI_WaitServerConnection+0x1e0>)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f008 fc18 	bl	800a028 <strtok>
 80017f8:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7ff f995 	bl	8000b2c <ParseNumber>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e018      	b.n	8001840 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 800180e:	2302      	movs	r3, #2
 8001810:	e016      	b.n	8001840 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 800181c:	f002 f806 	bl	800382c <HAL_GetTick>
 8001820:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f43f af43 	beq.w	80016b0 <ES_WIFI_WaitServerConnection+0x2c>
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	429a      	cmp	r2, r3
 8001830:	f4ff af3e 	bcc.w	80016b0 <ES_WIFI_WaitServerConnection+0x2c>
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	429a      	cmp	r2, r3
 800183a:	f4ff af39 	bcc.w	80016b0 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 800183e:	2303      	movs	r3, #3
}
 8001840:	4618      	mov	r0, r3
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800b010 	.word	0x0800b010
 800184c:	0800b158 	.word	0x0800b158
 8001850:	0800b160 	.word	0x0800b160
 8001854:	0800b168 	.word	0x0800b168
 8001858:	0800b174 	.word	0x0800b174
 800185c:	0800b184 	.word	0x0800b184
 8001860:	0800b188 	.word	0x0800b188
 8001864:	0800afcc 	.word	0x0800afcc

08001868 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <ES_WIFI_CloseServerConnection+0x70>)
 800187e:	4618      	mov	r0, r3
 8001880:	f008 fa8e 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001890:	461a      	mov	r2, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fb48 	bl	8000f28 <AT_ExecuteCommand>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	e013      	b.n	80018ce <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <ES_WIFI_CloseServerConnection+0x74>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f008 fa76 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018c0:	461a      	mov	r2, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fb30 	bl	8000f28 <AT_ExecuteCommand>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800b0f4 	.word	0x0800b0f4
 80018dc:	0800b198 	.word	0x0800b198

080018e0 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	4918      	ldr	r1, [pc, #96]	; (8001958 <ES_WIFI_StopServerSingleConn+0x78>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f008 fa52 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001908:	461a      	mov	r2, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fb0c 	bl	8000f28 <AT_ExecuteCommand>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <ES_WIFI_StopServerSingleConn+0x3e>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	e018      	b.n	8001950 <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001924:	490d      	ldr	r1, [pc, #52]	; (800195c <ES_WIFI_StopServerSingleConn+0x7c>)
 8001926:	4618      	mov	r0, r3
 8001928:	f008 fa3a 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001938:	461a      	mov	r2, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff faf4 	bl	8000f28 <AT_ExecuteCommand>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	e000      	b.n	8001950 <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	0800b0f4 	.word	0x0800b0f4
 800195c:	0800b1a0 	.word	0x0800b1a0

08001960 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	72fb      	strb	r3, [r7, #11]
 8001970:	4613      	mov	r3, r2
 8001972:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001974:	2302      	movs	r3, #2
 8001976:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e001      	b.n	8001988 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8001988:	893b      	ldrh	r3, [r7, #8]
 800198a:	f241 3287 	movw	r2, #4999	; 0x1387
 800198e:	4293      	cmp	r3, r2
 8001990:	d902      	bls.n	8001998 <ES_WIFI_SendData+0x38>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001992:	f241 3388 	movw	r3, #5000	; 0x1388
 8001996:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	893a      	ldrh	r2, [r7, #8]
 800199c:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019a4:	7afa      	ldrb	r2, [r7, #11]
 80019a6:	492d      	ldr	r1, [pc, #180]	; (8001a5c <ES_WIFI_SendData+0xfc>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 f9f9 	bl	8009da0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ba:	461a      	mov	r2, r3
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fab3 	bl	8000f28 <AT_ExecuteCommand>
 80019c2:	4603      	mov	r3, r0
 80019c4:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d13c      	bne.n	8001a46 <ES_WIFI_SendData+0xe6>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4922      	ldr	r1, [pc, #136]	; (8001a60 <ES_WIFI_SendData+0x100>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f008 f9e2 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019e8:	461a      	mov	r2, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fa9c 	bl	8000f28 <AT_ExecuteCommand>
 80019f0:	4603      	mov	r3, r0
 80019f2:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d125      	bne.n	8001a46 <ES_WIFI_SendData+0xe6>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	4918      	ldr	r1, [pc, #96]	; (8001a64 <ES_WIFI_SendData+0x104>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f008 f9cb 	bl	8009da0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a16:	893a      	ldrh	r2, [r7, #8]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff faf2 	bl	8001008 <AT_RequestSendData>
 8001a24:	4603      	mov	r3, r0
 8001a26:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8001a28:	7cfb      	ldrb	r3, [r7, #19]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <ES_WIFI_SendData+0xe6>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <ES_WIFI_SendData+0x108>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f008 fb52 	bl	800a0e0 <strstr>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <ES_WIFI_SendData+0xe6>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8001a42:	2302      	movs	r3, #2
 8001a44:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d102      	bne.n	8001a52 <ES_WIFI_SendData+0xf2>
  {
    *SentLen = 0;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8001a52:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0800b0f4 	.word	0x0800b0f4
 8001a60:	0800b1d0 	.word	0x0800b1d0
 8001a64:	0800b1d8 	.word	0x0800b1d8
 8001a68:	0800b1e4 	.word	0x0800b1e4

08001a6c <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	72fb      	strb	r3, [r7, #11]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001a80:	2302      	movs	r3, #2
 8001a82:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e001      	b.n	8001a94 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001a94:	893b      	ldrh	r3, [r7, #8]
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d862      	bhi.n	8001b64 <ES_WIFI_ReceiveData+0xf8>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa4:	7afa      	ldrb	r2, [r7, #11]
 8001aa6:	4932      	ldr	r1, [pc, #200]	; (8001b70 <ES_WIFI_ReceiveData+0x104>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f008 f979 	bl	8009da0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aba:	461a      	mov	r2, r3
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7ff fa33 	bl	8000f28 <AT_ExecuteCommand>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d146      	bne.n	8001b5a <ES_WIFI_ReceiveData+0xee>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ad2:	893a      	ldrh	r2, [r7, #8]
 8001ad4:	4927      	ldr	r1, [pc, #156]	; (8001b74 <ES_WIFI_ReceiveData+0x108>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f008 f962 	bl	8009da0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fa1c 	bl	8000f28 <AT_ExecuteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12b      	bne.n	8001b52 <ES_WIFI_ReceiveData+0xe6>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	491d      	ldr	r1, [pc, #116]	; (8001b78 <ES_WIFI_ReceiveData+0x10c>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 f94b 	bl	8009da0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b16:	461a      	mov	r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fa05 	bl	8000f28 <AT_ExecuteCommand>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8001b22:	7cfb      	ldrb	r3, [r7, #19]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11d      	bne.n	8001b64 <ES_WIFI_ReceiveData+0xf8>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b2e:	4913      	ldr	r1, [pc, #76]	; (8001b7c <ES_WIFI_ReceiveData+0x110>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f008 f935 	bl	8009da0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b3c:	893a      	ldrh	r2, [r7, #8]
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4613      	mov	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fade 	bl	8001108 <AT_RequestReceiveData>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	74fb      	strb	r3, [r7, #19]
 8001b50:	e008      	b.n	8001b64 <ES_WIFI_ReceiveData+0xf8>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	2200      	movs	r2, #0
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e004      	b.n	8001b64 <ES_WIFI_ReceiveData+0xf8>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <ES_WIFI_ReceiveData+0x114>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <ES_WIFI_ReceiveData+0x114>)
 8001b62:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001b64:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	0800b0f4 	.word	0x0800b0f4
 8001b74:	0800b1ec 	.word	0x0800b1ec
 8001b78:	0800b1f4 	.word	0x0800b1f4
 8001b7c:	0800b1fc 	.word	0x0800b1fc
 8001b80:	200000c4 	.word	0x200000c4

08001b84 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	4a56      	ldr	r2, [pc, #344]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b96:	6593      	str	r3, [r2, #88]	; 0x58
 8001b98:	4b54      	ldr	r3, [pc, #336]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b51      	ldr	r3, [pc, #324]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc8:	4b48      	ldr	r3, [pc, #288]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a44      	ldr	r2, [pc, #272]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <SPI_WIFI_MspInit+0x168>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf2:	483f      	ldr	r0, [pc, #252]	; (8001cf0 <SPI_WIFI_MspInit+0x16c>)
 8001bf4:	f002 f964 	bl	8003ec0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4837      	ldr	r0, [pc, #220]	; (8001cf0 <SPI_WIFI_MspInit+0x16c>)
 8001c12:	f001 ffab 	bl	8003b6c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4831      	ldr	r0, [pc, #196]	; (8001cf4 <SPI_WIFI_MspInit+0x170>)
 8001c30:	f001 ff9c 	bl	8003b6c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4828      	ldr	r0, [pc, #160]	; (8001cf4 <SPI_WIFI_MspInit+0x170>)
 8001c52:	f001 ff8b 	bl	8003b6c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001c56:	2201      	movs	r2, #1
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4826      	ldr	r0, [pc, #152]	; (8001cf4 <SPI_WIFI_MspInit+0x170>)
 8001c5c:	f002 f930 	bl	8003ec0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <SPI_WIFI_MspInit+0x170>)
 8001c78:	f001 ff78 	bl	8003b6c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4817      	ldr	r0, [pc, #92]	; (8001cf8 <SPI_WIFI_MspInit+0x174>)
 8001c9a:	f001 ff67 	bl	8003b6c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <SPI_WIFI_MspInit+0x174>)
 8001cbc:	f001 ff56 	bl	8003b6c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <SPI_WIFI_MspInit+0x174>)
 8001cde:	f001 ff45 	bl	8003b6c <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3730      	adds	r7, #48	; 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48001000 	.word	0x48001000
 8001cf8:	48000800 	.word	0x48000800

08001cfc <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d145      	bne.n	8001d9c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <SPI_WIFI_Init+0xb8>)
 8001d14:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001d16:	4826      	ldr	r0, [pc, #152]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d18:	f7ff ff34 	bl	8001b84 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d1e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d22:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d2c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001d30:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d44:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d48:	2210      	movs	r2, #16
 8001d4a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d64:	4812      	ldr	r0, [pc, #72]	; (8001db0 <SPI_WIFI_Init+0xb4>)
 8001d66:	f003 fde3 	bl	8005930 <HAL_SPI_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e018      	b.n	8001da8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f001 fe61 	bl	8003a42 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001d80:	2007      	movs	r0, #7
 8001d82:	f001 fe7a 	bl	8003a7a <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2033      	movs	r0, #51	; 0x33
 8001d8c:	f001 fe59 	bl	8003a42 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001d90:	2033      	movs	r0, #51	; 0x33
 8001d92:	f001 fe72 	bl	8003a7a <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f000 f9fe 	bl	8002198 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001d9c:	f000 f80c 	bl	8001db8 <SPI_WIFI_ResetModule>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200000c8 	.word	0x200000c8
 8001db4:	40003c00 	.word	0x40003c00

08001db8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001dbe:	f001 fd35 	bl	800382c <HAL_GetTick>
 8001dc2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dce:	4830      	ldr	r0, [pc, #192]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001dd0:	f002 f876 	bl	8003ec0 <HAL_GPIO_WritePin>
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f001 fd35 	bl	8003844 <HAL_Delay>
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de0:	482b      	ldr	r0, [pc, #172]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001de2:	f002 f86d 	bl	8003ec0 <HAL_GPIO_WritePin>
 8001de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dea:	f001 fd2b 	bl	8003844 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001dee:	2200      	movs	r2, #0
 8001df0:	2101      	movs	r1, #1
 8001df2:	4827      	ldr	r0, [pc, #156]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001df4:	f002 f864 	bl	8003ec0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f000 f9cd 	bl	8002198 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001dfe:	e020      	b.n	8001e42 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	463a      	mov	r2, r7
 8001e04:	18d1      	adds	r1, r2, r3
 8001e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4821      	ldr	r0, [pc, #132]	; (8001e94 <SPI_WIFI_ResetModule+0xdc>)
 8001e0e:	f003 fe97 	bl	8005b40 <HAL_SPI_Receive>
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001e1c:	f001 fd06 	bl	800382c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2a:	d202      	bcs.n	8001e32 <SPI_WIFI_ResetModule+0x7a>
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001e32:	2201      	movs	r2, #1
 8001e34:	2101      	movs	r1, #1
 8001e36:	4816      	ldr	r0, [pc, #88]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001e38:	f002 f842 	bl	8003ec0 <HAL_GPIO_WritePin>
      return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	e021      	b.n	8001e86 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e42:	2102      	movs	r1, #2
 8001e44:	4812      	ldr	r0, [pc, #72]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001e46:	f002 f823 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d0d7      	beq.n	8001e00 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001e50:	2201      	movs	r2, #1
 8001e52:	2101      	movs	r1, #1
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <SPI_WIFI_ResetModule+0xd8>)
 8001e56:	f002 f833 	bl	8003ec0 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e5a:	783b      	ldrb	r3, [r7, #0]
 8001e5c:	2b15      	cmp	r3, #21
 8001e5e:	d10e      	bne.n	8001e7e <SPI_WIFI_ResetModule+0xc6>
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b15      	cmp	r3, #21
 8001e64:	d10b      	bne.n	8001e7e <SPI_WIFI_ResetModule+0xc6>
 8001e66:	78bb      	ldrb	r3, [r7, #2]
 8001e68:	2b0d      	cmp	r3, #13
 8001e6a:	d108      	bne.n	8001e7e <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	d105      	bne.n	8001e7e <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001e72:	793b      	ldrb	r3, [r7, #4]
 8001e74:	2b3e      	cmp	r3, #62	; 0x3e
 8001e76:	d102      	bne.n	8001e7e <SPI_WIFI_ResetModule+0xc6>
 8001e78:	797b      	ldrb	r3, [r7, #5]
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d002      	beq.n	8001e84 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e000      	b.n	8001e86 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	48001000 	.word	0x48001000
 8001e94:	200000c8 	.word	0x200000c8

08001e98 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <SPI_WIFI_DeInit+0x10>)
 8001e9e:	f003 fe13 	bl	8005ac8 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000c8 	.word	0x200000c8

08001eac <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001eb4:	f001 fcba 	bl	800382c <HAL_GetTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001ebc:	e00a      	b.n	8001ed4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ebe:	f001 fcb5 	bl	800382c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d902      	bls.n	8001ed4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e007      	b.n	8001ee4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <wait_cmddata_rdy_high+0x40>)
 8001ed8:	f001 ffda 	bl	8003e90 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d1ed      	bne.n	8001ebe <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	48001000 	.word	0x48001000

08001ef0 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ef8:	f001 fc98 	bl	800382c <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001f00:	e00a      	b.n	8001f18 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f02:	f001 fc93 	bl	800382c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d902      	bls.n	8001f18 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e004      	b.n	8001f22 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <wait_cmddata_rdy_rising_event+0x3c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d0f0      	beq.n	8001f02 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001f20:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000134 	.word	0x20000134

08001f30 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f38:	f001 fc78 	bl	800382c <HAL_GetTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001f40:	e00a      	b.n	8001f58 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f42:	f001 fc73 	bl	800382c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad2      	subs	r2, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d902      	bls.n	8001f58 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e004      	b.n	8001f62 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <wait_spi_rx_event+0x3c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d0f0      	beq.n	8001f42 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001f60:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000012c 	.word	0x2000012c

08001f70 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f78:	f001 fc58 	bl	800382c <HAL_GetTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001f80:	e00a      	b.n	8001f98 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f82:	f001 fc53 	bl	800382c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d902      	bls.n	8001f98 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e004      	b.n	8001fa2 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <wait_spi_tx_event+0x3c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d0f0      	beq.n	8001f82 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001fa0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000130 	.word	0x20000130

08001fb0 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4834      	ldr	r0, [pc, #208]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8001fc8:	f001 ff7a 	bl	8003ec0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f8e3 	bl	8002198 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff8b 	bl	8001ef0 <wait_cmddata_rdy_rising_event>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da02      	bge.n	8001fe6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001fe0:	f06f 0302 	mvn.w	r3, #2
 8001fe4:	e054      	b.n	8002090 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2101      	movs	r1, #1
 8001fea:	482b      	ldr	r0, [pc, #172]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8001fec:	f001 ff68 	bl	8003ec0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001ff0:	200f      	movs	r0, #15
 8001ff2:	f000 f8d1 	bl	8002198 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ff6:	e03d      	b.n	8002074 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	db02      	blt.n	8002008 <SPI_WIFI_ReceiveData+0x58>
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d13c      	bne.n	8002082 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <SPI_WIFI_ReceiveData+0xec>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2201      	movs	r2, #1
 8002014:	4619      	mov	r1, r3
 8002016:	4822      	ldr	r0, [pc, #136]	; (80020a0 <SPI_WIFI_ReceiveData+0xf0>)
 8002018:	f004 fb60 	bl	80066dc <HAL_SPI_Receive_IT>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002022:	2201      	movs	r2, #1
 8002024:	2101      	movs	r1, #1
 8002026:	481c      	ldr	r0, [pc, #112]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8002028:	f001 ff4a 	bl	8003ec0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	e02e      	b.n	8002090 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff7b 	bl	8001f30 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800203a:	7d3a      	ldrb	r2, [r7, #20]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	7d7a      	ldrb	r2, [r7, #21]
 8002046:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002048:	8afb      	ldrh	r3, [r7, #22]
 800204a:	3302      	adds	r3, #2
 800204c:	b29b      	uxth	r3, r3
 800204e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3302      	adds	r3, #2
 8002054:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8002056:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800205a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800205e:	db09      	blt.n	8002074 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002060:	2201      	movs	r2, #1
 8002062:	2101      	movs	r1, #1
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8002066:	f001 ff2b 	bl	8003ec0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800206a:	f7ff fea5 	bl	8001db8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800206e:	f06f 0303 	mvn.w	r3, #3
 8002072:	e00d      	b.n	8002090 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002074:	2102      	movs	r1, #2
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8002078:	f001 ff0a 	bl	8003e90 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d0ba      	beq.n	8001ff8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002082:	2201      	movs	r2, #1
 8002084:	2101      	movs	r1, #1
 8002086:	4804      	ldr	r0, [pc, #16]	; (8002098 <SPI_WIFI_ReceiveData+0xe8>)
 8002088:	f001 ff1a 	bl	8003ec0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800208c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	48001000 	.word	0x48001000
 800209c:	2000012c 	.word	0x2000012c
 80020a0:	200000c8 	.word	0x200000c8

080020a4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	460b      	mov	r3, r1
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fef9 	bl	8001eac <wait_cmddata_rdy_high>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da02      	bge.n	80020c6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	e04f      	b.n	8002166 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <SPI_WIFI_SendData+0xcc>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80020cc:	2200      	movs	r2, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	4828      	ldr	r0, [pc, #160]	; (8002174 <SPI_WIFI_SendData+0xd0>)
 80020d2:	f001 fef5 	bl	8003ec0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f000 f85e 	bl	8002198 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020dc:	897b      	ldrh	r3, [r7, #10]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d919      	bls.n	8002116 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <SPI_WIFI_SendData+0xd4>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4822      	ldr	r0, [pc, #136]	; (800217c <SPI_WIFI_SendData+0xd8>)
 80020f4:	f004 fa52 	bl	800659c <HAL_SPI_Transmit_IT>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80020fe:	2201      	movs	r2, #1
 8002100:	2101      	movs	r1, #1
 8002102:	481c      	ldr	r0, [pc, #112]	; (8002174 <SPI_WIFI_SendData+0xd0>)
 8002104:	f001 fedc 	bl	8003ec0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	e02b      	b.n	8002166 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff2d 	bl	8001f70 <wait_spi_tx_event>
  }

  if (len & 1)
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002120:	897b      	ldrh	r3, [r7, #10]
 8002122:	3b01      	subs	r3, #1
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800212c:	230a      	movs	r3, #10
 800212e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <SPI_WIFI_SendData+0xd4>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	2201      	movs	r2, #1
 800213c:	4619      	mov	r1, r3
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <SPI_WIFI_SendData+0xd8>)
 8002140:	f004 fa2c 	bl	800659c <HAL_SPI_Transmit_IT>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800214a:	2201      	movs	r2, #1
 800214c:	2101      	movs	r1, #1
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <SPI_WIFI_SendData+0xd0>)
 8002150:	f001 feb6 	bl	8003ec0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	e005      	b.n	8002166 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff07 	bl	8001f70 <wait_spi_tx_event>
  }
  return len;
 8002162:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000134 	.word	0x20000134
 8002174:	48001000 	.word	0x48001000
 8002178:	20000130 	.word	0x20000130
 800217c:	200000c8 	.word	0x200000c8

08002180 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f001 fb5b 	bl	8003844 <HAL_Delay>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <SPI_WIFI_DelayUs+0x94>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d122      	bne.n	80021f6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <SPI_WIFI_DelayUs+0x98>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <SPI_WIFI_DelayUs+0x9c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	099b      	lsrs	r3, r3, #6
 80021bc:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80021c6:	f001 fb31 	bl	800382c <HAL_GetTick>
 80021ca:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80021cc:	e002      	b.n	80021d4 <SPI_WIFI_DelayUs+0x3c>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 80021da:	f001 fb27 	bl	800382c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <SPI_WIFI_DelayUs+0x94>)
 80021e6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <SPI_WIFI_DelayUs+0x94>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <SPI_WIFI_DelayUs+0x5e>
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <SPI_WIFI_DelayUs+0x94>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <SPI_WIFI_DelayUs+0x98>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <SPI_WIFI_DelayUs+0xa0>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9a      	lsrs	r2, r3, #18
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <SPI_WIFI_DelayUs+0x94>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002216:	e002      	b.n	800221e <SPI_WIFI_DelayUs+0x86>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3b01      	subs	r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <SPI_WIFI_DelayUs+0x80>
  return;
 8002224:	bf00      	nop
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000138 	.word	0x20000138
 8002230:	2000003c 	.word	0x2000003c
 8002234:	10624dd3 	.word	0x10624dd3
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_SPI_RxCpltCallback+0x24>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_SPI_RxCpltCallback+0x24>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000012c 	.word	0x2000012c

08002264 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_SPI_TxCpltCallback+0x24>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_SPI_TxCpltCallback+0x24>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000130 	.word	0x20000130

0800228c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SPI_WIFI_ISR+0x1c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <SPI_WIFI_ISR+0x1c>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
   }
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	20000134 	.word	0x20000134

080022ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80022bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <vApplicationGetIdleTaskMemory+0x30>)
 80022c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	2000013c 	.word	0x2000013c
 80022dc:	20000190 	.word	0x20000190

080022e0 <inject>:
#include <stdio.h>


const char html[] = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>Document</title><meta http-equiv=\"refresh\" content=\"10\"></head><body><h1>Smart Home System - Online</h1><div class=\"card\"><div class=\"title\"><h2>Alarm</h2><label class=\"switch\"><input type=\"checkbox\" id=\"alarm-checkbox\"                 > <span class=\"slider round\"></span></label></div><div id=\"status-nothing\" class=\"alarm                  \">Nothing to report</div><div id=\"status-intruder\" class=\"alarm intruder              \">INTRUDER DETECTED!</div></div><div class=\"card\"><div class=\"title\"><h2>Sensors</h2></div><div class=\"sensors\"><div class=\"sensor\"><div class=\"thermometer\"><div class=\"stem\"><div class=\"stem-perct\"></div></div><div class=\"bulb\"></div></div><div class=\"sens-value\">                   </div></div><div class=\"sensor\"><div class=\"humsensor\"><div class=\"droplet\"></div></div><div class=\"sens-value\">                      </div></div><div class=\"sensor barsensor\"><div class=\"barometer\"></div><div class=\"sens-value\">                   </div></div></div></div></body></html><style>*,::after,::before{box-sizing:border-box}html{--background-color:#303030;--color-accent-extra-light:#437e56;--color-accent-light:#2a4e36;background-color:var(--background-color);color:#fff;font-family:sans-serif}h2{margin:0}.card{max-width:30rem;padding:1.5rem;background-color:var(--color-accent-extra-light);border-radius:1rem;margin-bottom:2rem}.title{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem}.switch{position:relative;display:inline-block;--switch-height:1.5rem;--switch-width:3rem;width:var(--switch-width);height:var(--switch-height)}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:\"\";height:calc(var(--switch-height) - .2rem);width:calc(var(--switch-height) - .2rem);left:.09rem;bottom:.11rem;background-color:#fff;-webkit-transition:.4s;transition:.4s}.alarm{display:none}.alarm.active{display:block}.alarm.intruder{font-weight:700;color:#8b0000}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider:before{-webkit-transform:translateX(calc(var(--switch-width) - var(--switch-height)));-ms-transform:translateX(calc(var(--switch-width) - var(--switch-height)));transform:translateX(calc(var(--switch-width) - var(--switch-height)))}.slider.round{border-radius:calc(var(--switch-height)/ 2)}.slider.round:before{border-radius:50%}.thermometer{display:block;position:relative;height:100px;width:30px;flex-shrink:0}.bulb{display:inline-block;border:2px solid #222;width:25px;height:25px;border-radius:50%;position:absolute;left:0;bottom:0;box-shadow:0 0 0 2px #fff inset;background:red}.stem{display:inline-block;border:2px solid #222;width:14px;height:80px;border-radius:0 0 20px 20px;border-top:2px solid transparent;position:absolute;bottom:20.5px;left:5px;box-shadow:0 0 0 2px #fff inset;transform:rotate(180deg);z-index:10;padding-bottom:3px}.stem-perct{height:calc(30% + 6px);width:6px;background:red;display:block;margin:0 auto;border-radius:10px;transform:translateY(-5px)}.humsensor{display:flex}.droplet{position:relative;width:3rem;height:3rem;background-color:transparent;overflow:hidden;border:solid #fff 3px;border-radius:0 50% 50% 50%;transform:rotateZ(45deg);display:flex;align-items:center;justify-content:center}.droplet::after{content:\"\";position:absolute;bottom:-.5rem;left:-3rem;right:-3rem;height:50%;background-color:#2196f3;transform:rotateZ(-45deg) translateX(10px)}.barsensor{width:100%!important}.barometer{position:relative;width:3rem;height:3rem;border:solid #222 3px;border-radius:100%}.barometer::after{content:\"\";position:absolute;left:50%;right:50%;bottom:50%;top:.3rem;border:solid #222;border-width:0 3px 0 0}.sensors{display:flex;flex-wrap:wrap;gap:1rem}.sensor{background-color:rgba(0,0,0,.1);border-radius:1rem;width:calc(50% - .5rem);padding:1rem;justify-content:center;display:flex;align-items:center}.sens-value{font-size:2rem;margin-left:1rem}</style><script>document.getElementById(\"alarm-checkbox\").addEventListener('change', (event) => { if (event.currentTarget.checked) { document.getElementById(\"status-nothing\").classList.add(\"active\"); fetch(\"/?radio=1\", { method: \"POST\" }); } else { document.getElementById(\"status-nothing\").classList.remove(\"active\"); document.getElementById(\"status-intruder\").classList.remove(\"active\"); fetch('/?radio=0', { method: \"POST\" }); } });</script>";

char* inject(int alarmEnabled, int intruderDetected, int temp, int pres, int humd){
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
    char* injected = malloc(sizeof(char) * strlen(html));
 80022ee:	f241 201e 	movw	r0, #4638	; 0x121e
 80022f2:	f007 fb69 	bl	80099c8 <malloc>
 80022f6:	4603      	mov	r3, r0
 80022f8:	61fb      	str	r3, [r7, #28]
    strcpy(injected, html);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <inject+0x108>)
 80022fe:	4618      	mov	r0, r3
 8002300:	4611      	mov	r1, r2
 8002302:	f241 231f 	movw	r3, #4639	; 0x121f
 8002306:	461a      	mov	r2, r3
 8002308:	f007 ff83 	bl	800a212 <memcpy>

    strncpy(&injected[353], alarmEnabled ? "checked" : "       ", 7);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f203 1061 	addw	r0, r3, #353	; 0x161
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <inject+0x3c>
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <inject+0x10c>)
 800231a:	e000      	b.n	800231e <inject+0x3e>
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <inject+0x110>)
 800231e:	2207      	movs	r2, #7
 8002320:	4619      	mov	r1, r3
 8002322:	f007 fe6e 	bl	800a002 <strncpy>

    if(alarmEnabled){
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <inject+0x74>
    	if(intruderDetected){
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <inject+0x64>
    		strncpy(&injected[547], "active", 6);
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f203 2323 	addw	r3, r3, #547	; 0x223
 8002338:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <inject+0x114>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6018      	str	r0, [r3, #0]
 800233e:	8892      	ldrh	r2, [r2, #4]
 8002340:	809a      	strh	r2, [r3, #4]
 8002342:	e007      	b.n	8002354 <inject+0x74>
    	} else {
    		strncpy(&injected[457], "active", 6);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f203 13c9 	addw	r3, r3, #457	; 0x1c9
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <inject+0x114>)
 800234c:	6810      	ldr	r0, [r2, #0]
 800234e:	6018      	str	r0, [r3, #0]
 8002350:	8892      	ldrh	r2, [r2, #4]
 8002352:	809a      	strh	r2, [r3, #4]
    	}
    }

    char* tempStr = calloc(1, sizeof(char) * 8);
 8002354:	2108      	movs	r1, #8
 8002356:	2001      	movs	r0, #1
 8002358:	f007 fb18 	bl	800998c <calloc>
 800235c:	4603      	mov	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]
    sprintf(tempStr, "%d&deg;C", temp);
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4925      	ldr	r1, [pc, #148]	; (80023f8 <inject+0x118>)
 8002364:	69b8      	ldr	r0, [r7, #24]
 8002366:	f007 fd1b 	bl	8009da0 <siprintf>
    strncpy(&injected[825], tempStr, strlen(tempStr));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f203 3439 	addw	r4, r3, #825	; 0x339
 8002370:	69b8      	ldr	r0, [r7, #24]
 8002372:	f7fd ff45 	bl	8000200 <strlen>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	4620      	mov	r0, r4
 800237e:	f007 fe40 	bl	800a002 <strncpy>

    char* humdStr = calloc(1, sizeof(char) * 8);
 8002382:	2108      	movs	r1, #8
 8002384:	2001      	movs	r0, #1
 8002386:	f007 fb01 	bl	800998c <calloc>
 800238a:	4603      	mov	r3, r0
 800238c:	617b      	str	r3, [r7, #20]
    sprintf(humdStr, "%d%%", humd);
 800238e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <inject+0x11c>)
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f007 fd04 	bl	8009da0 <siprintf>
    strncpy(&injected[956], humdStr, strlen(humdStr));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7fd ff2e 	bl	8000200 <strlen>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	4620      	mov	r0, r4
 80023ac:	f007 fe29 	bl	800a002 <strncpy>

    char* presStr = calloc(1, sizeof(char) * 8);
 80023b0:	2108      	movs	r1, #8
 80023b2:	2001      	movs	r0, #1
 80023b4:	f007 faea 	bl	800998c <calloc>
 80023b8:	4603      	mov	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
    sprintf(presStr, "%dhPa", pres);
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4910      	ldr	r1, [pc, #64]	; (8002400 <inject+0x120>)
 80023c0:	6938      	ldr	r0, [r7, #16]
 80023c2:	f007 fced 	bl	8009da0 <siprintf>
    strncpy(&injected[1073], presStr, strlen(presStr));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f203 4431 	addw	r4, r3, #1073	; 0x431
 80023cc:	6938      	ldr	r0, [r7, #16]
 80023ce:	f7fd ff17 	bl	8000200 <strlen>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	4620      	mov	r0, r4
 80023da:	f007 fe12 	bl	800a002 <strncpy>

    return injected;
 80023de:	69fb      	ldr	r3, [r7, #28]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	0800b6d4 	.word	0x0800b6d4
 80023ec:	0800b23c 	.word	0x0800b23c
 80023f0:	0800b244 	.word	0x0800b244
 80023f4:	0800b24c 	.word	0x0800b24c
 80023f8:	0800b254 	.word	0x0800b254
 80023fc:	0800b260 	.word	0x0800b260
 8002400:	0800b268 	.word	0x0800b268

08002404 <StartTaskWifi>:
osThreadId taskSensorsHandle;

uint8_t alarmEnabled = 0;
uint8_t intruderDetected = 0;

void StartTaskWifi(void const * argument){
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	wifi_server();
 800240c:	f000 f932 	bl	8002674 <wifi_server>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <StartTaskSensors>:

void StartTaskSensors(void const * argument){
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	for(;;){
		osDelay(100);
 8002420:	2064      	movs	r0, #100	; 0x64
 8002422:	f006 f8b1 	bl	8008588 <osDelay>
 8002426:	e7fb      	b.n	8002420 <StartTaskSensors+0x8>

08002428 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242e:	f001 f98e 	bl	800374e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002432:	f000 fb2b 	bl	8002a8c <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 fbbc 	bl	8002bb4 <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800243c:	2101      	movs	r1, #1
 800243e:	2000      	movs	r0, #0
 8002440:	f000 fc14 	bl	8002c6c <BSP_PB_Init>

  BSP_TSENSOR_Init();
 8002444:	f000 fe80 	bl	8003148 <BSP_TSENSOR_Init>
  BSP_PSENSOR_Init();
 8002448:	f000 fe50 	bl	80030ec <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 800244c:	f000 fe20 	bl	8003090 <BSP_HSENSOR_Init>


  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <main+0xcc>)
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <main+0xd0>)
 8002454:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <main+0xcc>)
 8002458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800245c:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <main+0xcc>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <main+0xcc>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <main+0xcc>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <main+0xcc>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <main+0xcc>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <main+0xcc>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <main+0xcc>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <main+0xcc>)
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 800248e:	4919      	ldr	r1, [pc, #100]	; (80024f4 <main+0xcc>)
 8002490:	2000      	movs	r0, #0
 8002492:	f000 fc41 	bl	8002d18 <BSP_COM_Init>

  printf("\n****** WIFI Web Server demonstration ******\n\r");
 8002496:	4819      	ldr	r0, [pc, #100]	; (80024fc <main+0xd4>)
 8002498:	f007 fc0c 	bl	8009cb4 <iprintf>

#endif /* TERMINAL_USE */

	osThreadDef(taskSensors, StartTaskSensors, osPriorityNormal, 0, 512);
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <main+0xd8>)
 800249e:	f107 041c 	add.w	r4, r7, #28
 80024a2:	461d      	mov	r5, r3
 80024a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskSensorsHandle = osThreadCreate(osThread(taskSensors), NULL);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f006 f81a 	bl	80084f0 <osThreadCreate>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <main+0xdc>)
 80024c0:	6013      	str	r3, [r2, #0]

	osThreadDef(taskWifi, StartTaskWifi, osPriorityNormal, 0, 512);
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <main+0xe0>)
 80024c4:	463c      	mov	r4, r7
 80024c6:	461d      	mov	r5, r3
 80024c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskWifiHandle = osThreadCreate(osThread(taskWifi), NULL);
 80024d4:	463b      	mov	r3, r7
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f006 f809 	bl	80084f0 <osThreadCreate>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <main+0xe4>)
 80024e2:	6013      	str	r3, [r2, #0]

	osKernelStart();
 80024e4:	f005 fffd 	bl	80084e2 <osKernelStart>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3738      	adds	r7, #56	; 0x38
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bdb0      	pop	{r4, r5, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20001e5c 	.word	0x20001e5c
 80024f8:	40013800 	.word	0x40013800
 80024fc:	0800b270 	.word	0x0800b270
 8002500:	0800b2ac 	.word	0x0800b2ac
 8002504:	20001a00 	.word	0x20001a00
 8002508:	0800b2d4 	.word	0x0800b2d4
 800250c:	200019fc 	.word	0x200019fc

08002510 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8002516:	f000 ff73 	bl	8003400 <WIFI_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d124      	bne.n	800256a <wifi_start+0x5a>
  {
    printf("eS-WiFi Initialized.\n\r");
 8002520:	4815      	ldr	r0, [pc, #84]	; (8002578 <wifi_start+0x68>)
 8002522:	f007 fbc7 	bl	8009cb4 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8002526:	463b      	mov	r3, r7
 8002528:	2106      	movs	r1, #6
 800252a:	4618      	mov	r0, r3
 800252c:	f000 ffb6 	bl	800349c <WIFI_GetMAC_Address>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <wifi_start+0x4e>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8002536:	783b      	ldrb	r3, [r7, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	787b      	ldrb	r3, [r7, #1]
 800253c:	461c      	mov	r4, r3
 800253e:	78bb      	ldrb	r3, [r7, #2]
 8002540:	461d      	mov	r5, r3
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	793a      	ldrb	r2, [r7, #4]
 8002546:	7979      	ldrb	r1, [r7, #5]
 8002548:	9102      	str	r1, [sp, #8]
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	462b      	mov	r3, r5
 8002550:	4622      	mov	r2, r4
 8002552:	4601      	mov	r1, r0
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <wifi_start+0x6c>)
 8002556:	f007 fbad 	bl	8009cb4 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 800255a:	2300      	movs	r3, #0
 800255c:	e007      	b.n	800256e <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n\r"));
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <wifi_start+0x70>)
 8002560:	f007 fba8 	bl	8009cb4 <iprintf>
      return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	e001      	b.n	800256e <wifi_start+0x5e>
    return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bdb0      	pop	{r4, r5, r7, pc}
 8002576:	bf00      	nop
 8002578:	0800b2f0 	.word	0x0800b2f0
 800257c:	0800b308 	.word	0x0800b308
 8002580:	0800b348 	.word	0x0800b348
 8002584:	00000000 	.word	0x00000000

08002588 <wifi_connect>:



int wifi_connect(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
  wifi_start();
 800258e:	f7ff ffbf 	bl	8002510 <wifi_start>

  memset(&user_config, 0, sizeof(user_config));
 8002592:	22d8      	movs	r2, #216	; 0xd8
 8002594:	2100      	movs	r1, #0
 8002596:	482c      	ldr	r0, [pc, #176]	; (8002648 <wifi_connect+0xc0>)
 8002598:	f007 fd0a 	bl	8009fb0 <memset>

//  Set wifi config
  printf("Configuring SSID and password.\n\r");
 800259c:	482b      	ldr	r0, [pc, #172]	; (800264c <wifi_connect+0xc4>)
 800259e:	f007 fb89 	bl	8009cb4 <iprintf>
  strcpy(user_config.wifi_config.ssid, "Philippe");
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <wifi_connect+0xc8>)
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <wifi_connect+0xcc>)
 80025a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a8:	c303      	stmia	r3!, {r0, r1}
 80025aa:	701a      	strb	r2, [r3, #0]
  char c = '3';
 80025ac:	2333      	movs	r3, #51	; 0x33
 80025ae:	71fb      	strb	r3, [r7, #7]
  user_config.wifi_config.security = c - '0';
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	3b30      	subs	r3, #48	; 0x30
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <wifi_connect+0xc0>)
 80025b8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  strcpy(user_config.wifi_config.password, "hahahaha");
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <wifi_connect+0xd0>)
 80025be:	4a27      	ldr	r2, [pc, #156]	; (800265c <wifi_connect+0xd4>)
 80025c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c2:	c303      	stmia	r3!, {r0, r1}
 80025c4:	701a      	strb	r2, [r3, #0]
  user_config.wifi_config_magic = USER_CONF_MAGIC;
 80025c6:	4920      	ldr	r1, [pc, #128]	; (8002648 <wifi_connect+0xc0>)
 80025c8:	a31d      	add	r3, pc, #116	; (adr r3, 8002640 <wifi_connect+0xb8>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	e9c1 2300 	strd	r2, r3, [r1]
// Try to connect to wifi
  printf("Connecting to %s\n\r", user_config.wifi_config.ssid);
 80025d2:	491f      	ldr	r1, [pc, #124]	; (8002650 <wifi_connect+0xc8>)
 80025d4:	4822      	ldr	r0, [pc, #136]	; (8002660 <wifi_connect+0xd8>)
 80025d6:	f007 fb6d 	bl	8009cb4 <iprintf>
  WIFI_Ecn_t security =  WIFI_ECN_WPA2_PSK;
 80025da:	2303      	movs	r3, #3
 80025dc:	71bb      	strb	r3, [r7, #6]

  if (WIFI_Connect(user_config.wifi_config.ssid, user_config.wifi_config.password, security) == WIFI_STATUS_OK)
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	461a      	mov	r2, r3
 80025e2:	491d      	ldr	r1, [pc, #116]	; (8002658 <wifi_connect+0xd0>)
 80025e4:	481a      	ldr	r0, [pc, #104]	; (8002650 <wifi_connect+0xc8>)
 80025e6:	f000 ff37 	bl	8003458 <WIFI_Connect>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11e      	bne.n	800262e <wifi_connect+0xa6>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80025f0:	2104      	movs	r1, #4
 80025f2:	481c      	ldr	r0, [pc, #112]	; (8002664 <wifi_connect+0xdc>)
 80025f4:	f000 ff72 	bl	80034dc <WIFI_GetIP_Address>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d111      	bne.n	8002622 <wifi_connect+0x9a>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n\r",
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <wifi_connect+0xdc>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <wifi_connect+0xdc>)
 8002606:	785b      	ldrb	r3, [r3, #1]
 8002608:	461a      	mov	r2, r3
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <wifi_connect+0xdc>)
 800260c:	789b      	ldrb	r3, [r3, #2]
 800260e:	4618      	mov	r0, r3
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <wifi_connect+0xdc>)
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4603      	mov	r3, r0
 8002618:	4813      	ldr	r0, [pc, #76]	; (8002668 <wifi_connect+0xe0>)
 800261a:	f007 fb4b 	bl	8009cb4 <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
     return -1;
  }
  return 0;
 800261e:	2300      	movs	r3, #0
 8002620:	e00a      	b.n	8002638 <wifi_connect+0xb0>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <wifi_connect+0xe4>)
 8002624:	f007 fb46 	bl	8009cb4 <iprintf>
      return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	e004      	b.n	8002638 <wifi_connect+0xb0>
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
 800262e:	4810      	ldr	r0, [pc, #64]	; (8002670 <wifi_connect+0xe8>)
 8002630:	f007 fb40 	bl	8009cb4 <iprintf>
     return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	89abcdef 	.word	0x89abcdef
 8002644:	01234567 	.word	0x01234567
 8002648:	20000598 	.word	0x20000598
 800264c:	0800b36c 	.word	0x0800b36c
 8002650:	200005a0 	.word	0x200005a0
 8002654:	0800b390 	.word	0x0800b390
 8002658:	20000604 	.word	0x20000604
 800265c:	0800b39c 	.word	0x0800b39c
 8002660:	0800b3a8 	.word	0x0800b3a8
 8002664:	200019f8 	.word	0x200019f8
 8002668:	0800b3bc 	.word	0x0800b3bc
 800266c:	0800b3f8 	.word	0x0800b3f8
 8002670:	0800b428 	.word	0x0800b428

08002674 <wifi_server>:

int wifi_server(void)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af02      	add	r7, sp, #8
  bool StopServer = false;
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n\r"));
 800267e:	4841      	ldr	r0, [pc, #260]	; (8002784 <wifi_server+0x110>)
 8002680:	f007 fb18 	bl	8009cb4 <iprintf>
  if (wifi_connect()!=0) return -1;
 8002684:	f7ff ff80 	bl	8002588 <wifi_connect>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <wifi_server+0x20>
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e073      	b.n	800277c <wifi_server+0x108>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8002694:	2350      	movs	r3, #80	; 0x50
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <wifi_server+0x114>)
 800269a:	2201      	movs	r2, #1
 800269c:	2100      	movs	r1, #0
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 ff40 	bl	8003524 <WIFI_StartServer>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 80026aa:	4838      	ldr	r0, [pc, #224]	; (800278c <wifi_server+0x118>)
 80026ac:	f007 fb70 	bl	8009d90 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <wifi_server+0x11c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <wifi_server+0x11c>)
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <wifi_server+0x11c>)
 80026be:	789b      	ldrb	r3, [r3, #2]
 80026c0:	4618      	mov	r0, r3
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <wifi_server+0x11c>)
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	4832      	ldr	r0, [pc, #200]	; (8002794 <wifi_server+0x120>)
 80026cc:	f007 faf2 	bl	8009cb4 <iprintf>
  {
//	osDelay(100);
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <wifi_server+0x11c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <wifi_server+0x11c>)
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <wifi_server+0x11c>)
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	4618      	mov	r0, r3
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <wifi_server+0x11c>)
 80026e4:	78db      	ldrb	r3, [r3, #3]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4603      	mov	r3, r0
 80026ea:	482b      	ldr	r0, [pc, #172]	; (8002798 <wifi_server+0x124>)
 80026ec:	f007 fae2 	bl	8009cb4 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 80026f0:	e005      	b.n	80026fe <wifi_server+0x8a>
    {
    	osDelay(100);
 80026f2:	2064      	movs	r0, #100	; 0x64
 80026f4:	f005 ff48 	bl	8008588 <osDelay>
        LOG(("."));
 80026f8:	202e      	movs	r0, #46	; 0x2e
 80026fa:	f007 faed 	bl	8009cd8 <putchar>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 80026fe:	f107 0208 	add.w	r2, r7, #8
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2304      	movs	r3, #4
 8002708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800270c:	2000      	movs	r0, #0
 800270e:	f000 ff39 	bl	8003584 <WIFI_WaitServerConnection>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ec      	bne.n	80026f2 <wifi_server+0x7e>
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8002718:	7a3b      	ldrb	r3, [r7, #8]
 800271a:	4619      	mov	r1, r3
 800271c:	7a7b      	ldrb	r3, [r7, #9]
 800271e:	4618      	mov	r0, r3
 8002720:	7abb      	ldrb	r3, [r7, #10]
 8002722:	461c      	mov	r4, r3
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	9201      	str	r2, [sp, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4623      	mov	r3, r4
 800272e:	4602      	mov	r2, r0
 8002730:	481a      	ldr	r0, [pc, #104]	; (800279c <wifi_server+0x128>)
 8002732:	f007 fabf 	bl	8009cb4 <iprintf>

    StopServer = WebServerProcess();
 8002736:	f000 f839 	bl	80027ac <WebServerProcess>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 800273e:	2000      	movs	r0, #0
 8002740:	f000 ff68 	bl	8003614 <WIFI_CloseServerConnection>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <wifi_server+0xe2>
    {
      LOG(("ERROR: failed to close current Server connection\n\r"));
 800274a:	4815      	ldr	r0, [pc, #84]	; (80027a0 <wifi_server+0x12c>)
 800274c:	f007 fab2 	bl	8009cb4 <iprintf>
      return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	e012      	b.n	800277c <wifi_server+0x108>
    }
  }
  while(StopServer == false);
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1b6      	bne.n	80026d0 <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8002762:	2000      	movs	r0, #0
 8002764:	f000 ff6e 	bl	8003644 <WIFI_StopServer>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <wifi_server+0x100>
  {
    LOG(("ERROR: Cannot stop server.\n\r"));
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <wifi_server+0x130>)
 8002770:	f007 faa0 	bl	8009cb4 <iprintf>
  }

  LOG(("Server is stop\n"));
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <wifi_server+0x134>)
 8002776:	f007 fb0b 	bl	8009d90 <puts>
  return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	0800b450 	.word	0x0800b450
 8002788:	0800b46c 	.word	0x0800b46c
 800278c:	0800b470 	.word	0x0800b470
 8002790:	200019f8 	.word	0x200019f8
 8002794:	0800b48c 	.word	0x0800b48c
 8002798:	0800b4dc 	.word	0x0800b4dc
 800279c:	0800b508 	.word	0x0800b508
 80027a0:	0800b52c 	.word	0x0800b52c
 80027a4:	0800b560 	.word	0x0800b560
 80027a8:	0800b580 	.word	0x0800b580

080027ac <WebServerProcess>:


static bool WebServerProcess(void)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint8_t pres;
  uint8_t humd;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80027b6:	f107 030a 	add.w	r3, r7, #10
 80027ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027c4:	496b      	ldr	r1, [pc, #428]	; (8002974 <WebServerProcess+0x1c8>)
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 ff76 	bl	80036b8 <WIFI_ReceiveData>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 80c8 	bne.w	8002964 <WebServerProcess+0x1b8>
  {
   LOG(("get %d byte from server\n\r",respLen));
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4867      	ldr	r0, [pc, #412]	; (8002978 <WebServerProcess+0x1cc>)
 80027da:	f007 fa6b 	bl	8009cb4 <iprintf>

   if( respLen > 0)
 80027de:	897b      	ldrh	r3, [r7, #10]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80c2 	beq.w	800296a <WebServerProcess+0x1be>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80027e6:	4965      	ldr	r1, [pc, #404]	; (800297c <WebServerProcess+0x1d0>)
 80027e8:	4862      	ldr	r0, [pc, #392]	; (8002974 <WebServerProcess+0x1c8>)
 80027ea:	f007 fc79 	bl	800a0e0 <strstr>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d033      	beq.n	800285c <WebServerProcess+0xb0>
      {
        temp = (uint8_t) BSP_TSENSOR_ReadTemp();
 80027f4:	f000 fcc4 	bl	8003180 <BSP_TSENSOR_ReadTemp>
 80027f8:	eef0 7a40 	vmov.f32	s15, s0
 80027fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002800:	edc7 7a01 	vstr	s15, [r7, #4]
 8002804:	793b      	ldrb	r3, [r7, #4]
 8002806:	73bb      	strb	r3, [r7, #14]
        pres = (uint8_t) BSP_PSENSOR_ReadPressure();
 8002808:	f000 fc90 	bl	800312c <BSP_PSENSOR_ReadPressure>
 800280c:	eef0 7a40 	vmov.f32	s15, s0
 8002810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002814:	edc7 7a01 	vstr	s15, [r7, #4]
 8002818:	793b      	ldrb	r3, [r7, #4]
 800281a:	737b      	strb	r3, [r7, #13]
        humd = (uint8_t) BSP_HSENSOR_ReadHumidity();
 800281c:	f000 fc58 	bl	80030d0 <BSP_HSENSOR_ReadHumidity>
 8002820:	eef0 7a40 	vmov.f32	s15, s0
 8002824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002828:	edc7 7a01 	vstr	s15, [r7, #4]
 800282c:	793b      	ldrb	r3, [r7, #4]
 800282e:	733b      	strb	r3, [r7, #12]
        if(SendWebPage(alarmEnabled, intruderDetected, temp, pres, humd) != WIFI_STATUS_OK)
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <WebServerProcess+0x1d4>)
 8002832:	7818      	ldrb	r0, [r3, #0]
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <WebServerProcess+0x1d8>)
 8002836:	7819      	ldrb	r1, [r3, #0]
 8002838:	7b7c      	ldrb	r4, [r7, #13]
 800283a:	7bba      	ldrb	r2, [r7, #14]
 800283c:	7b3b      	ldrb	r3, [r7, #12]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4623      	mov	r3, r4
 8002842:	f000 f8b9 	bl	80029b8 <SendWebPage>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <WebServerProcess+0xa8>
        {
          LOG(("> ERROR : Cannot send web page\n\r"));
 800284c:	484e      	ldr	r0, [pc, #312]	; (8002988 <WebServerProcess+0x1dc>)
 800284e:	f007 fa31 	bl	8009cb4 <iprintf>
 8002852:	e08a      	b.n	800296a <WebServerProcess+0x1be>
        }
        else
        {
          LOG(("Send page after  GET command\n\r"));
 8002854:	484d      	ldr	r0, [pc, #308]	; (800298c <WebServerProcess+0x1e0>)
 8002856:	f007 fa2d 	bl	8009cb4 <iprintf>
 800285a:	e086      	b.n	800296a <WebServerProcess+0x1be>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 800285c:	494c      	ldr	r1, [pc, #304]	; (8002990 <WebServerProcess+0x1e4>)
 800285e:	4845      	ldr	r0, [pc, #276]	; (8002974 <WebServerProcess+0x1c8>)
 8002860:	f007 fc3e 	bl	800a0e0 <strstr>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07f      	beq.n	800296a <WebServerProcess+0x1be>
       {
         LOG(("Post request\n\r"));
 800286a:	484a      	ldr	r0, [pc, #296]	; (8002994 <WebServerProcess+0x1e8>)
 800286c:	f007 fa22 	bl	8009cb4 <iprintf>

         if(strstr((char *)resp, "radio"))
 8002870:	4949      	ldr	r1, [pc, #292]	; (8002998 <WebServerProcess+0x1ec>)
 8002872:	4840      	ldr	r0, [pc, #256]	; (8002974 <WebServerProcess+0x1c8>)
 8002874:	f007 fc34 	bl	800a0e0 <strstr>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d024      	beq.n	80028c8 <WebServerProcess+0x11c>
         {
           if(strstr((char *)resp, "radio=0"))
 800287e:	4947      	ldr	r1, [pc, #284]	; (800299c <WebServerProcess+0x1f0>)
 8002880:	483c      	ldr	r0, [pc, #240]	; (8002974 <WebServerProcess+0x1c8>)
 8002882:	f007 fc2d 	bl	800a0e0 <strstr>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <WebServerProcess+0xee>
           {
             alarmEnabled = 0;
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <WebServerProcess+0x1d4>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f9d4 	bl	8002c40 <BSP_LED_Off>
 8002898:	e00c      	b.n	80028b4 <WebServerProcess+0x108>
           }
           else if(strstr((char *)resp, "radio=1"))
 800289a:	4941      	ldr	r1, [pc, #260]	; (80029a0 <WebServerProcess+0x1f4>)
 800289c:	4835      	ldr	r0, [pc, #212]	; (8002974 <WebServerProcess+0x1c8>)
 800289e:	f007 fc1f 	bl	800a0e0 <strstr>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <WebServerProcess+0x108>
           {
             alarmEnabled = 1;
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <WebServerProcess+0x1d4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
             BSP_LED_On(LED2);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f9b0 	bl	8002c14 <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 80028b4:	f000 fc64 	bl	8003180 <BSP_TSENSOR_ReadTemp>
 80028b8:	eef0 7a40 	vmov.f32	s15, s0
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80028c4:	793b      	ldrb	r3, [r7, #4]
 80028c6:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 80028c8:	4936      	ldr	r1, [pc, #216]	; (80029a4 <WebServerProcess+0x1f8>)
 80028ca:	482a      	ldr	r0, [pc, #168]	; (8002974 <WebServerProcess+0x1c8>)
 80028cc:	f007 fc08 	bl	800a0e0 <strstr>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <WebServerProcess+0x150>
         {
           if(strstr((char *)resp, "stop_server=0"))
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <WebServerProcess+0x1fc>)
 80028d8:	4826      	ldr	r0, [pc, #152]	; (8002974 <WebServerProcess+0x1c8>)
 80028da:	f007 fc01 	bl	800a0e0 <strstr>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <WebServerProcess+0x13e>
           {
             stopserver = false;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e008      	b.n	80028fc <WebServerProcess+0x150>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 80028ea:	4930      	ldr	r1, [pc, #192]	; (80029ac <WebServerProcess+0x200>)
 80028ec:	4821      	ldr	r0, [pc, #132]	; (8002974 <WebServerProcess+0x1c8>)
 80028ee:	f007 fbf7 	bl	800a0e0 <strstr>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <WebServerProcess+0x150>
           {
             stopserver = true;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (uint8_t) BSP_TSENSOR_ReadTemp();
 80028fc:	f000 fc40 	bl	8003180 <BSP_TSENSOR_ReadTemp>
 8002900:	eef0 7a40 	vmov.f32	s15, s0
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	edc7 7a01 	vstr	s15, [r7, #4]
 800290c:	793b      	ldrb	r3, [r7, #4]
 800290e:	73bb      	strb	r3, [r7, #14]
		 pres = (uint8_t) BSP_PSENSOR_ReadPressure();
 8002910:	f000 fc0c 	bl	800312c <BSP_PSENSOR_ReadPressure>
 8002914:	eef0 7a40 	vmov.f32	s15, s0
 8002918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800291c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002920:	793b      	ldrb	r3, [r7, #4]
 8002922:	737b      	strb	r3, [r7, #13]
		 humd = (uint8_t) BSP_HSENSOR_ReadHumidity();
 8002924:	f000 fbd4 	bl	80030d0 <BSP_HSENSOR_ReadHumidity>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002930:	edc7 7a01 	vstr	s15, [r7, #4]
 8002934:	793b      	ldrb	r3, [r7, #4]
 8002936:	733b      	strb	r3, [r7, #12]
         if(SendWebPage(alarmEnabled, intruderDetected, temp, pres, humd) != WIFI_STATUS_OK)
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <WebServerProcess+0x1d4>)
 800293a:	7818      	ldrb	r0, [r3, #0]
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <WebServerProcess+0x1d8>)
 800293e:	7819      	ldrb	r1, [r3, #0]
 8002940:	7b7c      	ldrb	r4, [r7, #13]
 8002942:	7bba      	ldrb	r2, [r7, #14]
 8002944:	7b3b      	ldrb	r3, [r7, #12]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4623      	mov	r3, r4
 800294a:	f000 f835 	bl	80029b8 <SendWebPage>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <WebServerProcess+0x1b0>
         {
           LOG(("> ERROR : Cannot send web page\n\r"));
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <WebServerProcess+0x1dc>)
 8002956:	f007 f9ad 	bl	8009cb4 <iprintf>
 800295a:	e006      	b.n	800296a <WebServerProcess+0x1be>
         }
         else
         {
           LOG(("Send Page after POST command\n\r"));
 800295c:	4814      	ldr	r0, [pc, #80]	; (80029b0 <WebServerProcess+0x204>)
 800295e:	f007 f9a9 	bl	8009cb4 <iprintf>
 8002962:	e002      	b.n	800296a <WebServerProcess+0x1be>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n\r"));
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <WebServerProcess+0x208>)
 8002966:	f007 f9a5 	bl	8009cb4 <iprintf>
  }
  return stopserver;
 800296a:	7bfb      	ldrb	r3, [r7, #15]

 }
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	20001a08 	.word	0x20001a08
 8002978:	0800b590 	.word	0x0800b590
 800297c:	0800b5ac 	.word	0x0800b5ac
 8002980:	20001a04 	.word	0x20001a04
 8002984:	20001a05 	.word	0x20001a05
 8002988:	0800b5b0 	.word	0x0800b5b0
 800298c:	0800b5d4 	.word	0x0800b5d4
 8002990:	0800b5f4 	.word	0x0800b5f4
 8002994:	0800b5fc 	.word	0x0800b5fc
 8002998:	0800b60c 	.word	0x0800b60c
 800299c:	0800b614 	.word	0x0800b614
 80029a0:	0800b61c 	.word	0x0800b61c
 80029a4:	0800b624 	.word	0x0800b624
 80029a8:	0800b630 	.word	0x0800b630
 80029ac:	0800b640 	.word	0x0800b640
 80029b0:	0800b650 	.word	0x0800b650
 80029b4:	0800b670 	.word	0x0800b670

080029b8 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t alarmEnabled, uint8_t intruderDetected, uint8_t temp, uint8_t pres, uint8_t humd)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	4604      	mov	r4, r0
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	71fb      	strb	r3, [r7, #7]
 80029ca:	4603      	mov	r3, r0
 80029cc:	71bb      	strb	r3, [r7, #6]
 80029ce:	460b      	mov	r3, r1
 80029d0:	717b      	strb	r3, [r7, #5]
 80029d2:	4613      	mov	r3, r2
 80029d4:	713b      	strb	r3, [r7, #4]
  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 80029d6:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <SendWebPage+0xcc>)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <SendWebPage+0xd0>)
 80029da:	4614      	mov	r4, r2
 80029dc:	461d      	mov	r5, r3
 80029de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029ee:	c407      	stmia	r4!, {r0, r1, r2}
 80029f0:	8023      	strh	r3, [r4, #0]
 80029f2:	3402      	adds	r4, #2
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, inject(alarmEnabled, intruderDetected, temp, pres, humd));
 80029f8:	79f8      	ldrb	r0, [r7, #7]
 80029fa:	79b9      	ldrb	r1, [r7, #6]
 80029fc:	797a      	ldrb	r2, [r7, #5]
 80029fe:	793c      	ldrb	r4, [r7, #4]
 8002a00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4623      	mov	r3, r4
 8002a08:	f7ff fc6a 	bl	80022e0 <inject>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4619      	mov	r1, r3
 8002a10:	481c      	ldr	r0, [pc, #112]	; (8002a84 <SendWebPage+0xcc>)
 8002a12:	f007 fad5 	bl	8009fc0 <strcat>

  /* http is the buffer which contains the data to send. */
  /* httpDataLength is the length of the data to be sent. */
  WIFI_Status_t ret;
  uint32_t httpDataLength = strlen(http);
 8002a16:	481b      	ldr	r0, [pc, #108]	; (8002a84 <SendWebPage+0xcc>)
 8002a18:	f7fd fbf2 	bl	8000200 <strlen>
 8002a1c:	61b8      	str	r0, [r7, #24]
  uint32_t dataLengthToSend;
  uint32_t dataLengthSent = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]

  while( httpDataLength > 0 )
 8002a22:	e025      	b.n	8002a70 <SendWebPage+0xb8>
  {
      if(httpDataLength > 500)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a2a:	d903      	bls.n	8002a34 <SendWebPage+0x7c>
      {
          dataLengthToSend = 500;
 8002a2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e001      	b.n	8002a38 <SendWebPage+0x80>
      }
      else
      {
          dataLengthToSend = httpDataLength;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	617b      	str	r3, [r7, #20]
      }

      uint16_t curDataLengthSent;
      ret = WIFI_SendData(0, &http[dataLengthSent], dataLengthToSend, &curDataLengthSent, WIFI_WRITE_TIMEOUT );
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <SendWebPage+0xcc>)
 8002a3c:	1899      	adds	r1, r3, r2
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	f107 030e 	add.w	r3, r7, #14
 8002a46:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a4a:	9000      	str	r0, [sp, #0]
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f000 fe11 	bl	8003674 <WIFI_SendData>
 8002a52:	4603      	mov	r3, r0
 8002a54:	77fb      	strb	r3, [r7, #31]

      if( ret != WIFI_STATUS_OK)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <SendWebPage+0xc0>
          break;
      }
      else
      {
          /* Update what is left to send based on the length of the data actually sent. */
    	  dataLengthSent += curDataLengthSent;
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
          httpDataLength -= curDataLengthSent;
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
  while( httpDataLength > 0 )
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1d6      	bne.n	8002a24 <SendWebPage+0x6c>
 8002a76:	e000      	b.n	8002a7a <SendWebPage+0xc2>
          break;
 8002a78:	bf00      	nop
//  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
//  {
//    ret = WIFI_STATUS_ERROR;
//  }

  return ret;
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}
 8002a84:	20000670 	.word	0x20000670
 8002a88:	0800b68c 	.word	0x0800b68c

08002a8c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b096      	sub	sp, #88	; 0x58
 8002a90:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002a92:	2310      	movs	r3, #16
 8002a94:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a9a:	2360      	movs	r3, #96	; 0x60
 8002a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002aae:	2328      	movs	r3, #40	; 0x28
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aba:	2304      	movs	r3, #4
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002abe:	463b      	mov	r3, r7
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 f85d 	bl	8004b80 <HAL_RCC_OscConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d000      	beq.n	8002ace <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8002acc:	e7fe      	b.n	8002acc <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002ace:	230f      	movs	r3, #15
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ae2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fc63 	bl	80053b4 <HAL_RCC_ClockConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d000      	beq.n	8002af6 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8002af4:	e7fe      	b.n	8002af4 <SystemClock_Config+0x68>
  }
}
 8002af6:	bf00      	nop
 8002af8:	3758      	adds	r7, #88	; 0x58
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002b08:	1d39      	adds	r1, r7, #4
 8002b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <__io_putchar+0x20>)
 8002b12:	f004 fe60 	bl	80077d6 <HAL_UART_Transmit>

  return ch;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20001e5c 	.word	0x20001e5c

08002b24 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 8002b2e:	bf00      	nop
 8002b30:	1df9      	adds	r1, r7, #7
 8002b32:	f247 5330 	movw	r3, #30000	; 0x7530
 8002b36:	2201      	movs	r2, #1
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <__io_getchar+0x2c>)
 8002b3a:	f004 fedb 	bl	80078f4 <HAL_UART_Receive>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f5      	bne.n	8002b30 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8002b44:	79fb      	ldrb	r3, [r7, #7]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20001e5c 	.word	0x20001e5c

08002b54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_EXTI_Callback+0x1c>
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b68:	d105      	bne.n	8002b76 <HAL_GPIO_EXTI_Callback+0x22>
  {
    case (USER_BUTTON_PIN):
    {
      Button_ISR();
 8002b6a:	f000 f813 	bl	8002b94 <Button_ISR>
      break;
 8002b6e:	e003      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x24>
    }
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002b70:	f7ff fb8c 	bl	800228c <SPI_WIFI_ISR>
      break;
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x24>
    }
    default:
    {
      break;
 8002b76:	bf00      	nop
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002b84:	4802      	ldr	r0, [pc, #8]	; (8002b90 <SPI3_IRQHandler+0x10>)
 8002b86:	f003 ff55 	bl	8006a34 <HAL_SPI_IRQHandler>
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200000c8 	.word	0x200000c8

08002b94 <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  button_flag++;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <Button_ISR+0x1c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <Button_ISR+0x1c>)
 8002ba4:	701a      	strb	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000590 	.word	0x20000590

08002bb4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <BSP_LED_Init+0x28>
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <BSP_LED_Init+0x58>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <BSP_LED_Init+0x58>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <BSP_LED_Init+0x58>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002be0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002be2:	2301      	movs	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <BSP_LED_Init+0x5c>)
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ffb5 	bl	8003b6c <HAL_GPIO_Init>
}
 8002c02:	bf00      	nop
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	20000028 	.word	0x20000028

08002c14 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <BSP_LED_On+0x28>)
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c2a:	b291      	uxth	r1, r2
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f946 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000028 	.word	0x20000028

08002c40 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <BSP_LED_Off+0x28>)
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c56:	b291      	uxth	r1, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f930 	bl	8003ec0 <HAL_GPIO_WritePin>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000028 	.word	0x20000028

08002c6c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	460a      	mov	r2, r1
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <BSP_PB_Init+0xa4>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <BSP_PB_Init+0xa4>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <BSP_PB_Init+0xa4>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002c94:	79bb      	ldrb	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d112      	bne.n	8002cc0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c9e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <BSP_PB_Init+0xa8>)
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	f107 020c 	add.w	r2, r7, #12
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 ff56 	bl	8003b6c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11f      	bne.n	8002d06 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cca:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002cd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cd8:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <BSP_PB_Init+0xa8>)
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	f107 020c 	add.w	r2, r7, #12
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 ff3f 	bl	8003b6c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002cee:	2328      	movs	r3, #40	; 0x28
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fea3 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002cfc:	2328      	movs	r3, #40	; 0x28
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 feba 	bl	8003a7a <HAL_NVIC_EnableIRQ>
  }
}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	2000002c 	.word	0x2000002c

08002d18 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <BSP_COM_Init+0x2a>
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <BSP_COM_Init+0x48>
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <BSP_COM_Init+0x66>
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d70:	6613      	str	r3, [r2, #96]	; 0x60
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <BSP_COM_Init+0xc8>)
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d86:	2302      	movs	r3, #2
 8002d88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002d8e:	2307      	movs	r3, #7
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <BSP_COM_Init+0xcc>)
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	f107 0214 	add.w	r2, r7, #20
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fee3 	bl	8003b6c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002dae:	2307      	movs	r3, #7
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <BSP_COM_Init+0xd0>)
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	f107 0214 	add.w	r2, r7, #20
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fed3 	bl	8003b6c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <BSP_COM_Init+0xd4>)
 8002dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002dd2:	6838      	ldr	r0, [r7, #0]
 8002dd4:	f004 fca5 	bl	8007722 <HAL_UART_Init>
}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	20000034 	.word	0x20000034
 8002de8:	20000038 	.word	0x20000038
 8002dec:	20000030 	.word	0x20000030

08002df0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002e10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e16:	2312      	movs	r3, #18
 8002e18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002e22:	2304      	movs	r3, #4
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	481b      	ldr	r0, [pc, #108]	; (8002e9c <I2Cx_MspInit+0xac>)
 8002e2e:	f000 fe9d 	bl	8003b6c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4818      	ldr	r0, [pc, #96]	; (8002e9c <I2Cx_MspInit+0xac>)
 8002e3a:	f000 fe97 	bl	8003b6c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e60:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <I2Cx_MspInit+0xa8>)
 8002e68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e6c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	210f      	movs	r1, #15
 8002e72:	2021      	movs	r0, #33	; 0x21
 8002e74:	f000 fde5 	bl	8003a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002e78:	2021      	movs	r0, #33	; 0x21
 8002e7a:	f000 fdfe 	bl	8003a7a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	210f      	movs	r1, #15
 8002e82:	2022      	movs	r0, #34	; 0x22
 8002e84:	f000 fddd 	bl	8003a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002e88:	2022      	movs	r0, #34	; 0x22
 8002e8a:	f000 fdf6 	bl	8003a7a <HAL_NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	48000400 	.word	0x48000400

08002ea0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <I2Cx_Init+0x54>)
 8002eac:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <I2Cx_Init+0x58>)
 8002eb2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff89 	bl	8002df0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f001 f81e 	bl	8003f20 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f001 fdde 	bl	8004aa8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40005800 	.word	0x40005800
 8002ef8:	00702681 	.word	0x00702681

08002efc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	72fb      	strb	r3, [r7, #11]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	b299      	uxth	r1, r3
 8002f1e:	88f8      	ldrh	r0, [r7, #6]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4603      	mov	r3, r0
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f001 f9e6 	bl	8004304 <HAL_I2C_Mem_Read>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	4619      	mov	r1, r3
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f832 	bl	8002fb0 <I2Cx_Error>
  }
  return status;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af04      	add	r7, sp, #16
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	4608      	mov	r0, r1
 8002f60:	4611      	mov	r1, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	4603      	mov	r3, r0
 8002f66:	72fb      	strb	r3, [r7, #11]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	813b      	strh	r3, [r7, #8]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	b299      	uxth	r1, r3
 8002f78:	88f8      	ldrh	r0, [r7, #6]
 8002f7a:	893a      	ldrh	r2, [r7, #8]
 8002f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f001 f8a5 	bl	80040dc <HAL_I2C_Mem_Write>
 8002f92:	4603      	mov	r3, r0
 8002f94:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f805 	bl	8002fb0 <I2Cx_Error>
  }
  return status;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f001 f84a 	bl	8004056 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff6c 	bl	8002ea0 <I2Cx_Init>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <SENSOR_IO_Init+0x10>)
 8002fd6:	f7ff ff63 	bl	8002ea0 <I2Cx_Init>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20001e08 	.word	0x20001e08

08002fe4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	71bb      	strb	r3, [r7, #6]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ff6:	79bb      	ldrb	r3, [r7, #6]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	79f9      	ldrb	r1, [r7, #7]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	1d7b      	adds	r3, r7, #5
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2301      	movs	r3, #1
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <SENSOR_IO_Write+0x30>)
 8003008:	f7ff ffa5 	bl	8002f56 <I2Cx_WriteMultiple>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20001e08 	.word	0x20001e08

08003018 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af02      	add	r7, sp, #8
 800301e:	4603      	mov	r3, r0
 8003020:	460a      	mov	r2, r1
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	4613      	mov	r3, r2
 8003026:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800302c:	79bb      	ldrb	r3, [r7, #6]
 800302e:	b29a      	uxth	r2, r3
 8003030:	79f9      	ldrb	r1, [r7, #7]
 8003032:	2301      	movs	r3, #1
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f107 030f 	add.w	r3, r7, #15
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2301      	movs	r3, #1
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <SENSOR_IO_Read+0x38>)
 8003040:	f7ff ff5c 	bl	8002efc <I2Cx_ReadMultiple>

  return read_value;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20001e08 	.word	0x20001e08

08003054 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af02      	add	r7, sp, #8
 800305a:	603a      	str	r2, [r7, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	460b      	mov	r3, r1
 8003064:	71bb      	strb	r3, [r7, #6]
 8003066:	4613      	mov	r3, r2
 8003068:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	b29a      	uxth	r2, r3
 800306e:	79f9      	ldrb	r1, [r7, #7]
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2301      	movs	r3, #1
 800307a:	4804      	ldr	r0, [pc, #16]	; (800308c <SENSOR_IO_ReadMultiple+0x38>)
 800307c:	f7ff ff3e 	bl	8002efc <I2Cx_ReadMultiple>
 8003080:	4603      	mov	r3, r0
 8003082:	b29b      	uxth	r3, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20001e08 	.word	0x20001e08

08003090 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <BSP_HSENSOR_Init+0x38>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	20be      	movs	r0, #190	; 0xbe
 800309c:	4798      	blx	r3
 800309e:	4603      	mov	r3, r0
 80030a0:	2bbc      	cmp	r3, #188	; 0xbc
 80030a2:	d002      	beq.n	80030aa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	e009      	b.n	80030be <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <BSP_HSENSOR_Init+0x3c>)
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <BSP_HSENSOR_Init+0x38>)
 80030ae:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <BSP_HSENSOR_Init+0x3c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	20be      	movs	r0, #190	; 0xbe
 80030b8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80030be:	687b      	ldr	r3, [r7, #4]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20001ef0 	.word	0x20001ef0

080030d0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	20be      	movs	r0, #190	; 0xbe
 80030dc:	4798      	blx	r3
 80030de:	eef0 7a40 	vmov.f32	s15, s0
}
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20001ef0 	.word	0x20001ef0

080030ec <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <BSP_PSENSOR_Init+0x38>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	20ba      	movs	r0, #186	; 0xba
 80030f8:	4798      	blx	r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	2bb1      	cmp	r3, #177	; 0xb1
 80030fe:	d002      	beq.n	8003106 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e009      	b.n	800311a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <BSP_PSENSOR_Init+0x3c>)
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <BSP_PSENSOR_Init+0x38>)
 800310a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <BSP_PSENSOR_Init+0x3c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	20ba      	movs	r0, #186	; 0xba
 8003114:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800311a:	687b      	ldr	r3, [r7, #4]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000001c 	.word	0x2000001c
 8003128:	20001ef4 	.word	0x20001ef4

0800312c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <BSP_PSENSOR_ReadPressure+0x18>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	20ba      	movs	r0, #186	; 0xba
 8003138:	4798      	blx	r3
 800313a:	eef0 7a40 	vmov.f32	s15, s0
}
 800313e:	eeb0 0a67 	vmov.f32	s0, s15
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20001ef4 	.word	0x20001ef4

08003148 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <BSP_TSENSOR_Init+0x30>)
 8003154:	4a09      	ldr	r2, [pc, #36]	; (800317c <BSP_TSENSOR_Init+0x34>)
 8003156:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003158:	f7ff ff3a 	bl	8002fd0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <BSP_TSENSOR_Init+0x30>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	20be      	movs	r0, #190	; 0xbe
 8003166:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800316c:	79fb      	ldrb	r3, [r7, #7]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20001ef8 	.word	0x20001ef8
 800317c:	2000000c 	.word	0x2000000c

08003180 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <BSP_TSENSOR_ReadTemp+0x18>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	20be      	movs	r0, #190	; 0xbe
 800318c:	4798      	blx	r3
 800318e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20001ef8 	.word	0x20001ef8

0800319c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80031ae:	e7fe      	b.n	80031ae <HardFault_Handler+0x4>

080031b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <MemManage_Handler+0x4>

080031b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <BusFault_Handler+0x4>

080031bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <UsageFault_Handler+0x4>

080031c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80031d4:	f000 fb16 	bl	8003804 <HAL_IncTick>
  if (xTaskGetSchedulerState() != 1)
 80031d8:	f005 ff5a 	bl	8009090 <xTaskGetSchedulerState>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <SysTick_Handler+0x16>
      {
          xPortSysTickHandler();
 80031e2:	f006 f999 	bl	8009518 <xPortSysTickHandler>
      }
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}

080031ea <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80031ee:	2002      	movs	r0, #2
 80031f0:	f000 fe7e 	bl	8003ef0 <HAL_GPIO_EXTI_IRQHandler>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80031fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003200:	f000 fe76 	bl	8003ef0 <HAL_GPIO_EXTI_IRQHandler>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return 1;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_kill>:

int _kill(int pid, int sig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003222:	f006 ffc9 	bl	800a1b8 <__errno>
 8003226:	4603      	mov	r3, r0
 8003228:	2216      	movs	r2, #22
 800322a:	601a      	str	r2, [r3, #0]
  return -1;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_exit>:

void _exit (int status)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffe7 	bl	8003218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800324a:	e7fe      	b.n	800324a <_exit+0x12>

0800324c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e00a      	b.n	8003274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800325e:	f7ff fc61 	bl	8002b24 <__io_getchar>
 8003262:	4601      	mov	r1, r0
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	b2ca      	uxtb	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	dbf0      	blt.n	800325e <_read+0x12>
  }

  return len;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e009      	b.n	80032ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	60ba      	str	r2, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fc2d 	bl	8002b00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dbf1      	blt.n	8003298 <_write+0x12>
  }
  return len;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_close>:

int _close(int file)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e6:	605a      	str	r2, [r3, #4]
  return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <_isatty>:

int _isatty(int file)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f006 ff2e 	bl	800a1b8 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200a0000 	.word	0x200a0000
 8003388:	00000400 	.word	0x00000400
 800338c:	20001efc 	.word	0x20001efc
 8003390:	20003e30 	.word	0x20003e30

08003394 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <SystemInit+0x64>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <SystemInit+0x64>)
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <SystemInit+0x68>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <SystemInit+0x68>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <SystemInit+0x68>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <SystemInit+0x68>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <SystemInit+0x68>)
 80033c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80033c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80033c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <SystemInit+0x68>)
 80033cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <SystemInit+0x68>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <SystemInit+0x68>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <SystemInit+0x68>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <SystemInit+0x64>)
 80033e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ea:	609a      	str	r2, [r3, #8]
#endif
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	40021000 	.word	0x40021000

08003400 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <WIFI_Init+0x40>)
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <WIFI_Init+0x44>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <WIFI_Init+0x48>)
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <WIFI_Init+0x4c>)
 8003416:	490e      	ldr	r1, [pc, #56]	; (8003450 <WIFI_Init+0x50>)
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <WIFI_Init+0x54>)
 800341a:	f7fd ff4b 	bl	80012b4 <ES_WIFI_RegisterBusIO>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <WIFI_Init+0x54>)
 8003426:	f7fd ff11 	bl	800124c <ES_WIFI_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003434:	79fb      	ldrb	r3, [r7, #7]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	08001fb1 	.word	0x08001fb1
 8003444:	080020a5 	.word	0x080020a5
 8003448:	08002181 	.word	0x08002181
 800344c:	08001e99 	.word	0x08001e99
 8003450:	08001cfd 	.word	0x08001cfd
 8003454:	20001f00 	.word	0x20001f00

08003458 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	4809      	ldr	r0, [pc, #36]	; (8003498 <WIFI_Connect+0x40>)
 8003472:	f7fd ff53 	bl	800131c <ES_WIFI_Connect>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800347c:	4806      	ldr	r0, [pc, #24]	; (8003498 <WIFI_Connect+0x40>)
 800347e:	f7fd fff5 	bl	800146c <ES_WIFI_GetNetworkSettings>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20001f00 	.word	0x20001f00

0800349c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <WIFI_GetMAC_Address+0x32>
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4806      	ldr	r0, [pc, #24]	; (80034d8 <WIFI_GetMAC_Address+0x3c>)
 80034c0:	f7fd fffe 	bl	80014c0 <ES_WIFI_GetMACAddress>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20001f00 	.word	0x20001f00

080034dc <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <WIFI_GetIP_Address+0x38>
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d90d      	bls.n	8003514 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <WIFI_GetIP_Address+0x44>)
 80034fa:	f7fd ff87 	bl	800140c <ES_WIFI_IsConnected>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <WIFI_GetIP_Address+0x38>
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <WIFI_GetIP_Address+0x44>)
 8003506:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800350a:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20001f00 	.word	0x20001f00

08003524 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	72fb      	strb	r3, [r7, #11]
 8003532:	4613      	mov	r3, r2
 8003534:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 8003542:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003544:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	4619      	mov	r1, r3
 8003562:	4807      	ldr	r0, [pc, #28]	; (8003580 <WIFI_StartServer+0x5c>)
 8003564:	f7fd ffe2 	bl	800152c <ES_WIFI_StartServerSingleConn>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8003574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20001f00 	.word	0x20001f00

08003584 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8003598:	f107 0310 	add.w	r3, r7, #16
 800359c:	461a      	mov	r2, r3
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	481b      	ldr	r0, [pc, #108]	; (8003610 <WIFI_WaitServerConnection+0x8c>)
 80035a2:	f7fe f86f 	bl	8001684 <ES_WIFI_WaitServerConnection>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80035ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d110      	bne.n	80035d6 <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 80035ba:	8aba      	ldrh	r2, [r7, #20]
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <WIFI_WaitServerConnection+0x4e>
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d902      	bls.n	80035d2 <WIFI_WaitServerConnection+0x4e>
 80035cc:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e017      	b.n	8003606 <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 80035d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d112      	bne.n	8003604 <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	2200      	movs	r2, #0
 80035e8:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <WIFI_WaitServerConnection+0x7c>
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d904      	bls.n	8003600 <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 80035f6:	2204      	movs	r2, #4
 80035f8:	2100      	movs	r1, #0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f006 fcd8 	bl	8009fb0 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8003600:	2305      	movs	r3, #5
 8003602:	e000      	b.n	8003606 <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	3728      	adds	r7, #40	; 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20001f00 	.word	0x20001f00

08003614 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <WIFI_CloseServerConnection+0x2c>)
 8003628:	f7fe f91e 	bl	8001868 <ES_WIFI_CloseServerConnection>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20001f00 	.word	0x20001f00

08003644 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <WIFI_StopServer+0x2c>)
 8003658:	f7fe f942 	bl	80018e0 <ES_WIFI_StopServerSingleConn>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20001f00 	.word	0x20001f00

08003674 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	b2d9      	uxtb	r1, r3
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	4806      	ldr	r0, [pc, #24]	; (80036b4 <WIFI_SendData+0x40>)
 800369c:	f7fe f960 	bl	8001960 <ES_WIFI_SendData>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20001f00 	.word	0x20001f00

080036b8 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	b2d9      	uxtb	r1, r3
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4806      	ldr	r0, [pc, #24]	; (80036f8 <WIFI_ReceiveData+0x40>)
 80036e0:	f7fe f9c4 	bl	8001a6c <ES_WIFI_ReceiveData>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20001f00 	.word	0x20001f00

080036fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003700:	f7ff fe48 	bl	8003394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <LoopForever+0x6>)
  ldr r1, =_edata
 8003706:	490d      	ldr	r1, [pc, #52]	; (800373c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <LoopForever+0xe>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800370c:	e002      	b.n	8003714 <LoopCopyDataInit>

0800370e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003712:	3304      	adds	r3, #4

08003714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003718:	d3f9      	bcc.n	800370e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <LoopForever+0x16>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003720:	e001      	b.n	8003726 <LoopFillZerobss>

08003722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003724:	3204      	adds	r2, #4

08003726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003728:	d3fb      	bcc.n	8003722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800372a:	f006 fd4b 	bl	800a1c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800372e:	f7fe fe7b 	bl	8002428 <main>

08003732 <LoopForever>:

LoopForever:
    b LoopForever
 8003732:	e7fe      	b.n	8003732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003734:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800373c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003740:	0800ca44 	.word	0x0800ca44
  ldr r2, =_sbss
 8003744:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003748:	20003e2c 	.word	0x20003e2c

0800374c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC1_IRQHandler>

0800374e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003758:	2003      	movs	r0, #3
 800375a:	f000 f967 	bl	8003a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800375e:	200f      	movs	r0, #15
 8003760:	f000 f814 	bl	800378c <HAL_InitTick>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	e001      	b.n	8003774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003770:	f000 f805 	bl	800377e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003774:	79fb      	ldrb	r3, [r7, #7]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <HAL_InitTick+0x6c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_InitTick+0x70>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_InitTick+0x6c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f96d 	bl	8003a96 <HAL_SYSTICK_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d809      	bhi.n	80037dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c8:	2200      	movs	r2, #0
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f000 f937 	bl	8003a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_InitTick+0x74>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e007      	b.n	80037ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e004      	b.n	80037ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e001      	b.n	80037ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000044 	.word	0x20000044
 80037fc:	2000003c 	.word	0x2000003c
 8003800:	20000040 	.word	0x20000040

08003804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000044 	.word	0x20000044
 8003828:	20002800 	.word	0x20002800

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20002800 	.word	0x20002800

08003844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7ff ffee 	bl	800382c <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d005      	beq.n	800386a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_Delay+0x44>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800386a:	bf00      	nop
 800386c:	f7ff ffde 	bl	800382c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d8f7      	bhi.n	800386c <HAL_Delay+0x28>
  {
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000044 	.word	0x20000044

0800388c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038be:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	60d3      	str	r3, [r2, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f1c3 0307 	rsb	r3, r3, #7
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf28      	it	cs
 800399e:	2304      	movcs	r3, #4
 80039a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d902      	bls.n	80039b0 <NVIC_EncodePriority+0x30>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	e000      	b.n	80039b2 <NVIC_EncodePriority+0x32>
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	4313      	orrs	r3, r2
         );
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d301      	bcc.n	80039fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00f      	b.n	8003a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <SysTick_Config+0x40>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a06:	210f      	movs	r1, #15
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f7ff ff8e 	bl	800392c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <SysTick_Config+0x40>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <SysTick_Config+0x40>)
 8003a18:	2207      	movs	r2, #7
 8003a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	e000e010 	.word	0xe000e010

08003a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff29 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a54:	f7ff ff3e 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f7ff ff8e 	bl	8003980 <NVIC_EncodePriority>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff5d 	bl	800392c <__NVIC_SetPriority>
}
 8003a72:	bf00      	nop
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff31 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ffa2 	bl	80039e8 <SysTick_Config>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d005      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e047      	b.n	8003b62 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 020e 	bic.w	r2, r2, #14
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f003 021c 	and.w	r2, r3, #28
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b40:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
    }
  }
  return status;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7a:	e166      	b.n	8003e4a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8158 	beq.w	8003e44 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d005      	beq.n	8003bac <HAL_GPIO_Init+0x40>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d130      	bne.n	8003c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be2:	2201      	movs	r2, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0201 	and.w	r2, r3, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d017      	beq.n	8003c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d123      	bne.n	8003c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	6939      	ldr	r1, [r7, #16]
 8003c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80b2 	beq.w	8003e44 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce0:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	4a60      	ldr	r2, [pc, #384]	; (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6613      	str	r3, [r2, #96]	; 0x60
 8003cec:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cf8:	4a5c      	ldr	r2, [pc, #368]	; (8003e6c <HAL_GPIO_Init+0x300>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d22:	d02b      	beq.n	8003d7c <HAL_GPIO_Init+0x210>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_GPIO_Init+0x304>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d025      	beq.n	8003d78 <HAL_GPIO_Init+0x20c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a51      	ldr	r2, [pc, #324]	; (8003e74 <HAL_GPIO_Init+0x308>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d01f      	beq.n	8003d74 <HAL_GPIO_Init+0x208>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_GPIO_Init+0x30c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d019      	beq.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4f      	ldr	r2, [pc, #316]	; (8003e7c <HAL_GPIO_Init+0x310>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_GPIO_Init+0x200>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a4e      	ldr	r2, [pc, #312]	; (8003e80 <HAL_GPIO_Init+0x314>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1fc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a4d      	ldr	r2, [pc, #308]	; (8003e84 <HAL_GPIO_Init+0x318>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1f8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a4c      	ldr	r2, [pc, #304]	; (8003e88 <HAL_GPIO_Init+0x31c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1f4>
 8003d5c:	2307      	movs	r3, #7
 8003d5e:	e00e      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d60:	2308      	movs	r3, #8
 8003d62:	e00c      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d64:	2306      	movs	r3, #6
 8003d66:	e00a      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d68:	2305      	movs	r3, #5
 8003d6a:	e008      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	e006      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d70:	2303      	movs	r3, #3
 8003d72:	e004      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e002      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <HAL_GPIO_Init+0x212>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	f002 0203 	and.w	r2, r2, #3
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	4093      	lsls	r3, r2
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d8e:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_GPIO_Init+0x300>)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	3302      	adds	r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dc0:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dea:	4a28      	ldr	r2, [pc, #160]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <HAL_GPIO_Init+0x320>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3301      	adds	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f ae91 	bne.w	8003b7c <HAL_GPIO_Init+0x10>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	48000400 	.word	0x48000400
 8003e74:	48000800 	.word	0x48000800
 8003e78:	48000c00 	.word	0x48000c00
 8003e7c:	48001000 	.word	0x48001000
 8003e80:	48001400 	.word	0x48001400
 8003e84:	48001800 	.word	0x48001800
 8003e88:	48001c00 	.word	0x48001c00
 8003e8c:	40010400 	.word	0x40010400

08003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fe20 	bl	8002b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e08d      	b.n	800404e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8b4 	bl	80040b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	; 0x24
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e006      	b.n	8003fa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d108      	bne.n	8003fc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e007      	b.n	8003fd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69d9      	ldr	r1, [r3, #28]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e021      	b.n	80040ac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f821 	bl	80040c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	f040 80f9 	bne.w	80042f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_I2C_Mem_Write+0x34>
 800410a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0ed      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_I2C_Mem_Write+0x4e>
 8004126:	2302      	movs	r3, #2
 8004128:	e0e6      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004132:	f7ff fb7b 	bl	800382c <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2319      	movs	r3, #25
 800413e:	2201      	movs	r2, #1
 8004140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fac3 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0d1      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2221      	movs	r2, #33	; 0x21
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2240      	movs	r2, #64	; 0x40
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417c:	88f8      	ldrh	r0, [r7, #6]
 800417e:	893a      	ldrh	r2, [r7, #8]
 8004180:	8979      	ldrh	r1, [r7, #10]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	4603      	mov	r3, r0
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f9d3 	bl	8004538 <I2C_RequestMemoryWrite>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0a9      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2bff      	cmp	r3, #255	; 0xff
 80041ac:	d90e      	bls.n	80041cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8979      	ldrh	r1, [r7, #10]
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fc3d 	bl	8004a44 <I2C_TransferConfig>
 80041ca:	e00f      	b.n	80041ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fc2c 	bl	8004a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fabc 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e07b      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d034      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x1c8>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d130      	bne.n	80042a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	2200      	movs	r2, #0
 800424a:	2180      	movs	r1, #128	; 0x80
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fa3f 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04d      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2bff      	cmp	r3, #255	; 0xff
 8004264:	d90e      	bls.n	8004284 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	b2da      	uxtb	r2, r3
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fbe1 	bl	8004a44 <I2C_TransferConfig>
 8004282:	e00f      	b.n	80042a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	b2da      	uxtb	r2, r3
 8004294:	8979      	ldrh	r1, [r7, #10]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fbd0 	bl	8004a44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d19e      	bne.n	80041ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 faa2 	bl	80047fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e01a      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2220      	movs	r2, #32
 80042c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_I2C_Mem_Write+0x224>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	fe00e800 	.word	0xfe00e800

08004304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 80fd 	bne.w	8004526 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_I2C_Mem_Read+0x34>
 8004332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0f1      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2C_Mem_Read+0x4e>
 800434e:	2302      	movs	r3, #2
 8004350:	e0ea      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800435a:	f7ff fa67 	bl	800382c <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2319      	movs	r3, #25
 8004366:	2201      	movs	r2, #1
 8004368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f9af 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0d5      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	; 0x22
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a4:	88f8      	ldrh	r0, [r7, #6]
 80043a6:	893a      	ldrh	r2, [r7, #8]
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	4603      	mov	r3, r0
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f913 	bl	80045e0 <I2C_RequestMemoryRead>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0ad      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2bff      	cmp	r3, #255	; 0xff
 80043d4:	d90e      	bls.n	80043f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	22ff      	movs	r2, #255	; 0xff
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	4b52      	ldr	r3, [pc, #328]	; (8004530 <HAL_I2C_Mem_Read+0x22c>)
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fb29 	bl	8004a44 <I2C_TransferConfig>
 80043f2:	e00f      	b.n	8004414 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_I2C_Mem_Read+0x22c>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fb18 	bl	8004a44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	2200      	movs	r2, #0
 800441c:	2104      	movs	r1, #4
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f956 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07c      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d034      	beq.n	80044d4 <HAL_I2C_Mem_Read+0x1d0>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d130      	bne.n	80044d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f927 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e04d      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2bff      	cmp	r3, #255	; 0xff
 8004494:	d90e      	bls.n	80044b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	22ff      	movs	r2, #255	; 0xff
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fac9 	bl	8004a44 <I2C_TransferConfig>
 80044b2:	e00f      	b.n	80044d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	8979      	ldrh	r1, [r7, #10]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fab8 	bl	8004a44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d19a      	bne.n	8004414 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f98a 	bl	80047fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e01a      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2220      	movs	r2, #32
 80044f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_I2C_Mem_Read+0x230>)
 8004506:	400b      	ands	r3, r1
 8004508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	80002400 	.word	0x80002400
 8004534:	fe00e800 	.word	0xfe00e800

08004538 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	817b      	strh	r3, [r7, #10]
 800454a:	460b      	mov	r3, r1
 800454c:	813b      	strh	r3, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	8979      	ldrh	r1, [r7, #10]
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <I2C_RequestMemoryWrite+0xa4>)
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fa6f 	bl	8004a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f8ff 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e02c      	b.n	80045d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004580:	893b      	ldrh	r3, [r7, #8]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
 800458a:	e015      	b.n	80045b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b29b      	uxth	r3, r3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f8e5 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e012      	b.n	80045d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ae:	893b      	ldrh	r3, [r7, #8]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f884 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	80002000 	.word	0x80002000

080045e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	4608      	mov	r0, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	461a      	mov	r2, r3
 80045ee:	4603      	mov	r3, r0
 80045f0:	817b      	strh	r3, [r7, #10]
 80045f2:	460b      	mov	r3, r1
 80045f4:	813b      	strh	r3, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <I2C_RequestMemoryRead+0xa4>)
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fa1c 	bl	8004a44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f8ac 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e02c      	b.n	800467a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004626:	893b      	ldrh	r3, [r7, #8]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
 8004630:	e015      	b.n	800465e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	b29b      	uxth	r3, r3
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f892 	bl	800476e <I2C_WaitOnTXISFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e012      	b.n	800467a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004654:	893b      	ldrh	r3, [r7, #8]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2200      	movs	r2, #0
 8004666:	2140      	movs	r1, #64	; 0x40
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f831 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	80002000 	.word	0x80002000

08004688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d103      	bne.n	80046a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d007      	beq.n	80046c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	619a      	str	r2, [r3, #24]
  }
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e0:	e031      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d02d      	beq.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7ff f89f 	bl	800382c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d122      	bne.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	429a      	cmp	r2, r3
 800471c:	d113      	bne.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00f      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d0be      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800477a:	e033      	b.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f87f 	bl	8004884 <I2C_IsErrorOccurred>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e031      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d025      	beq.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004798:	f7ff f848 	bl	800382c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11a      	bne.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d013      	beq.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d1c4      	bne.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	e02f      	b.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f838 	bl	8004884 <I2C_IsErrorOccurred>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e02d      	b.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7ff f805 	bl	800382c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11a      	bne.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d013      	beq.n	800486a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b20      	cmp	r3, #32
 8004876:	d1c8      	bne.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d068      	beq.n	8004982 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2210      	movs	r2, #16
 80048b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048b8:	e049      	b.n	800494e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d045      	beq.n	800494e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe ffb3 	bl	800382c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_IsErrorOccurred+0x54>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d13a      	bne.n	800494e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d121      	bne.n	8004940 <I2C_IsErrorOccurred+0xbc>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004902:	d01d      	beq.n	8004940 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d01a      	beq.n	8004940 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004918:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800491a:	f7fe ff87 	bl	800382c <HAL_GetTick>
 800491e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004920:	e00e      	b.n	8004940 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004922:	f7fe ff83 	bl	800382c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b19      	cmp	r3, #25
 800492e:	d907      	bls.n	8004940 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0320 	orr.w	r3, r3, #32
 8004936:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800493e:	e006      	b.n	800494e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d1e9      	bne.n	8004922 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d003      	beq.n	8004964 <I2C_IsErrorOccurred+0xe0>
 800495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0aa      	beq.n	80048ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01c      	beq.n	8004a32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fe45 	bl	8004688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <I2C_IsErrorOccurred+0x1bc>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	fe00e800 	.word	0xfe00e800

08004a44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	4613      	mov	r3, r2
 8004a54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a5c:	7a7b      	ldrb	r3, [r7, #9]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	0d5b      	lsrs	r3, r3, #21
 8004a7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <I2C_TransferConfig+0x60>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	43db      	mvns	r3, r3
 8004a88:	ea02 0103 	and.w	r1, r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	03ff63ff 	.word	0x03ff63ff

08004aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d138      	bne.n	8004b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e032      	b.n	8004b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d102      	bne.n	8004b58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b56:	e00b      	b.n	8004b70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d102      	bne.n	8004b6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6c:	e000      	b.n	8004b70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40007000 	.word	0x40007000

08004b80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 bc08 	b.w	80053a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b94:	4b96      	ldr	r3, [pc, #600]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9e:	4b94      	ldr	r3, [pc, #592]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80e4 	beq.w	8004d7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4c>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	f040 808b 	bne.w	8004cda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	f040 8087 	bne.w	8004cda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bcc:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x64>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e3df      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	4b81      	ldr	r3, [pc, #516]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_RCC_OscConfig+0x7e>
 8004bf4:	4b7e      	ldr	r3, [pc, #504]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_OscConfig+0x8a>
 8004bfe:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d223      	bcs.n	8004c56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fdcc 	bl	80057b0 <RCC_SetFlashLatencyFromMSIRange>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e3c0      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c22:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b70      	ldr	r3, [pc, #448]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	496d      	ldr	r1, [pc, #436]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c40:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	4968      	ldr	r1, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
 8004c54:	e025      	b.n	8004ca2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c56:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a65      	ldr	r2, [pc, #404]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	f043 0308 	orr.w	r3, r3, #8
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4960      	ldr	r1, [pc, #384]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c74:	4b5e      	ldr	r3, [pc, #376]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	495b      	ldr	r1, [pc, #364]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fd8c 	bl	80057b0 <RCC_SetFlashLatencyFromMSIRange>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e380      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca2:	f000 fcc1 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	4950      	ldr	r1, [pc, #320]	; (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <HAL_RCC_OscConfig+0x278>)
 8004cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cc2:	4b4e      	ldr	r3, [pc, #312]	; (8004dfc <HAL_RCC_OscConfig+0x27c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fd60 	bl	800378c <HAL_InitTick>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d052      	beq.n	8004d7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	e364      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d032      	beq.n	8004d48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ce2:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a42      	ldr	r2, [pc, #264]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cee:	f7fe fd9d 	bl	800382c <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cf6:	f7fe fd99 	bl	800382c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e34d      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d08:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	f043 0308 	orr.w	r3, r3, #8
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4930      	ldr	r1, [pc, #192]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d32:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	492b      	ldr	r1, [pc, #172]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
 8004d46:	e01a      	b.n	8004d7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d48:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d54:	f7fe fd6a 	bl	800382c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d5c:	f7fe fd66 	bl	800382c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e31a      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1dc>
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d073      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_OscConfig+0x21c>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d10e      	bne.n	8004db4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d10b      	bne.n	8004db4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d063      	beq.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d15f      	bne.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e2f7      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d106      	bne.n	8004dcc <HAL_RCC_OscConfig+0x24c>
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a0b      	ldr	r2, [pc, #44]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e025      	b.n	8004e18 <HAL_RCC_OscConfig+0x298>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd4:	d114      	bne.n	8004e00 <HAL_RCC_OscConfig+0x280>
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a02      	ldr	r2, [pc, #8]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e013      	b.n	8004e18 <HAL_RCC_OscConfig+0x298>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	0800c8f4 	.word	0x0800c8f4
 8004df8:	2000003c 	.word	0x2000003c
 8004dfc:	20000040 	.word	0x20000040
 8004e00:	4ba0      	ldr	r3, [pc, #640]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a9f      	ldr	r2, [pc, #636]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b9d      	ldr	r3, [pc, #628]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a9c      	ldr	r2, [pc, #624]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fe fd04 	bl	800382c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fe fd00 	bl	800382c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e2b4      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3a:	4b92      	ldr	r3, [pc, #584]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x2a8>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe fcf0 	bl	800382c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe fcec 	bl	800382c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e2a0      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e62:	4b88      	ldr	r3, [pc, #544]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2d0>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d060      	beq.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_OscConfig+0x310>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d119      	bne.n	8004ebe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d116      	bne.n	8004ebe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e90:	4b7c      	ldr	r3, [pc, #496]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x328>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e27d      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b76      	ldr	r3, [pc, #472]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	4973      	ldr	r1, [pc, #460]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ebc:	e040      	b.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d023      	beq.n	8004f0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fe fcab 	bl	800382c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fe fca7 	bl	800382c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e25b      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eec:	4b65      	ldr	r3, [pc, #404]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b62      	ldr	r3, [pc, #392]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	495f      	ldr	r1, [pc, #380]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
 8004f0c:	e018      	b.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fe fc87 	bl	800382c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f22:	f7fe fc83 	bl	800382c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e237      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f34:	4b53      	ldr	r3, [pc, #332]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f0      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f54:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fe fc62 	bl	800382c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7fe fc5e 	bl	800382c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e212      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f7e:	4b41      	ldr	r3, [pc, #260]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <HAL_RCC_OscConfig+0x3ec>
 8004f8c:	e01b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f94:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7fe fc45 	bl	800382c <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7fe fc41 	bl	800382c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1f5      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb8:	4b32      	ldr	r3, [pc, #200]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ef      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a6 	beq.w	8005120 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff0:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005000:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_RCC_OscConfig+0x508>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d118      	bne.n	800503e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500c:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <HAL_RCC_OscConfig+0x508>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_RCC_OscConfig+0x508>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005018:	f7fe fc08 	bl	800382c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005020:	f7fe fc04 	bl	800382c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1b8      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_RCC_OscConfig+0x508>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d108      	bne.n	8005058 <HAL_RCC_OscConfig+0x4d8>
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005056:	e029      	b.n	80050ac <HAL_RCC_OscConfig+0x52c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b05      	cmp	r3, #5
 800505e:	d115      	bne.n	800508c <HAL_RCC_OscConfig+0x50c>
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8005068:	f043 0304 	orr.w	r3, r3, #4
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	4a03      	ldr	r2, [pc, #12]	; (8005084 <HAL_RCC_OscConfig+0x504>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005080:	e014      	b.n	80050ac <HAL_RCC_OscConfig+0x52c>
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	40007000 	.word	0x40007000
 800508c:	4b9d      	ldr	r3, [pc, #628]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	4a9c      	ldr	r2, [pc, #624]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800509c:	4b99      	ldr	r3, [pc, #612]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	4a98      	ldr	r2, [pc, #608]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d016      	beq.n	80050e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fe fbba 	bl	800382c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fe fbb6 	bl	800382c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e168      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d2:	4b8c      	ldr	r3, [pc, #560]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ed      	beq.n	80050bc <HAL_RCC_OscConfig+0x53c>
 80050e0:	e015      	b.n	800510e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fe fba3 	bl	800382c <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fe fb9f 	bl	800382c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e151      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005100:	4b80      	ldr	r3, [pc, #512]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ed      	bne.n	80050ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005114:	4b7b      	ldr	r3, [pc, #492]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	4a7a      	ldr	r2, [pc, #488]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005134:	4b73      	ldr	r3, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800513a:	4a72      	ldr	r2, [pc, #456]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fe fb72 	bl	800382c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800514c:	f7fe fb6e 	bl	800382c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e122      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800515e:	4b69      	ldr	r3, [pc, #420]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <HAL_RCC_OscConfig+0x5cc>
 800516c:	e01b      	b.n	80051a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005174:	4a63      	ldr	r2, [pc, #396]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fe fb55 	bl	800382c <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005186:	f7fe fb51 	bl	800382c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e105      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005198:	4b5a      	ldr	r3, [pc, #360]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800519a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ef      	bne.n	8005186 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80f9 	beq.w	80053a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	f040 80cf 	bne.w	8005358 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ba:	4b52      	ldr	r3, [pc, #328]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d12c      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	3b01      	subs	r3, #1
 80051da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d123      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d11b      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d113      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	3b01      	subs	r3, #1
 800520e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d109      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d071      	beq.n	800530c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d068      	beq.n	8005300 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800522e:	4b35      	ldr	r3, [pc, #212]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d105      	bne.n	8005246 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800523a:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0ac      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800524a:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005254:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005256:	f7fe fae9 	bl	800382c <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525e:	f7fe fae5 	bl	800382c <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e099      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800527c:	4b21      	ldr	r3, [pc, #132]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_RCC_OscConfig+0x788>)
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800528c:	3a01      	subs	r2, #1
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	4311      	orrs	r1, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005296:	0212      	lsls	r2, r2, #8
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800529e:	0852      	lsrs	r2, r2, #1
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0552      	lsls	r2, r2, #21
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052aa:	0852      	lsrs	r2, r2, #1
 80052ac:	3a01      	subs	r2, #1
 80052ae:	0652      	lsls	r2, r2, #25
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b6:	06d2      	lsls	r2, r2, #27
 80052b8:	430a      	orrs	r2, r1
 80052ba:	4912      	ldr	r1, [pc, #72]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052d8:	f7fe faa8 	bl	800382c <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fe faa4 	bl	800382c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e058      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	4b04      	ldr	r3, [pc, #16]	; (8005304 <HAL_RCC_OscConfig+0x784>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052fe:	e050      	b.n	80053a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e04f      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
 8005304:	40021000 	.word	0x40021000
 8005308:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d144      	bne.n	80053a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a23      	ldr	r2, [pc, #140]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 800531e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005324:	4b21      	ldr	r3, [pc, #132]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 800532a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005330:	f7fe fa7c 	bl	800382c <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005338:	f7fe fa78 	bl	800382c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e02c      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534a:	4b18      	ldr	r3, [pc, #96]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x7b8>
 8005356:	e024      	b.n	80053a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d01f      	beq.n	800539e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fe fa5f 	bl	800382c <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005372:	f7fe fa5b 	bl	800382c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e00f      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	4905      	ldr	r1, [pc, #20]	; (80053ac <HAL_RCC_OscConfig+0x82c>)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_OscConfig+0x830>)
 8005398:	4013      	ands	r3, r2
 800539a:	60cb      	str	r3, [r1, #12]
 800539c:	e001      	b.n	80053a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	feeefffc 	.word	0xfeeefffc

080053b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e11d      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053cc:	4b90      	ldr	r3, [pc, #576]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d910      	bls.n	80053fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b8d      	ldr	r3, [pc, #564]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 020f 	bic.w	r2, r3, #15
 80053e2:	498b      	ldr	r1, [pc, #556]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b89      	ldr	r3, [pc, #548]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e105      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b7e      	ldr	r3, [pc, #504]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	497b      	ldr	r1, [pc, #492]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d079      	beq.n	800552a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d11e      	bne.n	800547c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0dc      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800544e:	f000 fa09 	bl	8005864 <RCC_GetSysClockFreqFromPLLSource>
 8005452:	4603      	mov	r3, r0
 8005454:	4a70      	ldr	r2, [pc, #448]	; (8005618 <HAL_RCC_ClockConfig+0x264>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d946      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800545a:	4b6e      	ldr	r3, [pc, #440]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d140      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005466:	4b6b      	ldr	r3, [pc, #428]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546e:	4a69      	ldr	r2, [pc, #420]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e035      	b.n	80054e8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d107      	bne.n	8005494 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005484:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d115      	bne.n	80054bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0b9      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d107      	bne.n	80054ac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800549c:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0ad      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ac:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a5      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80054bc:	f000 f8b4 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4a55      	ldr	r2, [pc, #340]	; (8005618 <HAL_RCC_ClockConfig+0x264>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d90f      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054c8:	4b52      	ldr	r3, [pc, #328]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054d4:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054dc:	4a4d      	ldr	r2, [pc, #308]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e8:	4b4a      	ldr	r3, [pc, #296]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 0203 	bic.w	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4947      	ldr	r1, [pc, #284]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fa:	f7fe f997 	bl	800382c <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005500:	e00a      	b.n	8005518 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005502:	f7fe f993 	bl	800382c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e077      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005518:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 020c 	and.w	r2, r3, #12
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	429a      	cmp	r2, r3
 8005528:	d1eb      	bne.n	8005502 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d105      	bne.n	800553c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005530:	4b38      	ldr	r3, [pc, #224]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4a37      	ldr	r2, [pc, #220]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d010      	beq.n	800556a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005554:	429a      	cmp	r2, r3
 8005556:	d208      	bcs.n	800556a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005558:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	492b      	ldr	r1, [pc, #172]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800556a:	4b29      	ldr	r3, [pc, #164]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d210      	bcs.n	800559a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 020f 	bic.w	r2, r3, #15
 8005580:	4923      	ldr	r1, [pc, #140]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <HAL_RCC_ClockConfig+0x25c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d001      	beq.n	800559a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e036      	b.n	8005608 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a6:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	4918      	ldr	r1, [pc, #96]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4910      	ldr	r1, [pc, #64]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d8:	f000 f826 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <HAL_RCC_ClockConfig+0x260>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	490c      	ldr	r1, [pc, #48]	; (800561c <HAL_RCC_ClockConfig+0x268>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <HAL_RCC_ClockConfig+0x26c>)
 80055f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x270>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe f8c5 	bl	800378c <HAL_InitTick>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]

  return status;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40022000 	.word	0x40022000
 8005614:	40021000 	.word	0x40021000
 8005618:	04c4b400 	.word	0x04c4b400
 800561c:	0800c8f4 	.word	0x0800c8f4
 8005620:	2000003c 	.word	0x2000003c
 8005624:	20000040 	.word	0x20000040

08005628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	; 0x24
 800562c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005640:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x34>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d121      	bne.n	800569a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d11e      	bne.n	800569a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005668:	4b31      	ldr	r3, [pc, #196]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e005      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005678:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b04      	cmp	r3, #4
 800569e:	d102      	bne.n	80056a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <HAL_RCC_GetSysClockFreq+0x110>)
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e004      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056ac:	4b23      	ldr	r3, [pc, #140]	; (800573c <HAL_RCC_GetSysClockFreq+0x114>)
 80056ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b0c      	cmp	r3, #12
 80056b4:	d134      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056b6:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d003      	beq.n	80056ce <HAL_RCC_GetSysClockFreq+0xa6>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d003      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0xac>
 80056cc:	e005      	b.n	80056da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056ce:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <HAL_RCC_GetSysClockFreq+0x110>)
 80056d0:	617b      	str	r3, [r7, #20]
      break;
 80056d2:	e005      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <HAL_RCC_GetSysClockFreq+0x114>)
 80056d6:	617b      	str	r3, [r7, #20]
      break;
 80056d8:	e002      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	617b      	str	r3, [r7, #20]
      break;
 80056de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	3301      	adds	r3, #1
 80056ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	fb03 f202 	mul.w	r2, r3, r2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <HAL_RCC_GetSysClockFreq+0x108>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	0e5b      	lsrs	r3, r3, #25
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	3301      	adds	r3, #1
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005720:	69bb      	ldr	r3, [r7, #24]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3724      	adds	r7, #36	; 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	0800c90c 	.word	0x0800c90c
 8005738:	00f42400 	.word	0x00f42400
 800573c:	007a1200 	.word	0x007a1200

08005740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005744:	4b03      	ldr	r3, [pc, #12]	; (8005754 <HAL_RCC_GetHCLKFreq+0x14>)
 8005746:	681b      	ldr	r3, [r3, #0]
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	2000003c 	.word	0x2000003c

08005758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800575c:	f7ff fff0 	bl	8005740 <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4904      	ldr	r1, [pc, #16]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000
 8005780:	0800c904 	.word	0x0800c904

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005788:	f7ff ffda 	bl	8005740 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0adb      	lsrs	r3, r3, #11
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4904      	ldr	r1, [pc, #16]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40021000 	.word	0x40021000
 80057ac:	0800c904 	.word	0x0800c904

080057b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057c8:	f7ff f9ba 	bl	8004b40 <HAL_PWREx_GetVoltageRange>
 80057cc:	6178      	str	r0, [r7, #20]
 80057ce:	e014      	b.n	80057fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d0:	4b22      	ldr	r3, [pc, #136]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	4a21      	ldr	r2, [pc, #132]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6593      	str	r3, [r2, #88]	; 0x58
 80057dc:	4b1f      	ldr	r3, [pc, #124]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057e8:	f7ff f9aa 	bl	8004b40 <HAL_PWREx_GetVoltageRange>
 80057ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057ee:	4b1b      	ldr	r3, [pc, #108]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80057f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005800:	d10b      	bne.n	800581a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b80      	cmp	r3, #128	; 0x80
 8005806:	d913      	bls.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2ba0      	cmp	r3, #160	; 0xa0
 800580c:	d902      	bls.n	8005814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800580e:	2302      	movs	r3, #2
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e00d      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005814:	2301      	movs	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	e00a      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b7f      	cmp	r3, #127	; 0x7f
 800581e:	d902      	bls.n	8005826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005820:	2302      	movs	r3, #2
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e004      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d101      	bne.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800582c:	2301      	movs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f023 020f 	bic.w	r2, r3, #15
 8005838:	4909      	ldr	r1, [pc, #36]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	d001      	beq.n	8005852 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40021000 	.word	0x40021000
 8005860:	40022000 	.word	0x40022000

08005864 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800586a:	4b2d      	ldr	r3, [pc, #180]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d00b      	beq.n	8005892 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d825      	bhi.n	80058cc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d008      	beq.n	8005898 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d11f      	bne.n	80058cc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800588c:	4b25      	ldr	r3, [pc, #148]	; (8005924 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800588e:	613b      	str	r3, [r7, #16]
    break;
 8005890:	e01f      	b.n	80058d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005894:	613b      	str	r3, [r7, #16]
    break;
 8005896:	e01c      	b.n	80058d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005898:	4b21      	ldr	r3, [pc, #132]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058a4:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e005      	b.n	80058c0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	613b      	str	r3, [r7, #16]
    break;
 80058ca:	e002      	b.n	80058d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
    break;
 80058d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	3301      	adds	r3, #1
 80058de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	fb03 f202 	mul.w	r2, r3, r2
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	0e5b      	lsrs	r3, r3, #25
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005912:	683b      	ldr	r3, [r7, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40021000 	.word	0x40021000
 8005924:	00f42400 	.word	0x00f42400
 8005928:	007a1200 	.word	0x007a1200
 800592c:	0800c90c 	.word	0x0800c90c

08005930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0be      	b.n	8005ac0 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005952:	d009      	beq.n	8005968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	61da      	str	r2, [r3, #28]
 800595a:	e005      	b.n	8005968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8cb 	bl	8005b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005998:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a2:	d902      	bls.n	80059aa <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e002      	b.n	80059b0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059b8:	d007      	beq.n	80059ca <HAL_SPI_Init+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	ea42 0103 	orr.w	r1, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a28:	d11b      	bne.n	8005a62 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a3a:	d903      	bls.n	8005a44 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
 8005a42:	e002      	b.n	8005a4a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d107      	bne.n	8005a62 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0204 	and.w	r2, r3, #4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a88:	ea42 0103 	orr.w	r1, r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	d105      	bne.n	8005ab0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	b292      	uxth	r2, r2
 8005aae:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01a      	b.n	8005b10 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f81a 	bl	8005b2c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d003      	beq.n	8005b72 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005b70:	e1cc      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7a:	d112      	bne.n	8005ba2 <HAL_SPI_Receive+0x62>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10e      	bne.n	8005ba2 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2204      	movs	r2, #4
 8005b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4613      	mov	r3, r2
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f9c1 	bl	8005f20 <HAL_SPI_TransmitReceive>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	e1ba      	b.n	8005f18 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_SPI_Receive+0x70>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e1b3      	b.n	8005f18 <HAL_SPI_Receive+0x3d8>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb8:	f7fd fe38 	bl	800382c <HAL_GetTick>
 8005bbc:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_SPI_Receive+0x8a>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005bd0:	e19c      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d118      	bne.n	8005c50 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c3c:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c58:	d908      	bls.n	8005c6c <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	e007      	b.n	8005c7c <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	d10f      	bne.n	8005ca6 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d007      	beq.n	8005cc4 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ccc:	d871      	bhi.n	8005db2 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cce:	e035      	b.n	8005d3c <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d117      	bne.n	8005d0e <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f103 020c 	add.w	r2, r3, #12
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d0c:	e016      	b.n	8005d3c <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0e:	f7fd fd8d 	bl	800382c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d803      	bhi.n	8005d26 <HAL_SPI_Receive+0x1e6>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Receive+0x1ec>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d3a:	e0e7      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1c3      	bne.n	8005cd0 <HAL_SPI_Receive+0x190>
 8005d48:	e039      	b.n	8005dbe <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d115      	bne.n	8005d84 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	b292      	uxth	r2, r2
 8005d64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	1c9a      	adds	r2, r3, #2
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d82:	e016      	b.n	8005db2 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d84:	f7fd fd52 	bl	800382c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d803      	bhi.n	8005d9c <HAL_SPI_Receive+0x25c>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d102      	bne.n	8005da2 <HAL_SPI_Receive+0x262>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005db0:	e0ac      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1c5      	bne.n	8005d4a <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc6:	d178      	bne.n	8005eba <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	2101      	movs	r1, #1
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 fa00 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005df4:	e08a      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dfe:	d907      	bls.n	8005e10 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e008      	b.n	8005e22 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f103 020c 	add.w	r2, r3, #12
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f001 f9db 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3c:	f043 0202 	orr.w	r2, r3, #2
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005e4a:	e05f      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e54:	d105      	bne.n	8005e62 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	e02b      	b.n	8005eba <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e72:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e7c:	d11d      	bne.n	8005eba <HAL_SPI_Receive+0x37a>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d119      	bne.n	8005eba <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	2101      	movs	r1, #1
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 f9a9 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	f043 0202 	orr.w	r2, r3, #2
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005eae:	e02d      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f001 fab0 	bl	8007424 <SPI_EndRxTransaction>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d10a      	bne.n	8005ef4 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005ef2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f02:	e003      	b.n	8005f0c <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	; 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b092      	sub	sp, #72	; 0x48
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f36:	2301      	movs	r3, #1
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x2e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e322      	b.n	8006594 <HAL_SPI_TransmitReceive+0x674>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f56:	f7fd fc69 	bl	800382c <HAL_GetTick>
 8005f5a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8005f6c:	887b      	ldrh	r3, [r7, #2]
 8005f6e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8005f70:	887b      	ldrh	r3, [r7, #2]
 8005f72:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d00f      	beq.n	8005fac <HAL_SPI_TransmitReceive+0x8c>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f92:	d107      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x84>
 8005f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d003      	beq.n	8005fac <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005faa:	e2ed      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x9e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x9e>
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005fc4:	e2e0      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d003      	beq.n	8005fda <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	887a      	ldrh	r2, [r7, #2]
 8005fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	887a      	ldrh	r2, [r7, #2]
 8005ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	887a      	ldrh	r2, [r7, #2]
 8006006:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601c:	d10f      	bne.n	800603e <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800603c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006046:	d802      	bhi.n	800604e <HAL_SPI_TransmitReceive+0x12e>
 8006048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d908      	bls.n	8006060 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	e007      	b.n	8006070 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d007      	beq.n	800608e <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006096:	f240 80ce 	bls.w	8006236 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x18a>
 80060a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 80b8 	bne.w	800621a <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 80a0 	bne.w	800621a <HAL_SPI_TransmitReceive+0x2fa>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	f040 809a 	bne.w	800621a <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10c      	bne.n	800610a <HAL_SPI_TransmitReceive+0x1ea>
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006118:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800611a:	e07e      	b.n	800621a <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d13f      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x28a>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03a      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x28a>
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d137      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	881a      	ldrh	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	1c9a      	adds	r2, r3, #2
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11e      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x28a>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d119      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10c      	bne.n	800619a <HAL_SPI_TransmitReceive+0x27a>
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006198:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061a8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d11c      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x2d2>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	b292      	uxth	r2, r2
 80061d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ee:	2301      	movs	r3, #1
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061f2:	f7fd fb1b 	bl	800382c <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fe:	429a      	cmp	r2, r3
 8006200:	d80b      	bhi.n	800621a <HAL_SPI_TransmitReceive+0x2fa>
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d007      	beq.n	800621a <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006218:	e1b6      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	f47f af7b 	bne.w	800611c <HAL_SPI_TransmitReceive+0x1fc>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	f47f af74 	bne.w	800611c <HAL_SPI_TransmitReceive+0x1fc>
 8006234:	e12d      	b.n	8006492 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_SPI_TransmitReceive+0x326>
 800623e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 8119 	bne.w	8006478 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d912      	bls.n	8006276 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b02      	subs	r3, #2
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006274:	e100      	b.n	8006478 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 80e8 	bne.w	8006478 <HAL_SPI_TransmitReceive+0x558>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	f040 80e2 	bne.w	8006478 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10c      	bne.n	80062d8 <HAL_SPI_TransmitReceive+0x3b8>
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d6:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062e6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e8:	e0c6      	b.n	8006478 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d158      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x48a>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d053      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x48a>
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d150      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d912      	bls.n	8006338 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b02      	subs	r3, #2
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006336:	e012      	b.n	800635e <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11e      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x48a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006374:	d119      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10c      	bne.n	800639a <HAL_SPI_TransmitReceive+0x47a>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006398:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063a8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d148      	bne.n	800644a <HAL_SPI_TransmitReceive+0x52a>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d042      	beq.n	800644a <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d923      	bls.n	8006418 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	b292      	uxth	r2, r2
 80063dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	1c9a      	adds	r2, r3, #2
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b02      	subs	r3, #2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d81f      	bhi.n	8006446 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	e016      	b.n	8006446 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f103 020c 	add.w	r2, r3, #12
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006446:	2301      	movs	r3, #1
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800644a:	f7fd f9ef 	bl	800382c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006456:	429a      	cmp	r2, r3
 8006458:	d803      	bhi.n	8006462 <HAL_SPI_TransmitReceive+0x542>
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d102      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x548>
 8006462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006476:	e087      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	f47f af33 	bne.w	80062ea <HAL_SPI_TransmitReceive+0x3ca>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	f47f af2c 	bne.w	80062ea <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649a:	d146      	bne.n	800652a <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a2:	2201      	movs	r2, #1
 80064a4:	2101      	movs	r1, #1
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fe9e 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b6:	f043 0202 	orr.w	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80064c4:	e060      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064ce:	d105      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	e026      	b.n	800652a <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064ec:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d119      	bne.n	800652a <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fc:	2201      	movs	r2, #1
 80064fe:	2101      	movs	r1, #1
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fe71 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	f043 0202 	orr.w	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 800651e:	e033      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006528:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b10      	cmp	r3, #16
 8006536:	d10d      	bne.n	8006554 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653c:	f043 0202 	orr.w	r2, r3, #2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800654c:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006556:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 ffbb 	bl	80074d4 <SPI_EndRxTxTransaction>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800657e:	e003      	b.n	8006588 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006590:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8006594:	4618      	mov	r0, r3
 8006596:	3740      	adds	r7, #64	; 0x40
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_SPI_Transmit_IT+0x1e>
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065be:	e082      	b.n	80066c6 <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
 80065ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065d0:	e079      	b.n	80066c6 <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_SPI_Transmit_IT+0x44>
 80065dc:	2302      	movs	r3, #2
 80065de:	e073      	b.n	80066c8 <HAL_SPI_Transmit_IT+0x12c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2203      	movs	r2, #3
 80065ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800662c:	d903      	bls.n	8006636 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <HAL_SPI_Transmit_IT+0x138>)
 8006632:	651a      	str	r2, [r3, #80]	; 0x50
 8006634:	e002      	b.n	800663c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <HAL_SPI_Transmit_IT+0x13c>)
 800663a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006644:	d10f      	bne.n	8006666 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006664:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666e:	d10f      	bne.n	8006690 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d007      	beq.n	80066ae <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80066c4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	08007189 	.word	0x08007189
 80066d8:	08007129 	.word	0x08007129

080066dc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d002      	beq.n	8006700 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80066fa:	2302      	movs	r3, #2
 80066fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066fe:	e0ba      	b.n	8006876 <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <HAL_SPI_Receive_IT+0x4e>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006710:	d10b      	bne.n	800672a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2204      	movs	r2, #4
 8006716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8b1 	bl	8006888 <HAL_SPI_TransmitReceive_IT>
 8006726:	4603      	mov	r3, r0
 8006728:	e0a6      	b.n	8006878 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_Receive_IT+0x5a>
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
    goto error;
 800673a:	e09c      	b.n	8006876 <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_SPI_Receive_IT+0x6e>
 8006746:	2302      	movs	r3, #2
 8006748:	e096      	b.n	8006878 <HAL_SPI_Receive_IT+0x19c>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2204      	movs	r2, #4
 8006756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006796:	d90b      	bls.n	80067b0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a35      	ldr	r2, [pc, #212]	; (8006880 <HAL_SPI_Receive_IT+0x1a4>)
 80067ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80067ae:	e00a      	b.n	80067c6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067be:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a30      	ldr	r2, [pc, #192]	; (8006884 <HAL_SPI_Receive_IT+0x1a8>)
 80067c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ce:	d10f      	bne.n	80067f0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067ee:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d11f      	bne.n	800683a <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006808:	d806      	bhi.n	8006818 <HAL_SPI_Receive_IT+0x13c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	2b02      	cmp	r3, #2
 8006810:	d102      	bne.n	8006818 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2202      	movs	r2, #2
 8006816:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e002      	b.n	8006840 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d007      	beq.n	800685e <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006874:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	080070a1 	.word	0x080070a1
 8006884:	08006fe1 	.word	0x08006fe1

08006888 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068a0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d00d      	beq.n	80068ca <HAL_SPI_TransmitReceive_IT+0x42>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b4:	d106      	bne.n	80068c4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80068be:	7dbb      	ldrb	r3, [r7, #22]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d002      	beq.n	80068ca <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068c8:	e0a5      	b.n	8006a16 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_SPI_TransmitReceive_IT+0x54>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_TransmitReceive_IT+0x54>
 80068d6:	887b      	ldrh	r3, [r7, #2]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068e0:	e099      	b.n	8006a16 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_SPI_TransmitReceive_IT+0x68>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e093      	b.n	8006a18 <HAL_SPI_TransmitReceive_IT+0x190>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b04      	cmp	r3, #4
 8006902:	d003      	beq.n	800690c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2205      	movs	r2, #5
 8006908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	887a      	ldrh	r2, [r7, #2]
 8006922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	887a      	ldrh	r2, [r7, #2]
 800692e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	887a      	ldrh	r2, [r7, #2]
 8006936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006942:	d906      	bls.n	8006952 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a37      	ldr	r2, [pc, #220]	; (8006a24 <HAL_SPI_TransmitReceive_IT+0x19c>)
 8006948:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4a36      	ldr	r2, [pc, #216]	; (8006a28 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 800694e:	651a      	str	r2, [r3, #80]	; 0x50
 8006950:	e005      	b.n	800695e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a35      	ldr	r2, [pc, #212]	; (8006a2c <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8006956:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a35      	ldr	r2, [pc, #212]	; (8006a30 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 800695c:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006966:	d11f      	bne.n	80069a8 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006976:	d806      	bhi.n	8006986 <HAL_SPI_TransmitReceive_IT+0xfe>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	2b02      	cmp	r3, #2
 800697e:	d102      	bne.n	8006986 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2202      	movs	r2, #2
 8006984:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	e002      	b.n	80069ae <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069b6:	d802      	bhi.n	80069be <HAL_SPI_TransmitReceive_IT+0x136>
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d908      	bls.n	80069d0 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	e007      	b.n	80069e0 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069de:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	d007      	beq.n	80069fe <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006a14:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	08006e69 	.word	0x08006e69
 8006a28:	08006f19 	.word	0x08006f19
 8006a2c:	08006c71 	.word	0x08006c71
 8006a30:	08006dad 	.word	0x08006dad

08006a34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10e      	bne.n	8006a74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
    return;
 8006a72:	e0ce      	b.n	8006c12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_SPI_IRQHandler+0x5e>
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
    return;
 8006a90:	e0bf      	b.n	8006c12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_SPI_IRQHandler+0x7e>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80b0 	beq.w	8006c12 <HAL_SPI_IRQHandler+0x1de>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80aa 	beq.w	8006c12 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d023      	beq.n	8006b10 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d011      	beq.n	8006af8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad8:	f043 0204 	orr.w	r2, r3, #4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	e00b      	b.n	8006b10 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
        return;
 8006b0e:	e080      	b.n	8006c12 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d014      	beq.n	8006b44 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	f043 0208 	orr.w	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d04f      	beq.n	8006c10 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <HAL_SPI_IRQHandler+0x168>
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d034      	beq.n	8006c06 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0203 	bic.w	r2, r2, #3
 8006baa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d011      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_SPI_IRQHandler+0x1e4>)
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fc ff74 	bl	8003aae <HAL_DMA_Abort_IT>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d016      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <HAL_SPI_IRQHandler+0x1e4>)
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fc ff5e 	bl	8003aae <HAL_DMA_Abort_IT>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006c04:	e003      	b.n	8006c0e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f812 	bl	8006c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c0c:	e000      	b.n	8006c10 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006c0e:	bf00      	nop
    return;
 8006c10:	bf00      	nop
  }
}
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	08006c45 	.word	0x08006c45

08006c1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff ffe5 	bl	8006c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d923      	bls.n	8006ccc <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	1c9a      	adds	r2, r3, #2
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b02      	subs	r3, #2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d11f      	bne.n	8006cfa <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	e016      	b.n	8006cfa <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f103 020c 	add.w	r2, r3, #12
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d120      	bne.n	8006d48 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d10b      	bne.n	8006d28 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d1e:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a0b      	ldr	r2, [pc, #44]	; (8006d50 <SPI_2linesRxISR_8BIT+0xe0>)
 8006d24:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006d26:	e00f      	b.n	8006d48 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d36:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fc0c 	bl	8007560 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08006d55 	.word	0x08006d55

08006d54 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	330c      	adds	r3, #12
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006d70:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	1e5a      	subs	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10f      	bne.n	8006da4 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d92:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbde 	bl	8007560 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d912      	bls.n	8006de4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	1c9a      	adds	r2, r3, #2
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b02      	subs	r3, #2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006de2:	e012      	b.n	8006e0a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	7812      	ldrb	r2, [r2, #0]
 8006df0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d126      	bne.n	8006e62 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1c:	d110      	bne.n	8006e40 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e2c:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e3c:	605a      	str	r2, [r3, #4]
      return;
 8006e3e:	e010      	b.n	8006e62 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fb7f 	bl	8007560 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	b292      	uxth	r2, r2
 8006e7c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d118      	bne.n	8006ed8 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	d103      	bne.n	8006eb8 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <SPI_2linesRxISR_16BIT+0x78>)
 8006eb4:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006eb6:	e00f      	b.n	8006ed8 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb44 	bl	8007560 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08006ee5 	.word	0x08006ee5

08006ee4 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006ef8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f08:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fb28 	bl	8007560 <SPI_CloseRxTx_ISR>
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	1c9a      	adds	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d126      	bne.n	8006f9c <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f56:	d110      	bne.n	8006f7a <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f66:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f76:	605a      	str	r2, [r3, #4]
      return;
 8006f78:	e010      	b.n	8006f9c <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f88:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fae2 	bl	8007560 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006fbe:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc4:	1e5a      	subs	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb20 	bl	8007618 <SPI_CloseRx_ISR>
  }
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f103 020c 	add.w	r2, r3, #12
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	7812      	ldrb	r2, [r2, #0]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10c      	bne.n	800703c <SPI_RxISR_8BIT+0x5c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702a:	d107      	bne.n	800703c <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800703a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007050:	d103      	bne.n	800705a <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a04      	ldr	r2, [pc, #16]	; (8007068 <SPI_RxISR_8BIT+0x88>)
 8007056:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007058:	e002      	b.n	8007060 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fadc 	bl	8007618 <SPI_CloseRx_ISR>
  }
}
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	08006fa3 	.word	0x08006fa3

0800706c <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007080:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007090:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fac0 	bl	8007618 <SPI_CloseRx_ISR>
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	b292      	uxth	r2, r2
 80070b4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d10c      	bne.n	80070f8 <SPI_RxISR_16BIT+0x58>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	d107      	bne.n	80070f8 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070f6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d103      	bne.n	8007116 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a04      	ldr	r2, [pc, #16]	; (8007124 <SPI_RxISR_16BIT+0x84>)
 8007112:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007114:	e002      	b.n	800711c <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa7e 	bl	8007618 <SPI_CloseRx_ISR>
  }
}
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	0800706d 	.word	0x0800706d

08007128 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10f      	bne.n	8007180 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007168:	d107      	bne.n	800717a <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007178:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa92 	bl	80076a4 <SPI_CloseTx_ISR>
  }
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	881a      	ldrh	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10f      	bne.n	80071de <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c6:	d107      	bne.n	80071d8 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071d6:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa63 	bl	80076a4 <SPI_CloseTx_ISR>
  }
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071f8:	f7fc fb18 	bl	800382c <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4413      	add	r3, r2
 8007206:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007208:	f7fc fb10 	bl	800382c <HAL_GetTick>
 800720c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800720e:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	015b      	lsls	r3, r3, #5
 8007214:	0d1b      	lsrs	r3, r3, #20
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800721e:	e054      	b.n	80072ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d050      	beq.n	80072ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007228:	f7fc fb00 	bl	800382c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	d902      	bls.n	800723e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d13d      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800724c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007256:	d111      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007260:	d004      	beq.n	800726c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726a:	d107      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007284:	d10f      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e017      	b.n	80072ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d19b      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000003c 	.word	0x2000003c

080072f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800730a:	f7fc fa8f 	bl	800382c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	4413      	add	r3, r2
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800731a:	f7fc fa87 	bl	800382c <HAL_GetTick>
 800731e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007328:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	00da      	lsls	r2, r3, #3
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	0d1b      	lsrs	r3, r3, #20
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007340:	e060      	b.n	8007404 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007348:	d107      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0x62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007358:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d050      	beq.n	8007404 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007362:	f7fc fa63 	bl	800382c <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736e:	429a      	cmp	r2, r3
 8007370:	d902      	bls.n	8007378 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d13d      	bne.n	80073f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007386:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007390:	d111      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739a:	d004      	beq.n	80073a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a4:	d107      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073be:	d10f      	bne.n	80073e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e010      	b.n	8007416 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	3b01      	subs	r3, #1
 8007402:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d196      	bne.n	8007342 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3728      	adds	r7, #40	; 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	2000003c 	.word	0x2000003c

08007424 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007438:	d111      	bne.n	800745e <SPI_EndRxTransaction+0x3a>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007442:	d004      	beq.n	800744e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744c:	d107      	bne.n	800745e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff febd 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e023      	b.n	80074cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748c:	d11d      	bne.n	80074ca <SPI_EndRxTransaction+0xa6>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007496:	d004      	beq.n	80074a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a0:	d113      	bne.n	80074ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff ff22 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e000      	b.n	80074cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff ff03 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e027      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fe68 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007522:	f043 0220 	orr.w	r2, r3, #32
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e014      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fedc 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e000      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007568:	f7fc f960 	bl	800382c <HAL_GetTick>
 800756c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0220 	bic.w	r2, r2, #32
 800757c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	2164      	movs	r1, #100	; 0x64
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ffa6 	bl	80074d4 <SPI_EndRxTxTransaction>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b10      	cmp	r3, #16
 80075a6:	d112      	bne.n	80075ce <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b4:	f043 0202 	orr.w	r2, r3, #2
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80075c4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff fb32 	bl	8006c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075cc:	e020      	b.n	8007610 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d115      	bne.n	8007602 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d107      	bne.n	80075f2 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fa fe26 	bl	800223c <HAL_SPI_RxCpltCallback>
}
 80075f0:	e00e      	b.n	8007610 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff fb0e 	bl	8006c1c <HAL_SPI_TxRxCpltCallback>
}
 8007600:	e006      	b.n	8007610 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fb10 	bl	8006c30 <HAL_SPI_ErrorCallback>
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800762e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007630:	f7fc f8fc 	bl	800382c <HAL_GetTick>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	2164      	movs	r1, #100	; 0x64
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fef2 	bl	8007424 <SPI_EndRxTransaction>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764a:	f043 0220 	orr.w	r2, r3, #32
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b10      	cmp	r3, #16
 8007666:	d10e      	bne.n	8007686 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766c:	f043 0202 	orr.w	r2, r3, #2
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800767c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fad6 	bl	8006c30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007684:	e00a      	b.n	800769c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800768a:	2b00      	cmp	r3, #0
 800768c:	d103      	bne.n	8007696 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fa fdd4 	bl	800223c <HAL_SPI_RxCpltCallback>
}
 8007694:	e002      	b.n	800769c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff faca 	bl	8006c30 <HAL_SPI_ErrorCallback>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ac:	f7fc f8be 	bl	800382c <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	2164      	movs	r1, #100	; 0x64
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ff04 	bl	80074d4 <SPI_EndRxTxTransaction>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d6:	f043 0220 	orr.w	r2, r3, #32
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fa8f 	bl	8006c30 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007712:	e002      	b.n	800771a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fa fda5 	bl	8002264 <HAL_SPI_TxCpltCallback>
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e042      	b.n	80077ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f83b 	bl	80077c2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2224      	movs	r2, #36	; 0x24
 8007750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc87 	bl	8008080 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f988 	bl	8007a88 <UART_SetConfig>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e01b      	b.n	80077ba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fd06 	bl	80081c4 <UART_CheckIdleState>
 80077b8:	4603      	mov	r3, r0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b08a      	sub	sp, #40	; 0x28
 80077da:	af02      	add	r7, sp, #8
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d17c      	bne.n	80078ea <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UART_Transmit+0x26>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e075      	b.n	80078ec <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2221      	movs	r2, #33	; 0x21
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007810:	f7fc f80c 	bl	800382c <HAL_GetTick>
 8007814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	88fa      	ldrh	r2, [r7, #6]
 800781a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782e:	d108      	bne.n	8007842 <HAL_UART_Transmit+0x6c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	e003      	b.n	800784a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800784a:	e031      	b.n	80078b0 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fd5e 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e03e      	b.n	80078ec <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	881a      	ldrh	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007880:	b292      	uxth	r2, r2
 8007882:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	3302      	adds	r3, #2
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	e008      	b.n	800789e <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	b292      	uxth	r2, r2
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	3301      	adds	r3, #1
 800789c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1c7      	bne.n	800784c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2140      	movs	r1, #64	; 0x40
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fd26 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e006      	b.n	80078ec <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80078ea:	2302      	movs	r3, #2
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800790a:	2b20      	cmp	r3, #32
 800790c:	f040 80b6 	bne.w	8007a7c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_UART_Receive+0x28>
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0ae      	b.n	8007a7e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2222      	movs	r2, #34	; 0x22
 800792c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007936:	f7fb ff79 	bl	800382c <HAL_GetTick>
 800793a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	88fa      	ldrh	r2, [r7, #6]
 8007948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	d10e      	bne.n	8007974 <HAL_UART_Receive+0x80>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <HAL_UART_Receive+0x76>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007968:	e02d      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	22ff      	movs	r2, #255	; 0xff
 800796e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007972:	e028      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10d      	bne.n	8007998 <HAL_UART_Receive+0xa4>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <HAL_UART_Receive+0x9a>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800798c:	e01b      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	227f      	movs	r2, #127	; 0x7f
 8007992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007996:	e016      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a0:	d10d      	bne.n	80079be <HAL_UART_Receive+0xca>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <HAL_UART_Receive+0xc0>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	227f      	movs	r2, #127	; 0x7f
 80079ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079b2:	e008      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	223f      	movs	r2, #63	; 0x3f
 80079b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079bc:	e003      	b.n	80079c6 <HAL_UART_Receive+0xd2>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d108      	bne.n	80079ea <HAL_UART_Receive+0xf6>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	e003      	b.n	80079f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80079f2:	e037      	b.n	8007a64 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2120      	movs	r1, #32
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fc8a 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e033      	b.n	8007a7e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10c      	bne.n	8007a36 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	8a7b      	ldrh	r3, [r7, #18]
 8007a26:	4013      	ands	r3, r2
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	3302      	adds	r3, #2
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	e00d      	b.n	8007a52 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	8a7b      	ldrh	r3, [r7, #18]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	4013      	ands	r3, r2
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1c1      	bne.n	80079f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e000      	b.n	8007a7e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
  }
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baa      	ldr	r3, [pc, #680]	; (8007d60 <UART_SetConfig+0x2d8>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a9f      	ldr	r2, [pc, #636]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a90      	ldr	r2, [pc, #576]	; (8007d68 <UART_SetConfig+0x2e0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	4b8f      	ldr	r3, [pc, #572]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d81a      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e116      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e112      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e10e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e10a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e106      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7c      	ldr	r2, [pc, #496]	; (8007d70 <UART_SetConfig+0x2e8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d138      	bne.n	8007bf4 <UART_SetConfig+0x16c>
 8007b82:	4b7a      	ldr	r3, [pc, #488]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b0c      	cmp	r3, #12
 8007b8e:	d82d      	bhi.n	8007bec <UART_SetConfig+0x164>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x110>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bdd 	.word	0x08007bdd
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bed 	.word	0x08007bed
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e0d8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bda:	e0d4      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be2:	e0d0      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bea:	e0cc      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e0c8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d125      	bne.n	8007c4a <UART_SetConfig+0x1c2>
 8007bfe:	4b5b      	ldr	r3, [pc, #364]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c08:	2b30      	cmp	r3, #48	; 0x30
 8007c0a:	d016      	beq.n	8007c3a <UART_SetConfig+0x1b2>
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d818      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d00a      	beq.n	8007c2a <UART_SetConfig+0x1a2>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d814      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <UART_SetConfig+0x19a>
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d008      	beq.n	8007c32 <UART_SetConfig+0x1aa>
 8007c20:	e00f      	b.n	8007c42 <UART_SetConfig+0x1ba>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c28:	e0ad      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c30:	e0a9      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c32:	2304      	movs	r3, #4
 8007c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c38:	e0a5      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c40:	e0a1      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c42:	2310      	movs	r3, #16
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c48:	e09d      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a4a      	ldr	r2, [pc, #296]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d125      	bne.n	8007ca0 <UART_SetConfig+0x218>
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c60:	d016      	beq.n	8007c90 <UART_SetConfig+0x208>
 8007c62:	2bc0      	cmp	r3, #192	; 0xc0
 8007c64:	d818      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d00a      	beq.n	8007c80 <UART_SetConfig+0x1f8>
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d814      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <UART_SetConfig+0x1f0>
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d008      	beq.n	8007c88 <UART_SetConfig+0x200>
 8007c76:	e00f      	b.n	8007c98 <UART_SetConfig+0x210>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7e:	e082      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c80:	2302      	movs	r3, #2
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e07e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	e07a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e076      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e072      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a35      	ldr	r2, [pc, #212]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d12a      	bne.n	8007d00 <UART_SetConfig+0x278>
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb8:	d01a      	beq.n	8007cf0 <UART_SetConfig+0x268>
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbe:	d81b      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d00c      	beq.n	8007ce0 <UART_SetConfig+0x258>
 8007cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cca:	d815      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x250>
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d008      	beq.n	8007ce8 <UART_SetConfig+0x260>
 8007cd6:	e00f      	b.n	8007cf8 <UART_SetConfig+0x270>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e052      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e04e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e04a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e046      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e042      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d13a      	bne.n	8007d80 <UART_SetConfig+0x2f8>
 8007d0a:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d18:	d01a      	beq.n	8007d50 <UART_SetConfig+0x2c8>
 8007d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1e:	d81b      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d24:	d00c      	beq.n	8007d40 <UART_SetConfig+0x2b8>
 8007d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2a:	d815      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <UART_SetConfig+0x2b0>
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d34:	d008      	beq.n	8007d48 <UART_SetConfig+0x2c0>
 8007d36:	e00f      	b.n	8007d58 <UART_SetConfig+0x2d0>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e022      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e01e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e01a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e016      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e012      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d60:	cfff69f3 	.word	0xcfff69f3
 8007d64:	40008000 	.word	0x40008000
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40004400 	.word	0x40004400
 8007d74:	40004800 	.word	0x40004800
 8007d78:	40004c00 	.word	0x40004c00
 8007d7c:	40005000 	.word	0x40005000
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4aae      	ldr	r2, [pc, #696]	; (8008044 <UART_SetConfig+0x5bc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f040 8097 	bne.w	8007ec0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d823      	bhi.n	8007de2 <UART_SetConfig+0x35a>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x318>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007de3 	.word	0x08007de3
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007dd3 	.word	0x08007dd3
 8007db4:	08007de3 	.word	0x08007de3
 8007db8:	08007de3 	.word	0x08007de3
 8007dbc:	08007de3 	.word	0x08007de3
 8007dc0:	08007ddb 	.word	0x08007ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd fcc8 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dca:	e010      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dcc:	4b9e      	ldr	r3, [pc, #632]	; (8008048 <UART_SetConfig+0x5c0>)
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd0:	e00d      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd2:	f7fd fc29 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8130 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	4a94      	ldr	r2, [pc, #592]	; (800804c <UART_SetConfig+0x5c4>)
 8007dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d305      	bcc.n	8007e26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d903      	bls.n	8007e2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e2c:	e113      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	2200      	movs	r2, #0
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	60fa      	str	r2, [r7, #12]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	4a84      	ldr	r2, [pc, #528]	; (800804c <UART_SetConfig+0x5c4>)
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2200      	movs	r2, #0
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e50:	f7f8 fa2e 	bl	80002b0 <__aeabi_uldivmod>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	020b      	lsls	r3, r1, #8
 8007e66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e6a:	0202      	lsls	r2, r0, #8
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	6849      	ldr	r1, [r1, #4]
 8007e70:	0849      	lsrs	r1, r1, #1
 8007e72:	2000      	movs	r0, #0
 8007e74:	460c      	mov	r4, r1
 8007e76:	4605      	mov	r5, r0
 8007e78:	eb12 0804 	adds.w	r8, r2, r4
 8007e7c:	eb43 0905 	adc.w	r9, r3, r5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	469a      	mov	sl, r3
 8007e88:	4693      	mov	fp, r2
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 fa0d 	bl	80002b0 <__aeabi_uldivmod>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d308      	bcc.n	8007eb8 <UART_SetConfig+0x430>
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eac:	d204      	bcs.n	8007eb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a3a      	ldr	r2, [r7, #32]
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	e0ce      	b.n	8008056 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ebe:	e0ca      	b.n	8008056 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	d166      	bne.n	8007f98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d827      	bhi.n	8007f22 <UART_SetConfig+0x49a>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x450>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f05 	.word	0x08007f05
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f23 	.word	0x08007f23
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f1b 	.word	0x08007f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd fc2c 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e014      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd fc3e 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f0a:	e010      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b4e      	ldr	r3, [pc, #312]	; (8008048 <UART_SetConfig+0x5c0>)
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f10:	e00d      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f12:	f7fd fb89 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f18:	e009      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f20:	e005      	b.n	8007f2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8090 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a44      	ldr	r2, [pc, #272]	; (800804c <UART_SetConfig+0x5c4>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f48:	005a      	lsls	r2, r3, #1
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d916      	bls.n	8007f90 <UART_SetConfig+0x508>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d212      	bcs.n	8007f90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 030f 	bic.w	r3, r3, #15
 8007f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	8bfa      	ldrh	r2, [r7, #30]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e062      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f96:	e05e      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d828      	bhi.n	8007ff2 <UART_SetConfig+0x56a>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x520>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007ff3 	.word	0x08007ff3
 8007fb8:	08007fe3 	.word	0x08007fe3
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08007ff3 	.word	0x08007ff3
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007feb 	.word	0x08007feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fd fbc4 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd2:	e014      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd4:	f7fd fbd6 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <UART_SetConfig+0x5c0>)
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe0:	e00d      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fd fb21 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e005      	b.n	8007ffe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d028      	beq.n	8008056 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <UART_SetConfig+0x5c4>)
 800800a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800e:	461a      	mov	r2, r3
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	fbb3 f2f2 	udiv	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	fbb2 f3f3 	udiv	r3, r2, r3
 8008026:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	d910      	bls.n	8008050 <UART_SetConfig+0x5c8>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008034:	d20c      	bcs.n	8008050 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b29a      	uxth	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x5ce>
 8008042:	bf00      	nop
 8008044:	40008000 	.word	0x40008000
 8008048:	00f42400 	.word	0x00f42400
 800804c:	0800c93c 	.word	0x0800c93c
      }
      else
      {
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2201      	movs	r2, #1
 800805a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2201      	movs	r2, #1
 8008062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2200      	movs	r2, #0
 8008070:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01a      	beq.n	8008196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817e:	d10a      	bne.n	8008196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b098      	sub	sp, #96	; 0x60
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d4:	f7fb fb2a 	bl	800382c <HAL_GetTick>
 80081d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d12f      	bne.n	8008248 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f88e 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d022      	beq.n	8008248 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008216:	653b      	str	r3, [r7, #80]	; 0x50
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008220:	647b      	str	r3, [r7, #68]	; 0x44
 8008222:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800822e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e6      	bne.n	8008202 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e063      	b.n	8008310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b04      	cmp	r3, #4
 8008254:	d149      	bne.n	80082ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825e:	2200      	movs	r2, #0
 8008260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f857 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d03c      	beq.n	80082ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	623b      	str	r3, [r7, #32]
   return(result);
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
 8008290:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e6      	bne.n	8008270 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082c2:	61fa      	str	r2, [r7, #28]
 80082c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	69b9      	ldr	r1, [r7, #24]
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	617b      	str	r3, [r7, #20]
   return(result);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e5      	bne.n	80082a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e012      	b.n	8008310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3758      	adds	r7, #88	; 0x58
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	4613      	mov	r3, r2
 8008326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008328:	e049      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008330:	d045      	beq.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008332:	f7fb fa7b 	bl	800382c <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	429a      	cmp	r2, r3
 8008340:	d302      	bcc.n	8008348 <UART_WaitOnFlagUntilTimeout+0x30>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e048      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d031      	beq.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b08      	cmp	r3, #8
 8008366:	d110      	bne.n	800838a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2208      	movs	r2, #8
 800836e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f838 	bl	80083e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2208      	movs	r2, #8
 800837a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e029      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008398:	d111      	bne.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f81e 	bl	80083e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e00f      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	bf0c      	ite	eq
 80083ce:	2301      	moveq	r3, #1
 80083d0:	2300      	movne	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d0a6      	beq.n	800832a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b095      	sub	sp, #84	; 0x54
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	643b      	str	r3, [r7, #64]	; 0x40
 800840e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	64bb      	str	r3, [r7, #72]	; 0x48
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008444:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800844a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e3      	bne.n	8008420 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d118      	bne.n	8008492 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	60bb      	str	r3, [r7, #8]
   return(result);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f023 0310 	bic.w	r3, r3, #16
 8008474:	647b      	str	r3, [r7, #68]	; 0x44
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	613b      	str	r3, [r7, #16]
   return(result);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80084a6:	bf00      	nop
 80084a8:	3754      	adds	r7, #84	; 0x54
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	4603      	mov	r3, r0
 80084ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80084c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084c4:	2b84      	cmp	r3, #132	; 0x84
 80084c6:	d005      	beq.n	80084d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80084c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	3303      	adds	r3, #3
 80084d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80084e6:	f000 fadf 	bl	8008aa8 <vTaskStartScheduler>
  
  return osOK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d020      	beq.n	8008544 <osThreadCreate+0x54>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01c      	beq.n	8008544 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685c      	ldr	r4, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691e      	ldr	r6, [r3, #16]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ffc8 	bl	80084b2 <makeFreeRtosPriority>
 8008522:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800852c:	9202      	str	r2, [sp, #8]
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	9100      	str	r1, [sp, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	4632      	mov	r2, r6
 8008536:	4629      	mov	r1, r5
 8008538:	4620      	mov	r0, r4
 800853a:	f000 f8ed 	bl	8008718 <xTaskCreateStatic>
 800853e:	4603      	mov	r3, r0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e01c      	b.n	800857e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685c      	ldr	r4, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008550:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ffaa 	bl	80084b2 <makeFreeRtosPriority>
 800855e:	4602      	mov	r2, r0
 8008560:	f107 030c 	add.w	r3, r7, #12
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	9200      	str	r2, [sp, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	4632      	mov	r2, r6
 800856c:	4629      	mov	r1, r5
 800856e:	4620      	mov	r0, r4
 8008570:	f000 f92f 	bl	80087d2 <xTaskCreate>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d001      	beq.n	800857e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	e000      	b.n	8008580 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008588 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <osDelay+0x16>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	e000      	b.n	80085a0 <osDelay+0x18>
 800859e:	2301      	movs	r3, #1
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fa4d 	bl	8008a40 <vTaskDelay>
  
  return osOK;
 80085a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 0208 	add.w	r2, r3, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 0208 	add.w	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0208 	add.w	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d103      	bne.n	8008672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e00c      	b.n	800868c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3308      	adds	r3, #8
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e002      	b.n	8008680 <vListInsert+0x2e>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d2f6      	bcs.n	800867a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6892      	ldr	r2, [r2, #8]
 80086da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d103      	bne.n	80086f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08e      	sub	sp, #56	; 0x38
 800871c:	af04      	add	r7, sp, #16
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <xTaskCreateStatic+0x46>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	61fb      	str	r3, [r7, #28]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800875e:	2354      	movs	r3, #84	; 0x54
 8008760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b54      	cmp	r3, #84	; 0x54
 8008766:	d00a      	beq.n	800877e <xTaskCreateStatic+0x66>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	61bb      	str	r3, [r7, #24]
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800877e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01e      	beq.n	80087c4 <xTaskCreateStatic+0xac>
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01b      	beq.n	80087c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008794:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	2202      	movs	r2, #2
 800879a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800879e:	2300      	movs	r3, #0
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f850 	bl	800885c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087be:	f000 f8d5 	bl	800896c <prvAddNewTaskToReadyList>
 80087c2:	e001      	b.n	80087c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087c8:	697b      	ldr	r3, [r7, #20]
	}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3728      	adds	r7, #40	; 0x28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b08c      	sub	sp, #48	; 0x30
 80087d6:	af04      	add	r7, sp, #16
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	603b      	str	r3, [r7, #0]
 80087de:	4613      	mov	r3, r2
 80087e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fee6 	bl	80095b8 <pvPortMalloc>
 80087ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00e      	beq.n	8008812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087f4:	2054      	movs	r0, #84	; 0x54
 80087f6:	f000 fedf 	bl	80095b8 <pvPortMalloc>
 80087fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
 8008808:	e005      	b.n	8008816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800880a:	6978      	ldr	r0, [r7, #20]
 800880c:	f000 ffa0 	bl	8009750 <vPortFree>
 8008810:	e001      	b.n	8008816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d017      	beq.n	800884c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	2300      	movs	r3, #0
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	9302      	str	r3, [sp, #8]
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 f80e 	bl	800885c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008840:	69f8      	ldr	r0, [r7, #28]
 8008842:	f000 f893 	bl	800896c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008846:	2301      	movs	r3, #1
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e002      	b.n	8008852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800884c:	f04f 33ff 	mov.w	r3, #4294967295
 8008850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008852:	69bb      	ldr	r3, [r7, #24]
	}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008874:	3b01      	subs	r3, #1
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f023 0307 	bic.w	r3, r3, #7
 8008882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	617b      	str	r3, [r7, #20]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01f      	beq.n	80088ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	e012      	b.n	80088d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	3334      	adds	r3, #52	; 0x34
 80088c0:	460a      	mov	r2, r1
 80088c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2b0f      	cmp	r3, #15
 80088da:	d9e9      	bls.n	80088b0 <prvInitialiseNewTask+0x54>
 80088dc:	e000      	b.n	80088e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80088de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088e8:	e003      	b.n	80088f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2b06      	cmp	r3, #6
 80088f6:	d901      	bls.n	80088fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088f8:	2306      	movs	r3, #6
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008906:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	2200      	movs	r2, #0
 800890c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fe6c 	bl	80085f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	3318      	adds	r3, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fe67 	bl	80085f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	f1c3 0207 	rsb	r2, r3, #7
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	69b8      	ldr	r0, [r7, #24]
 800894c:	f000 fc24 	bl	8009198 <pxPortInitialiseStack>
 8008950:	4602      	mov	r2, r0
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008962:	bf00      	nop
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008974:	f000 fd3e 	bl	80093f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008978:	4b2a      	ldr	r3, [pc, #168]	; (8008a24 <prvAddNewTaskToReadyList+0xb8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	4a29      	ldr	r2, [pc, #164]	; (8008a24 <prvAddNewTaskToReadyList+0xb8>)
 8008980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <prvAddNewTaskToReadyList+0xbc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800898a:	4a27      	ldr	r2, [pc, #156]	; (8008a28 <prvAddNewTaskToReadyList+0xbc>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008990:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <prvAddNewTaskToReadyList+0xb8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d110      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008998:	f000 fabc 	bl	8008f14 <prvInitialiseTaskLists>
 800899c:	e00d      	b.n	80089ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <prvAddNewTaskToReadyList+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <prvAddNewTaskToReadyList+0xbc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d802      	bhi.n	80089ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089b4:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <prvAddNewTaskToReadyList+0xbc>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089ba:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	4a1b      	ldr	r2, [pc, #108]	; (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 80089c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	2201      	movs	r2, #1
 80089ca:	409a      	lsls	r2, r3
 80089cc:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <prvAddNewTaskToReadyList+0xcc>)
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4619      	mov	r1, r3
 80089ec:	4610      	mov	r0, r2
 80089ee:	f7ff fe0c 	bl	800860a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089f2:	f000 fd2f 	bl	8009454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089f6:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <prvAddNewTaskToReadyList+0xc0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <prvAddNewTaskToReadyList+0xbc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d207      	bcs.n	8008a1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20002904 	.word	0x20002904
 8008a28:	20002804 	.word	0x20002804
 8008a2c:	20002910 	.word	0x20002910
 8008a30:	20002920 	.word	0x20002920
 8008a34:	2000290c 	.word	0x2000290c
 8008a38:	20002808 	.word	0x20002808
 8008a3c:	e000ed04 	.word	0xe000ed04

08008a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d017      	beq.n	8008a82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <vTaskDelay+0x60>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <vTaskDelay+0x30>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	60bb      	str	r3, [r7, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a70:	f000 f87a 	bl	8008b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb28 	bl	80090cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a7c:	f000 f882 	bl	8008b84 <xTaskResumeAll>
 8008a80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d107      	bne.n	8008a98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <vTaskDelay+0x64>)
 8008a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2000292c 	.word	0x2000292c
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	1d39      	adds	r1, r7, #4
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f9 fbf4 	bl	80022ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	9202      	str	r2, [sp, #8]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	460a      	mov	r2, r1
 8008ad6:	491e      	ldr	r1, [pc, #120]	; (8008b50 <vTaskStartScheduler+0xa8>)
 8008ad8:	481e      	ldr	r0, [pc, #120]	; (8008b54 <vTaskStartScheduler+0xac>)
 8008ada:	f7ff fe1d 	bl	8008718 <xTaskCreateStatic>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <vTaskStartScheduler+0xb0>)
 8008ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <vTaskStartScheduler+0xb0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e001      	b.n	8008af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d116      	bne.n	8008b2a <vTaskStartScheduler+0x82>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	613b      	str	r3, [r7, #16]
}
 8008b0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b10:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <vTaskStartScheduler+0xb4>)
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b18:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <vTaskStartScheduler+0xb8>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b1e:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <vTaskStartScheduler+0xbc>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b24:	f000 fbc4 	bl	80092b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b28:	e00e      	b.n	8008b48 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d10a      	bne.n	8008b48 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60fb      	str	r3, [r7, #12]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vTaskStartScheduler+0x9e>
}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	0800b6cc 	.word	0x0800b6cc
 8008b54:	08008ee5 	.word	0x08008ee5
 8008b58:	20002928 	.word	0x20002928
 8008b5c:	20002924 	.word	0x20002924
 8008b60:	20002910 	.word	0x20002910
 8008b64:	20002908 	.word	0x20002908

08008b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3301      	adds	r3, #1
 8008b72:	4a03      	ldr	r2, [pc, #12]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	2000292c 	.word	0x2000292c

08008b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b92:	4b41      	ldr	r3, [pc, #260]	; (8008c98 <xTaskResumeAll+0x114>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bb0:	f000 fc20 	bl	80093f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bb4:	4b38      	ldr	r3, [pc, #224]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a37      	ldr	r2, [pc, #220]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbe:	4b36      	ldr	r3, [pc, #216]	; (8008c98 <xTaskResumeAll+0x114>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d161      	bne.n	8008c8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bc6:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <xTaskResumeAll+0x118>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d05d      	beq.n	8008c8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bce:	e02e      	b.n	8008c2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd0:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <xTaskResumeAll+0x11c>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff fd71 	bl	80086c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fd6c 	bl	80086c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	4b2b      	ldr	r3, [pc, #172]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4a27      	ldr	r2, [pc, #156]	; (8008ca8 <xTaskResumeAll+0x124>)
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7ff fcf8 	bl	800860a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4b23      	ldr	r3, [pc, #140]	; (8008cac <xTaskResumeAll+0x128>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <xTaskResumeAll+0x11c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1cc      	bne.n	8008bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c3c:	f000 fa08 	bl	8009050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c40:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c4c:	f000 f836 	bl	8008cbc <xTaskIncrementTick>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f1      	bne.n	8008c4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c76:	2301      	movs	r3, #1
 8008c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <xTaskResumeAll+0x134>)
 8008c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c8a:	f000 fbe3 	bl	8009454 <vPortExitCritical>

	return xAlreadyYielded;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	2000292c 	.word	0x2000292c
 8008c9c:	20002904 	.word	0x20002904
 8008ca0:	200028c4 	.word	0x200028c4
 8008ca4:	2000290c 	.word	0x2000290c
 8008ca8:	20002808 	.word	0x20002808
 8008cac:	20002804 	.word	0x20002804
 8008cb0:	20002918 	.word	0x20002918
 8008cb4:	20002914 	.word	0x20002914
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc6:	4b4e      	ldr	r3, [pc, #312]	; (8008e00 <xTaskIncrementTick+0x144>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 808e 	bne.w	8008dec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd0:	4b4c      	ldr	r3, [pc, #304]	; (8008e04 <xTaskIncrementTick+0x148>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cd8:	4a4a      	ldr	r2, [pc, #296]	; (8008e04 <xTaskIncrementTick+0x148>)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d120      	bne.n	8008d26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ce4:	4b48      	ldr	r3, [pc, #288]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	603b      	str	r3, [r7, #0]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xTaskIncrementTick+0x46>
 8008d04:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	4b40      	ldr	r3, [pc, #256]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a3e      	ldr	r2, [pc, #248]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	4a3e      	ldr	r2, [pc, #248]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	4b3d      	ldr	r3, [pc, #244]	; (8008e10 <xTaskIncrementTick+0x154>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	4a3c      	ldr	r2, [pc, #240]	; (8008e10 <xTaskIncrementTick+0x154>)
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	f000 f995 	bl	8009050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d26:	4b3b      	ldr	r3, [pc, #236]	; (8008e14 <xTaskIncrementTick+0x158>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d348      	bcc.n	8008dc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d30:	4b35      	ldr	r3, [pc, #212]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d3a:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <xTaskIncrementTick+0x158>)
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	601a      	str	r2, [r3, #0]
					break;
 8008d42:	e03e      	b.n	8008dc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d44:	4b30      	ldr	r3, [pc, #192]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d203      	bcs.n	8008d64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <xTaskIncrementTick+0x158>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d62:	e02e      	b.n	8008dc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fcab 	bl	80086c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	3318      	adds	r3, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fca2 	bl	80086c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	2201      	movs	r2, #1
 8008d86:	409a      	lsls	r2, r3
 8008d88:	4b23      	ldr	r3, [pc, #140]	; (8008e18 <xTaskIncrementTick+0x15c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	4a22      	ldr	r2, [pc, #136]	; (8008e18 <xTaskIncrementTick+0x15c>)
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <xTaskIncrementTick+0x160>)
 8008da0:	441a      	add	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7ff fc2e 	bl	800860a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db2:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <xTaskIncrementTick+0x164>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d3b9      	bcc.n	8008d30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc0:	e7b6      	b.n	8008d30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dc2:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <xTaskIncrementTick+0x164>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	4914      	ldr	r1, [pc, #80]	; (8008e1c <xTaskIncrementTick+0x160>)
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d901      	bls.n	8008dde <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <xTaskIncrementTick+0x168>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008de6:	2301      	movs	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e004      	b.n	8008df6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dec:	4b0e      	ldr	r3, [pc, #56]	; (8008e28 <xTaskIncrementTick+0x16c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a0d      	ldr	r2, [pc, #52]	; (8008e28 <xTaskIncrementTick+0x16c>)
 8008df4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008df6:	697b      	ldr	r3, [r7, #20]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	2000292c 	.word	0x2000292c
 8008e04:	20002908 	.word	0x20002908
 8008e08:	200028bc 	.word	0x200028bc
 8008e0c:	200028c0 	.word	0x200028c0
 8008e10:	2000291c 	.word	0x2000291c
 8008e14:	20002924 	.word	0x20002924
 8008e18:	2000290c 	.word	0x2000290c
 8008e1c:	20002808 	.word	0x20002808
 8008e20:	20002804 	.word	0x20002804
 8008e24:	20002918 	.word	0x20002918
 8008e28:	20002914 	.word	0x20002914

08008e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e32:	4b27      	ldr	r3, [pc, #156]	; (8008ed0 <vTaskSwitchContext+0xa4>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e3a:	4b26      	ldr	r3, [pc, #152]	; (8008ed4 <vTaskSwitchContext+0xa8>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e40:	e03f      	b.n	8008ec2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008e42:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <vTaskSwitchContext+0xa8>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e48:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <vTaskSwitchContext+0xac>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	fab3 f383 	clz	r3, r3
 8008e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	f1c3 031f 	rsb	r3, r3, #31
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	491f      	ldr	r1, [pc, #124]	; (8008edc <vTaskSwitchContext+0xb0>)
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	440b      	add	r3, r1
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	607b      	str	r3, [r7, #4]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <vTaskSwitchContext+0x5a>
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a12      	ldr	r2, [pc, #72]	; (8008edc <vTaskSwitchContext+0xb0>)
 8008e94:	4413      	add	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d104      	bne.n	8008eb8 <vTaskSwitchContext+0x8c>
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	605a      	str	r2, [r3, #4]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <vTaskSwitchContext+0xb4>)
 8008ec0:	6013      	str	r3, [r2, #0]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	2000292c 	.word	0x2000292c
 8008ed4:	20002918 	.word	0x20002918
 8008ed8:	2000290c 	.word	0x2000290c
 8008edc:	20002808 	.word	0x20002808
 8008ee0:	20002804 	.word	0x20002804

08008ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eec:	f000 f852 	bl	8008f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <prvIdleTask+0x28>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d9f9      	bls.n	8008eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <prvIdleTask+0x2c>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f08:	e7f0      	b.n	8008eec <prvIdleTask+0x8>
 8008f0a:	bf00      	nop
 8008f0c:	20002808 	.word	0x20002808
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	e00c      	b.n	8008f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4a12      	ldr	r2, [pc, #72]	; (8008f74 <prvInitialiseTaskLists+0x60>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fb3e 	bl	80085b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3301      	adds	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b06      	cmp	r3, #6
 8008f3e:	d9ef      	bls.n	8008f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f40:	480d      	ldr	r0, [pc, #52]	; (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f42:	f7ff fb35 	bl	80085b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f46:	480d      	ldr	r0, [pc, #52]	; (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f48:	f7ff fb32 	bl	80085b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f4c:	480c      	ldr	r0, [pc, #48]	; (8008f80 <prvInitialiseTaskLists+0x6c>)
 8008f4e:	f7ff fb2f 	bl	80085b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f52:	480c      	ldr	r0, [pc, #48]	; (8008f84 <prvInitialiseTaskLists+0x70>)
 8008f54:	f7ff fb2c 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f58:	480b      	ldr	r0, [pc, #44]	; (8008f88 <prvInitialiseTaskLists+0x74>)
 8008f5a:	f7ff fb29 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <prvInitialiseTaskLists+0x78>)
 8008f60:	4a05      	ldr	r2, [pc, #20]	; (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f64:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <prvInitialiseTaskLists+0x7c>)
 8008f66:	4a05      	ldr	r2, [pc, #20]	; (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20002808 	.word	0x20002808
 8008f78:	20002894 	.word	0x20002894
 8008f7c:	200028a8 	.word	0x200028a8
 8008f80:	200028c4 	.word	0x200028c4
 8008f84:	200028d8 	.word	0x200028d8
 8008f88:	200028f0 	.word	0x200028f0
 8008f8c:	200028bc 	.word	0x200028bc
 8008f90:	200028c0 	.word	0x200028c0

08008f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f9a:	e019      	b.n	8008fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f9c:	f000 fa2a 	bl	80093f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa0:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <prvCheckTasksWaitingTermination+0x50>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff fb89 	bl	80086c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fc6:	f000 fa45 	bl	8009454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f810 	bl	8008ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e1      	bne.n	8008f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200028d8 	.word	0x200028d8
 8008fe8:	20002904 	.word	0x20002904
 8008fec:	200028ec 	.word	0x200028ec

08008ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fba2 	bl	8009750 <vPortFree>
				vPortFree( pxTCB );
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fb9f 	bl	8009750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009012:	e018      	b.n	8009046 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800901a:	2b01      	cmp	r3, #1
 800901c:	d103      	bne.n	8009026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb96 	bl	8009750 <vPortFree>
	}
 8009024:	e00f      	b.n	8009046 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800902c:	2b02      	cmp	r3, #2
 800902e:	d00a      	beq.n	8009046 <prvDeleteTCB+0x56>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <prvDeleteTCB+0x54>
	}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <prvResetNextTaskUnblockTime+0x38>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <prvResetNextTaskUnblockTime+0x3c>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295
 8009066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009068:	e008      	b.n	800907c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <prvResetNextTaskUnblockTime+0x38>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a04      	ldr	r2, [pc, #16]	; (800908c <prvResetNextTaskUnblockTime+0x3c>)
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	200028bc 	.word	0x200028bc
 800908c:	20002924 	.word	0x20002924

08009090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <xTaskGetSchedulerState+0x34>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909e:	2301      	movs	r3, #1
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	e008      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <xTaskGetSchedulerState+0x38>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090ac:	2302      	movs	r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	e001      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b6:	687b      	ldr	r3, [r7, #4]
	}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20002910 	.word	0x20002910
 80090c8:	2000292c 	.word	0x2000292c

080090cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090d6:	4b29      	ldr	r3, [pc, #164]	; (800917c <prvAddCurrentTaskToDelayedList+0xb0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090dc:	4b28      	ldr	r3, [pc, #160]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff faee 	bl	80086c4 <uxListRemove>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10b      	bne.n	8009106 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	2201      	movs	r2, #1
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43da      	mvns	r2, r3
 80090fc:	4b21      	ldr	r3, [pc, #132]	; (8009184 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4013      	ands	r3, r2
 8009102:	4a20      	ldr	r2, [pc, #128]	; (8009184 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009104:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d10a      	bne.n	8009124 <prvAddCurrentTaskToDelayedList+0x58>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009114:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3304      	adds	r3, #4
 800911a:	4619      	mov	r1, r3
 800911c:	481a      	ldr	r0, [pc, #104]	; (8009188 <prvAddCurrentTaskToDelayedList+0xbc>)
 800911e:	f7ff fa74 	bl	800860a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009122:	e026      	b.n	8009172 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800912c:	4b14      	ldr	r3, [pc, #80]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	429a      	cmp	r2, r3
 800913a:	d209      	bcs.n	8009150 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913c:	4b13      	ldr	r3, [pc, #76]	; (800918c <prvAddCurrentTaskToDelayedList+0xc0>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3304      	adds	r3, #4
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f7ff fa82 	bl	8008652 <vListInsert>
}
 800914e:	e010      	b.n	8009172 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3304      	adds	r3, #4
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f7ff fa78 	bl	8008652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	429a      	cmp	r2, r3
 800916a:	d202      	bcs.n	8009172 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800916c:	4a09      	ldr	r2, [pc, #36]	; (8009194 <prvAddCurrentTaskToDelayedList+0xc8>)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6013      	str	r3, [r2, #0]
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20002908 	.word	0x20002908
 8009180:	20002804 	.word	0x20002804
 8009184:	2000290c 	.word	0x2000290c
 8009188:	200028f0 	.word	0x200028f0
 800918c:	200028c0 	.word	0x200028c0
 8009190:	200028bc 	.word	0x200028bc
 8009194:	20002924 	.word	0x20002924

08009198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3b04      	subs	r3, #4
 80091a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f023 0201 	bic.w	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3b04      	subs	r3, #4
 80091c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091c8:	4a0c      	ldr	r2, [pc, #48]	; (80091fc <pxPortInitialiseStack+0x64>)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3b14      	subs	r3, #20
 80091d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3b04      	subs	r3, #4
 80091de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f06f 0202 	mvn.w	r2, #2
 80091e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b20      	subs	r3, #32
 80091ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091ee:	68fb      	ldr	r3, [r7, #12]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	08009201 	.word	0x08009201

08009200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <prvTaskExitError+0x54>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009212:	d00a      	beq.n	800922a <prvTaskExitError+0x2a>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <prvTaskExitError+0x28>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	60bb      	str	r3, [r7, #8]
}
 800923c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800923e:	bf00      	nop
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0fc      	beq.n	8009240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	20000048 	.word	0x20000048
	...

08009260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <pxCurrentTCBConst2>)
 8009262:	6819      	ldr	r1, [r3, #0]
 8009264:	6808      	ldr	r0, [r1, #0]
 8009266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926a:	f380 8809 	msr	PSP, r0
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	f380 8811 	msr	BASEPRI, r0
 800927a:	4770      	bx	lr
 800927c:	f3af 8000 	nop.w

08009280 <pxCurrentTCBConst2>:
 8009280:	20002804 	.word	0x20002804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop

08009288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009288:	4808      	ldr	r0, [pc, #32]	; (80092ac <prvPortStartFirstTask+0x24>)
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	6800      	ldr	r0, [r0, #0]
 800928e:	f380 8808 	msr	MSP, r0
 8009292:	f04f 0000 	mov.w	r0, #0
 8009296:	f380 8814 	msr	CONTROL, r0
 800929a:	b662      	cpsie	i
 800929c:	b661      	cpsie	f
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	df00      	svc	0
 80092a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092aa:	bf00      	nop
 80092ac:	e000ed08 	.word	0xe000ed08

080092b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092b6:	4b46      	ldr	r3, [pc, #280]	; (80093d0 <xPortStartScheduler+0x120>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a46      	ldr	r2, [pc, #280]	; (80093d4 <xPortStartScheduler+0x124>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d10a      	bne.n	80092d6 <xPortStartScheduler+0x26>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	613b      	str	r3, [r7, #16]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092d6:	4b3e      	ldr	r3, [pc, #248]	; (80093d0 <xPortStartScheduler+0x120>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a3f      	ldr	r2, [pc, #252]	; (80093d8 <xPortStartScheduler+0x128>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d10a      	bne.n	80092f6 <xPortStartScheduler+0x46>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60fb      	str	r3, [r7, #12]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092f6:	4b39      	ldr	r3, [pc, #228]	; (80093dc <xPortStartScheduler+0x12c>)
 80092f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	22ff      	movs	r2, #255	; 0xff
 8009306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009318:	b2da      	uxtb	r2, r3
 800931a:	4b31      	ldr	r3, [pc, #196]	; (80093e0 <xPortStartScheduler+0x130>)
 800931c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800931e:	4b31      	ldr	r3, [pc, #196]	; (80093e4 <xPortStartScheduler+0x134>)
 8009320:	2207      	movs	r2, #7
 8009322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009324:	e009      	b.n	800933a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009326:	4b2f      	ldr	r3, [pc, #188]	; (80093e4 <xPortStartScheduler+0x134>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3b01      	subs	r3, #1
 800932c:	4a2d      	ldr	r2, [pc, #180]	; (80093e4 <xPortStartScheduler+0x134>)
 800932e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d0ef      	beq.n	8009326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009346:	4b27      	ldr	r3, [pc, #156]	; (80093e4 <xPortStartScheduler+0x134>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f1c3 0307 	rsb	r3, r3, #7
 800934e:	2b04      	cmp	r3, #4
 8009350:	d00a      	beq.n	8009368 <xPortStartScheduler+0xb8>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60bb      	str	r3, [r7, #8]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <xPortStartScheduler+0x134>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <xPortStartScheduler+0x134>)
 8009370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <xPortStartScheduler+0x134>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800937a:	4a1a      	ldr	r2, [pc, #104]	; (80093e4 <xPortStartScheduler+0x134>)
 800937c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	b2da      	uxtb	r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009386:	4b18      	ldr	r3, [pc, #96]	; (80093e8 <xPortStartScheduler+0x138>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a17      	ldr	r2, [pc, #92]	; (80093e8 <xPortStartScheduler+0x138>)
 800938c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <xPortStartScheduler+0x138>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <xPortStartScheduler+0x138>)
 8009398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800939c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800939e:	f000 f8dd 	bl	800955c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <xPortStartScheduler+0x13c>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093a8:	f000 f8fc 	bl	80095a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093ac:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <xPortStartScheduler+0x140>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <xPortStartScheduler+0x140>)
 80093b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093b8:	f7ff ff66 	bl	8009288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093bc:	f7ff fd36 	bl	8008e2c <vTaskSwitchContext>
	prvTaskExitError();
 80093c0:	f7ff ff1e 	bl	8009200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	e000ed00 	.word	0xe000ed00
 80093d4:	410fc271 	.word	0x410fc271
 80093d8:	410fc270 	.word	0x410fc270
 80093dc:	e000e400 	.word	0xe000e400
 80093e0:	20002930 	.word	0x20002930
 80093e4:	20002934 	.word	0x20002934
 80093e8:	e000ed20 	.word	0xe000ed20
 80093ec:	20000048 	.word	0x20000048
 80093f0:	e000ef34 	.word	0xe000ef34

080093f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	607b      	str	r3, [r7, #4]
}
 800940c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800940e:	4b0f      	ldr	r3, [pc, #60]	; (800944c <vPortEnterCritical+0x58>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	4a0d      	ldr	r2, [pc, #52]	; (800944c <vPortEnterCritical+0x58>)
 8009416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009418:	4b0c      	ldr	r3, [pc, #48]	; (800944c <vPortEnterCritical+0x58>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d10f      	bne.n	8009440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009420:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <vPortEnterCritical+0x5c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <vPortEnterCritical+0x4c>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	603b      	str	r3, [r7, #0]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vPortEnterCritical+0x4a>
	}
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000048 	.word	0x20000048
 8009450:	e000ed04 	.word	0xe000ed04

08009454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <vPortExitCritical+0x50>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <vPortExitCritical+0x24>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	607b      	str	r3, [r7, #4]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <vPortExitCritical+0x50>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3b01      	subs	r3, #1
 800947e:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <vPortExitCritical+0x50>)
 8009480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009482:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <vPortExitCritical+0x50>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d105      	bne.n	8009496 <vPortExitCritical+0x42>
 800948a:	2300      	movs	r3, #0
 800948c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000048 	.word	0x20000048
	...

080094b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094b0:	f3ef 8009 	mrs	r0, PSP
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	4b15      	ldr	r3, [pc, #84]	; (8009510 <pxCurrentTCBConst>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	f01e 0f10 	tst.w	lr, #16
 80094c0:	bf08      	it	eq
 80094c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	6010      	str	r0, [r2, #0]
 80094cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094d4:	f380 8811 	msr	BASEPRI, r0
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f7ff fca4 	bl	8008e2c <vTaskSwitchContext>
 80094e4:	f04f 0000 	mov.w	r0, #0
 80094e8:	f380 8811 	msr	BASEPRI, r0
 80094ec:	bc09      	pop	{r0, r3}
 80094ee:	6819      	ldr	r1, [r3, #0]
 80094f0:	6808      	ldr	r0, [r1, #0]
 80094f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f6:	f01e 0f10 	tst.w	lr, #16
 80094fa:	bf08      	it	eq
 80094fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009500:	f380 8809 	msr	PSP, r0
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	f3af 8000 	nop.w

08009510 <pxCurrentTCBConst>:
 8009510:	20002804 	.word	0x20002804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	607b      	str	r3, [r7, #4]
}
 8009530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009532:	f7ff fbc3 	bl	8008cbc <xTaskIncrementTick>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <xPortSysTickHandler+0x40>)
 800953e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	2300      	movs	r3, #0
 8009546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	f383 8811 	msr	BASEPRI, r3
}
 800954e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <vPortSetupTimerInterrupt+0x34>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <vPortSetupTimerInterrupt+0x38>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <vPortSetupTimerInterrupt+0x3c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <vPortSetupTimerInterrupt+0x40>)
 8009572:	fba2 2303 	umull	r2, r3, r2, r3
 8009576:	099b      	lsrs	r3, r3, #6
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <vPortSetupTimerInterrupt+0x44>)
 800957a:	3b01      	subs	r3, #1
 800957c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <vPortSetupTimerInterrupt+0x34>)
 8009580:	2207      	movs	r2, #7
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	e000e010 	.word	0xe000e010
 8009594:	e000e018 	.word	0xe000e018
 8009598:	2000003c 	.word	0x2000003c
 800959c:	10624dd3 	.word	0x10624dd3
 80095a0:	e000e014 	.word	0xe000e014

080095a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095b4 <vPortEnableVFP+0x10>
 80095a8:	6801      	ldr	r1, [r0, #0]
 80095aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095ae:	6001      	str	r1, [r0, #0]
 80095b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095b2:	bf00      	nop
 80095b4:	e000ed88 	.word	0xe000ed88

080095b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095c4:	f7ff fad0 	bl	8008b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095c8:	4b5b      	ldr	r3, [pc, #364]	; (8009738 <pvPortMalloc+0x180>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095d0:	f000 f920 	bl	8009814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095d4:	4b59      	ldr	r3, [pc, #356]	; (800973c <pvPortMalloc+0x184>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f040 8093 	bne.w	8009708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d01d      	beq.n	8009624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095e8:	2208      	movs	r2, #8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d014      	beq.n	8009624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f023 0307 	bic.w	r3, r3, #7
 8009600:	3308      	adds	r3, #8
 8009602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <pvPortMalloc+0x6c>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	617b      	str	r3, [r7, #20]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d06e      	beq.n	8009708 <pvPortMalloc+0x150>
 800962a:	4b45      	ldr	r3, [pc, #276]	; (8009740 <pvPortMalloc+0x188>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	429a      	cmp	r2, r3
 8009632:	d869      	bhi.n	8009708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009634:	4b43      	ldr	r3, [pc, #268]	; (8009744 <pvPortMalloc+0x18c>)
 8009636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009638:	4b42      	ldr	r3, [pc, #264]	; (8009744 <pvPortMalloc+0x18c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800963e:	e004      	b.n	800964a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d903      	bls.n	800965c <pvPortMalloc+0xa4>
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f1      	bne.n	8009640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800965c:	4b36      	ldr	r3, [pc, #216]	; (8009738 <pvPortMalloc+0x180>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009662:	429a      	cmp	r2, r3
 8009664:	d050      	beq.n	8009708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2208      	movs	r2, #8
 800966c:	4413      	add	r3, r2
 800966e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	2308      	movs	r3, #8
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	429a      	cmp	r2, r3
 8009686:	d91f      	bls.n	80096c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4413      	add	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <pvPortMalloc+0xf8>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	613b      	str	r3, [r7, #16]
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	1ad2      	subs	r2, r2, r3
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096c2:	69b8      	ldr	r0, [r7, #24]
 80096c4:	f000 f908 	bl	80098d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096c8:	4b1d      	ldr	r3, [pc, #116]	; (8009740 <pvPortMalloc+0x188>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	4a1b      	ldr	r2, [pc, #108]	; (8009740 <pvPortMalloc+0x188>)
 80096d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096d6:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <pvPortMalloc+0x188>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	4b1b      	ldr	r3, [pc, #108]	; (8009748 <pvPortMalloc+0x190>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d203      	bcs.n	80096ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096e2:	4b17      	ldr	r3, [pc, #92]	; (8009740 <pvPortMalloc+0x188>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a18      	ldr	r2, [pc, #96]	; (8009748 <pvPortMalloc+0x190>)
 80096e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	4b13      	ldr	r3, [pc, #76]	; (800973c <pvPortMalloc+0x184>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <pvPortMalloc+0x194>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a11      	ldr	r2, [pc, #68]	; (800974c <pvPortMalloc+0x194>)
 8009706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009708:	f7ff fa3c 	bl	8008b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f003 0307 	and.w	r3, r3, #7
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <pvPortMalloc+0x174>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <pvPortMalloc+0x172>
	return pvReturn;
 800972c:	69fb      	ldr	r3, [r7, #28]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3728      	adds	r7, #40	; 0x28
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20003cc8 	.word	0x20003cc8
 800973c:	20003cdc 	.word	0x20003cdc
 8009740:	20003ccc 	.word	0x20003ccc
 8009744:	20003cc0 	.word	0x20003cc0
 8009748:	20003cd0 	.word	0x20003cd0
 800974c:	20003cd4 	.word	0x20003cd4

08009750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d04d      	beq.n	80097fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009762:	2308      	movs	r3, #8
 8009764:	425b      	negs	r3, r3
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4413      	add	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	4b24      	ldr	r3, [pc, #144]	; (8009808 <vPortFree+0xb8>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4013      	ands	r3, r2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <vPortFree+0x44>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00a      	beq.n	80097b2 <vPortFree+0x62>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60bb      	str	r3, [r7, #8]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <vPortFree+0xb8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01e      	beq.n	80097fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d11a      	bne.n	80097fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <vPortFree+0xb8>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	43db      	mvns	r3, r3
 80097d2:	401a      	ands	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097d8:	f7ff f9c6 	bl	8008b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <vPortFree+0xbc>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4413      	add	r3, r2
 80097e6:	4a09      	ldr	r2, [pc, #36]	; (800980c <vPortFree+0xbc>)
 80097e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097ea:	6938      	ldr	r0, [r7, #16]
 80097ec:	f000 f874 	bl	80098d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097f0:	4b07      	ldr	r3, [pc, #28]	; (8009810 <vPortFree+0xc0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3301      	adds	r3, #1
 80097f6:	4a06      	ldr	r2, [pc, #24]	; (8009810 <vPortFree+0xc0>)
 80097f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097fa:	f7ff f9c3 	bl	8008b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097fe:	bf00      	nop
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20003cdc 	.word	0x20003cdc
 800980c:	20003ccc 	.word	0x20003ccc
 8009810:	20003cd8 	.word	0x20003cd8

08009814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800981a:	f241 3388 	movw	r3, #5000	; 0x1388
 800981e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009820:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <prvHeapInit+0xac>)
 8009822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00c      	beq.n	8009848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3307      	adds	r3, #7
 8009832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	4a1f      	ldr	r2, [pc, #124]	; (80098c0 <prvHeapInit+0xac>)
 8009844:	4413      	add	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800984c:	4a1d      	ldr	r2, [pc, #116]	; (80098c4 <prvHeapInit+0xb0>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <prvHeapInit+0xb0>)
 8009854:	2200      	movs	r2, #0
 8009856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	4413      	add	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009860:	2208      	movs	r2, #8
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0307 	bic.w	r3, r3, #7
 800986e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a15      	ldr	r2, [pc, #84]	; (80098c8 <prvHeapInit+0xb4>)
 8009874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <prvHeapInit+0xb4>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800987e:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <prvHeapInit+0xb4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009894:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <prvHeapInit+0xb4>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <prvHeapInit+0xb8>)
 80098a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <prvHeapInit+0xbc>)
 80098aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <prvHeapInit+0xc0>)
 80098ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098b2:	601a      	str	r2, [r3, #0]
}
 80098b4:	bf00      	nop
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	20002938 	.word	0x20002938
 80098c4:	20003cc0 	.word	0x20003cc0
 80098c8:	20003cc8 	.word	0x20003cc8
 80098cc:	20003cd0 	.word	0x20003cd0
 80098d0:	20003ccc 	.word	0x20003ccc
 80098d4:	20003cdc 	.word	0x20003cdc

080098d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098e0:	4b28      	ldr	r3, [pc, #160]	; (8009984 <prvInsertBlockIntoFreeList+0xac>)
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	e002      	b.n	80098ec <prvInsertBlockIntoFreeList+0x14>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d8f7      	bhi.n	80098e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	4413      	add	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d108      	bne.n	800991a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	441a      	add	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	441a      	add	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d118      	bne.n	8009960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <prvInsertBlockIntoFreeList+0xb0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d00d      	beq.n	8009956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	441a      	add	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e008      	b.n	8009968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <prvInsertBlockIntoFreeList+0xb0>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e003      	b.n	8009968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20003cc0 	.word	0x20003cc0
 8009988:	20003cc8 	.word	0x20003cc8

0800998c <calloc>:
 800998c:	4b02      	ldr	r3, [pc, #8]	; (8009998 <calloc+0xc>)
 800998e:	460a      	mov	r2, r1
 8009990:	4601      	mov	r1, r0
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	f000 b802 	b.w	800999c <_calloc_r>
 8009998:	200000a4 	.word	0x200000a4

0800999c <_calloc_r>:
 800999c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800999e:	fba1 2402 	umull	r2, r4, r1, r2
 80099a2:	b94c      	cbnz	r4, 80099b8 <_calloc_r+0x1c>
 80099a4:	4611      	mov	r1, r2
 80099a6:	9201      	str	r2, [sp, #4]
 80099a8:	f000 f836 	bl	8009a18 <_malloc_r>
 80099ac:	9a01      	ldr	r2, [sp, #4]
 80099ae:	4605      	mov	r5, r0
 80099b0:	b930      	cbnz	r0, 80099c0 <_calloc_r+0x24>
 80099b2:	4628      	mov	r0, r5
 80099b4:	b003      	add	sp, #12
 80099b6:	bd30      	pop	{r4, r5, pc}
 80099b8:	220c      	movs	r2, #12
 80099ba:	6002      	str	r2, [r0, #0]
 80099bc:	2500      	movs	r5, #0
 80099be:	e7f8      	b.n	80099b2 <_calloc_r+0x16>
 80099c0:	4621      	mov	r1, r4
 80099c2:	f000 faf5 	bl	8009fb0 <memset>
 80099c6:	e7f4      	b.n	80099b2 <_calloc_r+0x16>

080099c8 <malloc>:
 80099c8:	4b02      	ldr	r3, [pc, #8]	; (80099d4 <malloc+0xc>)
 80099ca:	4601      	mov	r1, r0
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	f000 b823 	b.w	8009a18 <_malloc_r>
 80099d2:	bf00      	nop
 80099d4:	200000a4 	.word	0x200000a4

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0e      	ldr	r6, [pc, #56]	; (8009a14 <sbrk_aligned+0x3c>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 fbc6 	bl	800a174 <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 fbc1 	bl	800a174 <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d00a      	beq.n	8009a0c <sbrk_aligned+0x34>
 80099f6:	1cc4      	adds	r4, r0, #3
 80099f8:	f024 0403 	bic.w	r4, r4, #3
 80099fc:	42a0      	cmp	r0, r4
 80099fe:	d007      	beq.n	8009a10 <sbrk_aligned+0x38>
 8009a00:	1a21      	subs	r1, r4, r0
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 fbb6 	bl	800a174 <_sbrk_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d101      	bne.n	8009a10 <sbrk_aligned+0x38>
 8009a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a10:	4620      	mov	r0, r4
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	20003ce4 	.word	0x20003ce4

08009a18 <_malloc_r>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d905      	bls.n	8009a40 <_malloc_r+0x28>
 8009a34:	230c      	movs	r3, #12
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2600      	movs	r6, #0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b14 <_malloc_r+0xfc>
 8009a44:	f000 f868 	bl	8009b18 <__malloc_lock>
 8009a48:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4c:	461c      	mov	r4, r3
 8009a4e:	bb5c      	cbnz	r4, 8009aa8 <_malloc_r+0x90>
 8009a50:	4629      	mov	r1, r5
 8009a52:	4638      	mov	r0, r7
 8009a54:	f7ff ffc0 	bl	80099d8 <sbrk_aligned>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	d155      	bne.n	8009b0a <_malloc_r+0xf2>
 8009a5e:	f8d8 4000 	ldr.w	r4, [r8]
 8009a62:	4626      	mov	r6, r4
 8009a64:	2e00      	cmp	r6, #0
 8009a66:	d145      	bne.n	8009af4 <_malloc_r+0xdc>
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	d048      	beq.n	8009afe <_malloc_r+0xe6>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4638      	mov	r0, r7
 8009a72:	eb04 0903 	add.w	r9, r4, r3
 8009a76:	f000 fb7d 	bl	800a174 <_sbrk_r>
 8009a7a:	4581      	cmp	r9, r0
 8009a7c:	d13f      	bne.n	8009afe <_malloc_r+0xe6>
 8009a7e:	6821      	ldr	r1, [r4, #0]
 8009a80:	1a6d      	subs	r5, r5, r1
 8009a82:	4629      	mov	r1, r5
 8009a84:	4638      	mov	r0, r7
 8009a86:	f7ff ffa7 	bl	80099d8 <sbrk_aligned>
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d037      	beq.n	8009afe <_malloc_r+0xe6>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	442b      	add	r3, r5
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	f8d8 3000 	ldr.w	r3, [r8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d038      	beq.n	8009b0e <_malloc_r+0xf6>
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	42a2      	cmp	r2, r4
 8009aa0:	d12b      	bne.n	8009afa <_malloc_r+0xe2>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	e00f      	b.n	8009ac8 <_malloc_r+0xb0>
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	1b52      	subs	r2, r2, r5
 8009aac:	d41f      	bmi.n	8009aee <_malloc_r+0xd6>
 8009aae:	2a0b      	cmp	r2, #11
 8009ab0:	d917      	bls.n	8009ae2 <_malloc_r+0xca>
 8009ab2:	1961      	adds	r1, r4, r5
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	6025      	str	r5, [r4, #0]
 8009ab8:	bf18      	it	ne
 8009aba:	6059      	strne	r1, [r3, #4]
 8009abc:	6863      	ldr	r3, [r4, #4]
 8009abe:	bf08      	it	eq
 8009ac0:	f8c8 1000 	streq.w	r1, [r8]
 8009ac4:	5162      	str	r2, [r4, r5]
 8009ac6:	604b      	str	r3, [r1, #4]
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f104 060b 	add.w	r6, r4, #11
 8009ace:	f000 f829 	bl	8009b24 <__malloc_unlock>
 8009ad2:	f026 0607 	bic.w	r6, r6, #7
 8009ad6:	1d23      	adds	r3, r4, #4
 8009ad8:	1af2      	subs	r2, r6, r3
 8009ada:	d0ae      	beq.n	8009a3a <_malloc_r+0x22>
 8009adc:	1b9b      	subs	r3, r3, r6
 8009ade:	50a3      	str	r3, [r4, r2]
 8009ae0:	e7ab      	b.n	8009a3a <_malloc_r+0x22>
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	6862      	ldr	r2, [r4, #4]
 8009ae6:	d1dd      	bne.n	8009aa4 <_malloc_r+0x8c>
 8009ae8:	f8c8 2000 	str.w	r2, [r8]
 8009aec:	e7ec      	b.n	8009ac8 <_malloc_r+0xb0>
 8009aee:	4623      	mov	r3, r4
 8009af0:	6864      	ldr	r4, [r4, #4]
 8009af2:	e7ac      	b.n	8009a4e <_malloc_r+0x36>
 8009af4:	4634      	mov	r4, r6
 8009af6:	6876      	ldr	r6, [r6, #4]
 8009af8:	e7b4      	b.n	8009a64 <_malloc_r+0x4c>
 8009afa:	4613      	mov	r3, r2
 8009afc:	e7cc      	b.n	8009a98 <_malloc_r+0x80>
 8009afe:	230c      	movs	r3, #12
 8009b00:	603b      	str	r3, [r7, #0]
 8009b02:	4638      	mov	r0, r7
 8009b04:	f000 f80e 	bl	8009b24 <__malloc_unlock>
 8009b08:	e797      	b.n	8009a3a <_malloc_r+0x22>
 8009b0a:	6025      	str	r5, [r4, #0]
 8009b0c:	e7dc      	b.n	8009ac8 <_malloc_r+0xb0>
 8009b0e:	605b      	str	r3, [r3, #4]
 8009b10:	deff      	udf	#255	; 0xff
 8009b12:	bf00      	nop
 8009b14:	20003ce0 	.word	0x20003ce0

08009b18 <__malloc_lock>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__malloc_lock+0x8>)
 8009b1a:	f000 bb78 	b.w	800a20e <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20003e28 	.word	0x20003e28

08009b24 <__malloc_unlock>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__malloc_unlock+0x8>)
 8009b26:	f000 bb73 	b.w	800a210 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20003e28 	.word	0x20003e28

08009b30 <std>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
 8009b36:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3e:	6083      	str	r3, [r0, #8]
 8009b40:	8181      	strh	r1, [r0, #12]
 8009b42:	6643      	str	r3, [r0, #100]	; 0x64
 8009b44:	81c2      	strh	r2, [r0, #14]
 8009b46:	6183      	str	r3, [r0, #24]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f000 fa2f 	bl	8009fb0 <memset>
 8009b52:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <std+0x58>)
 8009b54:	6263      	str	r3, [r4, #36]	; 0x24
 8009b56:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <std+0x5c>)
 8009b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <std+0x60>)
 8009b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <std+0x64>)
 8009b60:	6323      	str	r3, [r4, #48]	; 0x30
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <std+0x68>)
 8009b64:	6224      	str	r4, [r4, #32]
 8009b66:	429c      	cmp	r4, r3
 8009b68:	d006      	beq.n	8009b78 <std+0x48>
 8009b6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b6e:	4294      	cmp	r4, r2
 8009b70:	d002      	beq.n	8009b78 <std+0x48>
 8009b72:	33d0      	adds	r3, #208	; 0xd0
 8009b74:	429c      	cmp	r4, r3
 8009b76:	d105      	bne.n	8009b84 <std+0x54>
 8009b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b80:	f000 bb44 	b.w	800a20c <__retarget_lock_init_recursive>
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	08009de1 	.word	0x08009de1
 8009b8c:	08009e03 	.word	0x08009e03
 8009b90:	08009e3b 	.word	0x08009e3b
 8009b94:	08009e5f 	.word	0x08009e5f
 8009b98:	20003ce8 	.word	0x20003ce8

08009b9c <stdio_exit_handler>:
 8009b9c:	4a02      	ldr	r2, [pc, #8]	; (8009ba8 <stdio_exit_handler+0xc>)
 8009b9e:	4903      	ldr	r1, [pc, #12]	; (8009bac <stdio_exit_handler+0x10>)
 8009ba0:	4803      	ldr	r0, [pc, #12]	; (8009bb0 <stdio_exit_handler+0x14>)
 8009ba2:	f000 b869 	b.w	8009c78 <_fwalk_sglue>
 8009ba6:	bf00      	nop
 8009ba8:	2000004c 	.word	0x2000004c
 8009bac:	0800ac69 	.word	0x0800ac69
 8009bb0:	20000058 	.word	0x20000058

08009bb4 <cleanup_stdio>:
 8009bb4:	6841      	ldr	r1, [r0, #4]
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <cleanup_stdio+0x34>)
 8009bb8:	4299      	cmp	r1, r3
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	d001      	beq.n	8009bc4 <cleanup_stdio+0x10>
 8009bc0:	f001 f852 	bl	800ac68 <_fflush_r>
 8009bc4:	68a1      	ldr	r1, [r4, #8]
 8009bc6:	4b09      	ldr	r3, [pc, #36]	; (8009bec <cleanup_stdio+0x38>)
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	d002      	beq.n	8009bd2 <cleanup_stdio+0x1e>
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f001 f84b 	bl	800ac68 <_fflush_r>
 8009bd2:	68e1      	ldr	r1, [r4, #12]
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <cleanup_stdio+0x3c>)
 8009bd6:	4299      	cmp	r1, r3
 8009bd8:	d004      	beq.n	8009be4 <cleanup_stdio+0x30>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be0:	f001 b842 	b.w	800ac68 <_fflush_r>
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	bf00      	nop
 8009be8:	20003ce8 	.word	0x20003ce8
 8009bec:	20003d50 	.word	0x20003d50
 8009bf0:	20003db8 	.word	0x20003db8

08009bf4 <global_stdio_init.part.0>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <global_stdio_init.part.0+0x30>)
 8009bf8:	4c0b      	ldr	r4, [pc, #44]	; (8009c28 <global_stdio_init.part.0+0x34>)
 8009bfa:	4a0c      	ldr	r2, [pc, #48]	; (8009c2c <global_stdio_init.part.0+0x38>)
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	2200      	movs	r2, #0
 8009c02:	2104      	movs	r1, #4
 8009c04:	f7ff ff94 	bl	8009b30 <std>
 8009c08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	2109      	movs	r1, #9
 8009c10:	f7ff ff8e 	bl	8009b30 <std>
 8009c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c18:	2202      	movs	r2, #2
 8009c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c1e:	2112      	movs	r1, #18
 8009c20:	f7ff bf86 	b.w	8009b30 <std>
 8009c24:	20003e20 	.word	0x20003e20
 8009c28:	20003ce8 	.word	0x20003ce8
 8009c2c:	08009b9d 	.word	0x08009b9d

08009c30 <__sfp_lock_acquire>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__sfp_lock_acquire+0x8>)
 8009c32:	f000 baec 	b.w	800a20e <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	20003e29 	.word	0x20003e29

08009c3c <__sfp_lock_release>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__sfp_lock_release+0x8>)
 8009c3e:	f000 bae7 	b.w	800a210 <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	20003e29 	.word	0x20003e29

08009c48 <__sinit>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	f7ff fff0 	bl	8009c30 <__sfp_lock_acquire>
 8009c50:	6a23      	ldr	r3, [r4, #32]
 8009c52:	b11b      	cbz	r3, 8009c5c <__sinit+0x14>
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f7ff bff0 	b.w	8009c3c <__sfp_lock_release>
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <__sinit+0x28>)
 8009c5e:	6223      	str	r3, [r4, #32]
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <__sinit+0x2c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f5      	bne.n	8009c54 <__sinit+0xc>
 8009c68:	f7ff ffc4 	bl	8009bf4 <global_stdio_init.part.0>
 8009c6c:	e7f2      	b.n	8009c54 <__sinit+0xc>
 8009c6e:	bf00      	nop
 8009c70:	08009bb5 	.word	0x08009bb5
 8009c74:	20003e20 	.word	0x20003e20

08009c78 <_fwalk_sglue>:
 8009c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	4688      	mov	r8, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	2600      	movs	r6, #0
 8009c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c88:	f1b9 0901 	subs.w	r9, r9, #1
 8009c8c:	d505      	bpl.n	8009c9a <_fwalk_sglue+0x22>
 8009c8e:	6824      	ldr	r4, [r4, #0]
 8009c90:	2c00      	cmp	r4, #0
 8009c92:	d1f7      	bne.n	8009c84 <_fwalk_sglue+0xc>
 8009c94:	4630      	mov	r0, r6
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d907      	bls.n	8009cb0 <_fwalk_sglue+0x38>
 8009ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	d003      	beq.n	8009cb0 <_fwalk_sglue+0x38>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c0      	blx	r8
 8009cae:	4306      	orrs	r6, r0
 8009cb0:	3568      	adds	r5, #104	; 0x68
 8009cb2:	e7e9      	b.n	8009c88 <_fwalk_sglue+0x10>

08009cb4 <iprintf>:
 8009cb4:	b40f      	push	{r0, r1, r2, r3}
 8009cb6:	b507      	push	{r0, r1, r2, lr}
 8009cb8:	4906      	ldr	r1, [pc, #24]	; (8009cd4 <iprintf+0x20>)
 8009cba:	ab04      	add	r3, sp, #16
 8009cbc:	6808      	ldr	r0, [r1, #0]
 8009cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc2:	6881      	ldr	r1, [r0, #8]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f000 fc9f 	bl	800a608 <_vfiprintf_r>
 8009cca:	b003      	add	sp, #12
 8009ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd0:	b004      	add	sp, #16
 8009cd2:	4770      	bx	lr
 8009cd4:	200000a4 	.word	0x200000a4

08009cd8 <putchar>:
 8009cd8:	4b02      	ldr	r3, [pc, #8]	; (8009ce4 <putchar+0xc>)
 8009cda:	4601      	mov	r1, r0
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	6882      	ldr	r2, [r0, #8]
 8009ce0:	f001 b85e 	b.w	800ada0 <_putc_r>
 8009ce4:	200000a4 	.word	0x200000a4

08009ce8 <_puts_r>:
 8009ce8:	6a03      	ldr	r3, [r0, #32]
 8009cea:	b570      	push	{r4, r5, r6, lr}
 8009cec:	6884      	ldr	r4, [r0, #8]
 8009cee:	4605      	mov	r5, r0
 8009cf0:	460e      	mov	r6, r1
 8009cf2:	b90b      	cbnz	r3, 8009cf8 <_puts_r+0x10>
 8009cf4:	f7ff ffa8 	bl	8009c48 <__sinit>
 8009cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cfa:	07db      	lsls	r3, r3, #31
 8009cfc:	d405      	bmi.n	8009d0a <_puts_r+0x22>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	0598      	lsls	r0, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_puts_r+0x22>
 8009d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d06:	f000 fa82 	bl	800a20e <__retarget_lock_acquire_recursive>
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	0719      	lsls	r1, r3, #28
 8009d0e:	d513      	bpl.n	8009d38 <_puts_r+0x50>
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	b18b      	cbz	r3, 8009d38 <_puts_r+0x50>
 8009d14:	3e01      	subs	r6, #1
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	b9e9      	cbnz	r1, 8009d5e <_puts_r+0x76>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da2e      	bge.n	8009d84 <_puts_r+0x9c>
 8009d26:	4622      	mov	r2, r4
 8009d28:	210a      	movs	r1, #10
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f89b 	bl	8009e66 <__swbuf_r>
 8009d30:	3001      	adds	r0, #1
 8009d32:	d007      	beq.n	8009d44 <_puts_r+0x5c>
 8009d34:	250a      	movs	r5, #10
 8009d36:	e007      	b.n	8009d48 <_puts_r+0x60>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f8d0 	bl	8009ee0 <__swsetup_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d0e7      	beq.n	8009d14 <_puts_r+0x2c>
 8009d44:	f04f 35ff 	mov.w	r5, #4294967295
 8009d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d4a:	07da      	lsls	r2, r3, #31
 8009d4c:	d405      	bmi.n	8009d5a <_puts_r+0x72>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	059b      	lsls	r3, r3, #22
 8009d52:	d402      	bmi.n	8009d5a <_puts_r+0x72>
 8009d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d56:	f000 fa5b 	bl	800a210 <__retarget_lock_release_recursive>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da04      	bge.n	8009d6c <_puts_r+0x84>
 8009d62:	69a2      	ldr	r2, [r4, #24]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	dc06      	bgt.n	8009d76 <_puts_r+0x8e>
 8009d68:	290a      	cmp	r1, #10
 8009d6a:	d004      	beq.n	8009d76 <_puts_r+0x8e>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	6022      	str	r2, [r4, #0]
 8009d72:	7019      	strb	r1, [r3, #0]
 8009d74:	e7cf      	b.n	8009d16 <_puts_r+0x2e>
 8009d76:	4622      	mov	r2, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 f874 	bl	8009e66 <__swbuf_r>
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d1c9      	bne.n	8009d16 <_puts_r+0x2e>
 8009d82:	e7df      	b.n	8009d44 <_puts_r+0x5c>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	250a      	movs	r5, #10
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	6022      	str	r2, [r4, #0]
 8009d8c:	701d      	strb	r5, [r3, #0]
 8009d8e:	e7db      	b.n	8009d48 <_puts_r+0x60>

08009d90 <puts>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <puts+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f7ff bfa7 	b.w	8009ce8 <_puts_r>
 8009d9a:	bf00      	nop
 8009d9c:	200000a4 	.word	0x200000a4

08009da0 <siprintf>:
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b500      	push	{lr}
 8009da4:	b09c      	sub	sp, #112	; 0x70
 8009da6:	ab1d      	add	r3, sp, #116	; 0x74
 8009da8:	9002      	str	r0, [sp, #8]
 8009daa:	9006      	str	r0, [sp, #24]
 8009dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009db0:	4809      	ldr	r0, [pc, #36]	; (8009dd8 <siprintf+0x38>)
 8009db2:	9107      	str	r1, [sp, #28]
 8009db4:	9104      	str	r1, [sp, #16]
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <siprintf+0x3c>)
 8009db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbc:	9105      	str	r1, [sp, #20]
 8009dbe:	6800      	ldr	r0, [r0, #0]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	a902      	add	r1, sp, #8
 8009dc4:	f000 faf8 	bl	800a3b8 <_svfiprintf_r>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	b01c      	add	sp, #112	; 0x70
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	200000a4 	.word	0x200000a4
 8009ddc:	ffff0208 	.word	0xffff0208

08009de0 <__sread>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	460c      	mov	r4, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	f000 f9b2 	bl	800a150 <_read_r>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	bfab      	itete	ge
 8009df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009df2:	89a3      	ldrhlt	r3, [r4, #12]
 8009df4:	181b      	addge	r3, r3, r0
 8009df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dfa:	bfac      	ite	ge
 8009dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dfe:	81a3      	strhlt	r3, [r4, #12]
 8009e00:	bd10      	pop	{r4, pc}

08009e02 <__swrite>:
 8009e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	461f      	mov	r7, r3
 8009e08:	898b      	ldrh	r3, [r1, #12]
 8009e0a:	05db      	lsls	r3, r3, #23
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	4616      	mov	r6, r2
 8009e12:	d505      	bpl.n	8009e20 <__swrite+0x1e>
 8009e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e18:	2302      	movs	r3, #2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f000 f986 	bl	800a12c <_lseek_r>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	4628      	mov	r0, r5
 8009e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	f000 b9ad 	b.w	800a194 <_write_r>

08009e3a <__sseek>:
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e42:	f000 f973 	bl	800a12c <_lseek_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	bf15      	itete	ne
 8009e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e56:	81a3      	strheq	r3, [r4, #12]
 8009e58:	bf18      	it	ne
 8009e5a:	81a3      	strhne	r3, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}

08009e5e <__sclose>:
 8009e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e62:	f000 b953 	b.w	800a10c <_close_r>

08009e66 <__swbuf_r>:
 8009e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e68:	460e      	mov	r6, r1
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	b118      	cbz	r0, 8009e78 <__swbuf_r+0x12>
 8009e70:	6a03      	ldr	r3, [r0, #32]
 8009e72:	b90b      	cbnz	r3, 8009e78 <__swbuf_r+0x12>
 8009e74:	f7ff fee8 	bl	8009c48 <__sinit>
 8009e78:	69a3      	ldr	r3, [r4, #24]
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	071a      	lsls	r2, r3, #28
 8009e80:	d525      	bpl.n	8009ece <__swbuf_r+0x68>
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	b31b      	cbz	r3, 8009ece <__swbuf_r+0x68>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	6922      	ldr	r2, [r4, #16]
 8009e8a:	1a98      	subs	r0, r3, r2
 8009e8c:	6963      	ldr	r3, [r4, #20]
 8009e8e:	b2f6      	uxtb	r6, r6
 8009e90:	4283      	cmp	r3, r0
 8009e92:	4637      	mov	r7, r6
 8009e94:	dc04      	bgt.n	8009ea0 <__swbuf_r+0x3a>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 fee5 	bl	800ac68 <_fflush_r>
 8009e9e:	b9e0      	cbnz	r0, 8009eda <__swbuf_r+0x74>
 8009ea0:	68a3      	ldr	r3, [r4, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	60a3      	str	r3, [r4, #8]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	6022      	str	r2, [r4, #0]
 8009eac:	701e      	strb	r6, [r3, #0]
 8009eae:	6962      	ldr	r2, [r4, #20]
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d004      	beq.n	8009ec0 <__swbuf_r+0x5a>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	07db      	lsls	r3, r3, #31
 8009eba:	d506      	bpl.n	8009eca <__swbuf_r+0x64>
 8009ebc:	2e0a      	cmp	r6, #10
 8009ebe:	d104      	bne.n	8009eca <__swbuf_r+0x64>
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f000 fed0 	bl	800ac68 <_fflush_r>
 8009ec8:	b938      	cbnz	r0, 8009eda <__swbuf_r+0x74>
 8009eca:	4638      	mov	r0, r7
 8009ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 f805 	bl	8009ee0 <__swsetup_r>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d0d5      	beq.n	8009e86 <__swbuf_r+0x20>
 8009eda:	f04f 37ff 	mov.w	r7, #4294967295
 8009ede:	e7f4      	b.n	8009eca <__swbuf_r+0x64>

08009ee0 <__swsetup_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4b2a      	ldr	r3, [pc, #168]	; (8009f8c <__swsetup_r+0xac>)
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	460c      	mov	r4, r1
 8009eea:	b118      	cbz	r0, 8009ef4 <__swsetup_r+0x14>
 8009eec:	6a03      	ldr	r3, [r0, #32]
 8009eee:	b90b      	cbnz	r3, 8009ef4 <__swsetup_r+0x14>
 8009ef0:	f7ff feaa 	bl	8009c48 <__sinit>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009efa:	0718      	lsls	r0, r3, #28
 8009efc:	d422      	bmi.n	8009f44 <__swsetup_r+0x64>
 8009efe:	06d9      	lsls	r1, r3, #27
 8009f00:	d407      	bmi.n	8009f12 <__swsetup_r+0x32>
 8009f02:	2309      	movs	r3, #9
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e034      	b.n	8009f7c <__swsetup_r+0x9c>
 8009f12:	0758      	lsls	r0, r3, #29
 8009f14:	d512      	bpl.n	8009f3c <__swsetup_r+0x5c>
 8009f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f18:	b141      	cbz	r1, 8009f2c <__swsetup_r+0x4c>
 8009f1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f1e:	4299      	cmp	r1, r3
 8009f20:	d002      	beq.n	8009f28 <__swsetup_r+0x48>
 8009f22:	4628      	mov	r0, r5
 8009f24:	f000 f9a2 	bl	800a26c <_free_r>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	2300      	movs	r3, #0
 8009f36:	6063      	str	r3, [r4, #4]
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	f043 0308 	orr.w	r3, r3, #8
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	b94b      	cbnz	r3, 8009f5c <__swsetup_r+0x7c>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f52:	d003      	beq.n	8009f5c <__swsetup_r+0x7c>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fee6 	bl	800ad28 <__smakebuf_r>
 8009f5c:	89a0      	ldrh	r0, [r4, #12]
 8009f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f62:	f010 0301 	ands.w	r3, r0, #1
 8009f66:	d00a      	beq.n	8009f7e <__swsetup_r+0x9e>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	6963      	ldr	r3, [r4, #20]
 8009f6e:	425b      	negs	r3, r3
 8009f70:	61a3      	str	r3, [r4, #24]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b943      	cbnz	r3, 8009f88 <__swsetup_r+0xa8>
 8009f76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f7a:	d1c4      	bne.n	8009f06 <__swsetup_r+0x26>
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	0781      	lsls	r1, r0, #30
 8009f80:	bf58      	it	pl
 8009f82:	6963      	ldrpl	r3, [r4, #20]
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	e7f4      	b.n	8009f72 <__swsetup_r+0x92>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f7      	b.n	8009f7c <__swsetup_r+0x9c>
 8009f8c:	200000a4 	.word	0x200000a4

08009f90 <memcmp>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	3901      	subs	r1, #1
 8009f94:	4402      	add	r2, r0
 8009f96:	4290      	cmp	r0, r2
 8009f98:	d101      	bne.n	8009f9e <memcmp+0xe>
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e005      	b.n	8009faa <memcmp+0x1a>
 8009f9e:	7803      	ldrb	r3, [r0, #0]
 8009fa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d001      	beq.n	8009fac <memcmp+0x1c>
 8009fa8:	1b18      	subs	r0, r3, r4
 8009faa:	bd10      	pop	{r4, pc}
 8009fac:	3001      	adds	r0, #1
 8009fae:	e7f2      	b.n	8009f96 <memcmp+0x6>

08009fb0 <memset>:
 8009fb0:	4402      	add	r2, r0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d100      	bne.n	8009fba <memset+0xa>
 8009fb8:	4770      	bx	lr
 8009fba:	f803 1b01 	strb.w	r1, [r3], #1
 8009fbe:	e7f9      	b.n	8009fb4 <memset+0x4>

08009fc0 <strcat>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	7814      	ldrb	r4, [r2, #0]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	3201      	adds	r2, #1
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d1fa      	bne.n	8009fc4 <strcat+0x4>
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d1f9      	bne.n	8009fd0 <strcat+0x10>
 8009fdc:	bd10      	pop	{r4, pc}

08009fde <strncmp>:
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	b16a      	cbz	r2, 8009ffe <strncmp+0x20>
 8009fe2:	3901      	subs	r1, #1
 8009fe4:	1884      	adds	r4, r0, r2
 8009fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d103      	bne.n	8009ffa <strncmp+0x1c>
 8009ff2:	42a0      	cmp	r0, r4
 8009ff4:	d001      	beq.n	8009ffa <strncmp+0x1c>
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	d1f5      	bne.n	8009fe6 <strncmp+0x8>
 8009ffa:	1ad0      	subs	r0, r2, r3
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	4610      	mov	r0, r2
 800a000:	e7fc      	b.n	8009ffc <strncmp+0x1e>

0800a002 <strncpy>:
 800a002:	b510      	push	{r4, lr}
 800a004:	3901      	subs	r1, #1
 800a006:	4603      	mov	r3, r0
 800a008:	b132      	cbz	r2, 800a018 <strncpy+0x16>
 800a00a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a00e:	f803 4b01 	strb.w	r4, [r3], #1
 800a012:	3a01      	subs	r2, #1
 800a014:	2c00      	cmp	r4, #0
 800a016:	d1f7      	bne.n	800a008 <strncpy+0x6>
 800a018:	441a      	add	r2, r3
 800a01a:	2100      	movs	r1, #0
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <strncpy+0x20>
 800a020:	bd10      	pop	{r4, pc}
 800a022:	f803 1b01 	strb.w	r1, [r3], #1
 800a026:	e7f9      	b.n	800a01c <strncpy+0x1a>

0800a028 <strtok>:
 800a028:	4b16      	ldr	r3, [pc, #88]	; (800a084 <strtok+0x5c>)
 800a02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a02c:	681e      	ldr	r6, [r3, #0]
 800a02e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a030:	4605      	mov	r5, r0
 800a032:	b9fc      	cbnz	r4, 800a074 <strtok+0x4c>
 800a034:	2050      	movs	r0, #80	; 0x50
 800a036:	9101      	str	r1, [sp, #4]
 800a038:	f7ff fcc6 	bl	80099c8 <malloc>
 800a03c:	9901      	ldr	r1, [sp, #4]
 800a03e:	6470      	str	r0, [r6, #68]	; 0x44
 800a040:	4602      	mov	r2, r0
 800a042:	b920      	cbnz	r0, 800a04e <strtok+0x26>
 800a044:	4b10      	ldr	r3, [pc, #64]	; (800a088 <strtok+0x60>)
 800a046:	4811      	ldr	r0, [pc, #68]	; (800a08c <strtok+0x64>)
 800a048:	215b      	movs	r1, #91	; 0x5b
 800a04a:	f000 f8f1 	bl	800a230 <__assert_func>
 800a04e:	e9c0 4400 	strd	r4, r4, [r0]
 800a052:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a056:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a05a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a05e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a062:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a066:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a06a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a06e:	6184      	str	r4, [r0, #24]
 800a070:	7704      	strb	r4, [r0, #28]
 800a072:	6244      	str	r4, [r0, #36]	; 0x24
 800a074:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a076:	2301      	movs	r3, #1
 800a078:	4628      	mov	r0, r5
 800a07a:	b002      	add	sp, #8
 800a07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a080:	f000 b806 	b.w	800a090 <__strtok_r>
 800a084:	200000a4 	.word	0x200000a4
 800a088:	0800c954 	.word	0x0800c954
 800a08c:	0800c96b 	.word	0x0800c96b

0800a090 <__strtok_r>:
 800a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a092:	b908      	cbnz	r0, 800a098 <__strtok_r+0x8>
 800a094:	6810      	ldr	r0, [r2, #0]
 800a096:	b188      	cbz	r0, 800a0bc <__strtok_r+0x2c>
 800a098:	4604      	mov	r4, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a0a6:	b91e      	cbnz	r6, 800a0b0 <__strtok_r+0x20>
 800a0a8:	b965      	cbnz	r5, 800a0c4 <__strtok_r+0x34>
 800a0aa:	6015      	str	r5, [r2, #0]
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	e005      	b.n	800a0bc <__strtok_r+0x2c>
 800a0b0:	42b5      	cmp	r5, r6
 800a0b2:	d1f6      	bne.n	800a0a2 <__strtok_r+0x12>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f0      	bne.n	800a09a <__strtok_r+0xa>
 800a0b8:	6014      	str	r4, [r2, #0]
 800a0ba:	7003      	strb	r3, [r0, #0]
 800a0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0be:	461c      	mov	r4, r3
 800a0c0:	e00c      	b.n	800a0dc <__strtok_r+0x4c>
 800a0c2:	b915      	cbnz	r5, 800a0ca <__strtok_r+0x3a>
 800a0c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a0ce:	42ab      	cmp	r3, r5
 800a0d0:	d1f7      	bne.n	800a0c2 <__strtok_r+0x32>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f3      	beq.n	800a0be <__strtok_r+0x2e>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a0dc:	6014      	str	r4, [r2, #0]
 800a0de:	e7ed      	b.n	800a0bc <__strtok_r+0x2c>

0800a0e0 <strstr>:
 800a0e0:	780a      	ldrb	r2, [r1, #0]
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	b96a      	cbnz	r2, 800a102 <strstr+0x22>
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d109      	bne.n	800a100 <strstr+0x20>
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0f6      	beq.n	800a0e6 <strstr+0x6>
 800a0f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	d0f7      	beq.n	800a0f0 <strstr+0x10>
 800a100:	3001      	adds	r0, #1
 800a102:	7803      	ldrb	r3, [r0, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1ef      	bne.n	800a0e8 <strstr+0x8>
 800a108:	4618      	mov	r0, r3
 800a10a:	e7ec      	b.n	800a0e6 <strstr+0x6>

0800a10c <_close_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d06      	ldr	r5, [pc, #24]	; (800a128 <_close_r+0x1c>)
 800a110:	2300      	movs	r3, #0
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	602b      	str	r3, [r5, #0]
 800a118:	f7f9 f8d1 	bl	80032be <_close>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_close_r+0x1a>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_close_r+0x1a>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	20003e24 	.word	0x20003e24

0800a12c <_lseek_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_lseek_r+0x20>)
 800a130:	4604      	mov	r4, r0
 800a132:	4608      	mov	r0, r1
 800a134:	4611      	mov	r1, r2
 800a136:	2200      	movs	r2, #0
 800a138:	602a      	str	r2, [r5, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	f7f9 f8e6 	bl	800330c <_lseek>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_lseek_r+0x1e>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_lseek_r+0x1e>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20003e24 	.word	0x20003e24

0800a150 <_read_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d07      	ldr	r5, [pc, #28]	; (800a170 <_read_r+0x20>)
 800a154:	4604      	mov	r4, r0
 800a156:	4608      	mov	r0, r1
 800a158:	4611      	mov	r1, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f9 f874 	bl	800324c <_read>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_read_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_read_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20003e24 	.word	0x20003e24

0800a174 <_sbrk_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d06      	ldr	r5, [pc, #24]	; (800a190 <_sbrk_r+0x1c>)
 800a178:	2300      	movs	r3, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	602b      	str	r3, [r5, #0]
 800a180:	f7f9 f8d2 	bl	8003328 <_sbrk>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_sbrk_r+0x1a>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_sbrk_r+0x1a>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	20003e24 	.word	0x20003e24

0800a194 <_write_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d07      	ldr	r5, [pc, #28]	; (800a1b4 <_write_r+0x20>)
 800a198:	4604      	mov	r4, r0
 800a19a:	4608      	mov	r0, r1
 800a19c:	4611      	mov	r1, r2
 800a19e:	2200      	movs	r2, #0
 800a1a0:	602a      	str	r2, [r5, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f7f9 f86f 	bl	8003286 <_write>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_write_r+0x1e>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_write_r+0x1e>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	20003e24 	.word	0x20003e24

0800a1b8 <__errno>:
 800a1b8:	4b01      	ldr	r3, [pc, #4]	; (800a1c0 <__errno+0x8>)
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	200000a4 	.word	0x200000a4

0800a1c4 <__libc_init_array>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	4d0d      	ldr	r5, [pc, #52]	; (800a1fc <__libc_init_array+0x38>)
 800a1c8:	4c0d      	ldr	r4, [pc, #52]	; (800a200 <__libc_init_array+0x3c>)
 800a1ca:	1b64      	subs	r4, r4, r5
 800a1cc:	10a4      	asrs	r4, r4, #2
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	42a6      	cmp	r6, r4
 800a1d2:	d109      	bne.n	800a1e8 <__libc_init_array+0x24>
 800a1d4:	4d0b      	ldr	r5, [pc, #44]	; (800a204 <__libc_init_array+0x40>)
 800a1d6:	4c0c      	ldr	r4, [pc, #48]	; (800a208 <__libc_init_array+0x44>)
 800a1d8:	f000 fed4 	bl	800af84 <_init>
 800a1dc:	1b64      	subs	r4, r4, r5
 800a1de:	10a4      	asrs	r4, r4, #2
 800a1e0:	2600      	movs	r6, #0
 800a1e2:	42a6      	cmp	r6, r4
 800a1e4:	d105      	bne.n	800a1f2 <__libc_init_array+0x2e>
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ec:	4798      	blx	r3
 800a1ee:	3601      	adds	r6, #1
 800a1f0:	e7ee      	b.n	800a1d0 <__libc_init_array+0xc>
 800a1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f6:	4798      	blx	r3
 800a1f8:	3601      	adds	r6, #1
 800a1fa:	e7f2      	b.n	800a1e2 <__libc_init_array+0x1e>
 800a1fc:	0800ca3c 	.word	0x0800ca3c
 800a200:	0800ca3c 	.word	0x0800ca3c
 800a204:	0800ca3c 	.word	0x0800ca3c
 800a208:	0800ca40 	.word	0x0800ca40

0800a20c <__retarget_lock_init_recursive>:
 800a20c:	4770      	bx	lr

0800a20e <__retarget_lock_acquire_recursive>:
 800a20e:	4770      	bx	lr

0800a210 <__retarget_lock_release_recursive>:
 800a210:	4770      	bx	lr

0800a212 <memcpy>:
 800a212:	440a      	add	r2, r1
 800a214:	4291      	cmp	r1, r2
 800a216:	f100 33ff 	add.w	r3, r0, #4294967295
 800a21a:	d100      	bne.n	800a21e <memcpy+0xc>
 800a21c:	4770      	bx	lr
 800a21e:	b510      	push	{r4, lr}
 800a220:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a224:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a228:	4291      	cmp	r1, r2
 800a22a:	d1f9      	bne.n	800a220 <memcpy+0xe>
 800a22c:	bd10      	pop	{r4, pc}
	...

0800a230 <__assert_func>:
 800a230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a232:	4614      	mov	r4, r2
 800a234:	461a      	mov	r2, r3
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__assert_func+0x2c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4605      	mov	r5, r0
 800a23c:	68d8      	ldr	r0, [r3, #12]
 800a23e:	b14c      	cbz	r4, 800a254 <__assert_func+0x24>
 800a240:	4b07      	ldr	r3, [pc, #28]	; (800a260 <__assert_func+0x30>)
 800a242:	9100      	str	r1, [sp, #0]
 800a244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a248:	4906      	ldr	r1, [pc, #24]	; (800a264 <__assert_func+0x34>)
 800a24a:	462b      	mov	r3, r5
 800a24c:	f000 fd34 	bl	800acb8 <fiprintf>
 800a250:	f000 fe16 	bl	800ae80 <abort>
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <__assert_func+0x38>)
 800a256:	461c      	mov	r4, r3
 800a258:	e7f3      	b.n	800a242 <__assert_func+0x12>
 800a25a:	bf00      	nop
 800a25c:	200000a4 	.word	0x200000a4
 800a260:	0800c9c5 	.word	0x0800c9c5
 800a264:	0800c9d2 	.word	0x0800c9d2
 800a268:	0800ca00 	.word	0x0800ca00

0800a26c <_free_r>:
 800a26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a26e:	2900      	cmp	r1, #0
 800a270:	d044      	beq.n	800a2fc <_free_r+0x90>
 800a272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a276:	9001      	str	r0, [sp, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f1a1 0404 	sub.w	r4, r1, #4
 800a27e:	bfb8      	it	lt
 800a280:	18e4      	addlt	r4, r4, r3
 800a282:	f7ff fc49 	bl	8009b18 <__malloc_lock>
 800a286:	4a1e      	ldr	r2, [pc, #120]	; (800a300 <_free_r+0x94>)
 800a288:	9801      	ldr	r0, [sp, #4]
 800a28a:	6813      	ldr	r3, [r2, #0]
 800a28c:	b933      	cbnz	r3, 800a29c <_free_r+0x30>
 800a28e:	6063      	str	r3, [r4, #4]
 800a290:	6014      	str	r4, [r2, #0]
 800a292:	b003      	add	sp, #12
 800a294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a298:	f7ff bc44 	b.w	8009b24 <__malloc_unlock>
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	d908      	bls.n	800a2b2 <_free_r+0x46>
 800a2a0:	6825      	ldr	r5, [r4, #0]
 800a2a2:	1961      	adds	r1, r4, r5
 800a2a4:	428b      	cmp	r3, r1
 800a2a6:	bf01      	itttt	eq
 800a2a8:	6819      	ldreq	r1, [r3, #0]
 800a2aa:	685b      	ldreq	r3, [r3, #4]
 800a2ac:	1949      	addeq	r1, r1, r5
 800a2ae:	6021      	streq	r1, [r4, #0]
 800a2b0:	e7ed      	b.n	800a28e <_free_r+0x22>
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	b10b      	cbz	r3, 800a2bc <_free_r+0x50>
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	d9fa      	bls.n	800a2b2 <_free_r+0x46>
 800a2bc:	6811      	ldr	r1, [r2, #0]
 800a2be:	1855      	adds	r5, r2, r1
 800a2c0:	42a5      	cmp	r5, r4
 800a2c2:	d10b      	bne.n	800a2dc <_free_r+0x70>
 800a2c4:	6824      	ldr	r4, [r4, #0]
 800a2c6:	4421      	add	r1, r4
 800a2c8:	1854      	adds	r4, r2, r1
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	6011      	str	r1, [r2, #0]
 800a2ce:	d1e0      	bne.n	800a292 <_free_r+0x26>
 800a2d0:	681c      	ldr	r4, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	6053      	str	r3, [r2, #4]
 800a2d6:	440c      	add	r4, r1
 800a2d8:	6014      	str	r4, [r2, #0]
 800a2da:	e7da      	b.n	800a292 <_free_r+0x26>
 800a2dc:	d902      	bls.n	800a2e4 <_free_r+0x78>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	e7d6      	b.n	800a292 <_free_r+0x26>
 800a2e4:	6825      	ldr	r5, [r4, #0]
 800a2e6:	1961      	adds	r1, r4, r5
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	bf04      	itt	eq
 800a2ec:	6819      	ldreq	r1, [r3, #0]
 800a2ee:	685b      	ldreq	r3, [r3, #4]
 800a2f0:	6063      	str	r3, [r4, #4]
 800a2f2:	bf04      	itt	eq
 800a2f4:	1949      	addeq	r1, r1, r5
 800a2f6:	6021      	streq	r1, [r4, #0]
 800a2f8:	6054      	str	r4, [r2, #4]
 800a2fa:	e7ca      	b.n	800a292 <_free_r+0x26>
 800a2fc:	b003      	add	sp, #12
 800a2fe:	bd30      	pop	{r4, r5, pc}
 800a300:	20003ce0 	.word	0x20003ce0

0800a304 <__ssputs_r>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	688e      	ldr	r6, [r1, #8]
 800a30a:	461f      	mov	r7, r3
 800a30c:	42be      	cmp	r6, r7
 800a30e:	680b      	ldr	r3, [r1, #0]
 800a310:	4682      	mov	sl, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4690      	mov	r8, r2
 800a316:	d82c      	bhi.n	800a372 <__ssputs_r+0x6e>
 800a318:	898a      	ldrh	r2, [r1, #12]
 800a31a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a31e:	d026      	beq.n	800a36e <__ssputs_r+0x6a>
 800a320:	6965      	ldr	r5, [r4, #20]
 800a322:	6909      	ldr	r1, [r1, #16]
 800a324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a328:	eba3 0901 	sub.w	r9, r3, r1
 800a32c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a330:	1c7b      	adds	r3, r7, #1
 800a332:	444b      	add	r3, r9
 800a334:	106d      	asrs	r5, r5, #1
 800a336:	429d      	cmp	r5, r3
 800a338:	bf38      	it	cc
 800a33a:	461d      	movcc	r5, r3
 800a33c:	0553      	lsls	r3, r2, #21
 800a33e:	d527      	bpl.n	800a390 <__ssputs_r+0x8c>
 800a340:	4629      	mov	r1, r5
 800a342:	f7ff fb69 	bl	8009a18 <_malloc_r>
 800a346:	4606      	mov	r6, r0
 800a348:	b360      	cbz	r0, 800a3a4 <__ssputs_r+0xa0>
 800a34a:	6921      	ldr	r1, [r4, #16]
 800a34c:	464a      	mov	r2, r9
 800a34e:	f7ff ff60 	bl	800a212 <memcpy>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	6126      	str	r6, [r4, #16]
 800a360:	6165      	str	r5, [r4, #20]
 800a362:	444e      	add	r6, r9
 800a364:	eba5 0509 	sub.w	r5, r5, r9
 800a368:	6026      	str	r6, [r4, #0]
 800a36a:	60a5      	str	r5, [r4, #8]
 800a36c:	463e      	mov	r6, r7
 800a36e:	42be      	cmp	r6, r7
 800a370:	d900      	bls.n	800a374 <__ssputs_r+0x70>
 800a372:	463e      	mov	r6, r7
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	4632      	mov	r2, r6
 800a378:	4641      	mov	r1, r8
 800a37a:	f000 fd45 	bl	800ae08 <memmove>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	1b9b      	subs	r3, r3, r6
 800a382:	60a3      	str	r3, [r4, #8]
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	4433      	add	r3, r6
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	2000      	movs	r0, #0
 800a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a390:	462a      	mov	r2, r5
 800a392:	f000 fd7c 	bl	800ae8e <_realloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1e0      	bne.n	800a35e <__ssputs_r+0x5a>
 800a39c:	6921      	ldr	r1, [r4, #16]
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7ff ff64 	bl	800a26c <_free_r>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	f8ca 3000 	str.w	r3, [sl]
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	e7e9      	b.n	800a38c <__ssputs_r+0x88>

0800a3b8 <_svfiprintf_r>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	4698      	mov	r8, r3
 800a3be:	898b      	ldrh	r3, [r1, #12]
 800a3c0:	061b      	lsls	r3, r3, #24
 800a3c2:	b09d      	sub	sp, #116	; 0x74
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	d50e      	bpl.n	800a3ea <_svfiprintf_r+0x32>
 800a3cc:	690b      	ldr	r3, [r1, #16]
 800a3ce:	b963      	cbnz	r3, 800a3ea <_svfiprintf_r+0x32>
 800a3d0:	2140      	movs	r1, #64	; 0x40
 800a3d2:	f7ff fb21 	bl	8009a18 <_malloc_r>
 800a3d6:	6028      	str	r0, [r5, #0]
 800a3d8:	6128      	str	r0, [r5, #16]
 800a3da:	b920      	cbnz	r0, 800a3e6 <_svfiprintf_r+0x2e>
 800a3dc:	230c      	movs	r3, #12
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	e0d0      	b.n	800a588 <_svfiprintf_r+0x1d0>
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	616b      	str	r3, [r5, #20]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f8:	2330      	movs	r3, #48	; 0x30
 800a3fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5a0 <_svfiprintf_r+0x1e8>
 800a3fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a402:	f04f 0901 	mov.w	r9, #1
 800a406:	4623      	mov	r3, r4
 800a408:	469a      	mov	sl, r3
 800a40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40e:	b10a      	cbz	r2, 800a414 <_svfiprintf_r+0x5c>
 800a410:	2a25      	cmp	r2, #37	; 0x25
 800a412:	d1f9      	bne.n	800a408 <_svfiprintf_r+0x50>
 800a414:	ebba 0b04 	subs.w	fp, sl, r4
 800a418:	d00b      	beq.n	800a432 <_svfiprintf_r+0x7a>
 800a41a:	465b      	mov	r3, fp
 800a41c:	4622      	mov	r2, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff ff6f 	bl	800a304 <__ssputs_r>
 800a426:	3001      	adds	r0, #1
 800a428:	f000 80a9 	beq.w	800a57e <_svfiprintf_r+0x1c6>
 800a42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42e:	445a      	add	r2, fp
 800a430:	9209      	str	r2, [sp, #36]	; 0x24
 800a432:	f89a 3000 	ldrb.w	r3, [sl]
 800a436:	2b00      	cmp	r3, #0
 800a438:	f000 80a1 	beq.w	800a57e <_svfiprintf_r+0x1c6>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f04f 32ff 	mov.w	r2, #4294967295
 800a442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a446:	f10a 0a01 	add.w	sl, sl, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	9307      	str	r3, [sp, #28]
 800a44e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a452:	931a      	str	r3, [sp, #104]	; 0x68
 800a454:	4654      	mov	r4, sl
 800a456:	2205      	movs	r2, #5
 800a458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45c:	4850      	ldr	r0, [pc, #320]	; (800a5a0 <_svfiprintf_r+0x1e8>)
 800a45e:	f7f5 fed7 	bl	8000210 <memchr>
 800a462:	9a04      	ldr	r2, [sp, #16]
 800a464:	b9d8      	cbnz	r0, 800a49e <_svfiprintf_r+0xe6>
 800a466:	06d0      	lsls	r0, r2, #27
 800a468:	bf44      	itt	mi
 800a46a:	2320      	movmi	r3, #32
 800a46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a470:	0711      	lsls	r1, r2, #28
 800a472:	bf44      	itt	mi
 800a474:	232b      	movmi	r3, #43	; 0x2b
 800a476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47a:	f89a 3000 	ldrb.w	r3, [sl]
 800a47e:	2b2a      	cmp	r3, #42	; 0x2a
 800a480:	d015      	beq.n	800a4ae <_svfiprintf_r+0xf6>
 800a482:	9a07      	ldr	r2, [sp, #28]
 800a484:	4654      	mov	r4, sl
 800a486:	2000      	movs	r0, #0
 800a488:	f04f 0c0a 	mov.w	ip, #10
 800a48c:	4621      	mov	r1, r4
 800a48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a492:	3b30      	subs	r3, #48	; 0x30
 800a494:	2b09      	cmp	r3, #9
 800a496:	d94d      	bls.n	800a534 <_svfiprintf_r+0x17c>
 800a498:	b1b0      	cbz	r0, 800a4c8 <_svfiprintf_r+0x110>
 800a49a:	9207      	str	r2, [sp, #28]
 800a49c:	e014      	b.n	800a4c8 <_svfiprintf_r+0x110>
 800a49e:	eba0 0308 	sub.w	r3, r0, r8
 800a4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	46a2      	mov	sl, r4
 800a4ac:	e7d2      	b.n	800a454 <_svfiprintf_r+0x9c>
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	1d19      	adds	r1, r3, #4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	9103      	str	r1, [sp, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfbb      	ittet	lt
 800a4ba:	425b      	neglt	r3, r3
 800a4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c0:	9307      	strge	r3, [sp, #28]
 800a4c2:	9307      	strlt	r3, [sp, #28]
 800a4c4:	bfb8      	it	lt
 800a4c6:	9204      	strlt	r2, [sp, #16]
 800a4c8:	7823      	ldrb	r3, [r4, #0]
 800a4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a4cc:	d10c      	bne.n	800a4e8 <_svfiprintf_r+0x130>
 800a4ce:	7863      	ldrb	r3, [r4, #1]
 800a4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d2:	d134      	bne.n	800a53e <_svfiprintf_r+0x186>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	1d1a      	adds	r2, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	9203      	str	r2, [sp, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfb8      	it	lt
 800a4e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e4:	3402      	adds	r4, #2
 800a4e6:	9305      	str	r3, [sp, #20]
 800a4e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5b0 <_svfiprintf_r+0x1f8>
 800a4ec:	7821      	ldrb	r1, [r4, #0]
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	f7f5 fe8d 	bl	8000210 <memchr>
 800a4f6:	b138      	cbz	r0, 800a508 <_svfiprintf_r+0x150>
 800a4f8:	9b04      	ldr	r3, [sp, #16]
 800a4fa:	eba0 000a 	sub.w	r0, r0, sl
 800a4fe:	2240      	movs	r2, #64	; 0x40
 800a500:	4082      	lsls	r2, r0
 800a502:	4313      	orrs	r3, r2
 800a504:	3401      	adds	r4, #1
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	4825      	ldr	r0, [pc, #148]	; (800a5a4 <_svfiprintf_r+0x1ec>)
 800a50e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a512:	2206      	movs	r2, #6
 800a514:	f7f5 fe7c 	bl	8000210 <memchr>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d038      	beq.n	800a58e <_svfiprintf_r+0x1d6>
 800a51c:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <_svfiprintf_r+0x1f0>)
 800a51e:	bb1b      	cbnz	r3, 800a568 <_svfiprintf_r+0x1b0>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	3307      	adds	r3, #7
 800a524:	f023 0307 	bic.w	r3, r3, #7
 800a528:	3308      	adds	r3, #8
 800a52a:	9303      	str	r3, [sp, #12]
 800a52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52e:	4433      	add	r3, r6
 800a530:	9309      	str	r3, [sp, #36]	; 0x24
 800a532:	e768      	b.n	800a406 <_svfiprintf_r+0x4e>
 800a534:	fb0c 3202 	mla	r2, ip, r2, r3
 800a538:	460c      	mov	r4, r1
 800a53a:	2001      	movs	r0, #1
 800a53c:	e7a6      	b.n	800a48c <_svfiprintf_r+0xd4>
 800a53e:	2300      	movs	r3, #0
 800a540:	3401      	adds	r4, #1
 800a542:	9305      	str	r3, [sp, #20]
 800a544:	4619      	mov	r1, r3
 800a546:	f04f 0c0a 	mov.w	ip, #10
 800a54a:	4620      	mov	r0, r4
 800a54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a550:	3a30      	subs	r2, #48	; 0x30
 800a552:	2a09      	cmp	r2, #9
 800a554:	d903      	bls.n	800a55e <_svfiprintf_r+0x1a6>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0c6      	beq.n	800a4e8 <_svfiprintf_r+0x130>
 800a55a:	9105      	str	r1, [sp, #20]
 800a55c:	e7c4      	b.n	800a4e8 <_svfiprintf_r+0x130>
 800a55e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a562:	4604      	mov	r4, r0
 800a564:	2301      	movs	r3, #1
 800a566:	e7f0      	b.n	800a54a <_svfiprintf_r+0x192>
 800a568:	ab03      	add	r3, sp, #12
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	462a      	mov	r2, r5
 800a56e:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <_svfiprintf_r+0x1f4>)
 800a570:	a904      	add	r1, sp, #16
 800a572:	4638      	mov	r0, r7
 800a574:	f3af 8000 	nop.w
 800a578:	1c42      	adds	r2, r0, #1
 800a57a:	4606      	mov	r6, r0
 800a57c:	d1d6      	bne.n	800a52c <_svfiprintf_r+0x174>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	065b      	lsls	r3, r3, #25
 800a582:	f53f af2d 	bmi.w	800a3e0 <_svfiprintf_r+0x28>
 800a586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a588:	b01d      	add	sp, #116	; 0x74
 800a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58e:	ab03      	add	r3, sp, #12
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	462a      	mov	r2, r5
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <_svfiprintf_r+0x1f4>)
 800a596:	a904      	add	r1, sp, #16
 800a598:	4638      	mov	r0, r7
 800a59a:	f000 f9bd 	bl	800a918 <_printf_i>
 800a59e:	e7eb      	b.n	800a578 <_svfiprintf_r+0x1c0>
 800a5a0:	0800ca01 	.word	0x0800ca01
 800a5a4:	0800ca0b 	.word	0x0800ca0b
 800a5a8:	00000000 	.word	0x00000000
 800a5ac:	0800a305 	.word	0x0800a305
 800a5b0:	0800ca07 	.word	0x0800ca07

0800a5b4 <__sfputc_r>:
 800a5b4:	6893      	ldr	r3, [r2, #8]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	b410      	push	{r4}
 800a5bc:	6093      	str	r3, [r2, #8]
 800a5be:	da08      	bge.n	800a5d2 <__sfputc_r+0x1e>
 800a5c0:	6994      	ldr	r4, [r2, #24]
 800a5c2:	42a3      	cmp	r3, r4
 800a5c4:	db01      	blt.n	800a5ca <__sfputc_r+0x16>
 800a5c6:	290a      	cmp	r1, #10
 800a5c8:	d103      	bne.n	800a5d2 <__sfputc_r+0x1e>
 800a5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ce:	f7ff bc4a 	b.w	8009e66 <__swbuf_r>
 800a5d2:	6813      	ldr	r3, [r2, #0]
 800a5d4:	1c58      	adds	r0, r3, #1
 800a5d6:	6010      	str	r0, [r2, #0]
 800a5d8:	7019      	strb	r1, [r3, #0]
 800a5da:	4608      	mov	r0, r1
 800a5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <__sfputs_r>:
 800a5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	460f      	mov	r7, r1
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	18d5      	adds	r5, r2, r3
 800a5ec:	42ac      	cmp	r4, r5
 800a5ee:	d101      	bne.n	800a5f4 <__sfputs_r+0x12>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e007      	b.n	800a604 <__sfputs_r+0x22>
 800a5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f8:	463a      	mov	r2, r7
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ffda 	bl	800a5b4 <__sfputc_r>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d1f3      	bne.n	800a5ec <__sfputs_r+0xa>
 800a604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a608 <_vfiprintf_r>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	460d      	mov	r5, r1
 800a60e:	b09d      	sub	sp, #116	; 0x74
 800a610:	4614      	mov	r4, r2
 800a612:	4698      	mov	r8, r3
 800a614:	4606      	mov	r6, r0
 800a616:	b118      	cbz	r0, 800a620 <_vfiprintf_r+0x18>
 800a618:	6a03      	ldr	r3, [r0, #32]
 800a61a:	b90b      	cbnz	r3, 800a620 <_vfiprintf_r+0x18>
 800a61c:	f7ff fb14 	bl	8009c48 <__sinit>
 800a620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a622:	07d9      	lsls	r1, r3, #31
 800a624:	d405      	bmi.n	800a632 <_vfiprintf_r+0x2a>
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	059a      	lsls	r2, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_vfiprintf_r+0x2a>
 800a62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a62e:	f7ff fdee 	bl	800a20e <__retarget_lock_acquire_recursive>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	071b      	lsls	r3, r3, #28
 800a636:	d501      	bpl.n	800a63c <_vfiprintf_r+0x34>
 800a638:	692b      	ldr	r3, [r5, #16]
 800a63a:	b99b      	cbnz	r3, 800a664 <_vfiprintf_r+0x5c>
 800a63c:	4629      	mov	r1, r5
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff fc4e 	bl	8009ee0 <__swsetup_r>
 800a644:	b170      	cbz	r0, 800a664 <_vfiprintf_r+0x5c>
 800a646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a648:	07dc      	lsls	r4, r3, #31
 800a64a:	d504      	bpl.n	800a656 <_vfiprintf_r+0x4e>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	b01d      	add	sp, #116	; 0x74
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	89ab      	ldrh	r3, [r5, #12]
 800a658:	0598      	lsls	r0, r3, #22
 800a65a:	d4f7      	bmi.n	800a64c <_vfiprintf_r+0x44>
 800a65c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a65e:	f7ff fdd7 	bl	800a210 <__retarget_lock_release_recursive>
 800a662:	e7f3      	b.n	800a64c <_vfiprintf_r+0x44>
 800a664:	2300      	movs	r3, #0
 800a666:	9309      	str	r3, [sp, #36]	; 0x24
 800a668:	2320      	movs	r3, #32
 800a66a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a66e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a672:	2330      	movs	r3, #48	; 0x30
 800a674:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a828 <_vfiprintf_r+0x220>
 800a678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a67c:	f04f 0901 	mov.w	r9, #1
 800a680:	4623      	mov	r3, r4
 800a682:	469a      	mov	sl, r3
 800a684:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a688:	b10a      	cbz	r2, 800a68e <_vfiprintf_r+0x86>
 800a68a:	2a25      	cmp	r2, #37	; 0x25
 800a68c:	d1f9      	bne.n	800a682 <_vfiprintf_r+0x7a>
 800a68e:	ebba 0b04 	subs.w	fp, sl, r4
 800a692:	d00b      	beq.n	800a6ac <_vfiprintf_r+0xa4>
 800a694:	465b      	mov	r3, fp
 800a696:	4622      	mov	r2, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ffa1 	bl	800a5e2 <__sfputs_r>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f000 80a9 	beq.w	800a7f8 <_vfiprintf_r+0x1f0>
 800a6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a8:	445a      	add	r2, fp
 800a6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 80a1 	beq.w	800a7f8 <_vfiprintf_r+0x1f0>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c0:	f10a 0a01 	add.w	sl, sl, #1
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ce:	4654      	mov	r4, sl
 800a6d0:	2205      	movs	r2, #5
 800a6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d6:	4854      	ldr	r0, [pc, #336]	; (800a828 <_vfiprintf_r+0x220>)
 800a6d8:	f7f5 fd9a 	bl	8000210 <memchr>
 800a6dc:	9a04      	ldr	r2, [sp, #16]
 800a6de:	b9d8      	cbnz	r0, 800a718 <_vfiprintf_r+0x110>
 800a6e0:	06d1      	lsls	r1, r2, #27
 800a6e2:	bf44      	itt	mi
 800a6e4:	2320      	movmi	r3, #32
 800a6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ea:	0713      	lsls	r3, r2, #28
 800a6ec:	bf44      	itt	mi
 800a6ee:	232b      	movmi	r3, #43	; 0x2b
 800a6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fa:	d015      	beq.n	800a728 <_vfiprintf_r+0x120>
 800a6fc:	9a07      	ldr	r2, [sp, #28]
 800a6fe:	4654      	mov	r4, sl
 800a700:	2000      	movs	r0, #0
 800a702:	f04f 0c0a 	mov.w	ip, #10
 800a706:	4621      	mov	r1, r4
 800a708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a70c:	3b30      	subs	r3, #48	; 0x30
 800a70e:	2b09      	cmp	r3, #9
 800a710:	d94d      	bls.n	800a7ae <_vfiprintf_r+0x1a6>
 800a712:	b1b0      	cbz	r0, 800a742 <_vfiprintf_r+0x13a>
 800a714:	9207      	str	r2, [sp, #28]
 800a716:	e014      	b.n	800a742 <_vfiprintf_r+0x13a>
 800a718:	eba0 0308 	sub.w	r3, r0, r8
 800a71c:	fa09 f303 	lsl.w	r3, r9, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	9304      	str	r3, [sp, #16]
 800a724:	46a2      	mov	sl, r4
 800a726:	e7d2      	b.n	800a6ce <_vfiprintf_r+0xc6>
 800a728:	9b03      	ldr	r3, [sp, #12]
 800a72a:	1d19      	adds	r1, r3, #4
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	9103      	str	r1, [sp, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	bfbb      	ittet	lt
 800a734:	425b      	neglt	r3, r3
 800a736:	f042 0202 	orrlt.w	r2, r2, #2
 800a73a:	9307      	strge	r3, [sp, #28]
 800a73c:	9307      	strlt	r3, [sp, #28]
 800a73e:	bfb8      	it	lt
 800a740:	9204      	strlt	r2, [sp, #16]
 800a742:	7823      	ldrb	r3, [r4, #0]
 800a744:	2b2e      	cmp	r3, #46	; 0x2e
 800a746:	d10c      	bne.n	800a762 <_vfiprintf_r+0x15a>
 800a748:	7863      	ldrb	r3, [r4, #1]
 800a74a:	2b2a      	cmp	r3, #42	; 0x2a
 800a74c:	d134      	bne.n	800a7b8 <_vfiprintf_r+0x1b0>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	1d1a      	adds	r2, r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	9203      	str	r2, [sp, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfb8      	it	lt
 800a75a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a75e:	3402      	adds	r4, #2
 800a760:	9305      	str	r3, [sp, #20]
 800a762:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a838 <_vfiprintf_r+0x230>
 800a766:	7821      	ldrb	r1, [r4, #0]
 800a768:	2203      	movs	r2, #3
 800a76a:	4650      	mov	r0, sl
 800a76c:	f7f5 fd50 	bl	8000210 <memchr>
 800a770:	b138      	cbz	r0, 800a782 <_vfiprintf_r+0x17a>
 800a772:	9b04      	ldr	r3, [sp, #16]
 800a774:	eba0 000a 	sub.w	r0, r0, sl
 800a778:	2240      	movs	r2, #64	; 0x40
 800a77a:	4082      	lsls	r2, r0
 800a77c:	4313      	orrs	r3, r2
 800a77e:	3401      	adds	r4, #1
 800a780:	9304      	str	r3, [sp, #16]
 800a782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a786:	4829      	ldr	r0, [pc, #164]	; (800a82c <_vfiprintf_r+0x224>)
 800a788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a78c:	2206      	movs	r2, #6
 800a78e:	f7f5 fd3f 	bl	8000210 <memchr>
 800a792:	2800      	cmp	r0, #0
 800a794:	d03f      	beq.n	800a816 <_vfiprintf_r+0x20e>
 800a796:	4b26      	ldr	r3, [pc, #152]	; (800a830 <_vfiprintf_r+0x228>)
 800a798:	bb1b      	cbnz	r3, 800a7e2 <_vfiprintf_r+0x1da>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	f023 0307 	bic.w	r3, r3, #7
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	9303      	str	r3, [sp, #12]
 800a7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a8:	443b      	add	r3, r7
 800a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ac:	e768      	b.n	800a680 <_vfiprintf_r+0x78>
 800a7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	e7a6      	b.n	800a706 <_vfiprintf_r+0xfe>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	3401      	adds	r4, #1
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f04f 0c0a 	mov.w	ip, #10
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ca:	3a30      	subs	r2, #48	; 0x30
 800a7cc:	2a09      	cmp	r2, #9
 800a7ce:	d903      	bls.n	800a7d8 <_vfiprintf_r+0x1d0>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0c6      	beq.n	800a762 <_vfiprintf_r+0x15a>
 800a7d4:	9105      	str	r1, [sp, #20]
 800a7d6:	e7c4      	b.n	800a762 <_vfiprintf_r+0x15a>
 800a7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7dc:	4604      	mov	r4, r0
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e7f0      	b.n	800a7c4 <_vfiprintf_r+0x1bc>
 800a7e2:	ab03      	add	r3, sp, #12
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	4b12      	ldr	r3, [pc, #72]	; (800a834 <_vfiprintf_r+0x22c>)
 800a7ea:	a904      	add	r1, sp, #16
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f3af 8000 	nop.w
 800a7f2:	4607      	mov	r7, r0
 800a7f4:	1c78      	adds	r0, r7, #1
 800a7f6:	d1d6      	bne.n	800a7a6 <_vfiprintf_r+0x19e>
 800a7f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7fa:	07d9      	lsls	r1, r3, #31
 800a7fc:	d405      	bmi.n	800a80a <_vfiprintf_r+0x202>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	059a      	lsls	r2, r3, #22
 800a802:	d402      	bmi.n	800a80a <_vfiprintf_r+0x202>
 800a804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a806:	f7ff fd03 	bl	800a210 <__retarget_lock_release_recursive>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	065b      	lsls	r3, r3, #25
 800a80e:	f53f af1d 	bmi.w	800a64c <_vfiprintf_r+0x44>
 800a812:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a814:	e71c      	b.n	800a650 <_vfiprintf_r+0x48>
 800a816:	ab03      	add	r3, sp, #12
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	462a      	mov	r2, r5
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <_vfiprintf_r+0x22c>)
 800a81e:	a904      	add	r1, sp, #16
 800a820:	4630      	mov	r0, r6
 800a822:	f000 f879 	bl	800a918 <_printf_i>
 800a826:	e7e4      	b.n	800a7f2 <_vfiprintf_r+0x1ea>
 800a828:	0800ca01 	.word	0x0800ca01
 800a82c:	0800ca0b 	.word	0x0800ca0b
 800a830:	00000000 	.word	0x00000000
 800a834:	0800a5e3 	.word	0x0800a5e3
 800a838:	0800ca07 	.word	0x0800ca07

0800a83c <_printf_common>:
 800a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a840:	4616      	mov	r6, r2
 800a842:	4699      	mov	r9, r3
 800a844:	688a      	ldr	r2, [r1, #8]
 800a846:	690b      	ldr	r3, [r1, #16]
 800a848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a84c:	4293      	cmp	r3, r2
 800a84e:	bfb8      	it	lt
 800a850:	4613      	movlt	r3, r2
 800a852:	6033      	str	r3, [r6, #0]
 800a854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a858:	4607      	mov	r7, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b10a      	cbz	r2, 800a862 <_printf_common+0x26>
 800a85e:	3301      	adds	r3, #1
 800a860:	6033      	str	r3, [r6, #0]
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	0699      	lsls	r1, r3, #26
 800a866:	bf42      	ittt	mi
 800a868:	6833      	ldrmi	r3, [r6, #0]
 800a86a:	3302      	addmi	r3, #2
 800a86c:	6033      	strmi	r3, [r6, #0]
 800a86e:	6825      	ldr	r5, [r4, #0]
 800a870:	f015 0506 	ands.w	r5, r5, #6
 800a874:	d106      	bne.n	800a884 <_printf_common+0x48>
 800a876:	f104 0a19 	add.w	sl, r4, #25
 800a87a:	68e3      	ldr	r3, [r4, #12]
 800a87c:	6832      	ldr	r2, [r6, #0]
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	42ab      	cmp	r3, r5
 800a882:	dc26      	bgt.n	800a8d2 <_printf_common+0x96>
 800a884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a888:	1e13      	subs	r3, r2, #0
 800a88a:	6822      	ldr	r2, [r4, #0]
 800a88c:	bf18      	it	ne
 800a88e:	2301      	movne	r3, #1
 800a890:	0692      	lsls	r2, r2, #26
 800a892:	d42b      	bmi.n	800a8ec <_printf_common+0xb0>
 800a894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a898:	4649      	mov	r1, r9
 800a89a:	4638      	mov	r0, r7
 800a89c:	47c0      	blx	r8
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d01e      	beq.n	800a8e0 <_printf_common+0xa4>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	6922      	ldr	r2, [r4, #16]
 800a8a6:	f003 0306 	and.w	r3, r3, #6
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	bf02      	ittt	eq
 800a8ae:	68e5      	ldreq	r5, [r4, #12]
 800a8b0:	6833      	ldreq	r3, [r6, #0]
 800a8b2:	1aed      	subeq	r5, r5, r3
 800a8b4:	68a3      	ldr	r3, [r4, #8]
 800a8b6:	bf0c      	ite	eq
 800a8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8bc:	2500      	movne	r5, #0
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	bfc4      	itt	gt
 800a8c2:	1a9b      	subgt	r3, r3, r2
 800a8c4:	18ed      	addgt	r5, r5, r3
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	341a      	adds	r4, #26
 800a8ca:	42b5      	cmp	r5, r6
 800a8cc:	d11a      	bne.n	800a904 <_printf_common+0xc8>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e008      	b.n	800a8e4 <_printf_common+0xa8>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4638      	mov	r0, r7
 800a8da:	47c0      	blx	r8
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d103      	bne.n	800a8e8 <_printf_common+0xac>
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	e7c6      	b.n	800a87a <_printf_common+0x3e>
 800a8ec:	18e1      	adds	r1, r4, r3
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	2030      	movs	r0, #48	; 0x30
 800a8f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8f6:	4422      	add	r2, r4
 800a8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a900:	3302      	adds	r3, #2
 800a902:	e7c7      	b.n	800a894 <_printf_common+0x58>
 800a904:	2301      	movs	r3, #1
 800a906:	4622      	mov	r2, r4
 800a908:	4649      	mov	r1, r9
 800a90a:	4638      	mov	r0, r7
 800a90c:	47c0      	blx	r8
 800a90e:	3001      	adds	r0, #1
 800a910:	d0e6      	beq.n	800a8e0 <_printf_common+0xa4>
 800a912:	3601      	adds	r6, #1
 800a914:	e7d9      	b.n	800a8ca <_printf_common+0x8e>
	...

0800a918 <_printf_i>:
 800a918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a91c:	7e0f      	ldrb	r7, [r1, #24]
 800a91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a920:	2f78      	cmp	r7, #120	; 0x78
 800a922:	4691      	mov	r9, r2
 800a924:	4680      	mov	r8, r0
 800a926:	460c      	mov	r4, r1
 800a928:	469a      	mov	sl, r3
 800a92a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a92e:	d807      	bhi.n	800a940 <_printf_i+0x28>
 800a930:	2f62      	cmp	r7, #98	; 0x62
 800a932:	d80a      	bhi.n	800a94a <_printf_i+0x32>
 800a934:	2f00      	cmp	r7, #0
 800a936:	f000 80d4 	beq.w	800aae2 <_printf_i+0x1ca>
 800a93a:	2f58      	cmp	r7, #88	; 0x58
 800a93c:	f000 80c0 	beq.w	800aac0 <_printf_i+0x1a8>
 800a940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a948:	e03a      	b.n	800a9c0 <_printf_i+0xa8>
 800a94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a94e:	2b15      	cmp	r3, #21
 800a950:	d8f6      	bhi.n	800a940 <_printf_i+0x28>
 800a952:	a101      	add	r1, pc, #4	; (adr r1, 800a958 <_printf_i+0x40>)
 800a954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a958:	0800a9b1 	.word	0x0800a9b1
 800a95c:	0800a9c5 	.word	0x0800a9c5
 800a960:	0800a941 	.word	0x0800a941
 800a964:	0800a941 	.word	0x0800a941
 800a968:	0800a941 	.word	0x0800a941
 800a96c:	0800a941 	.word	0x0800a941
 800a970:	0800a9c5 	.word	0x0800a9c5
 800a974:	0800a941 	.word	0x0800a941
 800a978:	0800a941 	.word	0x0800a941
 800a97c:	0800a941 	.word	0x0800a941
 800a980:	0800a941 	.word	0x0800a941
 800a984:	0800aac9 	.word	0x0800aac9
 800a988:	0800a9f1 	.word	0x0800a9f1
 800a98c:	0800aa83 	.word	0x0800aa83
 800a990:	0800a941 	.word	0x0800a941
 800a994:	0800a941 	.word	0x0800a941
 800a998:	0800aaeb 	.word	0x0800aaeb
 800a99c:	0800a941 	.word	0x0800a941
 800a9a0:	0800a9f1 	.word	0x0800a9f1
 800a9a4:	0800a941 	.word	0x0800a941
 800a9a8:	0800a941 	.word	0x0800a941
 800a9ac:	0800aa8b 	.word	0x0800aa8b
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	1d1a      	adds	r2, r3, #4
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	602a      	str	r2, [r5, #0]
 800a9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e09f      	b.n	800ab04 <_printf_i+0x1ec>
 800a9c4:	6820      	ldr	r0, [r4, #0]
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	0607      	lsls	r7, r0, #24
 800a9ca:	f103 0104 	add.w	r1, r3, #4
 800a9ce:	6029      	str	r1, [r5, #0]
 800a9d0:	d501      	bpl.n	800a9d6 <_printf_i+0xbe>
 800a9d2:	681e      	ldr	r6, [r3, #0]
 800a9d4:	e003      	b.n	800a9de <_printf_i+0xc6>
 800a9d6:	0646      	lsls	r6, r0, #25
 800a9d8:	d5fb      	bpl.n	800a9d2 <_printf_i+0xba>
 800a9da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	da03      	bge.n	800a9ea <_printf_i+0xd2>
 800a9e2:	232d      	movs	r3, #45	; 0x2d
 800a9e4:	4276      	negs	r6, r6
 800a9e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ea:	485a      	ldr	r0, [pc, #360]	; (800ab54 <_printf_i+0x23c>)
 800a9ec:	230a      	movs	r3, #10
 800a9ee:	e012      	b.n	800aa16 <_printf_i+0xfe>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1d19      	adds	r1, r3, #4
 800a9f6:	6029      	str	r1, [r5, #0]
 800a9f8:	0605      	lsls	r5, r0, #24
 800a9fa:	d501      	bpl.n	800aa00 <_printf_i+0xe8>
 800a9fc:	681e      	ldr	r6, [r3, #0]
 800a9fe:	e002      	b.n	800aa06 <_printf_i+0xee>
 800aa00:	0641      	lsls	r1, r0, #25
 800aa02:	d5fb      	bpl.n	800a9fc <_printf_i+0xe4>
 800aa04:	881e      	ldrh	r6, [r3, #0]
 800aa06:	4853      	ldr	r0, [pc, #332]	; (800ab54 <_printf_i+0x23c>)
 800aa08:	2f6f      	cmp	r7, #111	; 0x6f
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2308      	moveq	r3, #8
 800aa0e:	230a      	movne	r3, #10
 800aa10:	2100      	movs	r1, #0
 800aa12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa16:	6865      	ldr	r5, [r4, #4]
 800aa18:	60a5      	str	r5, [r4, #8]
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	bfa2      	ittt	ge
 800aa1e:	6821      	ldrge	r1, [r4, #0]
 800aa20:	f021 0104 	bicge.w	r1, r1, #4
 800aa24:	6021      	strge	r1, [r4, #0]
 800aa26:	b90e      	cbnz	r6, 800aa2c <_printf_i+0x114>
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	d04b      	beq.n	800aac4 <_printf_i+0x1ac>
 800aa2c:	4615      	mov	r5, r2
 800aa2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa32:	fb03 6711 	mls	r7, r3, r1, r6
 800aa36:	5dc7      	ldrb	r7, [r0, r7]
 800aa38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa3c:	4637      	mov	r7, r6
 800aa3e:	42bb      	cmp	r3, r7
 800aa40:	460e      	mov	r6, r1
 800aa42:	d9f4      	bls.n	800aa2e <_printf_i+0x116>
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d10b      	bne.n	800aa60 <_printf_i+0x148>
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	07de      	lsls	r6, r3, #31
 800aa4c:	d508      	bpl.n	800aa60 <_printf_i+0x148>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	6861      	ldr	r1, [r4, #4]
 800aa52:	4299      	cmp	r1, r3
 800aa54:	bfde      	ittt	le
 800aa56:	2330      	movle	r3, #48	; 0x30
 800aa58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa60:	1b52      	subs	r2, r2, r5
 800aa62:	6122      	str	r2, [r4, #16]
 800aa64:	f8cd a000 	str.w	sl, [sp]
 800aa68:	464b      	mov	r3, r9
 800aa6a:	aa03      	add	r2, sp, #12
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff fee4 	bl	800a83c <_printf_common>
 800aa74:	3001      	adds	r0, #1
 800aa76:	d14a      	bne.n	800ab0e <_printf_i+0x1f6>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	b004      	add	sp, #16
 800aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	f043 0320 	orr.w	r3, r3, #32
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	4833      	ldr	r0, [pc, #204]	; (800ab58 <_printf_i+0x240>)
 800aa8c:	2778      	movs	r7, #120	; 0x78
 800aa8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	6829      	ldr	r1, [r5, #0]
 800aa96:	061f      	lsls	r7, r3, #24
 800aa98:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa9c:	d402      	bmi.n	800aaa4 <_printf_i+0x18c>
 800aa9e:	065f      	lsls	r7, r3, #25
 800aaa0:	bf48      	it	mi
 800aaa2:	b2b6      	uxthmi	r6, r6
 800aaa4:	07df      	lsls	r7, r3, #31
 800aaa6:	bf48      	it	mi
 800aaa8:	f043 0320 	orrmi.w	r3, r3, #32
 800aaac:	6029      	str	r1, [r5, #0]
 800aaae:	bf48      	it	mi
 800aab0:	6023      	strmi	r3, [r4, #0]
 800aab2:	b91e      	cbnz	r6, 800aabc <_printf_i+0x1a4>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	f023 0320 	bic.w	r3, r3, #32
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	2310      	movs	r3, #16
 800aabe:	e7a7      	b.n	800aa10 <_printf_i+0xf8>
 800aac0:	4824      	ldr	r0, [pc, #144]	; (800ab54 <_printf_i+0x23c>)
 800aac2:	e7e4      	b.n	800aa8e <_printf_i+0x176>
 800aac4:	4615      	mov	r5, r2
 800aac6:	e7bd      	b.n	800aa44 <_printf_i+0x12c>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	6826      	ldr	r6, [r4, #0]
 800aacc:	6961      	ldr	r1, [r4, #20]
 800aace:	1d18      	adds	r0, r3, #4
 800aad0:	6028      	str	r0, [r5, #0]
 800aad2:	0635      	lsls	r5, r6, #24
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	d501      	bpl.n	800aadc <_printf_i+0x1c4>
 800aad8:	6019      	str	r1, [r3, #0]
 800aada:	e002      	b.n	800aae2 <_printf_i+0x1ca>
 800aadc:	0670      	lsls	r0, r6, #25
 800aade:	d5fb      	bpl.n	800aad8 <_printf_i+0x1c0>
 800aae0:	8019      	strh	r1, [r3, #0]
 800aae2:	2300      	movs	r3, #0
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	4615      	mov	r5, r2
 800aae8:	e7bc      	b.n	800aa64 <_printf_i+0x14c>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	1d1a      	adds	r2, r3, #4
 800aaee:	602a      	str	r2, [r5, #0]
 800aaf0:	681d      	ldr	r5, [r3, #0]
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f7f5 fb8a 	bl	8000210 <memchr>
 800aafc:	b108      	cbz	r0, 800ab02 <_printf_i+0x1ea>
 800aafe:	1b40      	subs	r0, r0, r5
 800ab00:	6060      	str	r0, [r4, #4]
 800ab02:	6863      	ldr	r3, [r4, #4]
 800ab04:	6123      	str	r3, [r4, #16]
 800ab06:	2300      	movs	r3, #0
 800ab08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab0c:	e7aa      	b.n	800aa64 <_printf_i+0x14c>
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4649      	mov	r1, r9
 800ab14:	4640      	mov	r0, r8
 800ab16:	47d0      	blx	sl
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d0ad      	beq.n	800aa78 <_printf_i+0x160>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	079b      	lsls	r3, r3, #30
 800ab20:	d413      	bmi.n	800ab4a <_printf_i+0x232>
 800ab22:	68e0      	ldr	r0, [r4, #12]
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	4298      	cmp	r0, r3
 800ab28:	bfb8      	it	lt
 800ab2a:	4618      	movlt	r0, r3
 800ab2c:	e7a6      	b.n	800aa7c <_printf_i+0x164>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4632      	mov	r2, r6
 800ab32:	4649      	mov	r1, r9
 800ab34:	4640      	mov	r0, r8
 800ab36:	47d0      	blx	sl
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d09d      	beq.n	800aa78 <_printf_i+0x160>
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	68e3      	ldr	r3, [r4, #12]
 800ab40:	9903      	ldr	r1, [sp, #12]
 800ab42:	1a5b      	subs	r3, r3, r1
 800ab44:	42ab      	cmp	r3, r5
 800ab46:	dcf2      	bgt.n	800ab2e <_printf_i+0x216>
 800ab48:	e7eb      	b.n	800ab22 <_printf_i+0x20a>
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	f104 0619 	add.w	r6, r4, #25
 800ab50:	e7f5      	b.n	800ab3e <_printf_i+0x226>
 800ab52:	bf00      	nop
 800ab54:	0800ca12 	.word	0x0800ca12
 800ab58:	0800ca23 	.word	0x0800ca23

0800ab5c <__sflush_r>:
 800ab5c:	898a      	ldrh	r2, [r1, #12]
 800ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	4605      	mov	r5, r0
 800ab64:	0710      	lsls	r0, r2, #28
 800ab66:	460c      	mov	r4, r1
 800ab68:	d458      	bmi.n	800ac1c <__sflush_r+0xc0>
 800ab6a:	684b      	ldr	r3, [r1, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dc05      	bgt.n	800ab7c <__sflush_r+0x20>
 800ab70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dc02      	bgt.n	800ab7c <__sflush_r+0x20>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d0f9      	beq.n	800ab76 <__sflush_r+0x1a>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab88:	682f      	ldr	r7, [r5, #0]
 800ab8a:	6a21      	ldr	r1, [r4, #32]
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	d032      	beq.n	800abf6 <__sflush_r+0x9a>
 800ab90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	075a      	lsls	r2, r3, #29
 800ab96:	d505      	bpl.n	800aba4 <__sflush_r+0x48>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	1ac0      	subs	r0, r0, r3
 800ab9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab9e:	b10b      	cbz	r3, 800aba4 <__sflush_r+0x48>
 800aba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aba2:	1ac0      	subs	r0, r0, r3
 800aba4:	2300      	movs	r3, #0
 800aba6:	4602      	mov	r2, r0
 800aba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abaa:	6a21      	ldr	r1, [r4, #32]
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	d106      	bne.n	800abc4 <__sflush_r+0x68>
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	291d      	cmp	r1, #29
 800abba:	d82b      	bhi.n	800ac14 <__sflush_r+0xb8>
 800abbc:	4a29      	ldr	r2, [pc, #164]	; (800ac64 <__sflush_r+0x108>)
 800abbe:	410a      	asrs	r2, r1
 800abc0:	07d6      	lsls	r6, r2, #31
 800abc2:	d427      	bmi.n	800ac14 <__sflush_r+0xb8>
 800abc4:	2200      	movs	r2, #0
 800abc6:	6062      	str	r2, [r4, #4]
 800abc8:	04d9      	lsls	r1, r3, #19
 800abca:	6922      	ldr	r2, [r4, #16]
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	d504      	bpl.n	800abda <__sflush_r+0x7e>
 800abd0:	1c42      	adds	r2, r0, #1
 800abd2:	d101      	bne.n	800abd8 <__sflush_r+0x7c>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b903      	cbnz	r3, 800abda <__sflush_r+0x7e>
 800abd8:	6560      	str	r0, [r4, #84]	; 0x54
 800abda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abdc:	602f      	str	r7, [r5, #0]
 800abde:	2900      	cmp	r1, #0
 800abe0:	d0c9      	beq.n	800ab76 <__sflush_r+0x1a>
 800abe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d002      	beq.n	800abf0 <__sflush_r+0x94>
 800abea:	4628      	mov	r0, r5
 800abec:	f7ff fb3e 	bl	800a26c <_free_r>
 800abf0:	2000      	movs	r0, #0
 800abf2:	6360      	str	r0, [r4, #52]	; 0x34
 800abf4:	e7c0      	b.n	800ab78 <__sflush_r+0x1c>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	1c41      	adds	r1, r0, #1
 800abfe:	d1c8      	bne.n	800ab92 <__sflush_r+0x36>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0c5      	beq.n	800ab92 <__sflush_r+0x36>
 800ac06:	2b1d      	cmp	r3, #29
 800ac08:	d001      	beq.n	800ac0e <__sflush_r+0xb2>
 800ac0a:	2b16      	cmp	r3, #22
 800ac0c:	d101      	bne.n	800ac12 <__sflush_r+0xb6>
 800ac0e:	602f      	str	r7, [r5, #0]
 800ac10:	e7b1      	b.n	800ab76 <__sflush_r+0x1a>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	e7ad      	b.n	800ab78 <__sflush_r+0x1c>
 800ac1c:	690f      	ldr	r7, [r1, #16]
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d0a9      	beq.n	800ab76 <__sflush_r+0x1a>
 800ac22:	0793      	lsls	r3, r2, #30
 800ac24:	680e      	ldr	r6, [r1, #0]
 800ac26:	bf08      	it	eq
 800ac28:	694b      	ldreq	r3, [r1, #20]
 800ac2a:	600f      	str	r7, [r1, #0]
 800ac2c:	bf18      	it	ne
 800ac2e:	2300      	movne	r3, #0
 800ac30:	eba6 0807 	sub.w	r8, r6, r7
 800ac34:	608b      	str	r3, [r1, #8]
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	dd9c      	ble.n	800ab76 <__sflush_r+0x1a>
 800ac3c:	6a21      	ldr	r1, [r4, #32]
 800ac3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac40:	4643      	mov	r3, r8
 800ac42:	463a      	mov	r2, r7
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b0      	blx	r6
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	dc06      	bgt.n	800ac5a <__sflush_r+0xfe>
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	e78e      	b.n	800ab78 <__sflush_r+0x1c>
 800ac5a:	4407      	add	r7, r0
 800ac5c:	eba8 0800 	sub.w	r8, r8, r0
 800ac60:	e7e9      	b.n	800ac36 <__sflush_r+0xda>
 800ac62:	bf00      	nop
 800ac64:	dfbffffe 	.word	0xdfbffffe

0800ac68 <_fflush_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	690b      	ldr	r3, [r1, #16]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	b913      	cbnz	r3, 800ac78 <_fflush_r+0x10>
 800ac72:	2500      	movs	r5, #0
 800ac74:	4628      	mov	r0, r5
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	b118      	cbz	r0, 800ac82 <_fflush_r+0x1a>
 800ac7a:	6a03      	ldr	r3, [r0, #32]
 800ac7c:	b90b      	cbnz	r3, 800ac82 <_fflush_r+0x1a>
 800ac7e:	f7fe ffe3 	bl	8009c48 <__sinit>
 800ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0f3      	beq.n	800ac72 <_fflush_r+0xa>
 800ac8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac8c:	07d0      	lsls	r0, r2, #31
 800ac8e:	d404      	bmi.n	800ac9a <_fflush_r+0x32>
 800ac90:	0599      	lsls	r1, r3, #22
 800ac92:	d402      	bmi.n	800ac9a <_fflush_r+0x32>
 800ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac96:	f7ff faba 	bl	800a20e <__retarget_lock_acquire_recursive>
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	f7ff ff5d 	bl	800ab5c <__sflush_r>
 800aca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aca4:	07da      	lsls	r2, r3, #31
 800aca6:	4605      	mov	r5, r0
 800aca8:	d4e4      	bmi.n	800ac74 <_fflush_r+0xc>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	059b      	lsls	r3, r3, #22
 800acae:	d4e1      	bmi.n	800ac74 <_fflush_r+0xc>
 800acb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acb2:	f7ff faad 	bl	800a210 <__retarget_lock_release_recursive>
 800acb6:	e7dd      	b.n	800ac74 <_fflush_r+0xc>

0800acb8 <fiprintf>:
 800acb8:	b40e      	push	{r1, r2, r3}
 800acba:	b503      	push	{r0, r1, lr}
 800acbc:	4601      	mov	r1, r0
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	4805      	ldr	r0, [pc, #20]	; (800acd8 <fiprintf+0x20>)
 800acc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f7ff fc9d 	bl	800a608 <_vfiprintf_r>
 800acce:	b002      	add	sp, #8
 800acd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd4:	b003      	add	sp, #12
 800acd6:	4770      	bx	lr
 800acd8:	200000a4 	.word	0x200000a4

0800acdc <__swhatbuf_r>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace4:	2900      	cmp	r1, #0
 800ace6:	b096      	sub	sp, #88	; 0x58
 800ace8:	4615      	mov	r5, r2
 800acea:	461e      	mov	r6, r3
 800acec:	da0d      	bge.n	800ad0a <__swhatbuf_r+0x2e>
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acf4:	f04f 0100 	mov.w	r1, #0
 800acf8:	bf0c      	ite	eq
 800acfa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800acfe:	2340      	movne	r3, #64	; 0x40
 800ad00:	2000      	movs	r0, #0
 800ad02:	6031      	str	r1, [r6, #0]
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	b016      	add	sp, #88	; 0x58
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
 800ad0a:	466a      	mov	r2, sp
 800ad0c:	f000 f896 	bl	800ae3c <_fstat_r>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dbec      	blt.n	800acee <__swhatbuf_r+0x12>
 800ad14:	9901      	ldr	r1, [sp, #4]
 800ad16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad1e:	4259      	negs	r1, r3
 800ad20:	4159      	adcs	r1, r3
 800ad22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad26:	e7eb      	b.n	800ad00 <__swhatbuf_r+0x24>

0800ad28 <__smakebuf_r>:
 800ad28:	898b      	ldrh	r3, [r1, #12]
 800ad2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad2c:	079d      	lsls	r5, r3, #30
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	d507      	bpl.n	800ad44 <__smakebuf_r+0x1c>
 800ad34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	6163      	str	r3, [r4, #20]
 800ad40:	b002      	add	sp, #8
 800ad42:	bd70      	pop	{r4, r5, r6, pc}
 800ad44:	ab01      	add	r3, sp, #4
 800ad46:	466a      	mov	r2, sp
 800ad48:	f7ff ffc8 	bl	800acdc <__swhatbuf_r>
 800ad4c:	9900      	ldr	r1, [sp, #0]
 800ad4e:	4605      	mov	r5, r0
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7fe fe61 	bl	8009a18 <_malloc_r>
 800ad56:	b948      	cbnz	r0, 800ad6c <__smakebuf_r+0x44>
 800ad58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad5c:	059a      	lsls	r2, r3, #22
 800ad5e:	d4ef      	bmi.n	800ad40 <__smakebuf_r+0x18>
 800ad60:	f023 0303 	bic.w	r3, r3, #3
 800ad64:	f043 0302 	orr.w	r3, r3, #2
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	e7e3      	b.n	800ad34 <__smakebuf_r+0xc>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	6020      	str	r0, [r4, #0]
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	9b00      	ldr	r3, [sp, #0]
 800ad78:	6163      	str	r3, [r4, #20]
 800ad7a:	9b01      	ldr	r3, [sp, #4]
 800ad7c:	6120      	str	r0, [r4, #16]
 800ad7e:	b15b      	cbz	r3, 800ad98 <__smakebuf_r+0x70>
 800ad80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad84:	4630      	mov	r0, r6
 800ad86:	f000 f86b 	bl	800ae60 <_isatty_r>
 800ad8a:	b128      	cbz	r0, 800ad98 <__smakebuf_r+0x70>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f023 0303 	bic.w	r3, r3, #3
 800ad92:	f043 0301 	orr.w	r3, r3, #1
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	431d      	orrs	r5, r3
 800ad9c:	81a5      	strh	r5, [r4, #12]
 800ad9e:	e7cf      	b.n	800ad40 <__smakebuf_r+0x18>

0800ada0 <_putc_r>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	460d      	mov	r5, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	4606      	mov	r6, r0
 800ada8:	b118      	cbz	r0, 800adb2 <_putc_r+0x12>
 800adaa:	6a03      	ldr	r3, [r0, #32]
 800adac:	b90b      	cbnz	r3, 800adb2 <_putc_r+0x12>
 800adae:	f7fe ff4b 	bl	8009c48 <__sinit>
 800adb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb4:	07d8      	lsls	r0, r3, #31
 800adb6:	d405      	bmi.n	800adc4 <_putc_r+0x24>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	0599      	lsls	r1, r3, #22
 800adbc:	d402      	bmi.n	800adc4 <_putc_r+0x24>
 800adbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc0:	f7ff fa25 	bl	800a20e <__retarget_lock_acquire_recursive>
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	60a3      	str	r3, [r4, #8]
 800adcc:	da05      	bge.n	800adda <_putc_r+0x3a>
 800adce:	69a2      	ldr	r2, [r4, #24]
 800add0:	4293      	cmp	r3, r2
 800add2:	db12      	blt.n	800adfa <_putc_r+0x5a>
 800add4:	b2eb      	uxtb	r3, r5
 800add6:	2b0a      	cmp	r3, #10
 800add8:	d00f      	beq.n	800adfa <_putc_r+0x5a>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	6022      	str	r2, [r4, #0]
 800ade0:	701d      	strb	r5, [r3, #0]
 800ade2:	b2ed      	uxtb	r5, r5
 800ade4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ade6:	07da      	lsls	r2, r3, #31
 800ade8:	d405      	bmi.n	800adf6 <_putc_r+0x56>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	059b      	lsls	r3, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_putc_r+0x56>
 800adf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adf2:	f7ff fa0d 	bl	800a210 <__retarget_lock_release_recursive>
 800adf6:	4628      	mov	r0, r5
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
 800adfa:	4629      	mov	r1, r5
 800adfc:	4622      	mov	r2, r4
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff f831 	bl	8009e66 <__swbuf_r>
 800ae04:	4605      	mov	r5, r0
 800ae06:	e7ed      	b.n	800ade4 <_putc_r+0x44>

0800ae08 <memmove>:
 800ae08:	4288      	cmp	r0, r1
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	eb01 0402 	add.w	r4, r1, r2
 800ae10:	d902      	bls.n	800ae18 <memmove+0x10>
 800ae12:	4284      	cmp	r4, r0
 800ae14:	4623      	mov	r3, r4
 800ae16:	d807      	bhi.n	800ae28 <memmove+0x20>
 800ae18:	1e43      	subs	r3, r0, #1
 800ae1a:	42a1      	cmp	r1, r4
 800ae1c:	d008      	beq.n	800ae30 <memmove+0x28>
 800ae1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae26:	e7f8      	b.n	800ae1a <memmove+0x12>
 800ae28:	4402      	add	r2, r0
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	428a      	cmp	r2, r1
 800ae2e:	d100      	bne.n	800ae32 <memmove+0x2a>
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae3a:	e7f7      	b.n	800ae2c <memmove+0x24>

0800ae3c <_fstat_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d07      	ldr	r5, [pc, #28]	; (800ae5c <_fstat_r+0x20>)
 800ae40:	2300      	movs	r3, #0
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	4611      	mov	r1, r2
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	f7f8 fa44 	bl	80032d6 <_fstat>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	d102      	bne.n	800ae58 <_fstat_r+0x1c>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	b103      	cbz	r3, 800ae58 <_fstat_r+0x1c>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20003e24 	.word	0x20003e24

0800ae60 <_isatty_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	; (800ae7c <_isatty_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7f8 fa43 	bl	80032f6 <_isatty>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_isatty_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_isatty_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20003e24 	.word	0x20003e24

0800ae80 <abort>:
 800ae80:	b508      	push	{r3, lr}
 800ae82:	2006      	movs	r0, #6
 800ae84:	f000 f85a 	bl	800af3c <raise>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7f8 f9d5 	bl	8003238 <_exit>

0800ae8e <_realloc_r>:
 800ae8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae92:	4680      	mov	r8, r0
 800ae94:	4614      	mov	r4, r2
 800ae96:	460e      	mov	r6, r1
 800ae98:	b921      	cbnz	r1, 800aea4 <_realloc_r+0x16>
 800ae9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	4611      	mov	r1, r2
 800aea0:	f7fe bdba 	b.w	8009a18 <_malloc_r>
 800aea4:	b92a      	cbnz	r2, 800aeb2 <_realloc_r+0x24>
 800aea6:	f7ff f9e1 	bl	800a26c <_free_r>
 800aeaa:	4625      	mov	r5, r4
 800aeac:	4628      	mov	r0, r5
 800aeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb2:	f000 f85f 	bl	800af74 <_malloc_usable_size_r>
 800aeb6:	4284      	cmp	r4, r0
 800aeb8:	4607      	mov	r7, r0
 800aeba:	d802      	bhi.n	800aec2 <_realloc_r+0x34>
 800aebc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aec0:	d812      	bhi.n	800aee8 <_realloc_r+0x5a>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4640      	mov	r0, r8
 800aec6:	f7fe fda7 	bl	8009a18 <_malloc_r>
 800aeca:	4605      	mov	r5, r0
 800aecc:	2800      	cmp	r0, #0
 800aece:	d0ed      	beq.n	800aeac <_realloc_r+0x1e>
 800aed0:	42bc      	cmp	r4, r7
 800aed2:	4622      	mov	r2, r4
 800aed4:	4631      	mov	r1, r6
 800aed6:	bf28      	it	cs
 800aed8:	463a      	movcs	r2, r7
 800aeda:	f7ff f99a 	bl	800a212 <memcpy>
 800aede:	4631      	mov	r1, r6
 800aee0:	4640      	mov	r0, r8
 800aee2:	f7ff f9c3 	bl	800a26c <_free_r>
 800aee6:	e7e1      	b.n	800aeac <_realloc_r+0x1e>
 800aee8:	4635      	mov	r5, r6
 800aeea:	e7df      	b.n	800aeac <_realloc_r+0x1e>

0800aeec <_raise_r>:
 800aeec:	291f      	cmp	r1, #31
 800aeee:	b538      	push	{r3, r4, r5, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	d904      	bls.n	800af00 <_raise_r+0x14>
 800aef6:	2316      	movs	r3, #22
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af02:	b112      	cbz	r2, 800af0a <_raise_r+0x1e>
 800af04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af08:	b94b      	cbnz	r3, 800af1e <_raise_r+0x32>
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 f830 	bl	800af70 <_getpid_r>
 800af10:	462a      	mov	r2, r5
 800af12:	4601      	mov	r1, r0
 800af14:	4620      	mov	r0, r4
 800af16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af1a:	f000 b817 	b.w	800af4c <_kill_r>
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d00a      	beq.n	800af38 <_raise_r+0x4c>
 800af22:	1c59      	adds	r1, r3, #1
 800af24:	d103      	bne.n	800af2e <_raise_r+0x42>
 800af26:	2316      	movs	r3, #22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	2001      	movs	r0, #1
 800af2c:	e7e7      	b.n	800aefe <_raise_r+0x12>
 800af2e:	2400      	movs	r4, #0
 800af30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af34:	4628      	mov	r0, r5
 800af36:	4798      	blx	r3
 800af38:	2000      	movs	r0, #0
 800af3a:	e7e0      	b.n	800aefe <_raise_r+0x12>

0800af3c <raise>:
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <raise+0xc>)
 800af3e:	4601      	mov	r1, r0
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	f7ff bfd3 	b.w	800aeec <_raise_r>
 800af46:	bf00      	nop
 800af48:	200000a4 	.word	0x200000a4

0800af4c <_kill_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d07      	ldr	r5, [pc, #28]	; (800af6c <_kill_r+0x20>)
 800af50:	2300      	movs	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	4611      	mov	r1, r2
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	f7f8 f95d 	bl	8003218 <_kill>
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	d102      	bne.n	800af68 <_kill_r+0x1c>
 800af62:	682b      	ldr	r3, [r5, #0]
 800af64:	b103      	cbz	r3, 800af68 <_kill_r+0x1c>
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	bf00      	nop
 800af6c:	20003e24 	.word	0x20003e24

0800af70 <_getpid_r>:
 800af70:	f7f8 b94a 	b.w	8003208 <_getpid>

0800af74 <_malloc_usable_size_r>:
 800af74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af78:	1f18      	subs	r0, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	bfbc      	itt	lt
 800af7e:	580b      	ldrlt	r3, [r1, r0]
 800af80:	18c0      	addlt	r0, r0, r3
 800af82:	4770      	bx	lr

0800af84 <_init>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	bf00      	nop
 800af88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8a:	bc08      	pop	{r3}
 800af8c:	469e      	mov	lr, r3
 800af8e:	4770      	bx	lr

0800af90 <_fini>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr
