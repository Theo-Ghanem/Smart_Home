
Smart_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  0800a884  0800a884  0001a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba98  0800ba98  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa0  0800baa0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baa4  0800baa4  0001baa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800baa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001510  2000008c  0800bb34  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000159c  0800bb34  0002159c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe04  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cec  00000000  00000000  0003ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  00043c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001475  00000000  00000000  000456c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fcb3  00000000  00000000  00046b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c12  00000000  00000000  000767f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012011a  00000000  00000000  00097402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d3c  00000000  00000000  001b751c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001bf258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001bf2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001bf3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a86c 	.word	0x0800a86c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000090 	.word	0x20000090
 80001fc:	0800a86c 	.word	0x0800a86c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b970 	b.w	80009c0 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	460d      	mov	r5, r1
 8000700:	4604      	mov	r4, r0
 8000702:	460f      	mov	r7, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4694      	mov	ip, r2
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0xe2>
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	b143      	cbz	r3, 8000726 <__udivmoddi4+0x2e>
 8000714:	fa02 fc03 	lsl.w	ip, r2, r3
 8000718:	f1c3 0220 	rsb	r2, r3, #32
 800071c:	409f      	lsls	r7, r3
 800071e:	fa20 f202 	lsr.w	r2, r0, r2
 8000722:	4317      	orrs	r7, r2
 8000724:	409c      	lsls	r4, r3
 8000726:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000732:	0c22      	lsrs	r2, r4, #16
 8000734:	fb0e 7711 	mls	r7, lr, r1, r7
 8000738:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800073c:	fb01 f005 	mul.w	r0, r1, r5
 8000740:	4290      	cmp	r0, r2
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x62>
 8000744:	eb1c 0202 	adds.w	r2, ip, r2
 8000748:	f101 37ff 	add.w	r7, r1, #4294967295
 800074c:	f080 811c 	bcs.w	8000988 <__udivmoddi4+0x290>
 8000750:	4290      	cmp	r0, r2
 8000752:	f240 8119 	bls.w	8000988 <__udivmoddi4+0x290>
 8000756:	3902      	subs	r1, #2
 8000758:	4462      	add	r2, ip
 800075a:	1a12      	subs	r2, r2, r0
 800075c:	b2a4      	uxth	r4, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	fb00 f505 	mul.w	r5, r0, r5
 800076e:	42a5      	cmp	r5, r4
 8000770:	d90a      	bls.n	8000788 <__udivmoddi4+0x90>
 8000772:	eb1c 0404 	adds.w	r4, ip, r4
 8000776:	f100 32ff 	add.w	r2, r0, #4294967295
 800077a:	f080 8107 	bcs.w	800098c <__udivmoddi4+0x294>
 800077e:	42a5      	cmp	r5, r4
 8000780:	f240 8104 	bls.w	800098c <__udivmoddi4+0x294>
 8000784:	4464      	add	r4, ip
 8000786:	3802      	subs	r0, #2
 8000788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	2100      	movs	r1, #0
 8000790:	b11e      	cbz	r6, 800079a <__udivmoddi4+0xa2>
 8000792:	40dc      	lsrs	r4, r3
 8000794:	2300      	movs	r3, #0
 8000796:	e9c6 4300 	strd	r4, r3, [r6]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0xbc>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80ed 	beq.w	8000982 <__udivmoddi4+0x28a>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e9c6 0500 	strd	r0, r5, [r6]
 80007ae:	4608      	mov	r0, r1
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	fab3 f183 	clz	r1, r3
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d149      	bne.n	8000850 <__udivmoddi4+0x158>
 80007bc:	42ab      	cmp	r3, r5
 80007be:	d302      	bcc.n	80007c6 <__udivmoddi4+0xce>
 80007c0:	4282      	cmp	r2, r0
 80007c2:	f200 80f8 	bhi.w	80009b6 <__udivmoddi4+0x2be>
 80007c6:	1a84      	subs	r4, r0, r2
 80007c8:	eb65 0203 	sbc.w	r2, r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	4617      	mov	r7, r2
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d0e2      	beq.n	800079a <__udivmoddi4+0xa2>
 80007d4:	e9c6 4700 	strd	r4, r7, [r6]
 80007d8:	e7df      	b.n	800079a <__udivmoddi4+0xa2>
 80007da:	b902      	cbnz	r2, 80007de <__udivmoddi4+0xe6>
 80007dc:	deff      	udf	#255	; 0xff
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8090 	bne.w	8000908 <__udivmoddi4+0x210>
 80007e8:	1a8a      	subs	r2, r1, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fa1f fe8c 	uxth.w	lr, ip
 80007f2:	2101      	movs	r1, #1
 80007f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007f8:	fb07 2015 	mls	r0, r7, r5, r2
 80007fc:	0c22      	lsrs	r2, r4, #16
 80007fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000802:	fb0e f005 	mul.w	r0, lr, r5
 8000806:	4290      	cmp	r0, r2
 8000808:	d908      	bls.n	800081c <__udivmoddi4+0x124>
 800080a:	eb1c 0202 	adds.w	r2, ip, r2
 800080e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4290      	cmp	r0, r2
 8000816:	f200 80cb 	bhi.w	80009b0 <__udivmoddi4+0x2b8>
 800081a:	4645      	mov	r5, r8
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb2 f0f7 	udiv	r0, r2, r7
 8000824:	fb07 2210 	mls	r2, r7, r0, r2
 8000828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082c:	fb0e fe00 	mul.w	lr, lr, r0
 8000830:	45a6      	cmp	lr, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x14e>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 32ff 	add.w	r2, r0, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x14c>
 800083e:	45a6      	cmp	lr, r4
 8000840:	f200 80bb 	bhi.w	80009ba <__udivmoddi4+0x2c2>
 8000844:	4610      	mov	r0, r2
 8000846:	eba4 040e 	sub.w	r4, r4, lr
 800084a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800084e:	e79f      	b.n	8000790 <__udivmoddi4+0x98>
 8000850:	f1c1 0720 	rsb	r7, r1, #32
 8000854:	408b      	lsls	r3, r1
 8000856:	fa22 fc07 	lsr.w	ip, r2, r7
 800085a:	ea4c 0c03 	orr.w	ip, ip, r3
 800085e:	fa05 f401 	lsl.w	r4, r5, r1
 8000862:	fa20 f307 	lsr.w	r3, r0, r7
 8000866:	40fd      	lsrs	r5, r7
 8000868:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800086c:	4323      	orrs	r3, r4
 800086e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	fb09 5518 	mls	r5, r9, r8, r5
 800087a:	0c1c      	lsrs	r4, r3, #16
 800087c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000880:	fb08 f50e 	mul.w	r5, r8, lr
 8000884:	42a5      	cmp	r5, r4
 8000886:	fa02 f201 	lsl.w	r2, r2, r1
 800088a:	fa00 f001 	lsl.w	r0, r0, r1
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f108 3aff 	add.w	sl, r8, #4294967295
 8000898:	f080 8088 	bcs.w	80009ac <__udivmoddi4+0x2b4>
 800089c:	42a5      	cmp	r5, r4
 800089e:	f240 8085 	bls.w	80009ac <__udivmoddi4+0x2b4>
 80008a2:	f1a8 0802 	sub.w	r8, r8, #2
 80008a6:	4464      	add	r4, ip
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	b29d      	uxth	r5, r3
 80008ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b0:	fb09 4413 	mls	r4, r9, r3, r4
 80008b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008bc:	45a6      	cmp	lr, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008c8:	d26c      	bcs.n	80009a4 <__udivmoddi4+0x2ac>
 80008ca:	45a6      	cmp	lr, r4
 80008cc:	d96a      	bls.n	80009a4 <__udivmoddi4+0x2ac>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4464      	add	r4, ip
 80008d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d6:	fba3 9502 	umull	r9, r5, r3, r2
 80008da:	eba4 040e 	sub.w	r4, r4, lr
 80008de:	42ac      	cmp	r4, r5
 80008e0:	46c8      	mov	r8, r9
 80008e2:	46ae      	mov	lr, r5
 80008e4:	d356      	bcc.n	8000994 <__udivmoddi4+0x29c>
 80008e6:	d053      	beq.n	8000990 <__udivmoddi4+0x298>
 80008e8:	b156      	cbz	r6, 8000900 <__udivmoddi4+0x208>
 80008ea:	ebb0 0208 	subs.w	r2, r0, r8
 80008ee:	eb64 040e 	sbc.w	r4, r4, lr
 80008f2:	fa04 f707 	lsl.w	r7, r4, r7
 80008f6:	40ca      	lsrs	r2, r1
 80008f8:	40cc      	lsrs	r4, r1
 80008fa:	4317      	orrs	r7, r2
 80008fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000900:	4618      	mov	r0, r3
 8000902:	2100      	movs	r1, #0
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	f1c3 0120 	rsb	r1, r3, #32
 800090c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000910:	fa20 f201 	lsr.w	r2, r0, r1
 8000914:	fa25 f101 	lsr.w	r1, r5, r1
 8000918:	409d      	lsls	r5, r3
 800091a:	432a      	orrs	r2, r5
 800091c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000920:	fa1f fe8c 	uxth.w	lr, ip
 8000924:	fbb1 f0f7 	udiv	r0, r1, r7
 8000928:	fb07 1510 	mls	r5, r7, r0, r1
 800092c:	0c11      	lsrs	r1, r2, #16
 800092e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000932:	fb00 f50e 	mul.w	r5, r0, lr
 8000936:	428d      	cmp	r5, r1
 8000938:	fa04 f403 	lsl.w	r4, r4, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x258>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f100 38ff 	add.w	r8, r0, #4294967295
 8000946:	d22f      	bcs.n	80009a8 <__udivmoddi4+0x2b0>
 8000948:	428d      	cmp	r5, r1
 800094a:	d92d      	bls.n	80009a8 <__udivmoddi4+0x2b0>
 800094c:	3802      	subs	r0, #2
 800094e:	4461      	add	r1, ip
 8000950:	1b49      	subs	r1, r1, r5
 8000952:	b292      	uxth	r2, r2
 8000954:	fbb1 f5f7 	udiv	r5, r1, r7
 8000958:	fb07 1115 	mls	r1, r7, r5, r1
 800095c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000960:	fb05 f10e 	mul.w	r1, r5, lr
 8000964:	4291      	cmp	r1, r2
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x282>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000970:	d216      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 8000972:	4291      	cmp	r1, r2
 8000974:	d914      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000980:	e738      	b.n	80007f4 <__udivmoddi4+0xfc>
 8000982:	4631      	mov	r1, r6
 8000984:	4630      	mov	r0, r6
 8000986:	e708      	b.n	800079a <__udivmoddi4+0xa2>
 8000988:	4639      	mov	r1, r7
 800098a:	e6e6      	b.n	800075a <__udivmoddi4+0x62>
 800098c:	4610      	mov	r0, r2
 800098e:	e6fb      	b.n	8000788 <__udivmoddi4+0x90>
 8000990:	4548      	cmp	r0, r9
 8000992:	d2a9      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000994:	ebb9 0802 	subs.w	r8, r9, r2
 8000998:	eb65 0e0c 	sbc.w	lr, r5, ip
 800099c:	3b01      	subs	r3, #1
 800099e:	e7a3      	b.n	80008e8 <__udivmoddi4+0x1f0>
 80009a0:	4645      	mov	r5, r8
 80009a2:	e7ea      	b.n	800097a <__udivmoddi4+0x282>
 80009a4:	462b      	mov	r3, r5
 80009a6:	e794      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a8:	4640      	mov	r0, r8
 80009aa:	e7d1      	b.n	8000950 <__udivmoddi4+0x258>
 80009ac:	46d0      	mov	r8, sl
 80009ae:	e77b      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009b0:	3d02      	subs	r5, #2
 80009b2:	4462      	add	r2, ip
 80009b4:	e732      	b.n	800081c <__udivmoddi4+0x124>
 80009b6:	4608      	mov	r0, r1
 80009b8:	e70a      	b.n	80007d0 <__udivmoddi4+0xd8>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	e742      	b.n	8000846 <__udivmoddi4+0x14e>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b2f      	cmp	r3, #47	; 0x2f
 80009d2:	d906      	bls.n	80009e2 <Hex2Num+0x1e>
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b39      	cmp	r3, #57	; 0x39
 80009d8:	d803      	bhi.n	80009e2 <Hex2Num+0x1e>
        return a - '0';
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	3b30      	subs	r3, #48	; 0x30
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	e014      	b.n	8000a0c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b60      	cmp	r3, #96	; 0x60
 80009e6:	d906      	bls.n	80009f6 <Hex2Num+0x32>
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b66      	cmp	r3, #102	; 0x66
 80009ec:	d803      	bhi.n	80009f6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3b57      	subs	r3, #87	; 0x57
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	e00a      	b.n	8000a0c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b40      	cmp	r3, #64	; 0x40
 80009fa:	d906      	bls.n	8000a0a <Hex2Num+0x46>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b46      	cmp	r3, #70	; 0x46
 8000a00:	d803      	bhi.n	8000a0a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3b37      	subs	r3, #55	; 0x37
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	e000      	b.n	8000a0c <Hex2Num+0x48>
    }

    return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000a2a:	e012      	b.n	8000a52 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffc4 	bl	80009c4 <Hex2Num>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4413      	add	r3, r2
 8000a44:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
        done_count++;
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b2f      	cmp	r3, #47	; 0x2f
 8000a58:	d903      	bls.n	8000a62 <ParseHexNumber+0x4a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b39      	cmp	r3, #57	; 0x39
 8000a60:	d90f      	bls.n	8000a82 <ParseHexNumber+0x6a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b60      	cmp	r3, #96	; 0x60
 8000a68:	d903      	bls.n	8000a72 <ParseHexNumber+0x5a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b66      	cmp	r3, #102	; 0x66
 8000a70:	d907      	bls.n	8000a82 <ParseHexNumber+0x6a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b40      	cmp	r3, #64	; 0x40
 8000a78:	d906      	bls.n	8000a88 <ParseHexNumber+0x70>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b46      	cmp	r3, #70	; 0x46
 8000a80:	d802      	bhi.n	8000a88 <ParseHexNumber+0x70>
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d9d1      	bls.n	8000a2c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	7bba      	ldrb	r2, [r7, #14]
 8000a92:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b2d      	cmp	r3, #45	; 0x2d
 8000aba:	d119      	bne.n	8000af0 <ParseNumber+0x52>
        minus = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
        done_count++;
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000acc:	e010      	b.n	8000af0 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3b30      	subs	r3, #48	; 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
        done_count++;
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	3301      	adds	r3, #1
 8000aee:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b2f      	cmp	r3, #47	; 0x2f
 8000af6:	d903      	bls.n	8000b00 <ParseNumber+0x62>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b39      	cmp	r3, #57	; 0x39
 8000afe:	d9e6      	bls.n	8000ace <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <ParseNumber+0x6e>
        *cnt = done_count;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	7bba      	ldrb	r2, [r7, #14]
 8000b0a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <ParseNumber+0x7a>
        return 0 - sum;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	425b      	negs	r3, r3
 8000b16:	e000      	b.n	8000b1a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000b18:	68bb      	ldr	r3, [r7, #8]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8000b26:	b590      	push	{r4, r7, lr}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d027      	beq.n	8000b8c <ParseMAC+0x66>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d024      	beq.n	8000b8c <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000b42:	e018      	b.n	8000b76 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b3a      	cmp	r3, #58	; 0x3a
 8000b4e:	d00d      	beq.n	8000b6c <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	75fa      	strb	r2, [r7, #23]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	189c      	adds	r4, r3, r2
 8000b5c:	f107 0316 	add.w	r3, r7, #22
 8000b60:	4619      	mov	r1, r3
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ff58 	bl	8000a18 <ParseHexNumber>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8000b6c:	7dbb      	ldrb	r3, [r7, #22]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d906      	bls.n	8000b8c <ParseMAC+0x66>
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d803      	bhi.n	8000b8c <ParseMAC+0x66>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1db      	bne.n	8000b44 <ParseMAC+0x1e>
   }
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}

08000b94 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d027      	beq.n	8000bfa <ParseIP+0x66>
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d024      	beq.n	8000bfa <ParseIP+0x66>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d921      	bls.n	8000bfa <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000bb6:	e019      	b.n	8000bec <ParseIP+0x58>
    uint8_t done_count = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8000bc2:	d00e      	beq.n	8000be2 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000bc4:	f107 0316 	add.w	r3, r7, #22
 8000bc8:	4619      	mov	r1, r3
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff67 	bl	8000a9e <ParseNumber>
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	75fa      	strb	r2, [r7, #23]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8000be2:	7dbb      	ldrb	r3, [r7, #22]
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d803      	bhi.n	8000bfa <ParseIP+0x66>
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1de      	bne.n	8000bb8 <ParseIP+0x24>
   }
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	3302      	adds	r3, #2
 8000c16:	4940      	ldr	r1, [pc, #256]	; (8000d18 <AT_ParseInfo+0x114>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f008 fdc7 	bl	80097ac <strtok>
 8000c1e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000c20:	e071      	b.n	8000d06 <AT_ParseInfo+0x102>
    switch (num++) {
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	72fa      	strb	r2, [r7, #11]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d866      	bhi.n	8000cfa <AT_ParseInfo+0xf6>
 8000c2c:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <AT_ParseInfo+0x30>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c51 	.word	0x08000c51
 8000c38:	08000c65 	.word	0x08000c65
 8000c3c:	08000c7d 	.word	0x08000c7d
 8000c40:	08000c95 	.word	0x08000c95
 8000c44:	08000cad 	.word	0x08000cad
 8000c48:	08000cc5 	.word	0x08000cc5
 8000c4c:	08000cd9 	.word	0x08000cd9
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	221f      	movs	r2, #31
 8000c54:	68f9      	ldr	r1, [r7, #12]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f008 fd95 	bl	8009786 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	77da      	strb	r2, [r3, #31]
      break;
 8000c62:	e04b      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3320      	adds	r3, #32
 8000c68:	2217      	movs	r2, #23
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 fd8a 	bl	8009786 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8000c7a:	e03f      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3338      	adds	r3, #56	; 0x38
 8000c80:	220f      	movs	r2, #15
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fd7e 	bl	8009786 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000c92:	e033      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3348      	adds	r3, #72	; 0x48
 8000c98:	220f      	movs	r2, #15
 8000c9a:	68f9      	ldr	r1, [r7, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f008 fd72 	bl	8009786 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8000caa:	e027      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3358      	adds	r3, #88	; 0x58
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	68f9      	ldr	r1, [r7, #12]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f008 fd66 	bl	8009786 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8000cc2:	e01b      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fee9 	bl	8000a9e <ParseNumber>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000cd6:	e011      	b.n	8000cfc <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8000cd8:	4910      	ldr	r1, [pc, #64]	; (8000d1c <AT_ParseInfo+0x118>)
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f008 fd66 	bl	80097ac <strtok>
 8000ce0:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3368      	adds	r3, #104	; 0x68
 8000ce6:	221f      	movs	r2, #31
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f008 fd4b 	bl	8009786 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8000cf8:	e000      	b.n	8000cfc <AT_ParseInfo+0xf8>

    default: break;
 8000cfa:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000cfc:	4906      	ldr	r1, [pc, #24]	; (8000d18 <AT_ParseInfo+0x114>)
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f008 fd54 	bl	80097ac <strtok>
 8000d04:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d18a      	bne.n	8000c22 <AT_ParseInfo+0x1e>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	0800a8b4 	.word	0x0800a8b4
 8000d1c:	0800a8b8 	.word	0x0800a8b8

08000d20 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3302      	adds	r3, #2
 8000d32:	4959      	ldr	r1, [pc, #356]	; (8000e98 <AT_ParseConnSettings+0x178>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f008 fd39 	bl	80097ac <strtok>
 8000d3a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000d3c:	e0a2      	b.n	8000e84 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	73fa      	strb	r2, [r7, #15]
 8000d44:	2b0b      	cmp	r3, #11
 8000d46:	f200 808c 	bhi.w	8000e62 <AT_ParseConnSettings+0x142>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <AT_ParseConnSettings+0x30>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d81 	.word	0x08000d81
 8000d54:	08000d97 	.word	0x08000d97
 8000d58:	08000daf 	.word	0x08000daf
 8000d5c:	08000dc3 	.word	0x08000dc3
 8000d60:	08000dd7 	.word	0x08000dd7
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000dfb 	.word	0x08000dfb
 8000d6c:	08000e0b 	.word	0x08000e0b
 8000d70:	08000e1b 	.word	0x08000e1b
 8000d74:	08000e2b 	.word	0x08000e2b
 8000d78:	08000e3b 	.word	0x08000e3b
 8000d7c:	08000e4f 	.word	0x08000e4f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2220      	movs	r2, #32
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f008 fcfd 	bl	8009786 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8000d94:	e066      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	3321      	adds	r3, #33	; 0x21
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f008 fcf1 	bl	8009786 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8000dac:	e05a      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000dae:	2100      	movs	r1, #0
 8000db0:	68b8      	ldr	r0, [r7, #8]
 8000db2:	f7ff fe74 	bl	8000a9e <ParseNumber>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000dc0:	e050      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff fe6a 	bl	8000a9e <ParseNumber>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000dd4:	e046      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	68b8      	ldr	r0, [r7, #8]
 8000dda:	f7ff fe60 	bl	8000a9e <ParseNumber>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000de8:	e03c      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3348      	adds	r3, #72	; 0x48
 8000dee:	2204      	movs	r2, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f7ff fece 	bl	8000b94 <ParseIP>
      break;
 8000df8:	e034      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	334c      	adds	r3, #76	; 0x4c
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	68b8      	ldr	r0, [r7, #8]
 8000e04:	f7ff fec6 	bl	8000b94 <ParseIP>
      break;
 8000e08:	e02c      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	3350      	adds	r3, #80	; 0x50
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	68b8      	ldr	r0, [r7, #8]
 8000e14:	f7ff febe 	bl	8000b94 <ParseIP>
      break;
 8000e18:	e024      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3354      	adds	r3, #84	; 0x54
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	68b8      	ldr	r0, [r7, #8]
 8000e24:	f7ff feb6 	bl	8000b94 <ParseIP>
      break;
 8000e28:	e01c      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3358      	adds	r3, #88	; 0x58
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	68b8      	ldr	r0, [r7, #8]
 8000e34:	f7ff feae 	bl	8000b94 <ParseIP>
      break;
 8000e38:	e014      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f7ff fe2e 	bl	8000a9e <ParseNumber>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000e4c:	e00a      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f7ff fe24 	bl	8000a9e <ParseNumber>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000e60:	e000      	b.n	8000e64 <AT_ParseConnSettings+0x144>

    default:
      break;
 8000e62:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <AT_ParseConnSettings+0x178>)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f008 fca0 	bl	80097ac <strtok>
 8000e6c:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <AT_ParseConnSettings+0x164>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e7c:	d102      	bne.n	8000e84 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	3301      	adds	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f47f af59 	bne.w	8000d3e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800a8b4 	.word	0x0800a8b4

08000e9c <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d056      	beq.n	8000f68 <AT_ExecuteCommand+0xcc>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d051      	beq.n	8000f68 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000eca:	68b8      	ldr	r0, [r7, #8]
 8000ecc:	f7ff f998 	bl	8000200 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000eda:	461a      	mov	r2, r3
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	47a0      	blx	r4
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dd3e      	ble.n	8000f68 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000ef6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4798      	blx	r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000f02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	dd27      	ble.n	8000f5a <AT_ExecuteCommand+0xbe>
 8000f0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f12:	dc22      	bgt.n	8000f5a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000f14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f1c:	d105      	bne.n	8000f2a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8000f1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000f2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8000f36:	490f      	ldr	r1, [pc, #60]	; (8000f74 <AT_ExecuteCommand+0xd8>)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f008 fc93 	bl	8009864 <strstr>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e010      	b.n	8000f6a <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <AT_ExecuteCommand+0xdc>)
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f008 fc8a 	bl	8009864 <strstr>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000f56:	2305      	movs	r3, #5
 8000f58:	e007      	b.n	8000f6a <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000f5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5e:	f113 0f04 	cmn.w	r3, #4
 8000f62:	d101      	bne.n	8000f68 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000f64:	2306      	movs	r3, #6
 8000f66:	e000      	b.n	8000f6a <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000f68:	2304      	movs	r3, #4
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800a8cc 	.word	0x0800a8cc
 8000f78:	0800a8d8 	.word	0x0800a8d8

08000f7c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8000f96:	68b8      	ldr	r0, [r7, #8]
 8000f98:	f7ff f932 	bl	8000200 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000fa0:	8a7b      	ldrh	r3, [r7, #18]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <AT_RequestSendData+0x32>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e05d      	b.n	800106a <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d057      	beq.n	8001068 <AT_RequestSendData+0xec>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d052      	beq.n	8001068 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000fce:	8a79      	ldrh	r1, [r7, #18]
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	4798      	blx	r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000fd8:	8a3a      	ldrh	r2, [r7, #16]
 8000fda:	8a7b      	ldrh	r3, [r7, #18]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d143      	bne.n	8001068 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000fec:	8879      	ldrh	r1, [r7, #2]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000ff6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d131      	bne.n	8001064 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800100c:	2100      	movs	r1, #0
 800100e:	6a38      	ldr	r0, [r7, #32]
 8001010:	4798      	blx	r3
 8001012:	4603      	mov	r3, r0
 8001014:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001016:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800101a:	2b00      	cmp	r3, #0
 800101c:	dd19      	ble.n	8001052 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800101e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001022:	6a3a      	ldr	r2, [r7, #32]
 8001024:	4413      	add	r3, r2
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800102a:	4912      	ldr	r1, [pc, #72]	; (8001074 <AT_RequestSendData+0xf8>)
 800102c:	6a38      	ldr	r0, [r7, #32]
 800102e:	f008 fc19 	bl	8009864 <strstr>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	e016      	b.n	800106a <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800103c:	490e      	ldr	r1, [pc, #56]	; (8001078 <AT_RequestSendData+0xfc>)
 800103e:	6a38      	ldr	r0, [r7, #32]
 8001040:	f008 fc10 	bl	8009864 <strstr>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800104a:	2305      	movs	r3, #5
 800104c:	e00d      	b.n	800106a <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 800104e:	2302      	movs	r3, #2
 8001050:	e00b      	b.n	800106a <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001052:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001056:	f113 0f04 	cmn.w	r3, #4
 800105a:	d101      	bne.n	8001060 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800105c:	2306      	movs	r3, #6
 800105e:	e004      	b.n	800106a <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001060:	2302      	movs	r3, #2
 8001062:	e002      	b.n	800106a <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001064:	2302      	movs	r3, #2
 8001066:	e000      	b.n	800106a <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001068:	2304      	movs	r3, #4
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	0800a8cc 	.word	0x0800a8cc
 8001078:	0800a8d8 	.word	0x0800a8d8

0800107c <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001090:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8087 	beq.w	80011ac <AT_RequestReceiveData+0x130>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8081 	beq.w	80011ac <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f7ff f8a5 	bl	8000200 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b299      	uxth	r1, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80010c0:	461a      	mov	r2, r3
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	47a0      	blx	r4
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd6f      	ble.n	80011ac <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80010d8:	2100      	movs	r1, #0
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	4798      	blx	r3
 80010de:	4603      	mov	r3, r0
 80010e0:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b0d      	cmp	r3, #13
 80010e8:	d104      	bne.n	80010f4 <AT_RequestReceiveData+0x78>
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	d001      	beq.n	80010f8 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 80010f4:	2304      	movs	r3, #4
 80010f6:	e05a      	b.n	80011ae <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3b02      	subs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    p += 2;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	3302      	adds	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b07      	cmp	r3, #7
 8001108:	d94a      	bls.n	80011a0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800110a:	e002      	b.n	8001112 <AT_RequestReceiveData+0x96>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3b01      	subs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <AT_RequestReceiveData+0xaa>
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3b01      	subs	r3, #1
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b15      	cmp	r3, #21
 8001124:	d0f2      	beq.n	800110c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4413      	add	r3, r2
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3b08      	subs	r3, #8
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4413      	add	r3, r2
 8001138:	491f      	ldr	r1, [pc, #124]	; (80011b8 <AT_RequestReceiveData+0x13c>)
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fb92 	bl	8009864 <strstr>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d016      	beq.n	8001174 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3b08      	subs	r3, #8
 800114c:	b29a      	uxth	r2, r3
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	429a      	cmp	r2, r3
 800115a:	d202      	bcs.n	8001162 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f008 fc02 	bl	8009974 <memcpy>
       return ES_WIFI_STATUS_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	e01c      	b.n	80011ae <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3b04      	subs	r3, #4
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4413      	add	r3, r2
 800117c:	2204      	movs	r2, #4
 800117e:	490f      	ldr	r1, [pc, #60]	; (80011bc <AT_RequestReceiveData+0x140>)
 8001180:	4618      	mov	r0, r3
 8001182:	f008 fac7 	bl	8009714 <memcmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001192:	2305      	movs	r3, #5
 8001194:	e00b      	b.n	80011ae <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800119c:	2305      	movs	r3, #5
 800119e:	e006      	b.n	80011ae <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f113 0f04 	cmn.w	r3, #4
 80011a6:	d101      	bne.n	80011ac <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 80011a8:	2306      	movs	r3, #6
 80011aa:	e000      	b.n	80011ae <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 80011ac:	2304      	movs	r3, #4
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800a8cc 	.word	0x0800a8cc
 80011bc:	0800a8e0 	.word	0x0800a8e0

080011c0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80011c8:	2302      	movs	r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f247 5230 	movw	r2, #30000	; 0x7530
 80011d2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01b      	beq.n	8001218 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80011e6:	2000      	movs	r0, #0
 80011e8:	4798      	blx	r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d113      	bne.n	8001218 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011f6:	461a      	mov	r2, r3
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <ES_WIFI_Init+0x64>)
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fe4e 	bl	8000e9c <AT_ExecuteCommand>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fcf6 	bl	8000c04 <AT_ParseInfo>
    }
   }
  }
  return ret;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800a8e8 	.word	0x0800a8e8

08001228 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00b      	beq.n	8001254 <ES_WIFI_RegisterBusIO+0x2c>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <ES_WIFI_RegisterBusIO+0x2c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <ES_WIFI_RegisterBusIO+0x2c>
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <ES_WIFI_RegisterBusIO+0x2c>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001254:	2302      	movs	r3, #2
 8001256:	e014      	b.n	8001282 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4932      	ldr	r1, [pc, #200]	; (8001370 <ES_WIFI_Connect+0xe0>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 f93b 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012ba:	461a      	mov	r2, r3
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff fded 	bl	8000e9c <AT_ExecuteCommand>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d14b      	bne.n	8001364 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4927      	ldr	r1, [pc, #156]	; (8001374 <ES_WIFI_Connect+0xe4>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 f924 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012e8:	461a      	mov	r2, r3
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fdd6 	bl	8000e9c <AT_ExecuteCommand>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d134      	bne.n	8001364 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	491b      	ldr	r1, [pc, #108]	; (8001378 <ES_WIFI_Connect+0xe8>)
 800130c:	4618      	mov	r0, r3
 800130e:	f008 f909 	bl	8009524 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800131e:	461a      	mov	r2, r3
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff fdbb 	bl	8000e9c <AT_ExecuteCommand>
 8001326:	4603      	mov	r3, r0
 8001328:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d119      	bne.n	8001364 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001336:	4911      	ldr	r1, [pc, #68]	; (800137c <ES_WIFI_Connect+0xec>)
 8001338:	4618      	mov	r0, r3
 800133a:	f008 f8f3 	bl	8009524 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800134a:	461a      	mov	r2, r3
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff fda5 	bl	8000e9c <AT_ExecuteCommand>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d103      	bne.n	8001364 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001364:	7dfb      	ldrb	r3, [r7, #23]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	0800a900 	.word	0x0800a900
 8001374:	0800a908 	.word	0x0800a908
 8001378:	0800a910 	.word	0x0800a910
 800137c:	0800a918 	.word	0x0800a918

08001380 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800138e:	4913      	ldr	r1, [pc, #76]	; (80013dc <ES_WIFI_IsConnected+0x5c>)
 8001390:	4618      	mov	r0, r3
 8001392:	f008 f8c7 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a2:	461a      	mov	r2, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fd79 	bl	8000e9c <AT_ExecuteCommand>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80013ba:	2b31      	cmp	r3, #49	; 0x31
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800a91c 	.word	0x0800a91c

080013e0 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013ee:	4910      	ldr	r1, [pc, #64]	; (8001430 <ES_WIFI_GetNetworkSettings+0x50>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 f897 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001402:	461a      	mov	r2, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fd49 	bl	8000e9c <AT_ExecuteCommand>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d108      	bne.n	8001426 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	338d      	adds	r3, #141	; 0x8d
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff fc7d 	bl	8000d20 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	0800a924 	.word	0x0800a924

08001434 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001448:	4913      	ldr	r1, [pc, #76]	; (8001498 <ES_WIFI_GetMACAddress+0x64>)
 800144a:	4618      	mov	r0, r3
 800144c:	f008 f86a 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800145c:	461a      	mov	r2, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff fd1c 	bl	8000e9c <AT_ExecuteCommand>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10e      	bne.n	800148c <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001474:	3302      	adds	r3, #2
 8001476:	4909      	ldr	r1, [pc, #36]	; (800149c <ES_WIFI_GetMACAddress+0x68>)
 8001478:	4618      	mov	r0, r3
 800147a:	f008 f997 	bl	80097ac <strtok>
 800147e:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	461a      	mov	r2, r3
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6938      	ldr	r0, [r7, #16]
 8001488:	f7ff fb4d 	bl	8000b26 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 800148c:	7dfb      	ldrb	r3, [r7, #23]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0800a974 	.word	0x0800a974
 800149c:	0800a978 	.word	0x0800a978

080014a0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4949      	ldr	r1, [pc, #292]	; (80015e0 <ES_WIFI_StartServerSingleConn+0x140>)
 80014bc:	f008 f832 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014cc:	461a      	mov	r2, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fce4 	bl	8000e9c <AT_ExecuteCommand>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	e079      	b.n	80015d6 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d016      	beq.n	8001518 <ES_WIFI_StartServerSingleConn+0x78>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d012      	beq.n	8001518 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f8:	493a      	ldr	r1, [pc, #232]	; (80015e4 <ES_WIFI_StartServerSingleConn+0x144>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 f812 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800150c:	461a      	mov	r2, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fcc4 	bl	8000e9c <AT_ExecuteCommand>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d15a      	bne.n	80015d4 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	492f      	ldr	r1, [pc, #188]	; (80015e8 <ES_WIFI_StartServerSingleConn+0x148>)
 800152c:	f007 fffa 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800153c:	461a      	mov	r2, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fcac 	bl	8000e9c <AT_ExecuteCommand>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d142      	bne.n	80015d4 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	7c1b      	ldrb	r3, [r3, #16]
 8001558:	461a      	mov	r2, r3
 800155a:	4924      	ldr	r1, [pc, #144]	; (80015ec <ES_WIFI_StartServerSingleConn+0x14c>)
 800155c:	f007 ffe2 	bl	8009524 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800156c:	461a      	mov	r2, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fc94 	bl	8000e9c <AT_ExecuteCommand>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d12a      	bne.n	80015d4 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	461a      	mov	r2, r3
 800158a:	4919      	ldr	r1, [pc, #100]	; (80015f0 <ES_WIFI_StartServerSingleConn+0x150>)
 800158c:	f007 ffca 	bl	8009524 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800159c:	461a      	mov	r2, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fc7c 	bl	8000e9c <AT_ExecuteCommand>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d112      	bne.n	80015d4 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <ES_WIFI_StartServerSingleConn+0x154>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 ffb4 	bl	8009524 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c8:	461a      	mov	r2, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fc66 	bl	8000e9c <AT_ExecuteCommand>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	0800a9dc 	.word	0x0800a9dc
 80015e4:	0800aa24 	.word	0x0800aa24
 80015e8:	0800a9e4 	.word	0x0800a9e4
 80015ec:	0800aa30 	.word	0x0800aa30
 80015f0:	0800a9ec 	.word	0x0800a9ec
 80015f4:	0800aa38 	.word	0x0800aa38

080015f8 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 800160a:	f002 f9fd 	bl	8003a08 <HAL_GetTick>
 800160e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8001610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4413      	add	r3, r2
 8001616:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	429a      	cmp	r2, r3
 800161e:	d201      	bcs.n	8001624 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800162a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f008 f87f 	bl	8009734 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800163c:	495f      	ldr	r1, [pc, #380]	; (80017bc <ES_WIFI_WaitServerConnection+0x1c4>)
 800163e:	4618      	mov	r0, r3
 8001640:	f007 ff70 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001650:	461a      	mov	r2, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fc22 	bl	8000e9c <AT_ExecuteCommand>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001662:	2b00      	cmp	r3, #0
 8001664:	d129      	bne.n	80016ba <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800166c:	4954      	ldr	r1, [pc, #336]	; (80017c0 <ES_WIFI_WaitServerConnection+0x1c8>)
 800166e:	4618      	mov	r0, r3
 8001670:	f008 f8f8 	bl	8009864 <strstr>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d021      	beq.n	80016be <ES_WIFI_WaitServerConnection+0xc6>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001680:	4950      	ldr	r1, [pc, #320]	; (80017c4 <ES_WIFI_WaitServerConnection+0x1cc>)
 8001682:	4618      	mov	r0, r3
 8001684:	f008 f8ee 	bl	8009864 <strstr>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d017      	beq.n	80016be <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001694:	494c      	ldr	r1, [pc, #304]	; (80017c8 <ES_WIFI_WaitServerConnection+0x1d0>)
 8001696:	4618      	mov	r0, r3
 8001698:	f008 f8e4 	bl	8009864 <strstr>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016a8:	4948      	ldr	r1, [pc, #288]	; (80017cc <ES_WIFI_WaitServerConnection+0x1d4>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f008 f8da 	bl	8009864 <strstr>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 80016b6:	2302      	movs	r3, #2
 80016b8:	e07c      	b.n	80017b4 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 80016ba:	2302      	movs	r3, #2
 80016bc:	e07a      	b.n	80017b4 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 f832 	bl	8009734 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016d6:	493e      	ldr	r1, [pc, #248]	; (80017d0 <ES_WIFI_WaitServerConnection+0x1d8>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f007 ff23 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ea:	461a      	mov	r2, r3
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fbd5 	bl	8000e9c <AT_ExecuteCommand>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 80016f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d140      	bne.n	8001782 <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001706:	220c      	movs	r2, #12
 8001708:	4932      	ldr	r1, [pc, #200]	; (80017d4 <ES_WIFI_WaitServerConnection+0x1dc>)
 800170a:	4618      	mov	r0, r3
 800170c:	f008 f829 	bl	8009762 <strncmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d037      	beq.n	8001786 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800171c:	3302      	adds	r3, #2
 800171e:	492e      	ldr	r1, [pc, #184]	; (80017d8 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001720:	4618      	mov	r0, r3
 8001722:	f008 f843 	bl	80097ac <strtok>
 8001726:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8001728:	492b      	ldr	r1, [pc, #172]	; (80017d8 <ES_WIFI_WaitServerConnection+0x1e0>)
 800172a:	2000      	movs	r0, #0
 800172c:	f008 f83e 	bl	80097ac <strtok>
 8001730:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3308      	adds	r3, #8
 8001736:	2204      	movs	r2, #4
 8001738:	4619      	mov	r1, r3
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff fa2a 	bl	8000b94 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8001740:	4925      	ldr	r1, [pc, #148]	; (80017d8 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001742:	2000      	movs	r0, #0
 8001744:	f008 f832 	bl	80097ac <strtok>
 8001748:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 800174a:	2100      	movs	r1, #0
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7ff f9a6 	bl	8000a9e <ParseNumber>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 800175a:	491f      	ldr	r1, [pc, #124]	; (80017d8 <ES_WIFI_WaitServerConnection+0x1e0>)
 800175c:	2000      	movs	r0, #0
 800175e:	f008 f825 	bl	80097ac <strtok>
 8001762:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8001764:	491c      	ldr	r1, [pc, #112]	; (80017d8 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001766:	2000      	movs	r0, #0
 8001768:	f008 f820 	bl	80097ac <strtok>
 800176c:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 800176e:	2100      	movs	r1, #0
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff f994 	bl	8000a9e <ParseNumber>
 8001776:	4603      	mov	r3, r0
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e018      	b.n	80017b4 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001782:	2302      	movs	r3, #2
 8001784:	e016      	b.n	80017b4 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8001790:	f002 f93a 	bl	8003a08 <HAL_GetTick>
 8001794:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f43f af43 	beq.w	8001624 <ES_WIFI_WaitServerConnection+0x2c>
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	f4ff af3e 	bcc.w	8001624 <ES_WIFI_WaitServerConnection+0x2c>
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f4ff af39 	bcc.w	8001624 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800a8f8 	.word	0x0800a8f8
 80017c0:	0800aa40 	.word	0x0800aa40
 80017c4:	0800aa48 	.word	0x0800aa48
 80017c8:	0800aa50 	.word	0x0800aa50
 80017cc:	0800aa5c 	.word	0x0800aa5c
 80017d0:	0800aa6c 	.word	0x0800aa6c
 80017d4:	0800aa70 	.word	0x0800aa70
 80017d8:	0800a8b4 	.word	0x0800a8b4

080017dc <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <ES_WIFI_CloseServerConnection+0x70>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 fe96 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001804:	461a      	mov	r2, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fb48 	bl	8000e9c <AT_ExecuteCommand>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	e013      	b.n	8001842 <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001820:	490b      	ldr	r1, [pc, #44]	; (8001850 <ES_WIFI_CloseServerConnection+0x74>)
 8001822:	4618      	mov	r0, r3
 8001824:	f007 fe7e 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001834:	461a      	mov	r2, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fb30 	bl	8000e9c <AT_ExecuteCommand>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0800a9dc 	.word	0x0800a9dc
 8001850:	0800aa80 	.word	0x0800aa80

08001854 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	4918      	ldr	r1, [pc, #96]	; (80018cc <ES_WIFI_StopServerSingleConn+0x78>)
 800186a:	4618      	mov	r0, r3
 800186c:	f007 fe5a 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800187c:	461a      	mov	r2, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fb0c 	bl	8000e9c <AT_ExecuteCommand>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <ES_WIFI_StopServerSingleConn+0x3e>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	e018      	b.n	80018c4 <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001898:	490d      	ldr	r1, [pc, #52]	; (80018d0 <ES_WIFI_StopServerSingleConn+0x7c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f007 fe42 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018ac:	461a      	mov	r2, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff faf4 	bl	8000e9c <AT_ExecuteCommand>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e000      	b.n	80018c4 <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0800a9dc 	.word	0x0800a9dc
 80018d0:	0800aa88 	.word	0x0800aa88

080018d4 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	72fb      	strb	r3, [r7, #11]
 80018e4:	4613      	mov	r3, r2
 80018e6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80018e8:	2302      	movs	r3, #2
 80018ea:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80018f2:	2301      	movs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e001      	b.n	80018fc <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80018fc:	893b      	ldrh	r3, [r7, #8]
 80018fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001902:	d302      	bcc.n	800190a <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001904:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001908:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001916:	7afa      	ldrb	r2, [r7, #11]
 8001918:	492d      	ldr	r1, [pc, #180]	; (80019d0 <ES_WIFI_SendData+0xfc>)
 800191a:	4618      	mov	r0, r3
 800191c:	f007 fe02 	bl	8009524 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800192c:	461a      	mov	r2, r3
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff fab4 	bl	8000e9c <AT_ExecuteCommand>
 8001934:	4603      	mov	r3, r0
 8001936:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8001938:	7cfb      	ldrb	r3, [r7, #19]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d13c      	bne.n	80019b8 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4923      	ldr	r1, [pc, #140]	; (80019d4 <ES_WIFI_SendData+0x100>)
 8001948:	4618      	mov	r0, r3
 800194a:	f007 fdeb 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800195a:	461a      	mov	r2, r3
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff fa9d 	bl	8000e9c <AT_ExecuteCommand>
 8001962:	4603      	mov	r3, r0
 8001964:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d125      	bne.n	80019b8 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001972:	893a      	ldrh	r2, [r7, #8]
 8001974:	4918      	ldr	r1, [pc, #96]	; (80019d8 <ES_WIFI_SendData+0x104>)
 8001976:	4618      	mov	r0, r3
 8001978:	f007 fdd4 	bl	8009524 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001988:	893a      	ldrh	r2, [r7, #8]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff faf3 	bl	8000f7c <AT_RequestSendData>
 8001996:	4603      	mov	r3, r0
 8001998:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <ES_WIFI_SendData+0xe4>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019a6:	490d      	ldr	r1, [pc, #52]	; (80019dc <ES_WIFI_SendData+0x108>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 ff5b 	bl	8009864 <strstr>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 80019b4:	2302      	movs	r3, #2
 80019b6:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	2200      	movs	r2, #0
 80019c2:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	0800a9dc 	.word	0x0800a9dc
 80019d4:	0800aab8 	.word	0x0800aab8
 80019d8:	0800aac0 	.word	0x0800aac0
 80019dc:	0800aacc 	.word	0x0800aacc

080019e0 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	461a      	mov	r2, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	4613      	mov	r3, r2
 80019f2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80019f4:	2302      	movs	r3, #2
 80019f6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e001      	b.n	8001a08 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001a0e:	d862      	bhi.n	8001ad6 <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a16:	7afa      	ldrb	r2, [r7, #11]
 8001a18:	4931      	ldr	r1, [pc, #196]	; (8001ae0 <ES_WIFI_ReceiveData+0x100>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 fd82 	bl	8009524 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff fa34 	bl	8000e9c <AT_ExecuteCommand>
 8001a34:	4603      	mov	r3, r0
 8001a36:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001a38:	7cfb      	ldrb	r3, [r7, #19]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d146      	bne.n	8001acc <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a44:	893a      	ldrh	r2, [r7, #8]
 8001a46:	4927      	ldr	r1, [pc, #156]	; (8001ae4 <ES_WIFI_ReceiveData+0x104>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 fd6b 	bl	8009524 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff fa1d 	bl	8000e9c <AT_ExecuteCommand>
 8001a62:	4603      	mov	r3, r0
 8001a64:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8001a66:	7cfb      	ldrb	r3, [r7, #19]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d12b      	bne.n	8001ac4 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	491c      	ldr	r1, [pc, #112]	; (8001ae8 <ES_WIFI_ReceiveData+0x108>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f007 fd54 	bl	8009524 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fa06 	bl	8000e9c <AT_ExecuteCommand>
 8001a90:	4603      	mov	r3, r0
 8001a92:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11d      	bne.n	8001ad6 <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa0:	4912      	ldr	r1, [pc, #72]	; (8001aec <ES_WIFI_ReceiveData+0x10c>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f007 fd3e 	bl	8009524 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001aae:	893a      	ldrh	r2, [r7, #8]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff fadf 	bl	800107c <AT_RequestReceiveData>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	74fb      	strb	r3, [r7, #19]
 8001ac2:	e008      	b.n	8001ad6 <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	e004      	b.n	8001ad6 <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <ES_WIFI_ReceiveData+0x110>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <ES_WIFI_ReceiveData+0x110>)
 8001ad4:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001ad6:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800a9dc 	.word	0x0800a9dc
 8001ae4:	0800aad4 	.word	0x0800aad4
 8001ae8:	0800aadc 	.word	0x0800aadc
 8001aec:	0800aae4 	.word	0x0800aae4
 8001af0:	200000a8 	.word	0x200000a8

08001af4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
 8001b08:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <SPI_WIFI_MspInit+0x168>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b62:	483f      	ldr	r0, [pc, #252]	; (8001c60 <SPI_WIFI_MspInit+0x16c>)
 8001b64:	f002 fc52 	bl	800440c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4837      	ldr	r0, [pc, #220]	; (8001c60 <SPI_WIFI_MspInit+0x16c>)
 8001b82:	f002 fa99 	bl	80040b8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4831      	ldr	r0, [pc, #196]	; (8001c64 <SPI_WIFI_MspInit+0x170>)
 8001ba0:	f002 fa8a 	bl	80040b8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4828      	ldr	r0, [pc, #160]	; (8001c64 <SPI_WIFI_MspInit+0x170>)
 8001bc2:	f002 fa79 	bl	80040b8 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4826      	ldr	r0, [pc, #152]	; (8001c64 <SPI_WIFI_MspInit+0x170>)
 8001bcc:	f002 fc1e 	bl	800440c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	481f      	ldr	r0, [pc, #124]	; (8001c64 <SPI_WIFI_MspInit+0x170>)
 8001be8:	f002 fa66 	bl	80040b8 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001bfe:	2306      	movs	r3, #6
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4817      	ldr	r0, [pc, #92]	; (8001c68 <SPI_WIFI_MspInit+0x174>)
 8001c0a:	f002 fa55 	bl	80040b8 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c20:	2306      	movs	r3, #6
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480f      	ldr	r0, [pc, #60]	; (8001c68 <SPI_WIFI_MspInit+0x174>)
 8001c2c:	f002 fa44 	bl	80040b8 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c42:	2306      	movs	r3, #6
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <SPI_WIFI_MspInit+0x174>)
 8001c4e:	f002 fa33 	bl	80040b8 <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	48000400 	.word	0x48000400
 8001c64:	48001000 	.word	0x48001000
 8001c68:	48000800 	.word	0x48000800

08001c6c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d145      	bne.n	8001d0c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <SPI_WIFI_Init+0xb8>)
 8001c84:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001c86:	4826      	ldr	r0, [pc, #152]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001c88:	f7ff ff34 	bl	8001af4 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001c8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c92:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001c9c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001ca0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cb8:	2210      	movs	r2, #16
 8001cba:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <SPI_WIFI_Init+0xb4>)
 8001cd6:	f004 f9a7 	bl	8006028 <HAL_SPI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	e018      	b.n	8001d18 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2007      	movs	r0, #7
 8001cec:	f001 ff74 	bl	8003bd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001cf0:	2007      	movs	r0, #7
 8001cf2:	f001 ff8d 	bl	8003c10 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2033      	movs	r0, #51	; 0x33
 8001cfc:	f001 ff6c 	bl	8003bd8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f001 ff85 	bl	8003c10 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001d06:	200a      	movs	r0, #10
 8001d08:	f000 f9fe 	bl	8002108 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001d0c:	f000 f80c 	bl	8001d28 <SPI_WIFI_ResetModule>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200000ac 	.word	0x200000ac
 8001d24:	40003c00 	.word	0x40003c00

08001d28 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d2e:	f001 fe6b 	bl	8003a08 <HAL_GetTick>
 8001d32:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3e:	4830      	ldr	r0, [pc, #192]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001d40:	f002 fb64 	bl	800440c <HAL_GPIO_WritePin>
 8001d44:	200a      	movs	r0, #10
 8001d46:	f001 fe6b 	bl	8003a20 <HAL_Delay>
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001d52:	f002 fb5b 	bl	800440c <HAL_GPIO_WritePin>
 8001d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d5a:	f001 fe61 	bl	8003a20 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	4827      	ldr	r0, [pc, #156]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001d64:	f002 fb52 	bl	800440c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d68:	200f      	movs	r0, #15
 8001d6a:	f000 f9cd 	bl	8002108 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001d6e:	e020      	b.n	8001db2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	463a      	mov	r2, r7
 8001d74:	18d1      	adds	r1, r2, r3
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4821      	ldr	r0, [pc, #132]	; (8001e04 <SPI_WIFI_ResetModule+0xdc>)
 8001d7e:	f004 fa5b 	bl	8006238 <HAL_SPI_Receive>
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001d8c:	f001 fe3c 	bl	8003a08 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d202      	bcs.n	8001da2 <SPI_WIFI_ResetModule+0x7a>
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001da2:	2201      	movs	r2, #1
 8001da4:	2101      	movs	r1, #1
 8001da6:	4816      	ldr	r0, [pc, #88]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001da8:	f002 fb30 	bl	800440c <HAL_GPIO_WritePin>
      return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e021      	b.n	8001df6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001db2:	2102      	movs	r1, #2
 8001db4:	4812      	ldr	r0, [pc, #72]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001db6:	f002 fb11 	bl	80043dc <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d0d7      	beq.n	8001d70 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	480e      	ldr	r0, [pc, #56]	; (8001e00 <SPI_WIFI_ResetModule+0xd8>)
 8001dc6:	f002 fb21 	bl	800440c <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001dca:	783b      	ldrb	r3, [r7, #0]
 8001dcc:	2b15      	cmp	r3, #21
 8001dce:	d10e      	bne.n	8001dee <SPI_WIFI_ResetModule+0xc6>
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b15      	cmp	r3, #21
 8001dd4:	d10b      	bne.n	8001dee <SPI_WIFI_ResetModule+0xc6>
 8001dd6:	78bb      	ldrb	r3, [r7, #2]
 8001dd8:	2b0d      	cmp	r3, #13
 8001dda:	d108      	bne.n	8001dee <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001dde:	2b0a      	cmp	r3, #10
 8001de0:	d105      	bne.n	8001dee <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001de2:	793b      	ldrb	r3, [r7, #4]
 8001de4:	2b3e      	cmp	r3, #62	; 0x3e
 8001de6:	d102      	bne.n	8001dee <SPI_WIFI_ResetModule+0xc6>
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d002      	beq.n	8001df4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e000      	b.n	8001df6 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	48001000 	.word	0x48001000
 8001e04:	200000ac 	.word	0x200000ac

08001e08 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <SPI_WIFI_DeInit+0x10>)
 8001e0e:	f004 f9d7 	bl	80061c0 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000ac 	.word	0x200000ac

08001e1c <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e24:	f001 fdf0 	bl	8003a08 <HAL_GetTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001e2c:	e00a      	b.n	8001e44 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e2e:	f001 fdeb 	bl	8003a08 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d902      	bls.n	8001e44 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e007      	b.n	8001e54 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001e44:	2102      	movs	r1, #2
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <wait_cmddata_rdy_high+0x40>)
 8001e48:	f002 fac8 	bl	80043dc <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d1ed      	bne.n	8001e2e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	48001000 	.word	0x48001000

08001e60 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001e68:	f001 fdce 	bl	8003a08 <HAL_GetTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001e70:	e00a      	b.n	8001e88 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e72:	f001 fdc9 	bl	8003a08 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e004      	b.n	8001e92 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <wait_cmddata_rdy_rising_event+0x3c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d0f0      	beq.n	8001e72 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001e90:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000118 	.word	0x20000118

08001ea0 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ea8:	f001 fdae 	bl	8003a08 <HAL_GetTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001eb0:	e00a      	b.n	8001ec8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001eb2:	f001 fda9 	bl	8003a08 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad2      	subs	r2, r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d902      	bls.n	8001ec8 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e004      	b.n	8001ed2 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <wait_spi_rx_event+0x3c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d0f0      	beq.n	8001eb2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001ed0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000110 	.word	0x20000110

08001ee0 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ee8:	f001 fd8e 	bl	8003a08 <HAL_GetTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001ef0:	e00a      	b.n	8001f08 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ef2:	f001 fd89 	bl	8003a08 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d902      	bls.n	8001f08 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e004      	b.n	8001f12 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <wait_spi_tx_event+0x3c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d0f0      	beq.n	8001ef2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001f10:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000114 	.word	0x20000114

08001f20 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001f32:	2201      	movs	r2, #1
 8001f34:	2101      	movs	r1, #1
 8001f36:	4834      	ldr	r0, [pc, #208]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001f38:	f002 fa68 	bl	800440c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f8e3 	bl	8002108 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff8b 	bl	8001e60 <wait_cmddata_rdy_rising_event>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da02      	bge.n	8001f56 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001f50:	f06f 0302 	mvn.w	r3, #2
 8001f54:	e054      	b.n	8002000 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001f56:	2200      	movs	r2, #0
 8001f58:	2101      	movs	r1, #1
 8001f5a:	482b      	ldr	r0, [pc, #172]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001f5c:	f002 fa56 	bl	800440c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f000 f8d1 	bl	8002108 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001f66:	e03d      	b.n	8001fe4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001f68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	db02      	blt.n	8001f78 <SPI_WIFI_ReceiveData+0x58>
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d13c      	bne.n	8001ff2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <SPI_WIFI_ReceiveData+0xec>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	2201      	movs	r2, #1
 8001f84:	4619      	mov	r1, r3
 8001f86:	4822      	ldr	r0, [pc, #136]	; (8002010 <SPI_WIFI_ReceiveData+0xf0>)
 8001f88:	f004 ff24 	bl	8006dd4 <HAL_SPI_Receive_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001f92:	2201      	movs	r2, #1
 8001f94:	2101      	movs	r1, #1
 8001f96:	481c      	ldr	r0, [pc, #112]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001f98:	f002 fa38 	bl	800440c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	e02e      	b.n	8002000 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff7b 	bl	8001ea0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001faa:	7d3a      	ldrb	r2, [r7, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	7d7a      	ldrb	r2, [r7, #21]
 8001fb6:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001fb8:	8afb      	ldrh	r3, [r7, #22]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8001fc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fce:	db09      	blt.n	8001fe4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001fd6:	f002 fa19 	bl	800440c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001fda:	f7ff fea5 	bl	8001d28 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001fde:	f06f 0303 	mvn.w	r3, #3
 8001fe2:	e00d      	b.n	8002000 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001fe8:	f002 f9f8 	bl	80043dc <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d0ba      	beq.n	8001f68 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <SPI_WIFI_ReceiveData+0xe8>)
 8001ff8:	f002 fa08 	bl	800440c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	48001000 	.word	0x48001000
 800200c:	20000110 	.word	0x20000110
 8002010:	200000ac 	.word	0x200000ac

08002014 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	460b      	mov	r3, r1
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fef9 	bl	8001e1c <wait_cmddata_rdy_high>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	da02      	bge.n	8002036 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	e04f      	b.n	80020d6 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <SPI_WIFI_SendData+0xcc>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	4828      	ldr	r0, [pc, #160]	; (80020e4 <SPI_WIFI_SendData+0xd0>)
 8002042:	f002 f9e3 	bl	800440c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002046:	200f      	movs	r0, #15
 8002048:	f000 f85e 	bl	8002108 <SPI_WIFI_DelayUs>
  if (len > 1)
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d919      	bls.n	8002086 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <SPI_WIFI_SendData+0xd4>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002058:	897b      	ldrh	r3, [r7, #10]
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	4822      	ldr	r0, [pc, #136]	; (80020ec <SPI_WIFI_SendData+0xd8>)
 8002064:	f004 fe16 	bl	8006c94 <HAL_SPI_Transmit_IT>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800206e:	2201      	movs	r2, #1
 8002070:	2101      	movs	r1, #1
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <SPI_WIFI_SendData+0xd0>)
 8002074:	f002 f9ca 	bl	800440c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	e02b      	b.n	80020d6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff2d 	bl	8001ee0 <wait_spi_tx_event>
  }

  if (len & 1)
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	3b01      	subs	r3, #1
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800209c:	230a      	movs	r3, #10
 800209e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <SPI_WIFI_SendData+0xd4>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2201      	movs	r2, #1
 80020ac:	4619      	mov	r1, r3
 80020ae:	480f      	ldr	r0, [pc, #60]	; (80020ec <SPI_WIFI_SendData+0xd8>)
 80020b0:	f004 fdf0 	bl	8006c94 <HAL_SPI_Transmit_IT>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80020ba:	2201      	movs	r2, #1
 80020bc:	2101      	movs	r1, #1
 80020be:	4809      	ldr	r0, [pc, #36]	; (80020e4 <SPI_WIFI_SendData+0xd0>)
 80020c0:	f002 f9a4 	bl	800440c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e005      	b.n	80020d6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff07 	bl	8001ee0 <wait_spi_tx_event>
  }
  return len;
 80020d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000118 	.word	0x20000118
 80020e4:	48001000 	.word	0x48001000
 80020e8:	20000114 	.word	0x20000114
 80020ec:	200000ac 	.word	0x200000ac

080020f0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f001 fc91 	bl	8003a20 <HAL_Delay>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <SPI_WIFI_DelayUs+0x94>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d122      	bne.n	8002166 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <SPI_WIFI_DelayUs+0x98>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <SPI_WIFI_DelayUs+0x9c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002136:	f001 fc67 	bl	8003a08 <HAL_GetTick>
 800213a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800213c:	e002      	b.n	8002144 <SPI_WIFI_DelayUs+0x3c>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 800214a:	f001 fc5d 	bl	8003a08 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <SPI_WIFI_DelayUs+0x94>)
 8002156:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <SPI_WIFI_DelayUs+0x94>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <SPI_WIFI_DelayUs+0x5e>
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <SPI_WIFI_DelayUs+0x94>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <SPI_WIFI_DelayUs+0x98>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <SPI_WIFI_DelayUs+0xa0>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SPI_WIFI_DelayUs+0x94>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002186:	e002      	b.n	800218e <SPI_WIFI_DelayUs+0x86>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3b01      	subs	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f9      	bne.n	8002188 <SPI_WIFI_DelayUs+0x80>
  return;
 8002194:	bf00      	nop
}
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000011c 	.word	0x2000011c
 80021a0:	20000014 	.word	0x20000014
 80021a4:	10624dd3 	.word	0x10624dd3
 80021a8:	431bde83 	.word	0x431bde83

080021ac <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_SPI_RxCpltCallback+0x24>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_SPI_RxCpltCallback+0x24>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000110 	.word	0x20000110

080021d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_SPI_TxCpltCallback+0x24>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <HAL_SPI_TxCpltCallback+0x24>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000114 	.word	0x20000114

080021fc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SPI_WIFI_ISR+0x1c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d102      	bne.n	800220e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <SPI_WIFI_ISR+0x1c>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
   }
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20000118 	.word	0x20000118

0800221c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002220:	f001 fbc5 	bl	80039ae <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002224:	f000 fc40 	bl	8002aa8 <SystemClock_Config>

  // Init speaker
  MX_GPIO_Init();
 8002228:	f000 fcc4 	bl	8002bb4 <MX_GPIO_Init>
  MX_DAC1_Init();
 800222c:	f000 fc8e 	bl	8002b4c <MX_DAC1_Init>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002230:	2100      	movs	r1, #0
 8002232:	481b      	ldr	r0, [pc, #108]	; (80022a0 <main+0x84>)
 8002234:	f001 fd1c 	bl	8003c70 <HAL_DAC_Start>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8002238:	2000      	movs	r0, #0
 800223a:	f000 fd33 	bl	8002ca4 <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800223e:	2101      	movs	r1, #1
 8002240:	2000      	movs	r0, #0
 8002242:	f000 fd8b 	bl	8002d5c <BSP_PB_Init>

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <main+0x88>)
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <main+0x8c>)
 800224a:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <main+0x88>)
 800224e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002252:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <main+0x88>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <main+0x88>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <main+0x88>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <main+0x88>)
 8002268:	220c      	movs	r2, #12
 800226a:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <main+0x88>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <main+0x88>)
 8002274:	2200      	movs	r2, #0
 8002276:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <main+0x88>)
 800227a:	2200      	movs	r2, #0
 800227c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <main+0x88>)
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <main+0x88>)
 8002286:	2000      	movs	r0, #0
 8002288:	f000 fdbe 	bl	8002e08 <BSP_COM_Init>


  printf("\n****** WIFI Web Server demonstration ******\n\r");
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <main+0x90>)
 800228e:	f007 f8d3 	bl	8009438 <iprintf>

#endif /* TERMINAL_USE */
  BSP_TSENSOR_Init();
 8002292:	f000 ff75 	bl	8003180 <BSP_TSENSOR_Init>



  wifi_server();
 8002296:	f000 f8af 	bl	80023f8 <wifi_server>
 800229a:	2300      	movs	r3, #0

}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200005fc 	.word	0x200005fc
 80022a4:	20000a64 	.word	0x20000a64
 80022a8:	40013800 	.word	0x40013800
 80022ac:	0800ab24 	.word	0x0800ab24

080022b0 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80022b6:	f001 f91f 	bl	80034f8 <WIFI_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d124      	bne.n	800230a <wifi_start+0x5a>
  {
    printf("eS-WiFi Initialized.\n\r");
 80022c0:	4815      	ldr	r0, [pc, #84]	; (8002318 <wifi_start+0x68>)
 80022c2:	f007 f8b9 	bl	8009438 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2106      	movs	r1, #6
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 f962 	bl	8003594 <WIFI_GetMAC_Address>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d113      	bne.n	80022fe <wifi_start+0x4e>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 80022d6:	783b      	ldrb	r3, [r7, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	787b      	ldrb	r3, [r7, #1]
 80022dc:	461c      	mov	r4, r3
 80022de:	78bb      	ldrb	r3, [r7, #2]
 80022e0:	461d      	mov	r5, r3
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	793a      	ldrb	r2, [r7, #4]
 80022e6:	7979      	ldrb	r1, [r7, #5]
 80022e8:	9102      	str	r1, [sp, #8]
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	462b      	mov	r3, r5
 80022f0:	4622      	mov	r2, r4
 80022f2:	4601      	mov	r1, r0
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <wifi_start+0x6c>)
 80022f6:	f007 f89f 	bl	8009438 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e007      	b.n	800230e <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n\r"));
 80022fe:	4808      	ldr	r0, [pc, #32]	; (8002320 <wifi_start+0x70>)
 8002300:	f007 f89a 	bl	8009438 <iprintf>
      return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	e001      	b.n	800230e <wifi_start+0x5e>
    return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	bf00      	nop
 8002318:	0800ab54 	.word	0x0800ab54
 800231c:	0800ab6c 	.word	0x0800ab6c
 8002320:	0800abac 	.word	0x0800abac

08002324 <wifi_connect>:



int wifi_connect(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af02      	add	r7, sp, #8
  wifi_start();
 800232a:	f7ff ffc1 	bl	80022b0 <wifi_start>

  memset(&wifi_config, 0, sizeof(wifi_config));
 800232e:	22c9      	movs	r2, #201	; 0xc9
 8002330:	2100      	movs	r1, #0
 8002332:	4827      	ldr	r0, [pc, #156]	; (80023d0 <wifi_connect+0xac>)
 8002334:	f007 f9fe 	bl	8009734 <memset>

//  Set wifi config
  printf("Configuring SSID and password.\n\r");
 8002338:	4826      	ldr	r0, [pc, #152]	; (80023d4 <wifi_connect+0xb0>)
 800233a:	f007 f87d 	bl	8009438 <iprintf>
  strcpy(wifi_config.ssid, "Raph iPhone");
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <wifi_connect+0xac>)
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <wifi_connect+0xb4>)
 8002342:	ca07      	ldmia	r2, {r0, r1, r2}
 8002344:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char c = '3';
 8002348:	2333      	movs	r3, #51	; 0x33
 800234a:	71fb      	strb	r3, [r7, #7]
  wifi_config.security = c - '0';
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	3b30      	subs	r3, #48	; 0x30
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <wifi_connect+0xac>)
 8002354:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  strcpy(wifi_config.password, "Centre Bell");
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <wifi_connect+0xb8>)
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <wifi_connect+0xbc>)
 800235c:	ca07      	ldmia	r2, {r0, r1, r2}
 800235e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
// Try to connect to wifi
  printf("Connecting to %s\n\r", wifi_config.ssid);
 8002362:	491b      	ldr	r1, [pc, #108]	; (80023d0 <wifi_connect+0xac>)
 8002364:	481f      	ldr	r0, [pc, #124]	; (80023e4 <wifi_connect+0xc0>)
 8002366:	f007 f867 	bl	8009438 <iprintf>
  WIFI_Ecn_t security =  WIFI_ECN_WPA2_PSK;
 800236a:	2303      	movs	r3, #3
 800236c:	71bb      	strb	r3, [r7, #6]

  if (WIFI_Connect(wifi_config.ssid, wifi_config.password, security) == WIFI_STATUS_OK)
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	461a      	mov	r2, r3
 8002372:	491a      	ldr	r1, [pc, #104]	; (80023dc <wifi_connect+0xb8>)
 8002374:	4816      	ldr	r0, [pc, #88]	; (80023d0 <wifi_connect+0xac>)
 8002376:	f001 f8eb 	bl	8003550 <WIFI_Connect>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11e      	bne.n	80023be <wifi_connect+0x9a>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8002380:	2104      	movs	r1, #4
 8002382:	4819      	ldr	r0, [pc, #100]	; (80023e8 <wifi_connect+0xc4>)
 8002384:	f001 f926 	bl	80035d4 <WIFI_GetIP_Address>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d111      	bne.n	80023b2 <wifi_connect+0x8e>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n\r",
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <wifi_connect+0xc4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <wifi_connect+0xc4>)
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	461a      	mov	r2, r3
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <wifi_connect+0xc4>)
 800239c:	789b      	ldrb	r3, [r3, #2]
 800239e:	4618      	mov	r0, r3
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <wifi_connect+0xc4>)
 80023a2:	78db      	ldrb	r3, [r3, #3]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4603      	mov	r3, r0
 80023a8:	4810      	ldr	r0, [pc, #64]	; (80023ec <wifi_connect+0xc8>)
 80023aa:	f007 f845 	bl	8009438 <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
     return -1;
  }
  return 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e00a      	b.n	80023c8 <wifi_connect+0xa4>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
 80023b2:	480f      	ldr	r0, [pc, #60]	; (80023f0 <wifi_connect+0xcc>)
 80023b4:	f007 f840 	bl	8009438 <iprintf>
      return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
 80023bc:	e004      	b.n	80023c8 <wifi_connect+0xa4>
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
 80023be:	480d      	ldr	r0, [pc, #52]	; (80023f4 <wifi_connect+0xd0>)
 80023c0:	f007 f83a 	bl	8009438 <iprintf>
     return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000124 	.word	0x20000124
 80023d4:	0800abd0 	.word	0x0800abd0
 80023d8:	0800abf4 	.word	0x0800abf4
 80023dc:	20000188 	.word	0x20000188
 80023e0:	0800ac00 	.word	0x0800ac00
 80023e4:	0800ac0c 	.word	0x0800ac0c
 80023e8:	200005f0 	.word	0x200005f0
 80023ec:	0800ac20 	.word	0x0800ac20
 80023f0:	0800ac5c 	.word	0x0800ac5c
 80023f4:	0800ac8c 	.word	0x0800ac8c

080023f8 <wifi_server>:

int wifi_server(void)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af02      	add	r7, sp, #8
  bool StopServer = false;
 80023fe:	2300      	movs	r3, #0
 8002400:	72fb      	strb	r3, [r7, #11]

  LOG(("\nRunning HTML Server test\n\r"));
 8002402:	4869      	ldr	r0, [pc, #420]	; (80025a8 <wifi_server+0x1b0>)
 8002404:	f007 f818 	bl	8009438 <iprintf>
  if (wifi_connect()!=0) return -1;
 8002408:	f7ff ff8c 	bl	8002324 <wifi_connect>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <wifi_server+0x20>
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e0bc      	b.n	8002592 <wifi_server+0x19a>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8002418:	2350      	movs	r3, #80	; 0x50
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4b63      	ldr	r3, [pc, #396]	; (80025ac <wifi_server+0x1b4>)
 800241e:	2201      	movs	r2, #1
 8002420:	2100      	movs	r1, #0
 8002422:	2000      	movs	r0, #0
 8002424:	f001 f8fa 	bl	800361c <WIFI_StartServer>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 800242e:	4860      	ldr	r0, [pc, #384]	; (80025b0 <wifi_server+0x1b8>)
 8002430:	f007 f870 	bl	8009514 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002434:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <wifi_server+0x1bc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <wifi_server+0x1bc>)
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	461a      	mov	r2, r3
 8002440:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <wifi_server+0x1bc>)
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	4618      	mov	r0, r3
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <wifi_server+0x1bc>)
 8002448:	78db      	ldrb	r3, [r3, #3]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4603      	mov	r3, r0
 800244e:	485a      	ldr	r0, [pc, #360]	; (80025b8 <wifi_server+0x1c0>)
 8002450:	f006 fff2 	bl	8009438 <iprintf>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <wifi_server+0x1bc>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <wifi_server+0x1bc>)
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	461a      	mov	r2, r3
 8002460:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <wifi_server+0x1bc>)
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	4618      	mov	r0, r3
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <wifi_server+0x1bc>)
 8002468:	78db      	ldrb	r3, [r3, #3]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4603      	mov	r3, r0
 800246e:	4853      	ldr	r0, [pc, #332]	; (80025bc <wifi_server+0x1c4>)
 8002470:	f006 ffe2 	bl	8009438 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002474:	e04e      	b.n	8002514 <wifi_server+0x11c>
    {
        LOG(("."));
 8002476:	202e      	movs	r0, #46	; 0x2e
 8002478:	f006 fff0 	bl	800945c <putchar>
        int count = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
        while (count < 200)
 8002480:	e045      	b.n	800250e <wifi_server+0x116>
		{
			for (float increment = 0; increment < 63; increment+=0.2) {
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e035      	b.n	80024f6 <wifi_server+0xfe>
				for (int delay = 0; delay<90; delay++) {;}
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e002      	b.n	8002496 <wifi_server+0x9e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b59      	cmp	r3, #89	; 0x59
 800249a:	ddf9      	ble.n	8002490 <wifi_server+0x98>

				sin_value = arm_sin_f32(increment)*100+100;
 800249c:	ed97 0a04 	vldr	s0, [r7, #16]
 80024a0:	f006 fed4 	bl	800924c <arm_sin_f32>
 80024a4:	eef0 7a40 	vmov.f32	s15, s0
 80024a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80025c0 <wifi_server+0x1c8>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80025c0 <wifi_server+0x1c8>
 80024b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <wifi_server+0x1cc>)
 80024ba:	edc3 7a00 	vstr	s15, [r3]

				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sin_value);
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <wifi_server+0x1cc>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	2208      	movs	r2, #8
 80024ce:	2100      	movs	r1, #0
 80024d0:	483d      	ldr	r0, [pc, #244]	; (80025c8 <wifi_server+0x1d0>)
 80024d2:	f001 fc1f 	bl	8003d14 <HAL_DAC_SetValue>
			for (float increment = 0; increment < 63; increment+=0.2) {
 80024d6:	6938      	ldr	r0, [r7, #16]
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	a330      	add	r3, pc, #192	; (adr r3, 80025a0 <wifi_server+0x1a8>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fd feeb 	bl	80002bc <__adddf3>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7fe f89b 	bl	8000628 <__aeabi_d2f>
 80024f2:	4603      	mov	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80025cc <wifi_server+0x1d4>
 80024fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d4c0      	bmi.n	800248a <wifi_server+0x92>
			}
			count++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
        while (count < 200)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2bc7      	cmp	r3, #199	; 0xc7
 8002512:	ddb6      	ble.n	8002482 <wifi_server+0x8a>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2304      	movs	r3, #4
 800251c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002520:	2000      	movs	r0, #0
 8002522:	f001 f8ab 	bl	800367c <WIFI_WaitServerConnection>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1a4      	bne.n	8002476 <wifi_server+0x7e>
        }
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 800252c:	793b      	ldrb	r3, [r7, #4]
 800252e:	4619      	mov	r1, r3
 8002530:	797b      	ldrb	r3, [r7, #5]
 8002532:	4618      	mov	r0, r3
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	461c      	mov	r4, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	9201      	str	r2, [sp, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4623      	mov	r3, r4
 8002542:	4602      	mov	r2, r0
 8002544:	4822      	ldr	r0, [pc, #136]	; (80025d0 <wifi_server+0x1d8>)
 8002546:	f006 ff77 	bl	8009438 <iprintf>

    StopServer = WebServerProcess();
 800254a:	f000 f849 	bl	80025e0 <WebServerProcess>
 800254e:	4603      	mov	r3, r0
 8002550:	72fb      	strb	r3, [r7, #11]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8002552:	2000      	movs	r0, #0
 8002554:	f001 f8da 	bl	800370c <WIFI_CloseServerConnection>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <wifi_server+0x172>
    {
      LOG(("ERROR: failed to close current Server connection\n\r"));
 800255e:	481d      	ldr	r0, [pc, #116]	; (80025d4 <wifi_server+0x1dc>)
 8002560:	f006 ff6a 	bl	8009438 <iprintf>
      return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	e013      	b.n	8002592 <wifi_server+0x19a>
    }
  }
  while(StopServer == false);
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f af6e 	bne.w	8002454 <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8002578:	2000      	movs	r0, #0
 800257a:	f001 f8df 	bl	800373c <WIFI_StopServer>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <wifi_server+0x192>
  {
    LOG(("ERROR: Cannot stop server.\n\r"));
 8002584:	4814      	ldr	r0, [pc, #80]	; (80025d8 <wifi_server+0x1e0>)
 8002586:	f006 ff57 	bl	8009438 <iprintf>
  }

  LOG(("Server is stop\n"));
 800258a:	4814      	ldr	r0, [pc, #80]	; (80025dc <wifi_server+0x1e4>)
 800258c:	f006 ffc2 	bl	8009514 <puts>
  return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	f3af 8000 	nop.w
 80025a0:	9999999a 	.word	0x9999999a
 80025a4:	3fc99999 	.word	0x3fc99999
 80025a8:	0800acb4 	.word	0x0800acb4
 80025ac:	0800acd0 	.word	0x0800acd0
 80025b0:	0800acd4 	.word	0x0800acd4
 80025b4:	200005f0 	.word	0x200005f0
 80025b8:	0800acf0 	.word	0x0800acf0
 80025bc:	0800ad40 	.word	0x0800ad40
 80025c0:	42c80000 	.word	0x42c80000
 80025c4:	200005f8 	.word	0x200005f8
 80025c8:	200005fc 	.word	0x200005fc
 80025cc:	427c0000 	.word	0x427c0000
 80025d0:	0800ad6c 	.word	0x0800ad6c
 80025d4:	0800ad90 	.word	0x0800ad90
 80025d8:	0800adc4 	.word	0x0800adc4
 80025dc:	0800ade4 	.word	0x0800ade4

080025e0 <WebServerProcess>:


static bool WebServerProcess(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f8:	4954      	ldr	r1, [pc, #336]	; (800274c <WebServerProcess+0x16c>)
 80025fa:	2000      	movs	r0, #0
 80025fc:	f001 f8d8 	bl	80037b0 <WIFI_ReceiveData>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 809a 	bne.w	800273c <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n\r",respLen));
 8002608:	89bb      	ldrh	r3, [r7, #12]
 800260a:	4619      	mov	r1, r3
 800260c:	4850      	ldr	r0, [pc, #320]	; (8002750 <WebServerProcess+0x170>)
 800260e:	f006 ff13 	bl	8009438 <iprintf>

   if( respLen > 0)
 8002612:	89bb      	ldrh	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8094 	beq.w	8002742 <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 800261a:	494e      	ldr	r1, [pc, #312]	; (8002754 <WebServerProcess+0x174>)
 800261c:	484b      	ldr	r0, [pc, #300]	; (800274c <WebServerProcess+0x16c>)
 800261e:	f007 f921 	bl	8009864 <strstr>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01c      	beq.n	8002662 <WebServerProcess+0x82>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 8002628:	f000 fdc6 	bl	80031b8 <BSP_TSENSOR_ReadTemp>
 800262c:	eef0 7a40 	vmov.f32	s15, s0
 8002630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002634:	edc7 7a01 	vstr	s15, [r7, #4]
 8002638:	793b      	ldrb	r3, [r7, #4]
 800263a:	73bb      	strb	r3, [r7, #14]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <WebServerProcess+0x178>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	7bba      	ldrb	r2, [r7, #14]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8a0 	bl	800278c <SendWebPage>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n\r"));
 8002652:	4842      	ldr	r0, [pc, #264]	; (800275c <WebServerProcess+0x17c>)
 8002654:	f006 fef0 	bl	8009438 <iprintf>
 8002658:	e073      	b.n	8002742 <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n\r"));
 800265a:	4841      	ldr	r0, [pc, #260]	; (8002760 <WebServerProcess+0x180>)
 800265c:	f006 feec 	bl	8009438 <iprintf>
 8002660:	e06f      	b.n	8002742 <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8002662:	4940      	ldr	r1, [pc, #256]	; (8002764 <WebServerProcess+0x184>)
 8002664:	4839      	ldr	r0, [pc, #228]	; (800274c <WebServerProcess+0x16c>)
 8002666:	f007 f8fd 	bl	8009864 <strstr>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d068      	beq.n	8002742 <WebServerProcess+0x162>
       {
         LOG(("Post request\n\r"));
 8002670:	483d      	ldr	r0, [pc, #244]	; (8002768 <WebServerProcess+0x188>)
 8002672:	f006 fee1 	bl	8009438 <iprintf>

         if(strstr((char *)resp, "radio"))
 8002676:	493d      	ldr	r1, [pc, #244]	; (800276c <WebServerProcess+0x18c>)
 8002678:	4834      	ldr	r0, [pc, #208]	; (800274c <WebServerProcess+0x16c>)
 800267a:	f007 f8f3 	bl	8009864 <strstr>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d024      	beq.n	80026ce <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 8002684:	493a      	ldr	r1, [pc, #232]	; (8002770 <WebServerProcess+0x190>)
 8002686:	4831      	ldr	r0, [pc, #196]	; (800274c <WebServerProcess+0x16c>)
 8002688:	f007 f8ec 	bl	8009864 <strstr>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <WebServerProcess+0xc0>
           {
             LedState = 0;
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <WebServerProcess+0x178>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 fb49 	bl	8002d30 <BSP_LED_Off>
 800269e:	e00c      	b.n	80026ba <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 80026a0:	4934      	ldr	r1, [pc, #208]	; (8002774 <WebServerProcess+0x194>)
 80026a2:	482a      	ldr	r0, [pc, #168]	; (800274c <WebServerProcess+0x16c>)
 80026a4:	f007 f8de 	bl	8009864 <strstr>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <WebServerProcess+0xda>
           {
             LedState = 1;
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <WebServerProcess+0x178>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 fb25 	bl	8002d04 <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 80026ba:	f000 fd7d 	bl	80031b8 <BSP_TSENSOR_ReadTemp>
 80026be:	eef0 7a40 	vmov.f32	s15, s0
 80026c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80026ca:	793b      	ldrb	r3, [r7, #4]
 80026cc:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 80026ce:	492a      	ldr	r1, [pc, #168]	; (8002778 <WebServerProcess+0x198>)
 80026d0:	481e      	ldr	r0, [pc, #120]	; (800274c <WebServerProcess+0x16c>)
 80026d2:	f007 f8c7 	bl	8009864 <strstr>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 80026dc:	4927      	ldr	r1, [pc, #156]	; (800277c <WebServerProcess+0x19c>)
 80026de:	481b      	ldr	r0, [pc, #108]	; (800274c <WebServerProcess+0x16c>)
 80026e0:	f007 f8c0 	bl	8009864 <strstr>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <WebServerProcess+0x110>
           {
             stopserver = false;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e008      	b.n	8002702 <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 80026f0:	4923      	ldr	r1, [pc, #140]	; (8002780 <WebServerProcess+0x1a0>)
 80026f2:	4816      	ldr	r0, [pc, #88]	; (800274c <WebServerProcess+0x16c>)
 80026f4:	f007 f8b6 	bl	8009864 <strstr>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <WebServerProcess+0x122>
           {
             stopserver = true;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 8002702:	f000 fd59 	bl	80031b8 <BSP_TSENSOR_ReadTemp>
 8002706:	eef0 7a40 	vmov.f32	s15, s0
 800270a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002712:	793b      	ldrb	r3, [r7, #4]
 8002714:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <WebServerProcess+0x178>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	7bba      	ldrb	r2, [r7, #14]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f833 	bl	800278c <SendWebPage>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n\r"));
 800272c:	480b      	ldr	r0, [pc, #44]	; (800275c <WebServerProcess+0x17c>)
 800272e:	f006 fe83 	bl	8009438 <iprintf>
 8002732:	e006      	b.n	8002742 <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n\r"));
 8002734:	4813      	ldr	r0, [pc, #76]	; (8002784 <WebServerProcess+0x1a4>)
 8002736:	f006 fe7f 	bl	8009438 <iprintf>
 800273a:	e002      	b.n	8002742 <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n\r"));
 800273c:	4812      	ldr	r0, [pc, #72]	; (8002788 <WebServerProcess+0x1a8>)
 800273e:	f006 fe7b 	bl	8009438 <iprintf>
  }
  return stopserver;
 8002742:	7bfb      	ldrb	r3, [r7, #15]

 }
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000610 	.word	0x20000610
 8002750:	0800adf4 	.word	0x0800adf4
 8002754:	0800ae10 	.word	0x0800ae10
 8002758:	200005f4 	.word	0x200005f4
 800275c:	0800ae14 	.word	0x0800ae14
 8002760:	0800ae38 	.word	0x0800ae38
 8002764:	0800ae58 	.word	0x0800ae58
 8002768:	0800ae60 	.word	0x0800ae60
 800276c:	0800ae70 	.word	0x0800ae70
 8002770:	0800ae78 	.word	0x0800ae78
 8002774:	0800ae80 	.word	0x0800ae80
 8002778:	0800ae88 	.word	0x0800ae88
 800277c:	0800ae94 	.word	0x0800ae94
 8002780:	0800aea4 	.word	0x0800aea4
 8002784:	0800aeb4 	.word	0x0800aeb4
 8002788:	0800aed4 	.word	0x0800aed4

0800278c <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	b093      	sub	sp, #76	; 0x4c
 8002790:	af02      	add	r7, sp, #8
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 800279c:	4ab3      	ldr	r2, [pc, #716]	; (8002a6c <SendWebPage+0x2e0>)
 800279e:	4bb4      	ldr	r3, [pc, #720]	; (8002a70 <SendWebPage+0x2e4>)
 80027a0:	4614      	mov	r4, r2
 80027a2:	461d      	mov	r5, r3
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027b4:	c407      	stmia	r4!, {r0, r1, r2}
 80027b6:	8023      	strh	r3, [r4, #0]
 80027b8:	3402      	adds	r4, #2
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80027be:	48ab      	ldr	r0, [pc, #684]	; (8002a6c <SendWebPage+0x2e0>)
 80027c0:	f7fd fd1e 	bl	8000200 <strlen>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	4ba8      	ldr	r3, [pc, #672]	; (8002a6c <SendWebPage+0x2e0>)
 80027ca:	4413      	add	r3, r2
 80027cc:	4aa9      	ldr	r2, [pc, #676]	; (8002a74 <SendWebPage+0x2e8>)
 80027ce:	461d      	mov	r5, r3
 80027d0:	4614      	mov	r4, r2
 80027d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d4:	6028      	str	r0, [r5, #0]
 80027d6:	6069      	str	r1, [r5, #4]
 80027d8:	60aa      	str	r2, [r5, #8]
 80027da:	60eb      	str	r3, [r5, #12]
 80027dc:	7823      	ldrb	r3, [r4, #0]
 80027de:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80027e0:	48a2      	ldr	r0, [pc, #648]	; (8002a6c <SendWebPage+0x2e0>)
 80027e2:	f7fd fd0d 	bl	8000200 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4ba0      	ldr	r3, [pc, #640]	; (8002a6c <SendWebPage+0x2e0>)
 80027ec:	4413      	add	r3, r2
 80027ee:	4aa2      	ldr	r2, [pc, #648]	; (8002a78 <SendWebPage+0x2ec>)
 80027f0:	4614      	mov	r4, r2
 80027f2:	469c      	mov	ip, r3
 80027f4:	f104 0e20 	add.w	lr, r4, #32
 80027f8:	4665      	mov	r5, ip
 80027fa:	4626      	mov	r6, r4
 80027fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027fe:	6028      	str	r0, [r5, #0]
 8002800:	6069      	str	r1, [r5, #4]
 8002802:	60aa      	str	r2, [r5, #8]
 8002804:	60eb      	str	r3, [r5, #12]
 8002806:	3410      	adds	r4, #16
 8002808:	f10c 0c10 	add.w	ip, ip, #16
 800280c:	4574      	cmp	r4, lr
 800280e:	d1f3      	bne.n	80027f8 <SendWebPage+0x6c>
 8002810:	4662      	mov	r2, ip
 8002812:	4623      	mov	r3, r4
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>STM32L4S Discovery kit IoT node : Web server using WiFi with STM32</h2>\r\n");
 8002818:	4894      	ldr	r0, [pc, #592]	; (8002a6c <SendWebPage+0x2e0>)
 800281a:	f7fd fcf1 	bl	8000200 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <SendWebPage+0x2e0>)
 8002824:	4413      	add	r3, r2
 8002826:	4a95      	ldr	r2, [pc, #596]	; (8002a7c <SendWebPage+0x2f0>)
 8002828:	4618      	mov	r0, r3
 800282a:	4611      	mov	r1, r2
 800282c:	234e      	movs	r3, #78	; 0x4e
 800282e:	461a      	mov	r2, r3
 8002830:	f007 f8a0 	bl	8009974 <memcpy>
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8002834:	488d      	ldr	r0, [pc, #564]	; (8002a6c <SendWebPage+0x2e0>)
 8002836:	f7fd fce3 	bl	8000200 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <SendWebPage+0x2e0>)
 8002840:	4413      	add	r3, r2
 8002842:	4a8f      	ldr	r2, [pc, #572]	; (8002a80 <SendWebPage+0x2f4>)
 8002844:	461c      	mov	r4, r3
 8002846:	4613      	mov	r3, r2
 8002848:	cb07      	ldmia	r3!, {r0, r1, r2}
 800284a:	6020      	str	r0, [r4, #0]
 800284c:	6061      	str	r1, [r4, #4]
 800284e:	60a2      	str	r2, [r4, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8002854:	4885      	ldr	r0, [pc, #532]	; (8002a6c <SendWebPage+0x2e0>)
 8002856:	f7fd fcd3 	bl	8000200 <strlen>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <SendWebPage+0x2e0>)
 8002860:	4413      	add	r3, r2
 8002862:	4a88      	ldr	r2, [pc, #544]	; (8002a84 <SendWebPage+0x2f8>)
 8002864:	4614      	mov	r4, r2
 8002866:	469c      	mov	ip, r3
 8002868:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800286c:	4665      	mov	r5, ip
 800286e:	4626      	mov	r6, r4
 8002870:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002872:	6028      	str	r0, [r5, #0]
 8002874:	6069      	str	r1, [r5, #4]
 8002876:	60aa      	str	r2, [r5, #8]
 8002878:	60eb      	str	r3, [r5, #12]
 800287a:	3410      	adds	r4, #16
 800287c:	f10c 0c10 	add.w	ip, ip, #16
 8002880:	4574      	cmp	r4, lr
 8002882:	d1f3      	bne.n	800286c <SendWebPage+0xe0>
  sprintf((char *)temp, "%d", temperature);
 8002884:	79ba      	ldrb	r2, [r7, #6]
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	497f      	ldr	r1, [pc, #508]	; (8002a88 <SendWebPage+0x2fc>)
 800288c:	4618      	mov	r0, r3
 800288e:	f006 fe49 	bl	8009524 <siprintf>
  strcat((char *)http, (char *)temp);
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	4619      	mov	r1, r3
 8002898:	4874      	ldr	r0, [pc, #464]	; (8002a6c <SendWebPage+0x2e0>)
 800289a:	f006 ff53 	bl	8009744 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 800289e:	4873      	ldr	r0, [pc, #460]	; (8002a6c <SendWebPage+0x2e0>)
 80028a0:	f7fd fcae 	bl	8000200 <strlen>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b70      	ldr	r3, [pc, #448]	; (8002a6c <SendWebPage+0x2e0>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a77      	ldr	r2, [pc, #476]	; (8002a8c <SendWebPage+0x300>)
 80028ae:	461d      	mov	r5, r3
 80028b0:	4614      	mov	r4, r2
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	6028      	str	r0, [r5, #0]
 80028b6:	6069      	str	r1, [r5, #4]
 80028b8:	60aa      	str	r2, [r5, #8]
 80028ba:	60eb      	str	r3, [r5, #12]
 80028bc:	7823      	ldrb	r3, [r4, #0]
 80028be:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d040      	beq.n	8002948 <SendWebPage+0x1bc>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 80028c6:	4869      	ldr	r0, [pc, #420]	; (8002a6c <SendWebPage+0x2e0>)
 80028c8:	f7fd fc9a 	bl	8000200 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <SendWebPage+0x2e0>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <SendWebPage+0x304>)
 80028d6:	4614      	mov	r4, r2
 80028d8:	469c      	mov	ip, r3
 80028da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80028de:	4665      	mov	r5, ip
 80028e0:	4626      	mov	r6, r4
 80028e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028e4:	6028      	str	r0, [r5, #0]
 80028e6:	6069      	str	r1, [r5, #4]
 80028e8:	60aa      	str	r2, [r5, #8]
 80028ea:	60eb      	str	r3, [r5, #12]
 80028ec:	3410      	adds	r4, #16
 80028ee:	f10c 0c10 	add.w	ip, ip, #16
 80028f2:	4574      	cmp	r4, lr
 80028f4:	d1f3      	bne.n	80028de <SendWebPage+0x152>
 80028f6:	4663      	mov	r3, ip
 80028f8:	4622      	mov	r2, r4
 80028fa:	6810      	ldr	r0, [r2, #0]
 80028fc:	6018      	str	r0, [r3, #0]
 80028fe:	8891      	ldrh	r1, [r2, #4]
 8002900:	7992      	ldrb	r2, [r2, #6]
 8002902:	8099      	strh	r1, [r3, #4]
 8002904:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8002906:	4859      	ldr	r0, [pc, #356]	; (8002a6c <SendWebPage+0x2e0>)
 8002908:	f7fd fc7a 	bl	8000200 <strlen>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <SendWebPage+0x2e0>)
 8002912:	4413      	add	r3, r2
 8002914:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <SendWebPage+0x308>)
 8002916:	4614      	mov	r4, r2
 8002918:	469c      	mov	ip, r3
 800291a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800291e:	4665      	mov	r5, ip
 8002920:	4626      	mov	r6, r4
 8002922:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002924:	6028      	str	r0, [r5, #0]
 8002926:	6069      	str	r1, [r5, #4]
 8002928:	60aa      	str	r2, [r5, #8]
 800292a:	60eb      	str	r3, [r5, #12]
 800292c:	3410      	adds	r4, #16
 800292e:	f10c 0c10 	add.w	ip, ip, #16
 8002932:	4574      	cmp	r4, lr
 8002934:	d1f3      	bne.n	800291e <SendWebPage+0x192>
 8002936:	4665      	mov	r5, ip
 8002938:	4623      	mov	r3, r4
 800293a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800293c:	6028      	str	r0, [r5, #0]
 800293e:	6069      	str	r1, [r5, #4]
 8002940:	60aa      	str	r2, [r5, #8]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	81ab      	strh	r3, [r5, #12]
 8002946:	e03f      	b.n	80029c8 <SendWebPage+0x23c>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8002948:	4848      	ldr	r0, [pc, #288]	; (8002a6c <SendWebPage+0x2e0>)
 800294a:	f7fd fc59 	bl	8000200 <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <SendWebPage+0x2e0>)
 8002954:	4413      	add	r3, r2
 8002956:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <SendWebPage+0x30c>)
 8002958:	4614      	mov	r4, r2
 800295a:	469c      	mov	ip, r3
 800295c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002960:	4665      	mov	r5, ip
 8002962:	4626      	mov	r6, r4
 8002964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002966:	6028      	str	r0, [r5, #0]
 8002968:	6069      	str	r1, [r5, #4]
 800296a:	60aa      	str	r2, [r5, #8]
 800296c:	60eb      	str	r3, [r5, #12]
 800296e:	3410      	adds	r4, #16
 8002970:	f10c 0c10 	add.w	ip, ip, #16
 8002974:	4574      	cmp	r4, lr
 8002976:	d1f3      	bne.n	8002960 <SendWebPage+0x1d4>
 8002978:	4665      	mov	r5, ip
 800297a:	4623      	mov	r3, r4
 800297c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800297e:	6028      	str	r0, [r5, #0]
 8002980:	6069      	str	r1, [r5, #4]
 8002982:	60aa      	str	r2, [r5, #8]
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8002988:	4838      	ldr	r0, [pc, #224]	; (8002a6c <SendWebPage+0x2e0>)
 800298a:	f7fd fc39 	bl	8000200 <strlen>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <SendWebPage+0x2e0>)
 8002994:	4413      	add	r3, r2
 8002996:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <SendWebPage+0x310>)
 8002998:	4614      	mov	r4, r2
 800299a:	469c      	mov	ip, r3
 800299c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80029a0:	4665      	mov	r5, ip
 80029a2:	4626      	mov	r6, r4
 80029a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029a6:	6028      	str	r0, [r5, #0]
 80029a8:	6069      	str	r1, [r5, #4]
 80029aa:	60aa      	str	r2, [r5, #8]
 80029ac:	60eb      	str	r3, [r5, #12]
 80029ae:	3410      	adds	r4, #16
 80029b0:	f10c 0c10 	add.w	ip, ip, #16
 80029b4:	4574      	cmp	r4, lr
 80029b6:	d1f3      	bne.n	80029a0 <SendWebPage+0x214>
 80029b8:	4663      	mov	r3, ip
 80029ba:	4622      	mov	r2, r4
 80029bc:	6810      	ldr	r0, [r2, #0]
 80029be:	6018      	str	r0, [r3, #0]
 80029c0:	8891      	ldrh	r1, [r2, #4]
 80029c2:	7992      	ldrb	r2, [r2, #6]
 80029c4:	8099      	strh	r1, [r3, #4]
 80029c6:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 80029c8:	4828      	ldr	r0, [pc, #160]	; (8002a6c <SendWebPage+0x2e0>)
 80029ca:	f7fd fc19 	bl	8000200 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <SendWebPage+0x2e0>)
 80029d4:	4413      	add	r3, r2
 80029d6:	4a32      	ldr	r2, [pc, #200]	; (8002aa0 <SendWebPage+0x314>)
 80029d8:	4614      	mov	r4, r2
 80029da:	469c      	mov	ip, r3
 80029dc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80029e0:	4665      	mov	r5, ip
 80029e2:	4626      	mov	r6, r4
 80029e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029e6:	6028      	str	r0, [r5, #0]
 80029e8:	6069      	str	r1, [r5, #4]
 80029ea:	60aa      	str	r2, [r5, #8]
 80029ec:	60eb      	str	r3, [r5, #12]
 80029ee:	3410      	adds	r4, #16
 80029f0:	f10c 0c10 	add.w	ip, ip, #16
 80029f4:	4574      	cmp	r4, lr
 80029f6:	d1f3      	bne.n	80029e0 <SendWebPage+0x254>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 80029f8:	481c      	ldr	r0, [pc, #112]	; (8002a6c <SendWebPage+0x2e0>)
 80029fa:	f7fd fc01 	bl	8000200 <strlen>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <SendWebPage+0x2e0>)
 8002a04:	4413      	add	r3, r2
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <SendWebPage+0x318>)
 8002a08:	461d      	mov	r5, r3
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	6028      	str	r0, [r5, #0]
 8002a10:	6069      	str	r1, [r5, #4]
 8002a12:	60aa      	str	r2, [r5, #8]
 8002a14:	60eb      	str	r3, [r5, #12]
 8002a16:	8823      	ldrh	r3, [r4, #0]
 8002a18:	78a2      	ldrb	r2, [r4, #2]
 8002a1a:	822b      	strh	r3, [r5, #16]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8002a20:	4812      	ldr	r0, [pc, #72]	; (8002a6c <SendWebPage+0x2e0>)
 8002a22:	f7fd fbed 	bl	8000200 <strlen>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	f107 030a 	add.w	r3, r7, #10
 8002a2e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002a32:	9100      	str	r1, [sp, #0]
 8002a34:	490d      	ldr	r1, [pc, #52]	; (8002a6c <SendWebPage+0x2e0>)
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 fe98 	bl	800376c <WIFI_SendData>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8002a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <SendWebPage+0x2d4>
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	4807      	ldr	r0, [pc, #28]	; (8002a6c <SendWebPage+0x2e0>)
 8002a50:	f7fd fbd6 	bl	8000200 <strlen>
 8002a54:	4603      	mov	r3, r0
 8002a56:	429c      	cmp	r4, r3
 8002a58:	d002      	beq.n	8002a60 <SendWebPage+0x2d4>
  {
    ret = WIFI_STATUS_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 8002a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3744      	adds	r7, #68	; 0x44
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6c:	200001f0 	.word	0x200001f0
 8002a70:	0800aef0 	.word	0x0800aef0
 8002a74:	0800af30 	.word	0x0800af30
 8002a78:	0800af44 	.word	0x0800af44
 8002a7c:	0800af68 	.word	0x0800af68
 8002a80:	0800afb8 	.word	0x0800afb8
 8002a84:	0800afc8 	.word	0x0800afc8
 8002a88:	0800b008 	.word	0x0800b008
 8002a8c:	0800b00c 	.word	0x0800b00c
 8002a90:	0800b020 	.word	0x0800b020
 8002a94:	0800b058 	.word	0x0800b058
 8002a98:	0800b098 	.word	0x0800b098
 8002a9c:	0800b0d8 	.word	0x0800b0d8
 8002aa0:	0800b110 	.word	0x0800b110
 8002aa4:	0800b140 	.word	0x0800b140

08002aa8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b096      	sub	sp, #88	; 0x58
 8002aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	2244      	movs	r2, #68	; 0x44
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f006 fe3c 	bl	8009734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002aca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ace:	f002 fafd 	bl	80050cc <HAL_PWREx_ControlVoltageScaling>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ad8:	f000 f8de 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002adc:	2310      	movs	r3, #16
 8002ade:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ae8:	2360      	movs	r3, #96	; 0x60
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aec:	2302      	movs	r3, #2
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002af0:	2301      	movs	r3, #1
 8002af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002af4:	2301      	movs	r3, #1
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002af8:	2328      	movs	r3, #40	; 0x28
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b00:	2302      	movs	r3, #2
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b04:	2302      	movs	r3, #2
 8002b06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fb81 	bl	8005214 <HAL_RCC_OscConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002b18:	f000 f8be 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b20:	2303      	movs	r3, #3
 8002b22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	2103      	movs	r1, #3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 ff87 	bl	8005a48 <HAL_RCC_ClockConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002b40:	f000 f8aa 	bl	8002c98 <Error_Handler>
  }
}
 8002b44:	bf00      	nop
 8002b46:	3758      	adds	r7, #88	; 0x58
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <MX_DAC1_Init>:

static void MX_DAC1_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig = {0};
 8002b52:	463b      	mov	r3, r7
 8002b54:	2228      	movs	r2, #40	; 0x28
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 fdeb 	bl	8009734 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_DAC1_Init+0x60>)
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <MX_DAC1_Init+0x64>)
 8002b62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002b64:	4811      	ldr	r0, [pc, #68]	; (8002bac <MX_DAC1_Init+0x60>)
 8002b66:	f001 f861 	bl	8003c2c <HAL_DAC_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002b70:	f000 f892 	bl	8002c98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b80:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_DAC1_Init+0x60>)
 8002b96:	f001 f8e3 	bl	8003d60 <HAL_DAC_ConfigChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8002ba0:	f000 f87a 	bl	8002c98 <Error_Handler>
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200005fc 	.word	0x200005fc
 8002bb0:	40007400 	.word	0x40007400

08002bb4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_GPIO_Init+0x2c>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <MX_GPIO_Init+0x2c>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_GPIO_Init+0x2c>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002bec:	1d39      	adds	r1, r7, #4
 8002bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4803      	ldr	r0, [pc, #12]	; (8002c04 <__io_putchar+0x20>)
 8002bf6:	f005 fcb5 	bl	8008564 <HAL_UART_Transmit>

  return ch;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000a64 	.word	0x20000a64

08002c08 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 8002c12:	bf00      	nop
 8002c14:	1df9      	adds	r1, r7, #7
 8002c16:	f247 5330 	movw	r3, #30000	; 0x7530
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <__io_getchar+0x2c>)
 8002c1e:	f005 fd30 	bl	8008682 <HAL_UART_Receive>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f5      	bne.n	8002c14 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000a64 	.word	0x20000a64

08002c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d005      	beq.n	8002c54 <HAL_GPIO_EXTI_Callback+0x1c>
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d105      	bne.n	8002c5a <HAL_GPIO_EXTI_Callback+0x22>
  {
    case (USER_BUTTON_PIN):
    {
      Button_ISR();
 8002c4e:	f000 f813 	bl	8002c78 <Button_ISR>
      break;
 8002c52:	e003      	b.n	8002c5c <HAL_GPIO_EXTI_Callback+0x24>
    }
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002c54:	f7ff fad2 	bl	80021fc <SPI_WIFI_ISR>
      break;
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_EXTI_Callback+0x24>
    }
    default:
    {
      break;
 8002c5a:	bf00      	nop
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <SPI3_IRQHandler+0x10>)
 8002c6a:	f004 fa5f 	bl	800712c <HAL_SPI_IRQHandler>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200000ac 	.word	0x200000ac

08002c78 <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  button_flag++;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <Button_ISR+0x1c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <Button_ISR+0x1c>)
 8002c88:	701a      	strb	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000120 	.word	0x20000120

08002c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <Error_Handler+0x8>
	...

08002ca4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <BSP_LED_Init+0x28>
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <BSP_LED_Init+0x58>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <BSP_LED_Init+0x58>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <BSP_LED_Init+0x58>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <BSP_LED_Init+0x5c>)
 8002ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce6:	f107 020c 	add.w	r2, r7, #12
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 f9e3 	bl	80040b8 <HAL_GPIO_Init>
}
 8002cf2:	bf00      	nop
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	20000000 	.word	0x20000000

08002d04 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <BSP_LED_On+0x28>)
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d1a:	b291      	uxth	r1, r2
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 fb74 	bl	800440c <HAL_GPIO_WritePin>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000000 	.word	0x20000000

08002d30 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <BSP_LED_Off+0x28>)
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d46:	b291      	uxth	r1, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fb5e 	bl	800440c <HAL_GPIO_WritePin>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000000 	.word	0x20000000

08002d5c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	460a      	mov	r2, r1
 8002d66:	71fb      	strb	r3, [r7, #7]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <BSP_PB_Init+0xa4>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <BSP_PB_Init+0xa4>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <BSP_PB_Init+0xa4>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d112      	bne.n	8002db0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002d94:	2301      	movs	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <BSP_PB_Init+0xa8>)
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	f107 020c 	add.w	r2, r7, #12
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f984 	bl	80040b8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d11f      	bne.n	8002df6 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dba:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dc8:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <BSP_PB_Init+0xa8>)
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 f96d 	bl	80040b8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002dde:	2328      	movs	r3, #40	; 0x28
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	2200      	movs	r2, #0
 8002de4:	210f      	movs	r1, #15
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fef6 	bl	8003bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002dec:	2328      	movs	r3, #40	; 0x28
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 ff0d 	bl	8003c10 <HAL_NVIC_EnableIRQ>
  }
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	20000004 	.word	0x20000004

08002e08 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <BSP_COM_Init+0x2a>
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <BSP_COM_Init+0x48>
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <BSP_COM_Init+0x66>
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6613      	str	r3, [r2, #96]	; 0x60
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <BSP_COM_Init+0xc8>)
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e76:	2302      	movs	r3, #2
 8002e78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002e7e:	2307      	movs	r3, #7
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <BSP_COM_Init+0xcc>)
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	f107 0214 	add.w	r2, r7, #20
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f911 	bl	80040b8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <BSP_COM_Init+0xd0>)
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	f107 0214 	add.w	r2, r7, #20
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 f901 	bl	80040b8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <BSP_COM_Init+0xd4>)
 8002eba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	f005 faf4 	bl	80084b0 <HAL_UART_Init>
}
 8002ec8:	bf00      	nop
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	20000008 	.word	0x20000008

08002ee0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002f00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f06:	2312      	movs	r3, #18
 8002f08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002f12:	2304      	movs	r3, #4
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	481b      	ldr	r0, [pc, #108]	; (8002f8c <I2Cx_MspInit+0xac>)
 8002f1e:	f001 f8cb 	bl	80040b8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4818      	ldr	r0, [pc, #96]	; (8002f8c <I2Cx_MspInit+0xac>)
 8002f2a:	f001 f8c5 	bl	80040b8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f50:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <I2Cx_MspInit+0xa8>)
 8002f58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	210f      	movs	r1, #15
 8002f62:	2021      	movs	r0, #33	; 0x21
 8002f64:	f000 fe38 	bl	8003bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f68:	2021      	movs	r0, #33	; 0x21
 8002f6a:	f000 fe51 	bl	8003c10 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	210f      	movs	r1, #15
 8002f72:	2022      	movs	r0, #34	; 0x22
 8002f74:	f000 fe30 	bl	8003bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f78:	2022      	movs	r0, #34	; 0x22
 8002f7a:	f000 fe49 	bl	8003c10 <HAL_NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	48000400 	.word	0x48000400

08002f90 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <I2Cx_Init+0x54>)
 8002f9c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <I2Cx_Init+0x58>)
 8002fa2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff89 	bl	8002ee0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f001 fa4c 	bl	800446c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f002 f80c 	bl	8004ff4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40005800 	.word	0x40005800
 8002fe8:	00702681 	.word	0x00702681

08002fec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	72fb      	strb	r3, [r7, #11]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	b299      	uxth	r1, r3
 800300e:	88f8      	ldrh	r0, [r7, #6]
 8003010:	893a      	ldrh	r2, [r7, #8]
 8003012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4603      	mov	r3, r0
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 fc14 	bl	8004850 <HAL_I2C_Mem_Read>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d004      	beq.n	800303c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	4619      	mov	r1, r3
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f832 	bl	80030a0 <I2Cx_Error>
  }
  return status;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af04      	add	r7, sp, #16
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	4608      	mov	r0, r1
 8003050:	4611      	mov	r1, r2
 8003052:	461a      	mov	r2, r3
 8003054:	4603      	mov	r3, r0
 8003056:	72fb      	strb	r3, [r7, #11]
 8003058:	460b      	mov	r3, r1
 800305a:	813b      	strh	r3, [r7, #8]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	b299      	uxth	r1, r3
 8003068:	88f8      	ldrh	r0, [r7, #6]
 800306a:	893a      	ldrh	r2, [r7, #8]
 800306c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003070:	9302      	str	r3, [sp, #8]
 8003072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4603      	mov	r3, r0
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f001 fad3 	bl	8004628 <HAL_I2C_Mem_Write>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	4619      	mov	r1, r3
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f805 	bl	80030a0 <I2Cx_Error>
  }
  return status;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f001 fa78 	bl	80045a2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff6c 	bl	8002f90 <I2Cx_Init>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <SENSOR_IO_Init+0x10>)
 80030c6:	f7ff ff63 	bl	8002f90 <I2Cx_Init>
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000a10 	.word	0x20000a10

080030d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	460b      	mov	r3, r1
 80030e0:	71bb      	strb	r3, [r7, #6]
 80030e2:	4613      	mov	r3, r2
 80030e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80030e6:	79bb      	ldrb	r3, [r7, #6]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	79f9      	ldrb	r1, [r7, #7]
 80030ec:	2301      	movs	r3, #1
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	1d7b      	adds	r3, r7, #5
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	4803      	ldr	r0, [pc, #12]	; (8003104 <SENSOR_IO_Write+0x30>)
 80030f8:	f7ff ffa5 	bl	8003046 <I2Cx_WriteMultiple>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000a10 	.word	0x20000a10

08003108 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af02      	add	r7, sp, #8
 800310e:	4603      	mov	r3, r0
 8003110:	460a      	mov	r2, r1
 8003112:	71fb      	strb	r3, [r7, #7]
 8003114:	4613      	mov	r3, r2
 8003116:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800311c:	79bb      	ldrb	r3, [r7, #6]
 800311e:	b29a      	uxth	r2, r3
 8003120:	79f9      	ldrb	r1, [r7, #7]
 8003122:	2301      	movs	r3, #1
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	f107 030f 	add.w	r3, r7, #15
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	4804      	ldr	r0, [pc, #16]	; (8003140 <SENSOR_IO_Read+0x38>)
 8003130:	f7ff ff5c 	bl	8002fec <I2Cx_ReadMultiple>

  return read_value;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000a10 	.word	0x20000a10

08003144 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af02      	add	r7, sp, #8
 800314a:	603a      	str	r2, [r7, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	460b      	mov	r3, r1
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	4613      	mov	r3, r2
 8003158:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	b29a      	uxth	r2, r3
 800315e:	79f9      	ldrb	r1, [r7, #7]
 8003160:	88bb      	ldrh	r3, [r7, #4]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	4804      	ldr	r0, [pc, #16]	; (800317c <SENSOR_IO_ReadMultiple+0x38>)
 800316c:	f7ff ff3e 	bl	8002fec <I2Cx_ReadMultiple>
 8003170:	4603      	mov	r3, r0
 8003172:	b29b      	uxth	r3, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000a10 	.word	0x20000a10

08003180 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <BSP_TSENSOR_Init+0x30>)
 800318c:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <BSP_TSENSOR_Init+0x34>)
 800318e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003190:	f7ff ff96 	bl	80030c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <BSP_TSENSOR_Init+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2100      	movs	r1, #0
 800319c:	20be      	movs	r0, #190	; 0xbe
 800319e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80031a4:	79fb      	ldrb	r3, [r7, #7]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000af8 	.word	0x20000af8
 80031b4:	20000018 	.word	0x20000018

080031b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	20be      	movs	r0, #190	; 0xbe
 80031c4:	4798      	blx	r3
 80031c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000af8 	.word	0x20000af8

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_MspInit+0x44>)
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_MspInit+0x44>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6613      	str	r3, [r2, #96]	; 0x60
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_MspInit+0x44>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_MspInit+0x44>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_MspInit+0x44>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_MspInit+0x44>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_DAC_MspInit+0x74>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d124      	bne.n	8003288 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_DAC_MspInit+0x78>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <HAL_DAC_MspInit+0x78>)
 8003244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003248:	6593      	str	r3, [r2, #88]	; 0x58
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_DAC_MspInit+0x78>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_DAC_MspInit+0x78>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_DAC_MspInit+0x78>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_DAC_MspInit+0x78>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800326e:	2310      	movs	r3, #16
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	2303      	movs	r3, #3
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003284:	f000 ff18 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40007400 	.word	0x40007400
 8003294:	40021000 	.word	0x40021000

08003298 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <MemManage_Handler+0x4>

080032b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <BusFault_Handler+0x4>

080032b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <UsageFault_Handler+0x4>

080032be <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80032ec:	f000 fb78 	bl	80039e0 <HAL_IncTick>
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032f8:	2002      	movs	r0, #2
 80032fa:	f001 f89f 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}

08003302 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  return 1;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <_kill>:

int _kill(int pid, int sig)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800331c:	f006 fafe 	bl	800991c <__errno>
 8003320:	4603      	mov	r3, r0
 8003322:	2216      	movs	r2, #22
 8003324:	601a      	str	r2, [r3, #0]
  return -1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_exit>:

void _exit (int status)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800333a:	f04f 31ff 	mov.w	r1, #4294967295
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffe7 	bl	8003312 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003344:	e7fe      	b.n	8003344 <_exit+0x12>

08003346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	e00a      	b.n	800336e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003358:	f7ff fc56 	bl	8002c08 <__io_getchar>
 800335c:	4601      	mov	r1, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	60ba      	str	r2, [r7, #8]
 8003364:	b2ca      	uxtb	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	dbf0      	blt.n	8003358 <_read+0x12>
  }

  return len;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e009      	b.n	80033a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	60ba      	str	r2, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fc22 	bl	8002be4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dbf1      	blt.n	8003392 <_write+0x12>
  }
  return len;
 80033ae:	687b      	ldr	r3, [r7, #4]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_close>:

int _close(int file)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e0:	605a      	str	r2, [r3, #4]
  return 0;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_isatty>:

int _isatty(int file)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033f8:	2301      	movs	r3, #1
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <_sbrk+0x5c>)
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <_sbrk+0x60>)
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <_sbrk+0x64>)
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <_sbrk+0x68>)
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <_sbrk+0x64>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d207      	bcs.n	8003460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003450:	f006 fa64 	bl	800991c <__errno>
 8003454:	4603      	mov	r3, r0
 8003456:	220c      	movs	r2, #12
 8003458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	e009      	b.n	8003474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <_sbrk+0x64>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <_sbrk+0x64>)
 8003470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200a0000 	.word	0x200a0000
 8003480:	00000400 	.word	0x00000400
 8003484:	20000afc 	.word	0x20000afc
 8003488:	200015a0 	.word	0x200015a0

0800348c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <SystemInit+0x64>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <SystemInit+0x64>)
 8003498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800349c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <SystemInit+0x68>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <SystemInit+0x68>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <SystemInit+0x68>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <SystemInit+0x68>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <SystemInit+0x68>)
 80034b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80034bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80034c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <SystemInit+0x68>)
 80034c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <SystemInit+0x68>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <SystemInit+0x68>)
 80034d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034d6:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <SystemInit+0x68>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SystemInit+0x64>)
 80034de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034e2:	609a      	str	r2, [r3, #8]
#endif
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	40021000 	.word	0x40021000

080034f8 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <WIFI_Init+0x40>)
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <WIFI_Init+0x44>)
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <WIFI_Init+0x48>)
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <WIFI_Init+0x4c>)
 800350e:	490e      	ldr	r1, [pc, #56]	; (8003548 <WIFI_Init+0x50>)
 8003510:	480e      	ldr	r0, [pc, #56]	; (800354c <WIFI_Init+0x54>)
 8003512:	f7fd fe89 	bl	8001228 <ES_WIFI_RegisterBusIO>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800351c:	480b      	ldr	r0, [pc, #44]	; (800354c <WIFI_Init+0x54>)
 800351e:	f7fd fe4f 	bl	80011c0 <ES_WIFI_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800352c:	79fb      	ldrb	r3, [r7, #7]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	08001f21 	.word	0x08001f21
 800353c:	08002015 	.word	0x08002015
 8003540:	080020f1 	.word	0x080020f1
 8003544:	08001e09 	.word	0x08001e09
 8003548:	08001c6d 	.word	0x08001c6d
 800354c:	20000b00 	.word	0x20000b00

08003550 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <WIFI_Connect+0x40>)
 800356a:	f7fd fe91 	bl	8001290 <ES_WIFI_Connect>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <WIFI_Connect+0x40>)
 8003576:	f7fd ff33 	bl	80013e0 <ES_WIFI_GetNetworkSettings>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000b00 	.word	0x20000b00

08003594 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <WIFI_GetMAC_Address+0x32>
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <WIFI_GetMAC_Address+0x3c>)
 80035b8:	f7fd ff3c 	bl	8001434 <ES_WIFI_GetMACAddress>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000b00 	.word	0x20000b00

080035d4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <WIFI_GetIP_Address+0x38>
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d90d      	bls.n	800360c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <WIFI_GetIP_Address+0x44>)
 80035f2:	f7fd fec5 	bl	8001380 <ES_WIFI_IsConnected>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <WIFI_GetIP_Address+0x38>
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <WIFI_GetIP_Address+0x44>)
 80035fe:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8003602:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000b00 	.word	0x20000b00

0800361c <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	72fb      	strb	r3, [r7, #11]
 800362a:	4613      	mov	r3, r2
 800362c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 800363a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800363c:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4619      	mov	r1, r3
 800365a:	4807      	ldr	r0, [pc, #28]	; (8003678 <WIFI_StartServer+0x5c>)
 800365c:	f7fd ff20 	bl	80014a0 <ES_WIFI_StartServerSingleConn>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000b00 	.word	0x20000b00

0800367c <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	461a      	mov	r2, r3
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	481b      	ldr	r0, [pc, #108]	; (8003708 <WIFI_WaitServerConnection+0x8c>)
 800369a:	f7fd ffad 	bl	80015f8 <ES_WIFI_WaitServerConnection>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80036a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d110      	bne.n	80036ce <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 80036b2:	8aba      	ldrh	r2, [r7, #20]
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <WIFI_WaitServerConnection+0x4e>
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d902      	bls.n	80036ca <WIFI_WaitServerConnection+0x4e>
 80036c4:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e017      	b.n	80036fe <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 80036ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d112      	bne.n	80036fc <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <WIFI_WaitServerConnection+0x7c>
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d904      	bls.n	80036f8 <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 80036ee:	2204      	movs	r2, #4
 80036f0:	2100      	movs	r1, #0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f006 f81e 	bl	8009734 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 80036f8:	2305      	movs	r3, #5
 80036fa:	e000      	b.n	80036fe <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3728      	adds	r7, #40	; 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000b00 	.word	0x20000b00

0800370c <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	4806      	ldr	r0, [pc, #24]	; (8003738 <WIFI_CloseServerConnection+0x2c>)
 8003720:	f7fe f85c 	bl	80017dc <ES_WIFI_CloseServerConnection>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000b00 	.word	0x20000b00

0800373c <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <WIFI_StopServer+0x2c>)
 8003750:	f7fe f880 	bl	8001854 <ES_WIFI_StopServerSingleConn>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000b00 	.word	0x20000b00

0800376c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	b2d9      	uxtb	r1, r3
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4806      	ldr	r0, [pc, #24]	; (80037ac <WIFI_SendData+0x40>)
 8003794:	f7fe f89e 	bl	80018d4 <ES_WIFI_SendData>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000b00 	.word	0x20000b00

080037b0 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	b2d9      	uxtb	r1, r3
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <WIFI_ReceiveData+0x40>)
 80037d8:	f7fe f902 	bl	80019e0 <ES_WIFI_ReceiveData>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000b00 	.word	0x20000b00

080037f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800382c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037f8:	f7ff fe48 	bl	800348c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <LoopForever+0x6>)
  ldr r1, =_edata
 80037fe:	490d      	ldr	r1, [pc, #52]	; (8003834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <LoopForever+0xe>)
  movs r3, #0
 8003802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003804:	e002      	b.n	800380c <LoopCopyDataInit>

08003806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800380a:	3304      	adds	r3, #4

0800380c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800380c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003810:	d3f9      	bcc.n	8003806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003814:	4c0a      	ldr	r4, [pc, #40]	; (8003840 <LoopForever+0x16>)
  movs r3, #0
 8003816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003818:	e001      	b.n	800381e <LoopFillZerobss>

0800381a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800381a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800381c:	3204      	adds	r2, #4

0800381e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003820:	d3fb      	bcc.n	800381a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003822:	f006 f881 	bl	8009928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003826:	f7fe fcf9 	bl	800221c <main>

0800382a <LoopForever>:

LoopForever:
    b LoopForever
 800382a:	e7fe      	b.n	800382a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800382c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003834:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003838:	0800baa8 	.word	0x0800baa8
  ldr r2, =_sbss
 800383c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003840:	2000159c 	.word	0x2000159c

08003844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003844:	e7fe      	b.n	8003844 <ADC1_IRQHandler>

08003846 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	6039      	str	r1, [r7, #0]
 8003850:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2120      	movs	r1, #32
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fc55 	bl	8003108 <SENSOR_IO_Read>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	f023 0303 	bic.w	r3, r3, #3
 8003878:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003888:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	2120      	movs	r1, #32
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fc1e 	bl	80030d4 <SENSOR_IO_Write>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	b2d8      	uxtb	r0, r3
 80038ae:	f107 0208 	add.w	r2, r7, #8
 80038b2:	2302      	movs	r3, #2
 80038b4:	21b2      	movs	r1, #178	; 0xb2
 80038b6:	f7ff fc45 	bl	8003144 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2135      	movs	r1, #53	; 0x35
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fc21 	bl	8003108 <SENSOR_IO_Read>
 80038c6:	4603      	mov	r3, r0
 80038c8:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	b21b      	sxth	r3, r3
 80038d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d4:	b21a      	sxth	r2, r3
 80038d6:	7a3b      	ldrb	r3, [r7, #8]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e8:	b21a      	sxth	r2, r3
 80038ea:	7a7b      	ldrb	r3, [r7, #9]
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	4313      	orrs	r3, r2
 80038f0:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80038f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038f6:	10db      	asrs	r3, r3, #3
 80038f8:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80038fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038fe:	10db      	asrs	r3, r3, #3
 8003900:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	b2d8      	uxtb	r0, r3
 8003906:	f107 0208 	add.w	r2, r7, #8
 800390a:	2304      	movs	r3, #4
 800390c:	21bc      	movs	r1, #188	; 0xbc
 800390e:	f7ff fc19 	bl	8003144 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003912:	7a7b      	ldrb	r3, [r7, #9]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	b21a      	sxth	r2, r3
 8003918:	7a3b      	ldrb	r3, [r7, #8]
 800391a:	b21b      	sxth	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b21a      	sxth	r2, r3
 8003926:	7abb      	ldrb	r3, [r7, #10]
 8003928:	b21b      	sxth	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	f107 0208 	add.w	r2, r7, #8
 8003936:	2302      	movs	r3, #2
 8003938:	21aa      	movs	r1, #170	; 0xaa
 800393a:	f7ff fc03 	bl	8003144 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800393e:	7a7b      	ldrb	r3, [r7, #9]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	b21a      	sxth	r2, r3
 8003944:	7a3b      	ldrb	r3, [r7, #8]
 8003946:	b21b      	sxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800394c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003950:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800395e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003962:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003970:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003974:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003978:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399a:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	ee07 3a90 	vmov	s15, r3
}
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b8:	2003      	movs	r0, #3
 80039ba:	f000 f902 	bl	8003bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039be:	200f      	movs	r0, #15
 80039c0:	f004 fcde 	bl	8008380 <HAL_InitTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	71fb      	strb	r3, [r7, #7]
 80039ce:	e001      	b.n	80039d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039d0:	f7ff fc00 	bl	80031d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_IncTick+0x20>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_IncTick+0x24>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_IncTick+0x24>)
 80039f2:	6013      	str	r3, [r2, #0]
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	2000002c 	.word	0x2000002c
 8003a04:	20001400 	.word	0x20001400

08003a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_GetTick+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20001400 	.word	0x20001400

08003a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff ffee 	bl	8003a08 <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d005      	beq.n	8003a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_Delay+0x44>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a46:	bf00      	nop
 8003a48:	f7ff ffde 	bl	8003a08 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d8f7      	bhi.n	8003a48 <HAL_Delay+0x28>
  {
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000002c 	.word	0x2000002c

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	db0b      	blt.n	8003af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	4907      	ldr	r1, [pc, #28]	; (8003b04 <__NVIC_EnableIRQ+0x38>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2001      	movs	r0, #1
 8003aee:	fa00 f202 	lsl.w	r2, r0, r2
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000e100 	.word	0xe000e100

08003b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	; (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f1c3 0307 	rsb	r3, r3, #7
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf28      	it	cs
 8003b7a:	2304      	movcs	r3, #4
 8003b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d902      	bls.n	8003b8c <NVIC_EncodePriority+0x30>
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3b03      	subs	r3, #3
 8003b8a:	e000      	b.n	8003b8e <NVIC_EncodePriority+0x32>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43d9      	mvns	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	4313      	orrs	r3, r2
         );
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff4c 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bea:	f7ff ff61 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003bee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f7ff ffb1 	bl	8003b5c <NVIC_EncodePriority>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ff80 	bl	8003b08 <__NVIC_SetPriority>
}
 8003c08:	bf00      	nop
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff54 	bl	8003acc <__NVIC_EnableIRQ>
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e014      	b.n	8003c68 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	791b      	ldrb	r3, [r3, #4]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fae4 	bl	800321c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	795b      	ldrb	r3, [r3, #5]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_DAC_Start+0x16>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e040      	b.n	8003d08 <HAL_DAC_Start+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d11d      	bne.n	8003cfa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e014      	b.n	8003cfa <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d107      	bne.n	8003cfa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0202 	orr.w	r2, r2, #2
 8003cf8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	3308      	adds	r3, #8
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e004      	b.n	8003d48 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	3314      	adds	r3, #20
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	795b      	ldrb	r3, [r3, #5]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_DAC_ConfigChannel+0x1c>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e137      	b.n	8003fec <HAL_DAC_ConfigChannel+0x28c>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2202      	movs	r2, #2
 8003d86:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	f040 8081 	bne.w	8003e94 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d92:	f7ff fe39 	bl	8003a08 <HAL_GetTick>
 8003d96:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d140      	bne.n	8003e20 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d9e:	e018      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003da0:	f7ff fe32 	bl	8003a08 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d911      	bls.n	8003dd2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f043 0208 	orr.w	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e10c      	b.n	8003fec <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1df      	bne.n	8003da0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7ff fe1d 	bl	8003a20 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	69d2      	ldr	r2, [r2, #28]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
 8003df0:	e023      	b.n	8003e3a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003df2:	f7ff fe09 	bl	8003a08 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d90f      	bls.n	8003e20 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da0a      	bge.n	8003e20 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0e5      	b.n	8003fec <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dbe3      	blt.n	8003df2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7ff fdf8 	bl	8003a20 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	69d2      	ldr	r2, [r2, #28]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	ea02 0103 	and.w	r1, r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	21ff      	movs	r1, #255	; 0xff
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	ea02 0103 	and.w	r1, r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d11d      	bne.n	8003ed8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	221f      	movs	r2, #31
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d104      	bne.n	8003f88 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e018      	b.n	8003fba <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e00f      	b.n	8003fba <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f9a:	f001 ff1b 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8003f9e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_DAC_ConfigChannel+0x294>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d904      	bls.n	8003fb2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e003      	b.n	8003fba <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fb8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	22c0      	movs	r2, #192	; 0xc0
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	400a      	ands	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	04c4b400 	.word	0x04c4b400

08003ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d005      	beq.n	800401c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e047      	b.n	80040ac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020e 	bic.w	r2, r2, #14
 800402a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	f003 021c 	and.w	r2, r3, #28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004068:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800408a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    }
  }
  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c6:	e166      	b.n	8004396 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2101      	movs	r1, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8158 	beq.w	8004390 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d005      	beq.n	80040f8 <HAL_GPIO_Init+0x40>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d130      	bne.n	800415a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800412e:	2201      	movs	r2, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0201 	and.w	r2, r3, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d017      	beq.n	8004196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	2203      	movs	r2, #3
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d123      	bne.n	80041ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	08da      	lsrs	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3208      	adds	r2, #8
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	220f      	movs	r2, #15
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	08da      	lsrs	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3208      	adds	r2, #8
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0203 	and.w	r2, r3, #3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80b2 	beq.w	8004390 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422c:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <HAL_GPIO_Init+0x2fc>)
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_GPIO_Init+0x2fc>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6613      	str	r3, [r2, #96]	; 0x60
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_GPIO_Init+0x2fc>)
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004244:	4a5c      	ldr	r2, [pc, #368]	; (80043b8 <HAL_GPIO_Init+0x300>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800426e:	d02b      	beq.n	80042c8 <HAL_GPIO_Init+0x210>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a52      	ldr	r2, [pc, #328]	; (80043bc <HAL_GPIO_Init+0x304>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d025      	beq.n	80042c4 <HAL_GPIO_Init+0x20c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a51      	ldr	r2, [pc, #324]	; (80043c0 <HAL_GPIO_Init+0x308>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d01f      	beq.n	80042c0 <HAL_GPIO_Init+0x208>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a50      	ldr	r2, [pc, #320]	; (80043c4 <HAL_GPIO_Init+0x30c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d019      	beq.n	80042bc <HAL_GPIO_Init+0x204>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a4f      	ldr	r2, [pc, #316]	; (80043c8 <HAL_GPIO_Init+0x310>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_GPIO_Init+0x200>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a4e      	ldr	r2, [pc, #312]	; (80043cc <HAL_GPIO_Init+0x314>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00d      	beq.n	80042b4 <HAL_GPIO_Init+0x1fc>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a4d      	ldr	r2, [pc, #308]	; (80043d0 <HAL_GPIO_Init+0x318>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <HAL_GPIO_Init+0x1f8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a4c      	ldr	r2, [pc, #304]	; (80043d4 <HAL_GPIO_Init+0x31c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_GPIO_Init+0x1f4>
 80042a8:	2307      	movs	r3, #7
 80042aa:	e00e      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042ac:	2308      	movs	r3, #8
 80042ae:	e00c      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042b0:	2306      	movs	r3, #6
 80042b2:	e00a      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042b4:	2305      	movs	r3, #5
 80042b6:	e008      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042b8:	2304      	movs	r3, #4
 80042ba:	e006      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042bc:	2303      	movs	r3, #3
 80042be:	e004      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e002      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_GPIO_Init+0x212>
 80042c8:	2300      	movs	r3, #0
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	f002 0203 	and.w	r2, r2, #3
 80042d0:	0092      	lsls	r2, r2, #2
 80042d2:	4093      	lsls	r3, r2
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042da:	4937      	ldr	r1, [pc, #220]	; (80043b8 <HAL_GPIO_Init+0x300>)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3302      	adds	r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_GPIO_Init+0x320>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800430c:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <HAL_GPIO_Init+0x320>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_GPIO_Init+0x320>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004336:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <HAL_GPIO_Init+0x320>)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_GPIO_Init+0x320>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_GPIO_Init+0x320>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_GPIO_Init+0x320>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800438a:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <HAL_GPIO_Init+0x320>)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3301      	adds	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f ae91 	bne.w	80040c8 <HAL_GPIO_Init+0x10>
  }
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40010000 	.word	0x40010000
 80043bc:	48000400 	.word	0x48000400
 80043c0:	48000800 	.word	0x48000800
 80043c4:	48000c00 	.word	0x48000c00
 80043c8:	48001000 	.word	0x48001000
 80043cc:	48001400 	.word	0x48001400
 80043d0:	48001800 	.word	0x48001800
 80043d4:	48001c00 	.word	0x48001c00
 80043d8:	40010400 	.word	0x40010400

080043dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	887b      	ldrh	r3, [r7, #2]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004428:	e002      	b.n	8004430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fbec 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e08d      	b.n	800459a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f8b4 	bl	8004600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e006      	b.n	80044f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d108      	bne.n	800450e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	e007      	b.n	800451e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800451c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e021      	b.n	80045f8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f821 	bl	8004614 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	460b      	mov	r3, r1
 800463c:	813b      	strh	r3, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b20      	cmp	r3, #32
 800464c:	f040 80f9 	bne.w	8004842 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_I2C_Mem_Write+0x34>
 8004656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004662:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0ed      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_I2C_Mem_Write+0x4e>
 8004672:	2302      	movs	r3, #2
 8004674:	e0e6      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800467e:	f7ff f9c3 	bl	8003a08 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2319      	movs	r3, #25
 800468a:	2201      	movs	r2, #1
 800468c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fac3 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0d1      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	; 0x21
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a3a      	ldr	r2, [r7, #32]
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c8:	88f8      	ldrh	r0, [r7, #6]
 80046ca:	893a      	ldrh	r2, [r7, #8]
 80046cc:	8979      	ldrh	r1, [r7, #10]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4603      	mov	r3, r0
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9d3 	bl	8004a84 <I2C_RequestMemoryWrite>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0a9      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2bff      	cmp	r3, #255	; 0xff
 80046f8:	d90e      	bls.n	8004718 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	22ff      	movs	r2, #255	; 0xff
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	b2da      	uxtb	r2, r3
 8004706:	8979      	ldrh	r1, [r7, #10]
 8004708:	2300      	movs	r3, #0
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fc3d 	bl	8004f90 <I2C_TransferConfig>
 8004716:	e00f      	b.n	8004738 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	8979      	ldrh	r1, [r7, #10]
 800472a:	2300      	movs	r3, #0
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fc2c 	bl	8004f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fabc 	bl	8004cba <I2C_WaitOnTXISFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e07b      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d034      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x1c8>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d130      	bne.n	80047f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa3f 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04d      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d90e      	bls.n	80047d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fbe1 	bl	8004f90 <I2C_TransferConfig>
 80047ce:	e00f      	b.n	80047f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	8979      	ldrh	r1, [r7, #10]
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fbd0 	bl	8004f90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d19e      	bne.n	8004738 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 faa2 	bl	8004d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01a      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2220      	movs	r2, #32
 8004814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <HAL_I2C_Mem_Write+0x224>)
 8004822:	400b      	ands	r3, r1
 8004824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	fe00e800 	.word	0xfe00e800

08004850 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b20      	cmp	r3, #32
 8004874:	f040 80fd 	bne.w	8004a72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_I2C_Mem_Read+0x34>
 800487e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0f1      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2C_Mem_Read+0x4e>
 800489a:	2302      	movs	r3, #2
 800489c:	e0ea      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a6:	f7ff f8af 	bl	8003a08 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2319      	movs	r3, #25
 80048b2:	2201      	movs	r2, #1
 80048b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f9af 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0d5      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2222      	movs	r2, #34	; 0x22
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2240      	movs	r2, #64	; 0x40
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f0:	88f8      	ldrh	r0, [r7, #6]
 80048f2:	893a      	ldrh	r2, [r7, #8]
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4603      	mov	r3, r0
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f913 	bl	8004b2c <I2C_RequestMemoryRead>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0ad      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2bff      	cmp	r3, #255	; 0xff
 8004920:	d90e      	bls.n	8004940 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	b2da      	uxtb	r2, r3
 800492e:	8979      	ldrh	r1, [r7, #10]
 8004930:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_I2C_Mem_Read+0x22c>)
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fb29 	bl	8004f90 <I2C_TransferConfig>
 800493e:	e00f      	b.n	8004960 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494e:	b2da      	uxtb	r2, r3
 8004950:	8979      	ldrh	r1, [r7, #10]
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_I2C_Mem_Read+0x22c>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fb18 	bl	8004f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2200      	movs	r2, #0
 8004968:	2104      	movs	r1, #4
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f956 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07c      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d034      	beq.n	8004a20 <HAL_I2C_Mem_Read+0x1d0>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d130      	bne.n	8004a20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	2200      	movs	r2, #0
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f927 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04d      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2bff      	cmp	r3, #255	; 0xff
 80049e0:	d90e      	bls.n	8004a00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	8979      	ldrh	r1, [r7, #10]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fac9 	bl	8004f90 <I2C_TransferConfig>
 80049fe:	e00f      	b.n	8004a20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	8979      	ldrh	r1, [r7, #10]
 8004a12:	2300      	movs	r3, #0
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fab8 	bl	8004f90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d19a      	bne.n	8004960 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f98a 	bl	8004d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e01a      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2220      	movs	r2, #32
 8004a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_I2C_Mem_Read+0x230>)
 8004a52:	400b      	ands	r3, r1
 8004a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	80002400 	.word	0x80002400
 8004a80:	fe00e800 	.word	0xfe00e800

08004a84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	8979      	ldrh	r1, [r7, #10]
 8004aa4:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <I2C_RequestMemoryWrite+0xa4>)
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fa6f 	bl	8004f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f8ff 	bl	8004cba <I2C_WaitOnTXISFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02c      	b.n	8004b20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad6:	e015      	b.n	8004b04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	69b9      	ldr	r1, [r7, #24]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f8e5 	bl	8004cba <I2C_WaitOnTXISFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e012      	b.n	8004b20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004afa:	893b      	ldrh	r3, [r7, #8]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f884 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	80002000 	.word	0x80002000

08004b2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	817b      	strh	r3, [r7, #10]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	813b      	strh	r3, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	8979      	ldrh	r1, [r7, #10]
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <I2C_RequestMemoryRead+0xa4>)
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa1c 	bl	8004f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	69b9      	ldr	r1, [r7, #24]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f8ac 	bl	8004cba <I2C_WaitOnTXISFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e02c      	b.n	8004bc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b72:	893b      	ldrh	r3, [r7, #8]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7c:	e015      	b.n	8004baa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f892 	bl	8004cba <I2C_WaitOnTXISFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e012      	b.n	8004bc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba0:	893b      	ldrh	r3, [r7, #8]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f831 	bl	8004c1c <I2C_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	80002000 	.word	0x80002000

08004bd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d103      	bne.n	8004bf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d007      	beq.n	8004c10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	619a      	str	r2, [r3, #24]
  }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2c:	e031      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d02d      	beq.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fe fee7 	bl	8003a08 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d122      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d113      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00f      	b.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d0be      	beq.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc6:	e033      	b.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f87f 	bl	8004dd0 <I2C_IsErrorOccurred>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e031      	b.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d025      	beq.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fe fe90 	bl	8003a08 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11a      	bne.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d013      	beq.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e007      	b.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d1c4      	bne.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d54:	e02f      	b.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f838 	bl	8004dd0 <I2C_IsErrorOccurred>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e02d      	b.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fe4d 	bl	8003a08 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11a      	bne.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d013      	beq.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e007      	b.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d1c8      	bne.n	8004d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d068      	beq.n	8004ece <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2210      	movs	r2, #16
 8004e02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e04:	e049      	b.n	8004e9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d045      	beq.n	8004e9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fe fdfb 	bl	8003a08 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_IsErrorOccurred+0x54>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d13a      	bne.n	8004e9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e46:	d121      	bne.n	8004e8c <I2C_IsErrorOccurred+0xbc>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4e:	d01d      	beq.n	8004e8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d01a      	beq.n	8004e8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e66:	f7fe fdcf 	bl	8003a08 <HAL_GetTick>
 8004e6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	e00e      	b.n	8004e8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e6e:	f7fe fdcb 	bl	8003a08 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b19      	cmp	r3, #25
 8004e7a:	d907      	bls.n	8004e8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f043 0320 	orr.w	r3, r3, #32
 8004e82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e8a:	e006      	b.n	8004e9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d1e9      	bne.n	8004e6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d003      	beq.n	8004eb0 <I2C_IsErrorOccurred+0xe0>
 8004ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0aa      	beq.n	8004e06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01c      	beq.n	8004f7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff fe45 	bl	8004bd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <I2C_IsErrorOccurred+0x1bc>)
 8004f56:	400b      	ands	r3, r1
 8004f58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	fe00e800 	.word	0xfe00e800

08004f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fa8:	7a7b      	ldrb	r3, [r7, #9]
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	0d5b      	lsrs	r3, r3, #21
 8004fca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <I2C_TransferConfig+0x60>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	ea02 0103 	and.w	r1, r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	03ff63ff 	.word	0x03ff63ff

08004ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b20      	cmp	r3, #32
 8005008:	d138      	bne.n	800507c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005014:	2302      	movs	r3, #2
 8005016:	e032      	b.n	800507e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2224      	movs	r2, #36	; 0x24
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d102      	bne.n	80050a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800509e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a2:	e00b      	b.n	80050bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80050a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b2:	d102      	bne.n	80050ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80050b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b8:	e000      	b.n	80050bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80050ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40007000 	.word	0x40007000

080050cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d141      	bne.n	800515e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050da:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d131      	bne.n	800514c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e8:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ee:	4a46      	ldr	r2, [pc, #280]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005100:	4a41      	ldr	r2, [pc, #260]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005108:	4b40      	ldr	r3, [pc, #256]	; (800520c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2232      	movs	r2, #50	; 0x32
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a3f      	ldr	r2, [pc, #252]	; (8005210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	0c9b      	lsrs	r3, r3, #18
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800511e:	e002      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d102      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f2      	bne.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800513a:	4b33      	ldr	r3, [pc, #204]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d158      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e057      	b.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800514c:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800515c:	e04d      	b.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d141      	bne.n	80051ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005166:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d131      	bne.n	80051d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517a:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800518c:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2232      	movs	r2, #50	; 0x32
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	0c9b      	lsrs	r3, r3, #18
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051aa:	e002      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d102      	bne.n	80051c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f2      	bne.n	80051ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d2:	d112      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e011      	b.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051e8:	e007      	b.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40007000 	.word	0x40007000
 800520c:	20000014 	.word	0x20000014
 8005210:	431bde83 	.word	0x431bde83

08005214 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f000 bc08 	b.w	8005a38 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005228:	4b96      	ldr	r3, [pc, #600]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005232:	4b94      	ldr	r3, [pc, #592]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80e4 	beq.w	8005412 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <HAL_RCC_OscConfig+0x4c>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	f040 808b 	bne.w	800536e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	f040 8087 	bne.w	800536e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005260:	4b88      	ldr	r3, [pc, #544]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_OscConfig+0x64>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e3df      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	4b81      	ldr	r3, [pc, #516]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <HAL_RCC_OscConfig+0x7e>
 8005288:	4b7e      	ldr	r3, [pc, #504]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005290:	e005      	b.n	800529e <HAL_RCC_OscConfig+0x8a>
 8005292:	4b7c      	ldr	r3, [pc, #496]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529e:	4293      	cmp	r3, r2
 80052a0:	d223      	bcs.n	80052ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fdfe 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e3c0      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b6:	4b73      	ldr	r3, [pc, #460]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a72      	ldr	r2, [pc, #456]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b70      	ldr	r3, [pc, #448]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	496d      	ldr	r1, [pc, #436]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d4:	4b6b      	ldr	r3, [pc, #428]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	4968      	ldr	r1, [pc, #416]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]
 80052e8:	e025      	b.n	8005336 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ea:	4b66      	ldr	r3, [pc, #408]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a65      	ldr	r2, [pc, #404]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052f0:	f043 0308 	orr.w	r3, r3, #8
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4960      	ldr	r1, [pc, #384]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005308:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	495b      	ldr	r1, [pc, #364]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fdbe 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e380      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005336:	f000 fcc1 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b51      	ldr	r3, [pc, #324]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	4950      	ldr	r1, [pc, #320]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005348:	5ccb      	ldrb	r3, [r1, r3]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	4a4e      	ldr	r2, [pc, #312]	; (800548c <HAL_RCC_OscConfig+0x278>)
 8005354:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005356:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <HAL_RCC_OscConfig+0x27c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f003 f810 	bl	8008380 <HAL_InitTick>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d052      	beq.n	8005410 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	e364      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d032      	beq.n	80053dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a42      	ldr	r2, [pc, #264]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005382:	f7fe fb41 	bl	8003a08 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800538a:	f7fe fb3d 	bl	8003a08 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e34d      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800539c:	4b39      	ldr	r3, [pc, #228]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a35      	ldr	r2, [pc, #212]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053ae:	f043 0308 	orr.w	r3, r3, #8
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4930      	ldr	r1, [pc, #192]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	492b      	ldr	r1, [pc, #172]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
 80053da:	e01a      	b.n	8005412 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e8:	f7fe fb0e 	bl	8003a08 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053f0:	f7fe fb0a 	bl	8003a08 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e31a      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x1dc>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005410:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d073      	beq.n	8005506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x21c>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d10e      	bne.n	8005448 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d10b      	bne.n	8005448 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d063      	beq.n	8005504 <HAL_RCC_OscConfig+0x2f0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d15f      	bne.n	8005504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e2f7      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005450:	d106      	bne.n	8005460 <HAL_RCC_OscConfig+0x24c>
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a0b      	ldr	r2, [pc, #44]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e025      	b.n	80054ac <HAL_RCC_OscConfig+0x298>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005468:	d114      	bne.n	8005494 <HAL_RCC_OscConfig+0x280>
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a05      	ldr	r2, [pc, #20]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b03      	ldr	r3, [pc, #12]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a02      	ldr	r2, [pc, #8]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e013      	b.n	80054ac <HAL_RCC_OscConfig+0x298>
 8005484:	40021000 	.word	0x40021000
 8005488:	0800b154 	.word	0x0800b154
 800548c:	20000014 	.word	0x20000014
 8005490:	20000028 	.word	0x20000028
 8005494:	4ba0      	ldr	r3, [pc, #640]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a9f      	ldr	r2, [pc, #636]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a9c      	ldr	r2, [pc, #624]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fe faa8 	bl	8003a08 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fe faa4 	bl	8003a08 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e2b4      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ce:	4b92      	ldr	r3, [pc, #584]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x2a8>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe fa94 	bl	8003a08 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe fa90 	bl	8003a08 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e2a0      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054f6:	4b88      	ldr	r3, [pc, #544]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x2d0>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d060      	beq.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d005      	beq.n	8005524 <HAL_RCC_OscConfig+0x310>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d119      	bne.n	8005552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d116      	bne.n	8005552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005524:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_OscConfig+0x328>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e27d      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	4b76      	ldr	r3, [pc, #472]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	4973      	ldr	r1, [pc, #460]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005550:	e040      	b.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d023      	beq.n	80055a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800555a:	4b6f      	ldr	r3, [pc, #444]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6e      	ldr	r2, [pc, #440]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fe fa4f 	bl	8003a08 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fe fa4b 	bl	8003a08 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e25b      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005580:	4b65      	ldr	r3, [pc, #404]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b62      	ldr	r3, [pc, #392]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	061b      	lsls	r3, r3, #24
 800559a:	495f      	ldr	r1, [pc, #380]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
 80055a0:	e018      	b.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a5c      	ldr	r2, [pc, #368]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fe fa2b 	bl	8003a08 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b6:	f7fe fa27 	bl	8003a08 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e237      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d03c      	beq.n	800565a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01c      	beq.n	8005622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e8:	4b4b      	ldr	r3, [pc, #300]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80055ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ee:	4a4a      	ldr	r2, [pc, #296]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fe fa06 	bl	8003a08 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005600:	f7fe fa02 	bl	8003a08 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e212      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005612:	4b41      	ldr	r3, [pc, #260]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ef      	beq.n	8005600 <HAL_RCC_OscConfig+0x3ec>
 8005620:	e01b      	b.n	800565a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005622:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005628:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fe f9e9 	bl	8003a08 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563a:	f7fe f9e5 	bl	8003a08 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e1f5      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564c:	4b32      	ldr	r3, [pc, #200]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ef      	bne.n	800563a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80a6 	beq.w	80057b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005678:	4b27      	ldr	r3, [pc, #156]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	4a26      	ldr	r2, [pc, #152]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800567e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005682:	6593      	str	r3, [r2, #88]	; 0x58
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005690:	2301      	movs	r3, #1
 8005692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <HAL_RCC_OscConfig+0x508>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d118      	bne.n	80056d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <HAL_RCC_OscConfig+0x508>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_RCC_OscConfig+0x508>)
 80056a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ac:	f7fe f9ac 	bl	8003a08 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b4:	f7fe f9a8 	bl	8003a08 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1b8      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c6:	4b15      	ldr	r3, [pc, #84]	; (800571c <HAL_RCC_OscConfig+0x508>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d108      	bne.n	80056ec <HAL_RCC_OscConfig+0x4d8>
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ea:	e029      	b.n	8005740 <HAL_RCC_OscConfig+0x52c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b05      	cmp	r3, #5
 80056f2:	d115      	bne.n	8005720 <HAL_RCC_OscConfig+0x50c>
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 80056fc:	f043 0304 	orr.w	r3, r3, #4
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	4a03      	ldr	r2, [pc, #12]	; (8005718 <HAL_RCC_OscConfig+0x504>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005714:	e014      	b.n	8005740 <HAL_RCC_OscConfig+0x52c>
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	40007000 	.word	0x40007000
 8005720:	4b9d      	ldr	r3, [pc, #628]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	4a9c      	ldr	r2, [pc, #624]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005730:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	4a98      	ldr	r2, [pc, #608]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fe f95e 	bl	8003a08 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fe f95a 	bl	8003a08 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e168      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b8c      	ldr	r3, [pc, #560]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ed      	beq.n	8005750 <HAL_RCC_OscConfig+0x53c>
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fe f947 	bl	8003a08 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fe f943 	bl	8003a08 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e151      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005794:	4b80      	ldr	r3, [pc, #512]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ed      	bne.n	800577e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a2:	7ffb      	ldrb	r3, [r7, #31]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80057aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ac:	4a7a      	ldr	r2, [pc, #488]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03c      	beq.n	800583a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01c      	beq.n	8005802 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c8:	4b73      	ldr	r3, [pc, #460]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80057ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ce:	4a72      	ldr	r2, [pc, #456]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fe f916 	bl	8003a08 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e0:	f7fe f912 	bl	8003a08 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e122      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057f2:	4b69      	ldr	r3, [pc, #420]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCC_OscConfig+0x5cc>
 8005800:	e01b      	b.n	800583a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005802:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005808:	4a63      	ldr	r2, [pc, #396]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fe f8f9 	bl	8003a08 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800581a:	f7fe f8f5 	bl	8003a08 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e105      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800582c:	4b5a      	ldr	r3, [pc, #360]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 800582e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ef      	bne.n	800581a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80f9 	beq.w	8005a36 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	2b02      	cmp	r3, #2
 800584a:	f040 80cf 	bne.w	80059ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800584e:	4b52      	ldr	r3, [pc, #328]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f003 0203 	and.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	429a      	cmp	r2, r3
 8005860:	d12c      	bne.n	80058bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	3b01      	subs	r3, #1
 800586e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d123      	bne.n	80058bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d11b      	bne.n	80058bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d113      	bne.n	80058bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	3b01      	subs	r3, #1
 80058a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d109      	bne.n	80058bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	3b01      	subs	r3, #1
 80058b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d071      	beq.n	80059a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d068      	beq.n	8005994 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058c2:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d105      	bne.n	80058da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058ce:	4b32      	ldr	r3, [pc, #200]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0ac      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 80058e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ea:	f7fe f88d 	bl	8003a08 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f2:	f7fe f889 	bl	8003a08 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e099      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_RCC_OscConfig+0x788>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005920:	3a01      	subs	r2, #1
 8005922:	0112      	lsls	r2, r2, #4
 8005924:	4311      	orrs	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800592a:	0212      	lsls	r2, r2, #8
 800592c:	4311      	orrs	r1, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005932:	0852      	lsrs	r2, r2, #1
 8005934:	3a01      	subs	r2, #1
 8005936:	0552      	lsls	r2, r2, #21
 8005938:	4311      	orrs	r1, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800593e:	0852      	lsrs	r2, r2, #1
 8005940:	3a01      	subs	r2, #1
 8005942:	0652      	lsls	r2, r2, #25
 8005944:	4311      	orrs	r1, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800594a:	06d2      	lsls	r2, r2, #27
 800594c:	430a      	orrs	r2, r1
 800594e:	4912      	ldr	r1, [pc, #72]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005950:	4313      	orrs	r3, r2
 8005952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a0f      	ldr	r2, [pc, #60]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 800595a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800596c:	f7fe f84c 	bl	8003a08 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fe f848 	bl	8003a08 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e058      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <HAL_RCC_OscConfig+0x784>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005992:	e050      	b.n	8005a36 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e04f      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
 8005998:	40021000 	.word	0x40021000
 800599c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d144      	bne.n	8005a36 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059ac:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059c4:	f7fe f820 	bl	8003a08 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fe f81c 	bl	8003a08 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e02c      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x7b8>
 80059ea:	e024      	b.n	8005a36 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b0c      	cmp	r3, #12
 80059f0:	d01f      	beq.n	8005a32 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 80059f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fe f803 	bl	8003a08 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd ffff 	bl	8003a08 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e00f      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	4905      	ldr	r1, [pc, #20]	; (8005a40 <HAL_RCC_OscConfig+0x82c>)
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_OscConfig+0x830>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60cb      	str	r3, [r1, #12]
 8005a30:	e001      	b.n	8005a36 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	feeefffc 	.word	0xfeeefffc

08005a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e11d      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a60:	4b90      	ldr	r3, [pc, #576]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d910      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 020f 	bic.w	r2, r3, #15
 8005a76:	498b      	ldr	r1, [pc, #556]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b89      	ldr	r3, [pc, #548]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e105      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d010      	beq.n	8005abe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	4b81      	ldr	r3, [pc, #516]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d908      	bls.n	8005abe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aac:	4b7e      	ldr	r3, [pc, #504]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	497b      	ldr	r1, [pc, #492]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d079      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d11e      	bne.n	8005b10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad2:	4b75      	ldr	r3, [pc, #468]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0dc      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005ae2:	f000 fa3b 	bl	8005f5c <RCC_GetSysClockFreqFromPLLSource>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4a70      	ldr	r2, [pc, #448]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d946      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005aee:	4b6e      	ldr	r3, [pc, #440]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d140      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005afa:	4b6b      	ldr	r3, [pc, #428]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b02:	4a69      	ldr	r2, [pc, #420]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e035      	b.n	8005b7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b18:	4b63      	ldr	r3, [pc, #396]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d115      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0b9      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b30:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0ad      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b40:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0a5      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b50:	f000 f8b4 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4a55      	ldr	r2, [pc, #340]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d90f      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b5c:	4b52      	ldr	r3, [pc, #328]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d109      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b68:	4b4f      	ldr	r3, [pc, #316]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b70:	4a4d      	ldr	r2, [pc, #308]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b7c:	4b4a      	ldr	r3, [pc, #296]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 0203 	bic.w	r2, r3, #3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4947      	ldr	r1, [pc, #284]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8e:	f7fd ff3b 	bl	8003a08 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b96:	f7fd ff37 	bl	8003a08 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e077      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bac:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 020c 	and.w	r2, r3, #12
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d1eb      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bc4:	4b38      	ldr	r3, [pc, #224]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a37      	ldr	r2, [pc, #220]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d208      	bcs.n	8005bfe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bec:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	492b      	ldr	r1, [pc, #172]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfe:	4b29      	ldr	r3, [pc, #164]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d210      	bcs.n	8005c2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0c:	4b25      	ldr	r3, [pc, #148]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 020f 	bic.w	r2, r3, #15
 8005c14:	4923      	ldr	r1, [pc, #140]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <HAL_RCC_ClockConfig+0x25c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d001      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e036      	b.n	8005c9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4918      	ldr	r1, [pc, #96]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4910      	ldr	r1, [pc, #64]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c6c:	f000 f826 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	490c      	ldr	r1, [pc, #48]	; (8005cb0 <HAL_RCC_ClockConfig+0x268>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
 8005c88:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <HAL_RCC_ClockConfig+0x26c>)
 8005c8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <HAL_RCC_ClockConfig+0x270>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f002 fb75 	bl	8008380 <HAL_InitTick>
 8005c96:	4603      	mov	r3, r0
 8005c98:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	04c4b400 	.word	0x04c4b400
 8005cb0:	0800b154 	.word	0x0800b154
 8005cb4:	20000014 	.word	0x20000014
 8005cb8:	20000028 	.word	0x20000028

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	; 0x24
 8005cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cca:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cd4:	4b3b      	ldr	r3, [pc, #236]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d121      	bne.n	8005d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d11e      	bne.n	8005d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cf0:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cfc:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e005      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d18:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d2c:	e00a      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d102      	bne.n	8005d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e004      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d40:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b0c      	cmp	r3, #12
 8005d48:	d134      	bne.n	8005db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0xac>
 8005d60:	e005      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d62:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8005d64:	617b      	str	r3, [r7, #20]
      break;
 8005d66:	e005      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d6a:	617b      	str	r3, [r7, #20]
      break;
 8005d6c:	e002      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	617b      	str	r3, [r7, #20]
      break;
 8005d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	091b      	lsrs	r3, r3, #4
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	fb03 f202 	mul.w	r2, r3, r2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	0e5b      	lsrs	r3, r3, #25
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	3301      	adds	r3, #1
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005db4:	69bb      	ldr	r3, [r7, #24]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3724      	adds	r7, #36	; 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	0800b16c 	.word	0x0800b16c
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	007a1200 	.word	0x007a1200

08005dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000014 	.word	0x20000014

08005dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005df0:	f7ff fff0 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	0800b164 	.word	0x0800b164

08005e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e1c:	f7ff ffda 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0adb      	lsrs	r3, r3, #11
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4904      	ldr	r1, [pc, #16]	; (8005e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	0800b164 	.word	0x0800b164

08005e44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	220f      	movs	r2, #15
 8005e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0203 	and.w	r2, r3, #3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HAL_RCC_GetClockConfig+0x60>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 020f 	and.w	r2, r3, #15
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	601a      	str	r2, [r3, #0]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40022000 	.word	0x40022000

08005ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff f8e4 	bl	800508c <HAL_PWREx_GetVoltageRange>
 8005ec4:	6178      	str	r0, [r7, #20]
 8005ec6:	e014      	b.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ee0:	f7ff f8d4 	bl	800508c <HAL_PWREx_GetVoltageRange>
 8005ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d10b      	bne.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d913      	bls.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2ba0      	cmp	r3, #160	; 0xa0
 8005f04:	d902      	bls.n	8005f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f06:	2302      	movs	r3, #2
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e00d      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	e00a      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b7f      	cmp	r3, #127	; 0x7f
 8005f16:	d902      	bls.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005f18:	2302      	movs	r3, #2
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e004      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b70      	cmp	r3, #112	; 0x70
 8005f22:	d101      	bne.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f24:	2301      	movs	r3, #1
 8005f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 020f 	bic.w	r2, r3, #15
 8005f30:	4909      	ldr	r1, [pc, #36]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d001      	beq.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40022000 	.word	0x40022000

08005f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f62:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d00b      	beq.n	8005f8a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d825      	bhi.n	8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d008      	beq.n	8005f90 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d11f      	bne.n	8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f84:	4b25      	ldr	r3, [pc, #148]	; (800601c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f86:	613b      	str	r3, [r7, #16]
    break;
 8005f88:	e01f      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f8a:	4b25      	ldr	r3, [pc, #148]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f8c:	613b      	str	r3, [r7, #16]
    break;
 8005f8e:	e01c      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f90:	4b21      	ldr	r3, [pc, #132]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d107      	bne.n	8005fac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e005      	b.n	8005fb8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fac:	4b1a      	ldr	r3, [pc, #104]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	613b      	str	r3, [r7, #16]
    break;
 8005fc2:	e002      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
    break;
 8005fc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	fb03 f202 	mul.w	r2, r3, r2
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0e5b      	lsrs	r3, r3, #25
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800600a:	683b      	ldr	r3, [r7, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40021000 	.word	0x40021000
 800601c:	00f42400 	.word	0x00f42400
 8006020:	007a1200 	.word	0x007a1200
 8006024:	0800b16c 	.word	0x0800b16c

08006028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e0be      	b.n	80061b8 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	d108      	bne.n	8006054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604a:	d009      	beq.n	8006060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	61da      	str	r2, [r3, #28]
 8006052:	e005      	b.n	8006060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8cb 	bl	8006210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609a:	d902      	bls.n	80060a2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e002      	b.n	80060a8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060b0:	d007      	beq.n	80060c2 <HAL_SPI_Init+0x9a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	ea42 0103 	orr.w	r1, r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006120:	d11b      	bne.n	800615a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006132:	d903      	bls.n	800613c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
 800613a:	e002      	b.n	8006142 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	2b02      	cmp	r3, #2
 8006148:	d107      	bne.n	800615a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006158:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	f003 0204 	and.w	r2, r3, #4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006180:	ea42 0103 	orr.w	r1, r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619a:	d105      	bne.n	80061a8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b292      	uxth	r2, r2
 80061a6:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e01a      	b.n	8006208 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f81a 	bl	8006224 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d003      	beq.n	800626a <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8006268:	e1cc      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d112      	bne.n	800629a <HAL_SPI_Receive+0x62>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10e      	bne.n	800629a <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2204      	movs	r2, #4
 8006280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f9c1 	bl	8006618 <HAL_SPI_TransmitReceive>
 8006296:	4603      	mov	r3, r0
 8006298:	e1ba      	b.n	8006610 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_SPI_Receive+0x70>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e1b3      	b.n	8006610 <HAL_SPI_Receive+0x3d8>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b0:	f7fd fbaa 	bl	8003a08 <HAL_GetTick>
 80062b4:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_Receive+0x8a>
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80062c8:	e19c      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2204      	movs	r2, #4
 80062ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d118      	bne.n	8006348 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006334:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006350:	d908      	bls.n	8006364 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e007      	b.n	8006374 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	d10f      	bne.n	800639e <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d007      	beq.n	80063bc <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063c4:	d871      	bhi.n	80064aa <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063c6:	e035      	b.n	8006434 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d117      	bne.n	8006406 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f103 020c 	add.w	r2, r3, #12
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006404:	e016      	b.n	8006434 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006406:	f7fd faff 	bl	8003a08 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d803      	bhi.n	800641e <HAL_SPI_Receive+0x1e6>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d102      	bne.n	8006424 <HAL_SPI_Receive+0x1ec>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006432:	e0e7      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1c3      	bne.n	80063c8 <HAL_SPI_Receive+0x190>
 8006440:	e039      	b.n	80064b6 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	d115      	bne.n	800647c <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	b292      	uxth	r2, r2
 800645c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800647a:	e016      	b.n	80064aa <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647c:	f7fd fac4 	bl	8003a08 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d803      	bhi.n	8006494 <HAL_SPI_Receive+0x25c>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d102      	bne.n	800649a <HAL_SPI_Receive+0x262>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d107      	bne.n	80064aa <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80064a8:	e0ac      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1c5      	bne.n	8006442 <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064be:	d178      	bne.n	80065b2 <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064ce:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	2101      	movs	r1, #1
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f001 fa00 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80064ec:	e08a      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f6:	d907      	bls.n	8006508 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	b292      	uxth	r2, r2
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	e008      	b.n	800651a <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f103 020c 	add.w	r2, r3, #12
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	2101      	movs	r1, #1
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 f9db 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	f043 0202 	orr.w	r2, r3, #2
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8006542:	e05f      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800654c:	d105      	bne.n	800655a <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	e02b      	b.n	80065b2 <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800656a:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006574:	d11d      	bne.n	80065b2 <HAL_SPI_Receive+0x37a>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	2b02      	cmp	r3, #2
 800657c:	d119      	bne.n	80065b2 <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	2101      	movs	r1, #1
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 f9a9 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	f043 0202 	orr.w	r2, r3, #2
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80065a6:	e02d      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b2:	6a3a      	ldr	r2, [r7, #32]
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 fab0 	bl	8007b1c <SPI_EndRxTransaction>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d10a      	bne.n	80065ec <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80065ea:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065fa:	e003      	b.n	8006604 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800660c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006610:	4618      	mov	r0, r3
 8006612:	3728      	adds	r7, #40	; 0x28
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b092      	sub	sp, #72	; 0x48
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800662e:	2301      	movs	r3, #1
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x2e>
 8006642:	2302      	movs	r3, #2
 8006644:	e322      	b.n	8006c8c <HAL_SPI_TransmitReceive+0x674>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800664e:	f7fd f9db 	bl	8003a08 <HAL_GetTick>
 8006652:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8006668:	887b      	ldrh	r3, [r7, #2]
 800666a:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800667c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006680:	2b01      	cmp	r3, #1
 8006682:	d00f      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x8c>
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800668a:	d107      	bne.n	800669c <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <HAL_SPI_TransmitReceive+0x84>
 8006694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006698:	2b04      	cmp	r3, #4
 800669a:	d003      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 800669c:	2302      	movs	r3, #2
 800669e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80066a2:	e2ed      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x9e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x9e>
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80066bc:	e2e0      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d003      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2205      	movs	r2, #5
 80066ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	887a      	ldrh	r2, [r7, #2]
 80066e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	887a      	ldrh	r2, [r7, #2]
 80066ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	887a      	ldrh	r2, [r7, #2]
 80066fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006714:	d10f      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006734:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800673e:	d802      	bhi.n	8006746 <HAL_SPI_TransmitReceive+0x12e>
 8006740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006742:	2b01      	cmp	r3, #1
 8006744:	d908      	bls.n	8006758 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	e007      	b.n	8006768 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d007      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800678e:	f240 80ce 	bls.w	800692e <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x18a>
 800679a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 80b8 	bne.w	8006912 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	881a      	ldrh	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 80a0 	bne.w	8006912 <HAL_SPI_TransmitReceive+0x2fa>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067da:	f040 809a 	bne.w	8006912 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10c      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x1ea>
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006810:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006812:	e07e      	b.n	8006912 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d13f      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x28a>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d03a      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x28a>
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d137      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	1c9a      	adds	r2, r3, #2
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11e      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x28a>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686c:	d119      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10c      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x27a>
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006890:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068a0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d11c      	bne.n	80068ea <HAL_SPI_TransmitReceive+0x2d2>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d016      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	b292      	uxth	r2, r2
 80068c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e6:	2301      	movs	r3, #1
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068ea:	f7fd f88d 	bl	8003a08 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d80b      	bhi.n	8006912 <HAL_SPI_TransmitReceive+0x2fa>
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d007      	beq.n	8006912 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006910:	e1b6      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	f47f af7b 	bne.w	8006814 <HAL_SPI_TransmitReceive+0x1fc>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	f47f af74 	bne.w	8006814 <HAL_SPI_TransmitReceive+0x1fc>
 800692c:	e12d      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_SPI_TransmitReceive+0x326>
 8006936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 8119 	bne.w	8006b70 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d912      	bls.n	800696e <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	881a      	ldrh	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	1c9a      	adds	r2, r3, #2
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b02      	subs	r3, #2
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800696c:	e100      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 80e8 	bne.w	8006b70 <HAL_SPI_TransmitReceive+0x558>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a8:	f040 80e2 	bne.w	8006b70 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10c      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x3b8>
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069de:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e0:	e0c6      	b.n	8006b70 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d158      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x48a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d053      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x48a>
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d150      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d912      	bls.n	8006a30 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	1c9a      	adds	r2, r3, #2
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b02      	subs	r3, #2
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a2e:	e012      	b.n	8006a56 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11e      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x48a>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6c:	d119      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10c      	bne.n	8006a92 <HAL_SPI_TransmitReceive+0x47a>
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a90:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d148      	bne.n	8006b42 <HAL_SPI_TransmitReceive+0x52a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d042      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d923      	bls.n	8006b10 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b02      	subs	r3, #2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d81f      	bhi.n	8006b3e <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e016      	b.n	8006b3e <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f103 020c 	add.w	r2, r3, #12
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b42:	f7fc ff61 	bl	8003a08 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d803      	bhi.n	8006b5a <HAL_SPI_TransmitReceive+0x542>
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d102      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x548>
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006b6e:	e087      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f47f af33 	bne.w	80069e2 <HAL_SPI_TransmitReceive+0x3ca>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f47f af2c 	bne.w	80069e2 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b92:	d146      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fe9e 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8006bbc:	e060      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bc6:	d105      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	e026      	b.n	8006c22 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006be4:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d119      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fe71 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c08:	f043 0202 	orr.w	r2, r3, #2
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006c16:	e033      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d10d      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c34:	f043 0202 	orr.w	r2, r3, #2
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006c44:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 ffbb 	bl	8007bcc <SPI_EndRxTxTransaction>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e003      	b.n	8006c80 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3740      	adds	r7, #64	; 0x40
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_SPI_Transmit_IT+0x1e>
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cb6:	e082      	b.n	8006dbe <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d002      	beq.n	8006cca <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cc8:	e079      	b.n	8006dbe <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_SPI_Transmit_IT+0x44>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e073      	b.n	8006dc0 <HAL_SPI_Transmit_IT+0x12c>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d24:	d903      	bls.n	8006d2e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <HAL_SPI_Transmit_IT+0x138>)
 8006d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8006d2c:	e002      	b.n	8006d34 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a27      	ldr	r2, [pc, #156]	; (8006dd0 <HAL_SPI_Transmit_IT+0x13c>)
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3c:	d10f      	bne.n	8006d5e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d66:	d10f      	bne.n	8006d88 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d86:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d007      	beq.n	8006da6 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006dbc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	08007881 	.word	0x08007881
 8006dd0:	08007821 	.word	0x08007821

08006dd4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d002      	beq.n	8006df8 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
 8006df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006df6:	e0ba      	b.n	8006f6e <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d110      	bne.n	8006e22 <HAL_SPI_Receive_IT+0x4e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e08:	d10b      	bne.n	8006e22 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f8b1 	bl	8006f80 <HAL_SPI_TransmitReceive_IT>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	e0a6      	b.n	8006f70 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_SPI_Receive_IT+0x5a>
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e32:	e09c      	b.n	8006f6e <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_SPI_Receive_IT+0x6e>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e096      	b.n	8006f70 <HAL_SPI_Receive_IT+0x19c>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	88fa      	ldrh	r2, [r7, #6]
 8006e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e8e:	d90b      	bls.n	8006ea8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e9e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <HAL_SPI_Receive_IT+0x1a4>)
 8006ea4:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ea6:	e00a      	b.n	8006ebe <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eb6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_SPI_Receive_IT+0x1a8>)
 8006ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec6:	d10f      	bne.n	8006ee8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ee6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d11f      	bne.n	8006f32 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f00:	d806      	bhi.n	8006f10 <HAL_SPI_Receive_IT+0x13c>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d102      	bne.n	8006f10 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e002      	b.n	8006f38 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d007      	beq.n	8006f56 <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006f6c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	08007799 	.word	0x08007799
 8006f7c:	080076d9 	.word	0x080076d9

08006f80 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f98:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa0:	7dbb      	ldrb	r3, [r7, #22]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_SPI_TransmitReceive_IT+0x42>
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fac:	d106      	bne.n	8006fbc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_SPI_TransmitReceive_IT+0x3c>
 8006fb6:	7dbb      	ldrb	r3, [r7, #22]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fc0:	e0a5      	b.n	800710e <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_SPI_TransmitReceive_IT+0x54>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SPI_TransmitReceive_IT+0x54>
 8006fce:	887b      	ldrh	r3, [r7, #2]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fd8:	e099      	b.n	800710e <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_SPI_TransmitReceive_IT+0x68>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e093      	b.n	8007110 <HAL_SPI_TransmitReceive_IT+0x190>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d003      	beq.n	8007004 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2205      	movs	r2, #5
 8007000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	887a      	ldrh	r2, [r7, #2]
 800701a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	887a      	ldrh	r2, [r7, #2]
 8007026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800703a:	d906      	bls.n	800704a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a37      	ldr	r2, [pc, #220]	; (800711c <HAL_SPI_TransmitReceive_IT+0x19c>)
 8007040:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4a36      	ldr	r2, [pc, #216]	; (8007120 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8007046:	651a      	str	r2, [r3, #80]	; 0x50
 8007048:	e005      	b.n	8007056 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4a35      	ldr	r2, [pc, #212]	; (8007124 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 800704e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a35      	ldr	r2, [pc, #212]	; (8007128 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8007054:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800705e:	d11f      	bne.n	80070a0 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800706e:	d806      	bhi.n	800707e <HAL_SPI_TransmitReceive_IT+0xfe>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	2b02      	cmp	r3, #2
 8007076:	d102      	bne.n	800707e <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2202      	movs	r2, #2
 800707c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e002      	b.n	80070a6 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ae:	d802      	bhi.n	80070b6 <HAL_SPI_TransmitReceive_IT+0x136>
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d908      	bls.n	80070c8 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	e007      	b.n	80070d8 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d007      	beq.n	80070f6 <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800710c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	08007561 	.word	0x08007561
 8007120:	08007611 	.word	0x08007611
 8007124:	08007369 	.word	0x08007369
 8007128:	080074a5 	.word	0x080074a5

0800712c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10e      	bne.n	800716c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
    return;
 800716a:	e0ce      	b.n	800730a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_SPI_IRQHandler+0x5e>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
    return;
 8007188:	e0bf      	b.n	800730a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <HAL_SPI_IRQHandler+0x7e>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80b0 	beq.w	800730a <HAL_SPI_IRQHandler+0x1de>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80aa 	beq.w	800730a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d023      	beq.n	8007208 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d011      	beq.n	80071f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d0:	f043 0204 	orr.w	r2, r3, #4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	e00b      	b.n	8007208 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
        return;
 8007206:	e080      	b.n	800730a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d014      	beq.n	800723c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724a:	f043 0208 	orr.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007264:	2b00      	cmp	r3, #0
 8007266:	d04f      	beq.n	8007308 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007276:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <HAL_SPI_IRQHandler+0x168>
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d034      	beq.n	80072fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0203 	bic.w	r2, r2, #3
 80072a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d011      	beq.n	80072d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	4a17      	ldr	r2, [pc, #92]	; (8007310 <HAL_SPI_IRQHandler+0x1e4>)
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc fe9d 	bl	8003ff8 <HAL_DMA_Abort_IT>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d016      	beq.n	8007306 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <HAL_SPI_IRQHandler+0x1e4>)
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fc fe87 	bl	8003ff8 <HAL_DMA_Abort_IT>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80072fc:	e003      	b.n	8007306 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f812 	bl	8007328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007304:	e000      	b.n	8007308 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007306:	bf00      	nop
    return;
 8007308:	bf00      	nop
  }
}
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	0800733d 	.word	0x0800733d

08007314 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff ffe5 	bl	8007328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d923      	bls.n	80073c4 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	b292      	uxth	r2, r2
 8007388:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	1c9a      	adds	r2, r3, #2
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b02      	subs	r3, #2
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d11f      	bne.n	80073f2 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e016      	b.n	80073f2 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f103 020c 	add.w	r2, r3, #12
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d120      	bne.n	8007440 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	d10b      	bne.n	8007420 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007416:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <SPI_2linesRxISR_8BIT+0xe0>)
 800741c:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800741e:	e00f      	b.n	8007440 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800742e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc0c 	bl	8007c58 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	0800744d 	.word	0x0800744d

0800744c <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007468:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10f      	bne.n	800749c <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800748a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fbde 	bl	8007c58 <SPI_CloseRxTx_ISR>
    }
  }
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d912      	bls.n	80074dc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	881a      	ldrh	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	1c9a      	adds	r2, r3, #2
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b02      	subs	r3, #2
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074da:	e012      	b.n	8007502 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d126      	bne.n	800755a <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007514:	d110      	bne.n	8007538 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007524:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007534:	605a      	str	r2, [r3, #4]
      return;
 8007536:	e010      	b.n	800755a <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007546:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fb7f 	bl	8007c58 <SPI_CloseRxTx_ISR>
    }
  }
}
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	b292      	uxth	r2, r2
 8007574:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	1c9a      	adds	r2, r3, #2
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d118      	bne.n	80075d0 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	d103      	bne.n	80075b0 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a0b      	ldr	r2, [pc, #44]	; (80075d8 <SPI_2linesRxISR_16BIT+0x78>)
 80075ac:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80075ae:	e00f      	b.n	80075d0 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb44 	bl	8007c58 <SPI_CloseRxTx_ISR>
    }
  }
}
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	080075dd 	.word	0x080075dd

080075dc <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80075f0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007600:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb28 	bl	8007c58 <SPI_CloseRxTx_ISR>
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	881a      	ldrh	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d126      	bne.n	8007694 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764e:	d110      	bne.n	8007672 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800766e:	605a      	str	r2, [r3, #4]
      return;
 8007670:	e010      	b.n	8007694 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007680:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fae2 	bl	8007c58 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80076b6:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076bc:	1e5a      	subs	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fb20 	bl	8007d10 <SPI_CloseRx_ISR>
  }
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f103 020c 	add.w	r2, r3, #12
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10c      	bne.n	8007734 <SPI_RxISR_8BIT+0x5c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007722:	d107      	bne.n	8007734 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007732:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007748:	d103      	bne.n	8007752 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a04      	ldr	r2, [pc, #16]	; (8007760 <SPI_RxISR_8BIT+0x88>)
 800774e:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007750:	e002      	b.n	8007758 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fadc 	bl	8007d10 <SPI_CloseRx_ISR>
  }
}
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	0800769b 	.word	0x0800769b

08007764 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007778:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007788:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fac0 	bl	8007d10 <SPI_CloseRx_ISR>
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	b292      	uxth	r2, r2
 80077ac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	1c9a      	adds	r2, r3, #2
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d10c      	bne.n	80077f0 <SPI_RxISR_16BIT+0x58>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077de:	d107      	bne.n	80077f0 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077ee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007804:	d103      	bne.n	800780e <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a04      	ldr	r2, [pc, #16]	; (800781c <SPI_RxISR_16BIT+0x84>)
 800780a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800780c:	e002      	b.n	8007814 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa7e 	bl	8007d10 <SPI_CloseRx_ISR>
  }
}
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	08007765 	.word	0x08007765

08007820 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10f      	bne.n	8007878 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007860:	d107      	bne.n	8007872 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007870:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa92 	bl	8007d9c <SPI_CloseTx_ISR>
  }
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	881a      	ldrh	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	1c9a      	adds	r2, r3, #2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10f      	bne.n	80078d6 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078be:	d107      	bne.n	80078d0 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ce:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa63 	bl	8007d9c <SPI_CloseTx_ISR>
  }
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078f0:	f7fc f88a 	bl	8003a08 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4413      	add	r3, r2
 80078fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007900:	f7fc f882 	bl	8003a08 <HAL_GetTick>
 8007904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007906:	4b39      	ldr	r3, [pc, #228]	; (80079ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	015b      	lsls	r3, r3, #5
 800790c:	0d1b      	lsrs	r3, r3, #20
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	fb02 f303 	mul.w	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007916:	e054      	b.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d050      	beq.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007920:	f7fc f872 	bl	8003a08 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	429a      	cmp	r2, r3
 800792e:	d902      	bls.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d13d      	bne.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794e:	d111      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007958:	d004      	beq.n	8007964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007962:	d107      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800797c:	d10f      	bne.n	800799e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800799c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e017      	b.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3b01      	subs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	bf0c      	ite	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	2300      	movne	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d19b      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000014 	.word	0x20000014

080079f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a02:	f7fc f801 	bl	8003a08 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	4413      	add	r3, r2
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a12:	f7fb fff9 	bl	8003a08 <HAL_GetTick>
 8007a16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a20:	4b3d      	ldr	r3, [pc, #244]	; (8007b18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	00da      	lsls	r2, r3, #3
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	0d1b      	lsrs	r3, r3, #20
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a38:	e060      	b.n	8007afc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a40:	d107      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d050      	beq.n	8007afc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a5a:	f7fb ffd5 	bl	8003a08 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d902      	bls.n	8007a70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d13d      	bne.n	8007aec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a88:	d111      	bne.n	8007aae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a92:	d004      	beq.n	8007a9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9c:	d107      	bne.n	8007aae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab6:	d10f      	bne.n	8007ad8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e010      	b.n	8007b0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d196      	bne.n	8007a3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000014 	.word	0x20000014

08007b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b30:	d111      	bne.n	8007b56 <SPI_EndRxTransaction+0x3a>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b3a:	d004      	beq.n	8007b46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	d107      	bne.n	8007b56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7ff febd 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	f043 0220 	orr.w	r2, r3, #32
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e023      	b.n	8007bc4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b84:	d11d      	bne.n	8007bc2 <SPI_EndRxTransaction+0xa6>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8e:	d004      	beq.n	8007b9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b98:	d113      	bne.n	8007bc2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff ff22 	bl	80079f0 <SPI_WaitFifoStateUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	f043 0220 	orr.w	r2, r3, #32
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e000      	b.n	8007bc4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff ff03 	bl	80079f0 <SPI_WaitFifoStateUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf4:	f043 0220 	orr.w	r2, r3, #32
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e027      	b.n	8007c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fe68 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1a:	f043 0220 	orr.w	r2, r3, #32
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e014      	b.n	8007c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f7ff fedc 	bl	80079f0 <SPI_WaitFifoStateUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c42:	f043 0220 	orr.w	r2, r3, #32
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e000      	b.n	8007c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c60:	f7fb fed2 	bl	8003a08 <HAL_GetTick>
 8007c64:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0220 	bic.w	r2, r2, #32
 8007c74:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	2164      	movs	r1, #100	; 0x64
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff ffa6 	bl	8007bcc <SPI_EndRxTxTransaction>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d112      	bne.n	8007cc6 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cac:	f043 0202 	orr.w	r2, r3, #2
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007cbc:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff fb32 	bl	8007328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007cc4:	e020      	b.n	8007d08 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d115      	bne.n	8007cfa <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d107      	bne.n	8007cea <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fa62 	bl	80021ac <HAL_SPI_RxCpltCallback>
}
 8007ce8:	e00e      	b.n	8007d08 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fb0e 	bl	8007314 <HAL_SPI_TxRxCpltCallback>
}
 8007cf8:	e006      	b.n	8007d08 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fb10 	bl	8007328 <HAL_SPI_ErrorCallback>
}
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d26:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007d28:	f7fb fe6e 	bl	8003a08 <HAL_GetTick>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2164      	movs	r1, #100	; 0x64
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fef2 	bl	8007b1c <SPI_EndRxTransaction>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d10e      	bne.n	8007d7e <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	f043 0202 	orr.w	r2, r3, #2
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007d74:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fad6 	bl	8007328 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d7c:	e00a      	b.n	8007d94 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fa fa10 	bl	80021ac <HAL_SPI_RxCpltCallback>
}
 8007d8c:	e002      	b.n	8007d94 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff faca 	bl	8007328 <HAL_SPI_ErrorCallback>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007da4:	f7fb fe30 	bl	8003a08 <HAL_GetTick>
 8007da8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007db8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	2164      	movs	r1, #100	; 0x64
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ff04 	bl	8007bcc <SPI_EndRxTxTransaction>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dde:	2300      	movs	r3, #0
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	60bb      	str	r3, [r7, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fa8f 	bl	8007328 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007e0a:	e002      	b.n	8007e12 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fa f9e1 	bl	80021d4 <HAL_SPI_TxCpltCallback>
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e049      	b.n	8007ec0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f841 	bl	8007ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f000 f9d9 	bl	8008210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d001      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e04f      	b.n	8007f94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a23      	ldr	r2, [pc, #140]	; (8007fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d018      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1f      	ldr	r2, [pc, #124]	; (8007fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <HAL_TIM_Base_Start_IT+0xd0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_TIM_Base_Start_IT+0x76>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d115      	bne.n	8007f7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b06      	cmp	r3, #6
 8007f62:	d015      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0xb4>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6a:	d011      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7c:	e008      	b.n	8007f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0201 	orr.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e000      	b.n	8007f92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40000400 	.word	0x40000400
 8007fa8:	40000800 	.word	0x40000800
 8007fac:	40000c00 	.word	0x40000c00
 8007fb0:	40013400 	.word	0x40013400
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	00010007 	.word	0x00010007

08007fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01b      	beq.n	8008020 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0202 	mvn.w	r2, #2
 8007ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f8e4 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f8d6 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8e7 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d020      	beq.n	800806c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01b      	beq.n	800806c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0204 	mvn.w	r2, #4
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8be 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8b0 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8c1 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d020      	beq.n	80080b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d01b      	beq.n	80080b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f06f 0208 	mvn.w	r2, #8
 8008088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2204      	movs	r2, #4
 800808e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f898 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 80080a4:	e005      	b.n	80080b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f88a 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f89b 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d020      	beq.n	8008104 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01b      	beq.n	8008104 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0210 	mvn.w	r2, #16
 80080d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2208      	movs	r2, #8
 80080da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f872 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 80080f0:	e005      	b.n	80080fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f864 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f875 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0201 	mvn.w	r2, #1
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9b0 	bl	8008488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f906 	bl	8008358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8fe 	bl	800836c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f834 	bl	80081fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0220 	mvn.w	r2, #32
 80081b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f8c6 	bl	8008344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a40      	ldr	r2, [pc, #256]	; (8008324 <TIM_Base_SetConfig+0x114>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d013      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822e:	d00f      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3d      	ldr	r2, [pc, #244]	; (8008328 <TIM_Base_SetConfig+0x118>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a3c      	ldr	r2, [pc, #240]	; (800832c <TIM_Base_SetConfig+0x11c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a3b      	ldr	r2, [pc, #236]	; (8008330 <TIM_Base_SetConfig+0x120>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a3a      	ldr	r2, [pc, #232]	; (8008334 <TIM_Base_SetConfig+0x124>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d108      	bne.n	8008262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <TIM_Base_SetConfig+0x114>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d01f      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008270:	d01b      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2c      	ldr	r2, [pc, #176]	; (8008328 <TIM_Base_SetConfig+0x118>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d017      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2b      	ldr	r2, [pc, #172]	; (800832c <TIM_Base_SetConfig+0x11c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <TIM_Base_SetConfig+0x120>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a29      	ldr	r2, [pc, #164]	; (8008334 <TIM_Base_SetConfig+0x124>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00b      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a28      	ldr	r2, [pc, #160]	; (8008338 <TIM_Base_SetConfig+0x128>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a27      	ldr	r2, [pc, #156]	; (800833c <TIM_Base_SetConfig+0x12c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_Base_SetConfig+0x9a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a26      	ldr	r2, [pc, #152]	; (8008340 <TIM_Base_SetConfig+0x130>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d108      	bne.n	80082bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a10      	ldr	r2, [pc, #64]	; (8008324 <TIM_Base_SetConfig+0x114>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00f      	beq.n	8008308 <TIM_Base_SetConfig+0xf8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a12      	ldr	r2, [pc, #72]	; (8008334 <TIM_Base_SetConfig+0x124>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a11      	ldr	r2, [pc, #68]	; (8008338 <TIM_Base_SetConfig+0x128>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_Base_SetConfig+0xf8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a10      	ldr	r2, [pc, #64]	; (800833c <TIM_Base_SetConfig+0x12c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_Base_SetConfig+0xf8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <TIM_Base_SetConfig+0x130>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d103      	bne.n	8008310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	615a      	str	r2, [r3, #20]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40012c00 	.word	0x40012c00
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40013400 	.word	0x40013400
 8008338:	40014000 	.word	0x40014000
 800833c:	40014400 	.word	0x40014400
 8008340:	40014800 	.word	0x40014800

08008344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08e      	sub	sp, #56	; 0x38
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800838e:	4b38      	ldr	r3, [pc, #224]	; (8008470 <HAL_InitTick+0xf0>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d062      	beq.n	800845c <HAL_InitTick+0xdc>
  {
    /* Enable TIM6 clock */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008396:	4b37      	ldr	r3, [pc, #220]	; (8008474 <HAL_InitTick+0xf4>)
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839a:	4a36      	ldr	r2, [pc, #216]	; (8008474 <HAL_InitTick+0xf4>)
 800839c:	f043 0310 	orr.w	r3, r3, #16
 80083a0:	6593      	str	r3, [r2, #88]	; 0x58
 80083a2:	4b34      	ldr	r3, [pc, #208]	; (8008474 <HAL_InitTick+0xf4>)
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80083ae:	f107 0210 	add.w	r2, r7, #16
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fd fd43 	bl	8005e44 <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Compute TIM6 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d103      	bne.n	80083d0 <HAL_InitTick+0x50>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 80083c8:	f7fd fd10 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 80083cc:	6378      	str	r0, [r7, #52]	; 0x34
 80083ce:	e004      	b.n	80083da <HAL_InitTick+0x5a>
    }
    else
    {
      uwTimclock = 2U * HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd fd0c 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 80083d4:	4603      	mov	r3, r0
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	4a26      	ldr	r2, [pc, #152]	; (8008478 <HAL_InitTick+0xf8>)
 80083de:	fba2 2303 	umull	r2, r3, r2, r3
 80083e2:	0c9b      	lsrs	r3, r3, #18
 80083e4:	3b01      	subs	r3, #1
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Initialize TIM6 */
    TimHandle.Instance = TIM6;
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <HAL_InitTick+0xfc>)
 80083ea:	4a25      	ldr	r2, [pc, #148]	; (8008480 <HAL_InitTick+0x100>)
 80083ec:	601a      	str	r2, [r3, #0]
    + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80083ee:	4b23      	ldr	r3, [pc, #140]	; (800847c <HAL_InitTick+0xfc>)
 80083f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80083f4:	60da      	str	r2, [r3, #12]
    TimHandle.Init.Prescaler = uwPrescalerValue;
 80083f6:	4a21      	ldr	r2, [pc, #132]	; (800847c <HAL_InitTick+0xfc>)
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	6053      	str	r3, [r2, #4]
    TimHandle.Init.ClockDivision = 0;
 80083fc:	4b1f      	ldr	r3, [pc, #124]	; (800847c <HAL_InitTick+0xfc>)
 80083fe:	2200      	movs	r2, #0
 8008400:	611a      	str	r2, [r3, #16]
    TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008402:	4b1e      	ldr	r3, [pc, #120]	; (800847c <HAL_InitTick+0xfc>)
 8008404:	2200      	movs	r2, #0
 8008406:	609a      	str	r2, [r3, #8]
    TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008408:	4b1c      	ldr	r3, [pc, #112]	; (800847c <HAL_InitTick+0xfc>)
 800840a:	2200      	movs	r2, #0
 800840c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800840e:	481b      	ldr	r0, [pc, #108]	; (800847c <HAL_InitTick+0xfc>)
 8008410:	f7ff fd03 	bl	8007e1a <HAL_TIM_Base_Init>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d11c      	bne.n	8008454 <HAL_InitTick+0xd4>
    {
      /* Start the TIM time Base generation in interrupt mode */
      if (HAL_TIM_Base_Start_IT(&TimHandle) == HAL_OK)
 800841a:	4818      	ldr	r0, [pc, #96]	; (800847c <HAL_InitTick+0xfc>)
 800841c:	f7ff fd5e 	bl	8007edc <HAL_TIM_Base_Start_IT>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d112      	bne.n	800844c <HAL_InitTick+0xcc>
      {
        /* Enable the TIM6_DAC global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008426:	2036      	movs	r0, #54	; 0x36
 8008428:	f7fb fbf2 	bl	8003c10 <HAL_NVIC_EnableIRQ>

        /* Configure the SysTick IRQ priority */
        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d808      	bhi.n	8008444 <HAL_InitTick+0xc4>
        {
          /*Configure the TIM6_DAC IRQ priority */
          HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8008432:	2200      	movs	r2, #0
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	2036      	movs	r0, #54	; 0x36
 8008438:	f7fb fbce 	bl	8003bd8 <HAL_NVIC_SetPriority>
          uwTickPrio = TickPriority;
 800843c:	4a11      	ldr	r2, [pc, #68]	; (8008484 <HAL_InitTick+0x104>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e00e      	b.n	8008462 <HAL_InitTick+0xe2>
        }
        else
        {
          status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844a:	e00a      	b.n	8008462 <HAL_InitTick+0xe2>
        }
      }
      else
      {
        status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008452:	e006      	b.n	8008462 <HAL_InitTick+0xe2>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845a:	e002      	b.n	8008462 <HAL_InitTick+0xe2>
    }
  }
  else
  {
    status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }

  /* Return function status */
  return status;
 8008462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008466:	4618      	mov	r0, r3
 8008468:	3738      	adds	r7, #56	; 0x38
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2000002c 	.word	0x2000002c
 8008474:	40021000 	.word	0x40021000
 8008478:	431bde83 	.word	0x431bde83
 800847c:	20001404 	.word	0x20001404
 8008480:	40001000 	.word	0x40001000
 8008484:	20000028 	.word	0x20000028

08008488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8008490:	f7fb faa6 	bl	80039e0 <HAL_IncTick>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80084a0:	4802      	ldr	r0, [pc, #8]	; (80084ac <TIM6_DAC_IRQHandler+0x10>)
 80084a2:	f7ff fd8b 	bl	8007fbc <HAL_TIM_IRQHandler>
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20001404 	.word	0x20001404

080084b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e042      	b.n	8008548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f83b 	bl	8008550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	; 0x24
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fc86 	bl	8008e0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f987 	bl	8008814 <UART_SetConfig>
 8008506:	4603      	mov	r3, r0
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e01b      	b.n	8008548 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800851e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800852e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fd05 	bl	8008f50 <UART_CheckIdleState>
 8008546:	4603      	mov	r3, r0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857a:	2b20      	cmp	r3, #32
 800857c:	d17c      	bne.n	8008678 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_UART_Transmit+0x26>
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e075      	b.n	800867a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2221      	movs	r2, #33	; 0x21
 800859a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800859e:	f7fb fa33 	bl	8003a08 <HAL_GetTick>
 80085a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085bc:	d108      	bne.n	80085d0 <HAL_UART_Transmit+0x6c>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	e003      	b.n	80085d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085d8:	e031      	b.n	800863e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2200      	movs	r2, #0
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fd5d 	bl	80090a4 <UART_WaitOnFlagUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e03e      	b.n	800867a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10b      	bne.n	800861a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	881a      	ldrh	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800860e:	b292      	uxth	r2, r2
 8008610:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	3302      	adds	r3, #2
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e008      	b.n	800862c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	781a      	ldrb	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	b292      	uxth	r2, r2
 8008624:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3301      	adds	r3, #1
 800862a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b29a      	uxth	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1c7      	bne.n	80085da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2200      	movs	r2, #0
 8008652:	2140      	movs	r1, #64	; 0x40
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fd25 	bl	80090a4 <UART_WaitOnFlagUntilTimeout>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e006      	b.n	800867a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2220      	movs	r2, #32
 8008670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e000      	b.n	800867a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
  }
}
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b08a      	sub	sp, #40	; 0x28
 8008686:	af02      	add	r7, sp, #8
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008698:	2b20      	cmp	r3, #32
 800869a:	f040 80b6 	bne.w	800880a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_UART_Receive+0x28>
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e0ae      	b.n	800880c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2222      	movs	r2, #34	; 0x22
 80086ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086c4:	f7fb f9a0 	bl	8003a08 <HAL_GetTick>
 80086c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	88fa      	ldrh	r2, [r7, #6]
 80086ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	88fa      	ldrh	r2, [r7, #6]
 80086d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e2:	d10e      	bne.n	8008702 <HAL_UART_Receive+0x80>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <HAL_UART_Receive+0x76>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086f6:	e02d      	b.n	8008754 <HAL_UART_Receive+0xd2>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	22ff      	movs	r2, #255	; 0xff
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008700:	e028      	b.n	8008754 <HAL_UART_Receive+0xd2>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10d      	bne.n	8008726 <HAL_UART_Receive+0xa4>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <HAL_UART_Receive+0x9a>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	22ff      	movs	r2, #255	; 0xff
 8008716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800871a:	e01b      	b.n	8008754 <HAL_UART_Receive+0xd2>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	227f      	movs	r2, #127	; 0x7f
 8008720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008724:	e016      	b.n	8008754 <HAL_UART_Receive+0xd2>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800872e:	d10d      	bne.n	800874c <HAL_UART_Receive+0xca>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <HAL_UART_Receive+0xc0>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	227f      	movs	r2, #127	; 0x7f
 800873c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008740:	e008      	b.n	8008754 <HAL_UART_Receive+0xd2>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	223f      	movs	r2, #63	; 0x3f
 8008746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800874a:	e003      	b.n	8008754 <HAL_UART_Receive+0xd2>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800875a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008764:	d108      	bne.n	8008778 <HAL_UART_Receive+0xf6>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d104      	bne.n	8008778 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	e003      	b.n	8008780 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800877c:	2300      	movs	r3, #0
 800877e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008780:	e037      	b.n	80087f2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	2120      	movs	r1, #32
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fc89 	bl	80090a4 <UART_WaitOnFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e033      	b.n	800880c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10c      	bne.n	80087c4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	8a7b      	ldrh	r3, [r7, #18]
 80087b4:	4013      	ands	r3, r2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	3302      	adds	r3, #2
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e00d      	b.n	80087e0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	8a7b      	ldrh	r3, [r7, #18]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	4013      	ands	r3, r2
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3301      	adds	r3, #1
 80087de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1c1      	bne.n	8008782 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e000      	b.n	800880c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008818:	b08c      	sub	sp, #48	; 0x30
 800881a:	af00      	add	r7, sp, #0
 800881c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	431a      	orrs	r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	431a      	orrs	r2, r3
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	4313      	orrs	r3, r2
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4baa      	ldr	r3, [pc, #680]	; (8008aec <UART_SetConfig+0x2d8>)
 8008844:	4013      	ands	r3, r2
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800884c:	430b      	orrs	r3, r1
 800884e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a9f      	ldr	r2, [pc, #636]	; (8008af0 <UART_SetConfig+0x2dc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d004      	beq.n	8008880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800887c:	4313      	orrs	r3, r2
 800887e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800888a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008894:	430b      	orrs	r3, r1
 8008896:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	f023 010f 	bic.w	r1, r3, #15
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a90      	ldr	r2, [pc, #576]	; (8008af4 <UART_SetConfig+0x2e0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d125      	bne.n	8008904 <UART_SetConfig+0xf0>
 80088b8:	4b8f      	ldr	r3, [pc, #572]	; (8008af8 <UART_SetConfig+0x2e4>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d81a      	bhi.n	80088fc <UART_SetConfig+0xe8>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0xb8>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e2:	e116      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80088e4:	2302      	movs	r3, #2
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ea:	e112      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f2:	e10e      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e10a      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e106      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a7c      	ldr	r2, [pc, #496]	; (8008afc <UART_SetConfig+0x2e8>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d138      	bne.n	8008980 <UART_SetConfig+0x16c>
 800890e:	4b7a      	ldr	r3, [pc, #488]	; (8008af8 <UART_SetConfig+0x2e4>)
 8008910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008914:	f003 030c 	and.w	r3, r3, #12
 8008918:	2b0c      	cmp	r3, #12
 800891a:	d82d      	bhi.n	8008978 <UART_SetConfig+0x164>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <UART_SetConfig+0x110>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008959 	.word	0x08008959
 8008928:	08008979 	.word	0x08008979
 800892c:	08008979 	.word	0x08008979
 8008930:	08008979 	.word	0x08008979
 8008934:	08008969 	.word	0x08008969
 8008938:	08008979 	.word	0x08008979
 800893c:	08008979 	.word	0x08008979
 8008940:	08008979 	.word	0x08008979
 8008944:	08008961 	.word	0x08008961
 8008948:	08008979 	.word	0x08008979
 800894c:	08008979 	.word	0x08008979
 8008950:	08008979 	.word	0x08008979
 8008954:	08008971 	.word	0x08008971
 8008958:	2300      	movs	r3, #0
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895e:	e0d8      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008960:	2302      	movs	r3, #2
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e0d4      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e0d0      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e0cc      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e0c8      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a5e      	ldr	r2, [pc, #376]	; (8008b00 <UART_SetConfig+0x2ec>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d125      	bne.n	80089d6 <UART_SetConfig+0x1c2>
 800898a:	4b5b      	ldr	r3, [pc, #364]	; (8008af8 <UART_SetConfig+0x2e4>)
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008994:	2b30      	cmp	r3, #48	; 0x30
 8008996:	d016      	beq.n	80089c6 <UART_SetConfig+0x1b2>
 8008998:	2b30      	cmp	r3, #48	; 0x30
 800899a:	d818      	bhi.n	80089ce <UART_SetConfig+0x1ba>
 800899c:	2b20      	cmp	r3, #32
 800899e:	d00a      	beq.n	80089b6 <UART_SetConfig+0x1a2>
 80089a0:	2b20      	cmp	r3, #32
 80089a2:	d814      	bhi.n	80089ce <UART_SetConfig+0x1ba>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <UART_SetConfig+0x19a>
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d008      	beq.n	80089be <UART_SetConfig+0x1aa>
 80089ac:	e00f      	b.n	80089ce <UART_SetConfig+0x1ba>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089b4:	e0ad      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80089b6:	2302      	movs	r3, #2
 80089b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089bc:	e0a9      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80089be:	2304      	movs	r3, #4
 80089c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c4:	e0a5      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80089c6:	2308      	movs	r3, #8
 80089c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089cc:	e0a1      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80089ce:	2310      	movs	r3, #16
 80089d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d4:	e09d      	b.n	8008b12 <UART_SetConfig+0x2fe>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a4a      	ldr	r2, [pc, #296]	; (8008b04 <UART_SetConfig+0x2f0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d125      	bne.n	8008a2c <UART_SetConfig+0x218>
 80089e0:	4b45      	ldr	r3, [pc, #276]	; (8008af8 <UART_SetConfig+0x2e4>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089ea:	2bc0      	cmp	r3, #192	; 0xc0
 80089ec:	d016      	beq.n	8008a1c <UART_SetConfig+0x208>
 80089ee:	2bc0      	cmp	r3, #192	; 0xc0
 80089f0:	d818      	bhi.n	8008a24 <UART_SetConfig+0x210>
 80089f2:	2b80      	cmp	r3, #128	; 0x80
 80089f4:	d00a      	beq.n	8008a0c <UART_SetConfig+0x1f8>
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	d814      	bhi.n	8008a24 <UART_SetConfig+0x210>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <UART_SetConfig+0x1f0>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d008      	beq.n	8008a14 <UART_SetConfig+0x200>
 8008a02:	e00f      	b.n	8008a24 <UART_SetConfig+0x210>
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0a:	e082      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a12:	e07e      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a1a:	e07a      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a22:	e076      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2a:	e072      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <UART_SetConfig+0x2f4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d12a      	bne.n	8008a8c <UART_SetConfig+0x278>
 8008a36:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <UART_SetConfig+0x2e4>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a44:	d01a      	beq.n	8008a7c <UART_SetConfig+0x268>
 8008a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4a:	d81b      	bhi.n	8008a84 <UART_SetConfig+0x270>
 8008a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a50:	d00c      	beq.n	8008a6c <UART_SetConfig+0x258>
 8008a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a56:	d815      	bhi.n	8008a84 <UART_SetConfig+0x270>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <UART_SetConfig+0x250>
 8008a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a60:	d008      	beq.n	8008a74 <UART_SetConfig+0x260>
 8008a62:	e00f      	b.n	8008a84 <UART_SetConfig+0x270>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a6a:	e052      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a72:	e04e      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a74:	2304      	movs	r3, #4
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a7a:	e04a      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a82:	e046      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a84:	2310      	movs	r3, #16
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8a:	e042      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a17      	ldr	r2, [pc, #92]	; (8008af0 <UART_SetConfig+0x2dc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d13a      	bne.n	8008b0c <UART_SetConfig+0x2f8>
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <UART_SetConfig+0x2e4>)
 8008a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008aa4:	d01a      	beq.n	8008adc <UART_SetConfig+0x2c8>
 8008aa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008aaa:	d81b      	bhi.n	8008ae4 <UART_SetConfig+0x2d0>
 8008aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab0:	d00c      	beq.n	8008acc <UART_SetConfig+0x2b8>
 8008ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab6:	d815      	bhi.n	8008ae4 <UART_SetConfig+0x2d0>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <UART_SetConfig+0x2b0>
 8008abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac0:	d008      	beq.n	8008ad4 <UART_SetConfig+0x2c0>
 8008ac2:	e00f      	b.n	8008ae4 <UART_SetConfig+0x2d0>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aca:	e022      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008acc:	2302      	movs	r3, #2
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ad2:	e01e      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ada:	e01a      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae2:	e016      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aea:	e012      	b.n	8008b12 <UART_SetConfig+0x2fe>
 8008aec:	cfff69f3 	.word	0xcfff69f3
 8008af0:	40008000 	.word	0x40008000
 8008af4:	40013800 	.word	0x40013800
 8008af8:	40021000 	.word	0x40021000
 8008afc:	40004400 	.word	0x40004400
 8008b00:	40004800 	.word	0x40004800
 8008b04:	40004c00 	.word	0x40004c00
 8008b08:	40005000 	.word	0x40005000
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4aae      	ldr	r2, [pc, #696]	; (8008dd0 <UART_SetConfig+0x5bc>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	f040 8097 	bne.w	8008c4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	d823      	bhi.n	8008b6e <UART_SetConfig+0x35a>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <UART_SetConfig+0x318>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b6f 	.word	0x08008b6f
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b6f 	.word	0x08008b6f
 8008b3c:	08008b5f 	.word	0x08008b5f
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	08008b6f 	.word	0x08008b6f
 8008b4c:	08008b67 	.word	0x08008b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b50:	f7fd f94c 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 8008b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b56:	e010      	b.n	8008b7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b58:	4b9e      	ldr	r3, [pc, #632]	; (8008dd4 <UART_SetConfig+0x5c0>)
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b5c:	e00d      	b.n	8008b7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fd f8ad 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8008b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b64:	e009      	b.n	8008b7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b6c:	e005      	b.n	8008b7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8130 	beq.w	8008de2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	4a94      	ldr	r2, [pc, #592]	; (8008dd8 <UART_SetConfig+0x5c4>)
 8008b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	4413      	add	r3, r2
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d305      	bcc.n	8008bb2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d903      	bls.n	8008bba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bb8:	e113      	b.n	8008de2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	60bb      	str	r3, [r7, #8]
 8008bc0:	60fa      	str	r2, [r7, #12]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	4a84      	ldr	r2, [pc, #528]	; (8008dd8 <UART_SetConfig+0x5c4>)
 8008bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2200      	movs	r2, #0
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bdc:	f7f7 fd74 	bl	80006c8 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4610      	mov	r0, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	020b      	lsls	r3, r1, #8
 8008bf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bf6:	0202      	lsls	r2, r0, #8
 8008bf8:	6979      	ldr	r1, [r7, #20]
 8008bfa:	6849      	ldr	r1, [r1, #4]
 8008bfc:	0849      	lsrs	r1, r1, #1
 8008bfe:	2000      	movs	r0, #0
 8008c00:	460c      	mov	r4, r1
 8008c02:	4605      	mov	r5, r0
 8008c04:	eb12 0804 	adds.w	r8, r2, r4
 8008c08:	eb43 0905 	adc.w	r9, r3, r5
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	469a      	mov	sl, r3
 8008c14:	4693      	mov	fp, r2
 8008c16:	4652      	mov	r2, sl
 8008c18:	465b      	mov	r3, fp
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	f7f7 fd53 	bl	80006c8 <__aeabi_uldivmod>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4613      	mov	r3, r2
 8008c28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c30:	d308      	bcc.n	8008c44 <UART_SetConfig+0x430>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c38:	d204      	bcs.n	8008c44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	60da      	str	r2, [r3, #12]
 8008c42:	e0ce      	b.n	8008de2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c4a:	e0ca      	b.n	8008de2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c54:	d166      	bne.n	8008d24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d827      	bhi.n	8008cae <UART_SetConfig+0x49a>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <UART_SetConfig+0x450>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	08008caf 	.word	0x08008caf
 8008c74:	08008c9f 	.word	0x08008c9f
 8008c78:	08008caf 	.word	0x08008caf
 8008c7c:	08008caf 	.word	0x08008caf
 8008c80:	08008caf 	.word	0x08008caf
 8008c84:	08008ca7 	.word	0x08008ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fd f8b0 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c8e:	e014      	b.n	8008cba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c90:	f7fd f8c2 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 8008c94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c96:	e010      	b.n	8008cba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c98:	4b4e      	ldr	r3, [pc, #312]	; (8008dd4 <UART_SetConfig+0x5c0>)
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c9c:	e00d      	b.n	8008cba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c9e:	f7fd f80d 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8008ca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ca4:	e009      	b.n	8008cba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cac:	e005      	b.n	8008cba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008cb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8090 	beq.w	8008de2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	4a44      	ldr	r2, [pc, #272]	; (8008dd8 <UART_SetConfig+0x5c4>)
 8008cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd4:	005a      	lsls	r2, r3, #1
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	441a      	add	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d916      	bls.n	8008d1c <UART_SetConfig+0x508>
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf4:	d212      	bcs.n	8008d1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f023 030f 	bic.w	r3, r3, #15
 8008cfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	8bfb      	ldrh	r3, [r7, #30]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	8bfa      	ldrh	r2, [r7, #30]
 8008d18:	60da      	str	r2, [r3, #12]
 8008d1a:	e062      	b.n	8008de2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d22:	e05e      	b.n	8008de2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d828      	bhi.n	8008d7e <UART_SetConfig+0x56a>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x520>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d61 	.word	0x08008d61
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	08008d7f 	.word	0x08008d7f
 8008d44:	08008d6f 	.word	0x08008d6f
 8008d48:	08008d7f 	.word	0x08008d7f
 8008d4c:	08008d7f 	.word	0x08008d7f
 8008d50:	08008d7f 	.word	0x08008d7f
 8008d54:	08008d77 	.word	0x08008d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d58:	f7fd f848 	bl	8005dec <HAL_RCC_GetPCLK1Freq>
 8008d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d5e:	e014      	b.n	8008d8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d60:	f7fd f85a 	bl	8005e18 <HAL_RCC_GetPCLK2Freq>
 8008d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d66:	e010      	b.n	8008d8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <UART_SetConfig+0x5c0>)
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d6c:	e00d      	b.n	8008d8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fc ffa5 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8008d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d74:	e009      	b.n	8008d8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d7c:	e005      	b.n	8008d8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d88:	bf00      	nop
    }

    if (pclk != 0U)
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d028      	beq.n	8008de2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	4a10      	ldr	r2, [pc, #64]	; (8008dd8 <UART_SetConfig+0x5c4>)
 8008d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	441a      	add	r2, r3
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d910      	bls.n	8008ddc <UART_SetConfig+0x5c8>
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc0:	d20c      	bcs.n	8008ddc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e009      	b.n	8008de2 <UART_SetConfig+0x5ce>
 8008dce:	bf00      	nop
 8008dd0:	40008000 	.word	0x40008000
 8008dd4:	00f42400 	.word	0x00f42400
 8008dd8:	0800b19c 	.word	0x0800b19c
      }
      else
      {
        ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008dfe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3730      	adds	r7, #48	; 0x30
 8008e06:	46bd      	mov	sp, r7
 8008e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d01a      	beq.n	8008f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0a:	d10a      	bne.n	8008f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	605a      	str	r2, [r3, #4]
  }
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b098      	sub	sp, #96	; 0x60
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f60:	f7fa fd52 	bl	8003a08 <HAL_GetTick>
 8008f64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d12f      	bne.n	8008fd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f88e 	bl	80090a4 <UART_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d022      	beq.n	8008fd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fac:	647b      	str	r3, [r7, #68]	; 0x44
 8008fae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e6      	bne.n	8008f8e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e063      	b.n	800909c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d149      	bne.n	8009076 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fea:	2200      	movs	r2, #0
 8008fec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f857 	bl	80090a4 <UART_WaitOnFlagUntilTimeout>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d03c      	beq.n	8009076 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	623b      	str	r3, [r7, #32]
   return(result);
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901a:	633b      	str	r3, [r7, #48]	; 0x30
 800901c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e6      	bne.n	8008ffc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	60fb      	str	r3, [r7, #12]
   return(result);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	64bb      	str	r3, [r7, #72]	; 0x48
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800904e:	61fa      	str	r2, [r7, #28]
 8009050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	69b9      	ldr	r1, [r7, #24]
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	617b      	str	r3, [r7, #20]
   return(result);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e5      	bne.n	800902e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e012      	b.n	800909c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3758      	adds	r7, #88	; 0x58
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b4:	e04f      	b.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d04b      	beq.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090be:	f7fa fca3 	bl	8003a08 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d302      	bcc.n	80090d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e04e      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d037      	beq.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b80      	cmp	r3, #128	; 0x80
 80090ea:	d034      	beq.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b40      	cmp	r3, #64	; 0x40
 80090f0:	d031      	beq.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d110      	bne.n	8009122 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2208      	movs	r2, #8
 8009106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f838 	bl	800917e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2208      	movs	r2, #8
 8009112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e029      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800912c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009130:	d111      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800913a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f81e 	bl	800917e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2220      	movs	r2, #32
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e00f      	b.n	8009176 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4013      	ands	r3, r2
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	429a      	cmp	r2, r3
 8009164:	bf0c      	ite	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	2300      	movne	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	429a      	cmp	r2, r3
 8009172:	d0a0      	beq.n	80090b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800917e:	b480      	push	{r7}
 8009180:	b095      	sub	sp, #84	; 0x54
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800919a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a4:	643b      	str	r3, [r7, #64]	; 0x40
 80091a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3308      	adds	r3, #8
 80091be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ce:	f023 0301 	bic.w	r3, r3, #1
 80091d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e3      	bne.n	80091b8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d118      	bne.n	800922a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	60bb      	str	r3, [r7, #8]
   return(result);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f023 0310 	bic.w	r3, r3, #16
 800920c:	647b      	str	r3, [r7, #68]	; 0x44
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	613b      	str	r3, [r7, #16]
   return(result);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e6      	bne.n	80091f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800923e:	bf00      	nop
 8009240:	3754      	adds	r7, #84	; 0x54
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <arm_sin_f32>:
 800924c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80092cc <arm_sin_f32+0x80>
 8009250:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009254:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009260:	d504      	bpl.n	800926c <arm_sin_f32+0x20>
 8009262:	ee17 3a90 	vmov	r3, s15
 8009266:	3b01      	subs	r3, #1
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009270:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80092d0 <arm_sin_f32+0x84>
 8009274:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009278:	ee20 0a07 	vmul.f32	s0, s0, s14
 800927c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009280:	ee17 3a90 	vmov	r3, s15
 8009284:	b29b      	uxth	r3, r3
 8009286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928a:	d21a      	bcs.n	80092c2 <arm_sin_f32+0x76>
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	ee30 0a67 	vsub.f32	s0, s0, s15
 800929a:	4a0e      	ldr	r2, [pc, #56]	; (80092d4 <arm_sin_f32+0x88>)
 800929c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80092a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80092a8:	ed93 7a00 	vldr	s14, [r3]
 80092ac:	edd2 6a00 	vldr	s13, [r2]
 80092b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80092b4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80092b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80092c0:	4770      	bx	lr
 80092c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80092c6:	2101      	movs	r1, #1
 80092c8:	2300      	movs	r3, #0
 80092ca:	e7e6      	b.n	800929a <arm_sin_f32+0x4e>
 80092cc:	3e22f983 	.word	0x3e22f983
 80092d0:	44000000 	.word	0x44000000
 80092d4:	0800b1b4 	.word	0x0800b1b4

080092d8 <std>:
 80092d8:	2300      	movs	r3, #0
 80092da:	b510      	push	{r4, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	e9c0 3300 	strd	r3, r3, [r0]
 80092e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092e6:	6083      	str	r3, [r0, #8]
 80092e8:	8181      	strh	r1, [r0, #12]
 80092ea:	6643      	str	r3, [r0, #100]	; 0x64
 80092ec:	81c2      	strh	r2, [r0, #14]
 80092ee:	6183      	str	r3, [r0, #24]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2208      	movs	r2, #8
 80092f4:	305c      	adds	r0, #92	; 0x5c
 80092f6:	f000 fa1d 	bl	8009734 <memset>
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <std+0x38>)
 80092fc:	6263      	str	r3, [r4, #36]	; 0x24
 80092fe:	4b05      	ldr	r3, [pc, #20]	; (8009314 <std+0x3c>)
 8009300:	62a3      	str	r3, [r4, #40]	; 0x28
 8009302:	4b05      	ldr	r3, [pc, #20]	; (8009318 <std+0x40>)
 8009304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009306:	4b05      	ldr	r3, [pc, #20]	; (800931c <std+0x44>)
 8009308:	6224      	str	r4, [r4, #32]
 800930a:	6323      	str	r3, [r4, #48]	; 0x30
 800930c:	bd10      	pop	{r4, pc}
 800930e:	bf00      	nop
 8009310:	08009565 	.word	0x08009565
 8009314:	08009587 	.word	0x08009587
 8009318:	080095bf 	.word	0x080095bf
 800931c:	080095e3 	.word	0x080095e3

08009320 <stdio_exit_handler>:
 8009320:	4a02      	ldr	r2, [pc, #8]	; (800932c <stdio_exit_handler+0xc>)
 8009322:	4903      	ldr	r1, [pc, #12]	; (8009330 <stdio_exit_handler+0x10>)
 8009324:	4803      	ldr	r0, [pc, #12]	; (8009334 <stdio_exit_handler+0x14>)
 8009326:	f000 b869 	b.w	80093fc <_fwalk_sglue>
 800932a:	bf00      	nop
 800932c:	20000030 	.word	0x20000030
 8009330:	0800a531 	.word	0x0800a531
 8009334:	2000003c 	.word	0x2000003c

08009338 <cleanup_stdio>:
 8009338:	6841      	ldr	r1, [r0, #4]
 800933a:	4b0c      	ldr	r3, [pc, #48]	; (800936c <cleanup_stdio+0x34>)
 800933c:	4299      	cmp	r1, r3
 800933e:	b510      	push	{r4, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	d001      	beq.n	8009348 <cleanup_stdio+0x10>
 8009344:	f001 f8f4 	bl	800a530 <_fflush_r>
 8009348:	68a1      	ldr	r1, [r4, #8]
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <cleanup_stdio+0x38>)
 800934c:	4299      	cmp	r1, r3
 800934e:	d002      	beq.n	8009356 <cleanup_stdio+0x1e>
 8009350:	4620      	mov	r0, r4
 8009352:	f001 f8ed 	bl	800a530 <_fflush_r>
 8009356:	68e1      	ldr	r1, [r4, #12]
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <cleanup_stdio+0x3c>)
 800935a:	4299      	cmp	r1, r3
 800935c:	d004      	beq.n	8009368 <cleanup_stdio+0x30>
 800935e:	4620      	mov	r0, r4
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f001 b8e4 	b.w	800a530 <_fflush_r>
 8009368:	bd10      	pop	{r4, pc}
 800936a:	bf00      	nop
 800936c:	20001450 	.word	0x20001450
 8009370:	200014b8 	.word	0x200014b8
 8009374:	20001520 	.word	0x20001520

08009378 <global_stdio_init.part.0>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <global_stdio_init.part.0+0x30>)
 800937c:	4c0b      	ldr	r4, [pc, #44]	; (80093ac <global_stdio_init.part.0+0x34>)
 800937e:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <global_stdio_init.part.0+0x38>)
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	4620      	mov	r0, r4
 8009384:	2200      	movs	r2, #0
 8009386:	2104      	movs	r1, #4
 8009388:	f7ff ffa6 	bl	80092d8 <std>
 800938c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009390:	2201      	movs	r2, #1
 8009392:	2109      	movs	r1, #9
 8009394:	f7ff ffa0 	bl	80092d8 <std>
 8009398:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800939c:	2202      	movs	r2, #2
 800939e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a2:	2112      	movs	r1, #18
 80093a4:	f7ff bf98 	b.w	80092d8 <std>
 80093a8:	20001588 	.word	0x20001588
 80093ac:	20001450 	.word	0x20001450
 80093b0:	08009321 	.word	0x08009321

080093b4 <__sfp_lock_acquire>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__sfp_lock_acquire+0x8>)
 80093b6:	f000 badb 	b.w	8009970 <__retarget_lock_acquire_recursive>
 80093ba:	bf00      	nop
 80093bc:	20001591 	.word	0x20001591

080093c0 <__sfp_lock_release>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sfp_lock_release+0x8>)
 80093c2:	f000 bad6 	b.w	8009972 <__retarget_lock_release_recursive>
 80093c6:	bf00      	nop
 80093c8:	20001591 	.word	0x20001591

080093cc <__sinit>:
 80093cc:	b510      	push	{r4, lr}
 80093ce:	4604      	mov	r4, r0
 80093d0:	f7ff fff0 	bl	80093b4 <__sfp_lock_acquire>
 80093d4:	6a23      	ldr	r3, [r4, #32]
 80093d6:	b11b      	cbz	r3, 80093e0 <__sinit+0x14>
 80093d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093dc:	f7ff bff0 	b.w	80093c0 <__sfp_lock_release>
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <__sinit+0x28>)
 80093e2:	6223      	str	r3, [r4, #32]
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <__sinit+0x2c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f5      	bne.n	80093d8 <__sinit+0xc>
 80093ec:	f7ff ffc4 	bl	8009378 <global_stdio_init.part.0>
 80093f0:	e7f2      	b.n	80093d8 <__sinit+0xc>
 80093f2:	bf00      	nop
 80093f4:	08009339 	.word	0x08009339
 80093f8:	20001588 	.word	0x20001588

080093fc <_fwalk_sglue>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	4607      	mov	r7, r0
 8009402:	4688      	mov	r8, r1
 8009404:	4614      	mov	r4, r2
 8009406:	2600      	movs	r6, #0
 8009408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800940c:	f1b9 0901 	subs.w	r9, r9, #1
 8009410:	d505      	bpl.n	800941e <_fwalk_sglue+0x22>
 8009412:	6824      	ldr	r4, [r4, #0]
 8009414:	2c00      	cmp	r4, #0
 8009416:	d1f7      	bne.n	8009408 <_fwalk_sglue+0xc>
 8009418:	4630      	mov	r0, r6
 800941a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d907      	bls.n	8009434 <_fwalk_sglue+0x38>
 8009424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009428:	3301      	adds	r3, #1
 800942a:	d003      	beq.n	8009434 <_fwalk_sglue+0x38>
 800942c:	4629      	mov	r1, r5
 800942e:	4638      	mov	r0, r7
 8009430:	47c0      	blx	r8
 8009432:	4306      	orrs	r6, r0
 8009434:	3568      	adds	r5, #104	; 0x68
 8009436:	e7e9      	b.n	800940c <_fwalk_sglue+0x10>

08009438 <iprintf>:
 8009438:	b40f      	push	{r0, r1, r2, r3}
 800943a:	b507      	push	{r0, r1, r2, lr}
 800943c:	4906      	ldr	r1, [pc, #24]	; (8009458 <iprintf+0x20>)
 800943e:	ab04      	add	r3, sp, #16
 8009440:	6808      	ldr	r0, [r1, #0]
 8009442:	f853 2b04 	ldr.w	r2, [r3], #4
 8009446:	6881      	ldr	r1, [r0, #8]
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f000 fd41 	bl	8009ed0 <_vfiprintf_r>
 800944e:	b003      	add	sp, #12
 8009450:	f85d eb04 	ldr.w	lr, [sp], #4
 8009454:	b004      	add	sp, #16
 8009456:	4770      	bx	lr
 8009458:	20000088 	.word	0x20000088

0800945c <putchar>:
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <putchar+0xc>)
 800945e:	4601      	mov	r1, r0
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	6882      	ldr	r2, [r0, #8]
 8009464:	f001 b900 	b.w	800a668 <_putc_r>
 8009468:	20000088 	.word	0x20000088

0800946c <_puts_r>:
 800946c:	6a03      	ldr	r3, [r0, #32]
 800946e:	b570      	push	{r4, r5, r6, lr}
 8009470:	6884      	ldr	r4, [r0, #8]
 8009472:	4605      	mov	r5, r0
 8009474:	460e      	mov	r6, r1
 8009476:	b90b      	cbnz	r3, 800947c <_puts_r+0x10>
 8009478:	f7ff ffa8 	bl	80093cc <__sinit>
 800947c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800947e:	07db      	lsls	r3, r3, #31
 8009480:	d405      	bmi.n	800948e <_puts_r+0x22>
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	0598      	lsls	r0, r3, #22
 8009486:	d402      	bmi.n	800948e <_puts_r+0x22>
 8009488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948a:	f000 fa71 	bl	8009970 <__retarget_lock_acquire_recursive>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	0719      	lsls	r1, r3, #28
 8009492:	d513      	bpl.n	80094bc <_puts_r+0x50>
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	b18b      	cbz	r3, 80094bc <_puts_r+0x50>
 8009498:	3e01      	subs	r6, #1
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	b9e9      	cbnz	r1, 80094e2 <_puts_r+0x76>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da2e      	bge.n	8009508 <_puts_r+0x9c>
 80094aa:	4622      	mov	r2, r4
 80094ac:	210a      	movs	r1, #10
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 f89b 	bl	80095ea <__swbuf_r>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d007      	beq.n	80094c8 <_puts_r+0x5c>
 80094b8:	250a      	movs	r5, #10
 80094ba:	e007      	b.n	80094cc <_puts_r+0x60>
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f8d0 	bl	8009664 <__swsetup_r>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d0e7      	beq.n	8009498 <_puts_r+0x2c>
 80094c8:	f04f 35ff 	mov.w	r5, #4294967295
 80094cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ce:	07da      	lsls	r2, r3, #31
 80094d0:	d405      	bmi.n	80094de <_puts_r+0x72>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	059b      	lsls	r3, r3, #22
 80094d6:	d402      	bmi.n	80094de <_puts_r+0x72>
 80094d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094da:	f000 fa4a 	bl	8009972 <__retarget_lock_release_recursive>
 80094de:	4628      	mov	r0, r5
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da04      	bge.n	80094f0 <_puts_r+0x84>
 80094e6:	69a2      	ldr	r2, [r4, #24]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	dc06      	bgt.n	80094fa <_puts_r+0x8e>
 80094ec:	290a      	cmp	r1, #10
 80094ee:	d004      	beq.n	80094fa <_puts_r+0x8e>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	6022      	str	r2, [r4, #0]
 80094f6:	7019      	strb	r1, [r3, #0]
 80094f8:	e7cf      	b.n	800949a <_puts_r+0x2e>
 80094fa:	4622      	mov	r2, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f874 	bl	80095ea <__swbuf_r>
 8009502:	3001      	adds	r0, #1
 8009504:	d1c9      	bne.n	800949a <_puts_r+0x2e>
 8009506:	e7df      	b.n	80094c8 <_puts_r+0x5c>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	250a      	movs	r5, #10
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	701d      	strb	r5, [r3, #0]
 8009512:	e7db      	b.n	80094cc <_puts_r+0x60>

08009514 <puts>:
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <puts+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f7ff bfa7 	b.w	800946c <_puts_r>
 800951e:	bf00      	nop
 8009520:	20000088 	.word	0x20000088

08009524 <siprintf>:
 8009524:	b40e      	push	{r1, r2, r3}
 8009526:	b500      	push	{lr}
 8009528:	b09c      	sub	sp, #112	; 0x70
 800952a:	ab1d      	add	r3, sp, #116	; 0x74
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	9006      	str	r0, [sp, #24]
 8009530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009534:	4809      	ldr	r0, [pc, #36]	; (800955c <siprintf+0x38>)
 8009536:	9107      	str	r1, [sp, #28]
 8009538:	9104      	str	r1, [sp, #16]
 800953a:	4909      	ldr	r1, [pc, #36]	; (8009560 <siprintf+0x3c>)
 800953c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009540:	9105      	str	r1, [sp, #20]
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	a902      	add	r1, sp, #8
 8009548:	f000 fb9a 	bl	8009c80 <_svfiprintf_r>
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	b01c      	add	sp, #112	; 0x70
 8009554:	f85d eb04 	ldr.w	lr, [sp], #4
 8009558:	b003      	add	sp, #12
 800955a:	4770      	bx	lr
 800955c:	20000088 	.word	0x20000088
 8009560:	ffff0208 	.word	0xffff0208

08009564 <__sread>:
 8009564:	b510      	push	{r4, lr}
 8009566:	460c      	mov	r4, r1
 8009568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956c:	f000 f9b2 	bl	80098d4 <_read_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	bfab      	itete	ge
 8009574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009576:	89a3      	ldrhlt	r3, [r4, #12]
 8009578:	181b      	addge	r3, r3, r0
 800957a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800957e:	bfac      	ite	ge
 8009580:	6563      	strge	r3, [r4, #84]	; 0x54
 8009582:	81a3      	strhlt	r3, [r4, #12]
 8009584:	bd10      	pop	{r4, pc}

08009586 <__swrite>:
 8009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958a:	461f      	mov	r7, r3
 800958c:	898b      	ldrh	r3, [r1, #12]
 800958e:	05db      	lsls	r3, r3, #23
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	4616      	mov	r6, r2
 8009596:	d505      	bpl.n	80095a4 <__swrite+0x1e>
 8009598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959c:	2302      	movs	r3, #2
 800959e:	2200      	movs	r2, #0
 80095a0:	f000 f986 	bl	80098b0 <_lseek_r>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	4632      	mov	r2, r6
 80095b2:	463b      	mov	r3, r7
 80095b4:	4628      	mov	r0, r5
 80095b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ba:	f000 b99d 	b.w	80098f8 <_write_r>

080095be <__sseek>:
 80095be:	b510      	push	{r4, lr}
 80095c0:	460c      	mov	r4, r1
 80095c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c6:	f000 f973 	bl	80098b0 <_lseek_r>
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	bf15      	itete	ne
 80095d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80095d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095da:	81a3      	strheq	r3, [r4, #12]
 80095dc:	bf18      	it	ne
 80095de:	81a3      	strhne	r3, [r4, #12]
 80095e0:	bd10      	pop	{r4, pc}

080095e2 <__sclose>:
 80095e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e6:	f000 b953 	b.w	8009890 <_close_r>

080095ea <__swbuf_r>:
 80095ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ec:	460e      	mov	r6, r1
 80095ee:	4614      	mov	r4, r2
 80095f0:	4605      	mov	r5, r0
 80095f2:	b118      	cbz	r0, 80095fc <__swbuf_r+0x12>
 80095f4:	6a03      	ldr	r3, [r0, #32]
 80095f6:	b90b      	cbnz	r3, 80095fc <__swbuf_r+0x12>
 80095f8:	f7ff fee8 	bl	80093cc <__sinit>
 80095fc:	69a3      	ldr	r3, [r4, #24]
 80095fe:	60a3      	str	r3, [r4, #8]
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	071a      	lsls	r2, r3, #28
 8009604:	d525      	bpl.n	8009652 <__swbuf_r+0x68>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	b31b      	cbz	r3, 8009652 <__swbuf_r+0x68>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	1a98      	subs	r0, r3, r2
 8009610:	6963      	ldr	r3, [r4, #20]
 8009612:	b2f6      	uxtb	r6, r6
 8009614:	4283      	cmp	r3, r0
 8009616:	4637      	mov	r7, r6
 8009618:	dc04      	bgt.n	8009624 <__swbuf_r+0x3a>
 800961a:	4621      	mov	r1, r4
 800961c:	4628      	mov	r0, r5
 800961e:	f000 ff87 	bl	800a530 <_fflush_r>
 8009622:	b9e0      	cbnz	r0, 800965e <__swbuf_r+0x74>
 8009624:	68a3      	ldr	r3, [r4, #8]
 8009626:	3b01      	subs	r3, #1
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	6022      	str	r2, [r4, #0]
 8009630:	701e      	strb	r6, [r3, #0]
 8009632:	6962      	ldr	r2, [r4, #20]
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	429a      	cmp	r2, r3
 8009638:	d004      	beq.n	8009644 <__swbuf_r+0x5a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d506      	bpl.n	800964e <__swbuf_r+0x64>
 8009640:	2e0a      	cmp	r6, #10
 8009642:	d104      	bne.n	800964e <__swbuf_r+0x64>
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 ff72 	bl	800a530 <_fflush_r>
 800964c:	b938      	cbnz	r0, 800965e <__swbuf_r+0x74>
 800964e:	4638      	mov	r0, r7
 8009650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 f805 	bl	8009664 <__swsetup_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	d0d5      	beq.n	800960a <__swbuf_r+0x20>
 800965e:	f04f 37ff 	mov.w	r7, #4294967295
 8009662:	e7f4      	b.n	800964e <__swbuf_r+0x64>

08009664 <__swsetup_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <__swsetup_r+0xac>)
 8009668:	4605      	mov	r5, r0
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	460c      	mov	r4, r1
 800966e:	b118      	cbz	r0, 8009678 <__swsetup_r+0x14>
 8009670:	6a03      	ldr	r3, [r0, #32]
 8009672:	b90b      	cbnz	r3, 8009678 <__swsetup_r+0x14>
 8009674:	f7ff feaa 	bl	80093cc <__sinit>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800967e:	0718      	lsls	r0, r3, #28
 8009680:	d422      	bmi.n	80096c8 <__swsetup_r+0x64>
 8009682:	06d9      	lsls	r1, r3, #27
 8009684:	d407      	bmi.n	8009696 <__swsetup_r+0x32>
 8009686:	2309      	movs	r3, #9
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e034      	b.n	8009700 <__swsetup_r+0x9c>
 8009696:	0758      	lsls	r0, r3, #29
 8009698:	d512      	bpl.n	80096c0 <__swsetup_r+0x5c>
 800969a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969c:	b141      	cbz	r1, 80096b0 <__swsetup_r+0x4c>
 800969e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a2:	4299      	cmp	r1, r3
 80096a4:	d002      	beq.n	80096ac <__swsetup_r+0x48>
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 f990 	bl	80099cc <_free_r>
 80096ac:	2300      	movs	r3, #0
 80096ae:	6363      	str	r3, [r4, #52]	; 0x34
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	2300      	movs	r3, #0
 80096ba:	6063      	str	r3, [r4, #4]
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0308 	orr.w	r3, r3, #8
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	b94b      	cbnz	r3, 80096e0 <__swsetup_r+0x7c>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d6:	d003      	beq.n	80096e0 <__swsetup_r+0x7c>
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 ff88 	bl	800a5f0 <__smakebuf_r>
 80096e0:	89a0      	ldrh	r0, [r4, #12]
 80096e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096e6:	f010 0301 	ands.w	r3, r0, #1
 80096ea:	d00a      	beq.n	8009702 <__swsetup_r+0x9e>
 80096ec:	2300      	movs	r3, #0
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	6963      	ldr	r3, [r4, #20]
 80096f2:	425b      	negs	r3, r3
 80096f4:	61a3      	str	r3, [r4, #24]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	b943      	cbnz	r3, 800970c <__swsetup_r+0xa8>
 80096fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096fe:	d1c4      	bne.n	800968a <__swsetup_r+0x26>
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	0781      	lsls	r1, r0, #30
 8009704:	bf58      	it	pl
 8009706:	6963      	ldrpl	r3, [r4, #20]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	e7f4      	b.n	80096f6 <__swsetup_r+0x92>
 800970c:	2000      	movs	r0, #0
 800970e:	e7f7      	b.n	8009700 <__swsetup_r+0x9c>
 8009710:	20000088 	.word	0x20000088

08009714 <memcmp>:
 8009714:	b510      	push	{r4, lr}
 8009716:	3901      	subs	r1, #1
 8009718:	4402      	add	r2, r0
 800971a:	4290      	cmp	r0, r2
 800971c:	d101      	bne.n	8009722 <memcmp+0xe>
 800971e:	2000      	movs	r0, #0
 8009720:	e005      	b.n	800972e <memcmp+0x1a>
 8009722:	7803      	ldrb	r3, [r0, #0]
 8009724:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009728:	42a3      	cmp	r3, r4
 800972a:	d001      	beq.n	8009730 <memcmp+0x1c>
 800972c:	1b18      	subs	r0, r3, r4
 800972e:	bd10      	pop	{r4, pc}
 8009730:	3001      	adds	r0, #1
 8009732:	e7f2      	b.n	800971a <memcmp+0x6>

08009734 <memset>:
 8009734:	4402      	add	r2, r0
 8009736:	4603      	mov	r3, r0
 8009738:	4293      	cmp	r3, r2
 800973a:	d100      	bne.n	800973e <memset+0xa>
 800973c:	4770      	bx	lr
 800973e:	f803 1b01 	strb.w	r1, [r3], #1
 8009742:	e7f9      	b.n	8009738 <memset+0x4>

08009744 <strcat>:
 8009744:	b510      	push	{r4, lr}
 8009746:	4602      	mov	r2, r0
 8009748:	7814      	ldrb	r4, [r2, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	3201      	adds	r2, #1
 800974e:	2c00      	cmp	r4, #0
 8009750:	d1fa      	bne.n	8009748 <strcat+0x4>
 8009752:	3b01      	subs	r3, #1
 8009754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009758:	f803 2f01 	strb.w	r2, [r3, #1]!
 800975c:	2a00      	cmp	r2, #0
 800975e:	d1f9      	bne.n	8009754 <strcat+0x10>
 8009760:	bd10      	pop	{r4, pc}

08009762 <strncmp>:
 8009762:	b510      	push	{r4, lr}
 8009764:	b16a      	cbz	r2, 8009782 <strncmp+0x20>
 8009766:	3901      	subs	r1, #1
 8009768:	1884      	adds	r4, r0, r2
 800976a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800976e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009772:	429a      	cmp	r2, r3
 8009774:	d103      	bne.n	800977e <strncmp+0x1c>
 8009776:	42a0      	cmp	r0, r4
 8009778:	d001      	beq.n	800977e <strncmp+0x1c>
 800977a:	2a00      	cmp	r2, #0
 800977c:	d1f5      	bne.n	800976a <strncmp+0x8>
 800977e:	1ad0      	subs	r0, r2, r3
 8009780:	bd10      	pop	{r4, pc}
 8009782:	4610      	mov	r0, r2
 8009784:	e7fc      	b.n	8009780 <strncmp+0x1e>

08009786 <strncpy>:
 8009786:	b510      	push	{r4, lr}
 8009788:	3901      	subs	r1, #1
 800978a:	4603      	mov	r3, r0
 800978c:	b132      	cbz	r2, 800979c <strncpy+0x16>
 800978e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009792:	f803 4b01 	strb.w	r4, [r3], #1
 8009796:	3a01      	subs	r2, #1
 8009798:	2c00      	cmp	r4, #0
 800979a:	d1f7      	bne.n	800978c <strncpy+0x6>
 800979c:	441a      	add	r2, r3
 800979e:	2100      	movs	r1, #0
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d100      	bne.n	80097a6 <strncpy+0x20>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	f803 1b01 	strb.w	r1, [r3], #1
 80097aa:	e7f9      	b.n	80097a0 <strncpy+0x1a>

080097ac <strtok>:
 80097ac:	4b16      	ldr	r3, [pc, #88]	; (8009808 <strtok+0x5c>)
 80097ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b0:	681e      	ldr	r6, [r3, #0]
 80097b2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80097b4:	4605      	mov	r5, r0
 80097b6:	b9fc      	cbnz	r4, 80097f8 <strtok+0x4c>
 80097b8:	2050      	movs	r0, #80	; 0x50
 80097ba:	9101      	str	r1, [sp, #4]
 80097bc:	f000 f952 	bl	8009a64 <malloc>
 80097c0:	9901      	ldr	r1, [sp, #4]
 80097c2:	6470      	str	r0, [r6, #68]	; 0x44
 80097c4:	4602      	mov	r2, r0
 80097c6:	b920      	cbnz	r0, 80097d2 <strtok+0x26>
 80097c8:	4b10      	ldr	r3, [pc, #64]	; (800980c <strtok+0x60>)
 80097ca:	4811      	ldr	r0, [pc, #68]	; (8009810 <strtok+0x64>)
 80097cc:	215b      	movs	r1, #91	; 0x5b
 80097ce:	f000 f8df 	bl	8009990 <__assert_func>
 80097d2:	e9c0 4400 	strd	r4, r4, [r0]
 80097d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80097da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80097de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80097e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80097e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80097ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80097ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80097f2:	6184      	str	r4, [r0, #24]
 80097f4:	7704      	strb	r4, [r0, #28]
 80097f6:	6244      	str	r4, [r0, #36]	; 0x24
 80097f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80097fa:	2301      	movs	r3, #1
 80097fc:	4628      	mov	r0, r5
 80097fe:	b002      	add	sp, #8
 8009800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009804:	f000 b806 	b.w	8009814 <__strtok_r>
 8009808:	20000088 	.word	0x20000088
 800980c:	0800b9b8 	.word	0x0800b9b8
 8009810:	0800b9cf 	.word	0x0800b9cf

08009814 <__strtok_r>:
 8009814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009816:	b908      	cbnz	r0, 800981c <__strtok_r+0x8>
 8009818:	6810      	ldr	r0, [r2, #0]
 800981a:	b188      	cbz	r0, 8009840 <__strtok_r+0x2c>
 800981c:	4604      	mov	r4, r0
 800981e:	4620      	mov	r0, r4
 8009820:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009824:	460f      	mov	r7, r1
 8009826:	f817 6b01 	ldrb.w	r6, [r7], #1
 800982a:	b91e      	cbnz	r6, 8009834 <__strtok_r+0x20>
 800982c:	b965      	cbnz	r5, 8009848 <__strtok_r+0x34>
 800982e:	6015      	str	r5, [r2, #0]
 8009830:	4628      	mov	r0, r5
 8009832:	e005      	b.n	8009840 <__strtok_r+0x2c>
 8009834:	42b5      	cmp	r5, r6
 8009836:	d1f6      	bne.n	8009826 <__strtok_r+0x12>
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f0      	bne.n	800981e <__strtok_r+0xa>
 800983c:	6014      	str	r4, [r2, #0]
 800983e:	7003      	strb	r3, [r0, #0]
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009842:	461c      	mov	r4, r3
 8009844:	e00c      	b.n	8009860 <__strtok_r+0x4c>
 8009846:	b915      	cbnz	r5, 800984e <__strtok_r+0x3a>
 8009848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800984c:	460e      	mov	r6, r1
 800984e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009852:	42ab      	cmp	r3, r5
 8009854:	d1f7      	bne.n	8009846 <__strtok_r+0x32>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f3      	beq.n	8009842 <__strtok_r+0x2e>
 800985a:	2300      	movs	r3, #0
 800985c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009860:	6014      	str	r4, [r2, #0]
 8009862:	e7ed      	b.n	8009840 <__strtok_r+0x2c>

08009864 <strstr>:
 8009864:	780a      	ldrb	r2, [r1, #0]
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	b96a      	cbnz	r2, 8009886 <strstr+0x22>
 800986a:	bd70      	pop	{r4, r5, r6, pc}
 800986c:	429a      	cmp	r2, r3
 800986e:	d109      	bne.n	8009884 <strstr+0x20>
 8009870:	460c      	mov	r4, r1
 8009872:	4605      	mov	r5, r0
 8009874:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0f6      	beq.n	800986a <strstr+0x6>
 800987c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009880:	429e      	cmp	r6, r3
 8009882:	d0f7      	beq.n	8009874 <strstr+0x10>
 8009884:	3001      	adds	r0, #1
 8009886:	7803      	ldrb	r3, [r0, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1ef      	bne.n	800986c <strstr+0x8>
 800988c:	4618      	mov	r0, r3
 800988e:	e7ec      	b.n	800986a <strstr+0x6>

08009890 <_close_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d06      	ldr	r5, [pc, #24]	; (80098ac <_close_r+0x1c>)
 8009894:	2300      	movs	r3, #0
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7f9 fd8c 	bl	80033b8 <_close>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_close_r+0x1a>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_close_r+0x1a>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	2000158c 	.word	0x2000158c

080098b0 <_lseek_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d07      	ldr	r5, [pc, #28]	; (80098d0 <_lseek_r+0x20>)
 80098b4:	4604      	mov	r4, r0
 80098b6:	4608      	mov	r0, r1
 80098b8:	4611      	mov	r1, r2
 80098ba:	2200      	movs	r2, #0
 80098bc:	602a      	str	r2, [r5, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	f7f9 fda1 	bl	8003406 <_lseek>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_lseek_r+0x1e>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_lseek_r+0x1e>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	2000158c 	.word	0x2000158c

080098d4 <_read_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_read_r+0x20>)
 80098d8:	4604      	mov	r4, r0
 80098da:	4608      	mov	r0, r1
 80098dc:	4611      	mov	r1, r2
 80098de:	2200      	movs	r2, #0
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f7f9 fd2f 	bl	8003346 <_read>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_read_r+0x1e>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_read_r+0x1e>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	2000158c 	.word	0x2000158c

080098f8 <_write_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_write_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f9 fd3a 	bl	8003380 <_write>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_write_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_write_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	2000158c 	.word	0x2000158c

0800991c <__errno>:
 800991c:	4b01      	ldr	r3, [pc, #4]	; (8009924 <__errno+0x8>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000088 	.word	0x20000088

08009928 <__libc_init_array>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4d0d      	ldr	r5, [pc, #52]	; (8009960 <__libc_init_array+0x38>)
 800992c:	4c0d      	ldr	r4, [pc, #52]	; (8009964 <__libc_init_array+0x3c>)
 800992e:	1b64      	subs	r4, r4, r5
 8009930:	10a4      	asrs	r4, r4, #2
 8009932:	2600      	movs	r6, #0
 8009934:	42a6      	cmp	r6, r4
 8009936:	d109      	bne.n	800994c <__libc_init_array+0x24>
 8009938:	4d0b      	ldr	r5, [pc, #44]	; (8009968 <__libc_init_array+0x40>)
 800993a:	4c0c      	ldr	r4, [pc, #48]	; (800996c <__libc_init_array+0x44>)
 800993c:	f000 ff96 	bl	800a86c <_init>
 8009940:	1b64      	subs	r4, r4, r5
 8009942:	10a4      	asrs	r4, r4, #2
 8009944:	2600      	movs	r6, #0
 8009946:	42a6      	cmp	r6, r4
 8009948:	d105      	bne.n	8009956 <__libc_init_array+0x2e>
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009950:	4798      	blx	r3
 8009952:	3601      	adds	r6, #1
 8009954:	e7ee      	b.n	8009934 <__libc_init_array+0xc>
 8009956:	f855 3b04 	ldr.w	r3, [r5], #4
 800995a:	4798      	blx	r3
 800995c:	3601      	adds	r6, #1
 800995e:	e7f2      	b.n	8009946 <__libc_init_array+0x1e>
 8009960:	0800baa0 	.word	0x0800baa0
 8009964:	0800baa0 	.word	0x0800baa0
 8009968:	0800baa0 	.word	0x0800baa0
 800996c:	0800baa4 	.word	0x0800baa4

08009970 <__retarget_lock_acquire_recursive>:
 8009970:	4770      	bx	lr

08009972 <__retarget_lock_release_recursive>:
 8009972:	4770      	bx	lr

08009974 <memcpy>:
 8009974:	440a      	add	r2, r1
 8009976:	4291      	cmp	r1, r2
 8009978:	f100 33ff 	add.w	r3, r0, #4294967295
 800997c:	d100      	bne.n	8009980 <memcpy+0xc>
 800997e:	4770      	bx	lr
 8009980:	b510      	push	{r4, lr}
 8009982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800998a:	4291      	cmp	r1, r2
 800998c:	d1f9      	bne.n	8009982 <memcpy+0xe>
 800998e:	bd10      	pop	{r4, pc}

08009990 <__assert_func>:
 8009990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009992:	4614      	mov	r4, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4b09      	ldr	r3, [pc, #36]	; (80099bc <__assert_func+0x2c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4605      	mov	r5, r0
 800999c:	68d8      	ldr	r0, [r3, #12]
 800999e:	b14c      	cbz	r4, 80099b4 <__assert_func+0x24>
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <__assert_func+0x30>)
 80099a2:	9100      	str	r1, [sp, #0]
 80099a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099a8:	4906      	ldr	r1, [pc, #24]	; (80099c4 <__assert_func+0x34>)
 80099aa:	462b      	mov	r3, r5
 80099ac:	f000 fde8 	bl	800a580 <fiprintf>
 80099b0:	f000 feda 	bl	800a768 <abort>
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <__assert_func+0x38>)
 80099b6:	461c      	mov	r4, r3
 80099b8:	e7f3      	b.n	80099a2 <__assert_func+0x12>
 80099ba:	bf00      	nop
 80099bc:	20000088 	.word	0x20000088
 80099c0:	0800ba29 	.word	0x0800ba29
 80099c4:	0800ba36 	.word	0x0800ba36
 80099c8:	0800ba64 	.word	0x0800ba64

080099cc <_free_r>:
 80099cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ce:	2900      	cmp	r1, #0
 80099d0:	d044      	beq.n	8009a5c <_free_r+0x90>
 80099d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d6:	9001      	str	r0, [sp, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f1a1 0404 	sub.w	r4, r1, #4
 80099de:	bfb8      	it	lt
 80099e0:	18e4      	addlt	r4, r4, r3
 80099e2:	f000 f8e7 	bl	8009bb4 <__malloc_lock>
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <_free_r+0x94>)
 80099e8:	9801      	ldr	r0, [sp, #4]
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	b933      	cbnz	r3, 80099fc <_free_r+0x30>
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	6014      	str	r4, [r2, #0]
 80099f2:	b003      	add	sp, #12
 80099f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f8:	f000 b8e2 	b.w	8009bc0 <__malloc_unlock>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d908      	bls.n	8009a12 <_free_r+0x46>
 8009a00:	6825      	ldr	r5, [r4, #0]
 8009a02:	1961      	adds	r1, r4, r5
 8009a04:	428b      	cmp	r3, r1
 8009a06:	bf01      	itttt	eq
 8009a08:	6819      	ldreq	r1, [r3, #0]
 8009a0a:	685b      	ldreq	r3, [r3, #4]
 8009a0c:	1949      	addeq	r1, r1, r5
 8009a0e:	6021      	streq	r1, [r4, #0]
 8009a10:	e7ed      	b.n	80099ee <_free_r+0x22>
 8009a12:	461a      	mov	r2, r3
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	b10b      	cbz	r3, 8009a1c <_free_r+0x50>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d9fa      	bls.n	8009a12 <_free_r+0x46>
 8009a1c:	6811      	ldr	r1, [r2, #0]
 8009a1e:	1855      	adds	r5, r2, r1
 8009a20:	42a5      	cmp	r5, r4
 8009a22:	d10b      	bne.n	8009a3c <_free_r+0x70>
 8009a24:	6824      	ldr	r4, [r4, #0]
 8009a26:	4421      	add	r1, r4
 8009a28:	1854      	adds	r4, r2, r1
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	d1e0      	bne.n	80099f2 <_free_r+0x26>
 8009a30:	681c      	ldr	r4, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	6053      	str	r3, [r2, #4]
 8009a36:	440c      	add	r4, r1
 8009a38:	6014      	str	r4, [r2, #0]
 8009a3a:	e7da      	b.n	80099f2 <_free_r+0x26>
 8009a3c:	d902      	bls.n	8009a44 <_free_r+0x78>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	e7d6      	b.n	80099f2 <_free_r+0x26>
 8009a44:	6825      	ldr	r5, [r4, #0]
 8009a46:	1961      	adds	r1, r4, r5
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf04      	itt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	bf04      	itt	eq
 8009a54:	1949      	addeq	r1, r1, r5
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	6054      	str	r4, [r2, #4]
 8009a5a:	e7ca      	b.n	80099f2 <_free_r+0x26>
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bd30      	pop	{r4, r5, pc}
 8009a60:	20001594 	.word	0x20001594

08009a64 <malloc>:
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <malloc+0xc>)
 8009a66:	4601      	mov	r1, r0
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f000 b823 	b.w	8009ab4 <_malloc_r>
 8009a6e:	bf00      	nop
 8009a70:	20000088 	.word	0x20000088

08009a74 <sbrk_aligned>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4e0e      	ldr	r6, [pc, #56]	; (8009ab0 <sbrk_aligned+0x3c>)
 8009a78:	460c      	mov	r4, r1
 8009a7a:	6831      	ldr	r1, [r6, #0]
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	b911      	cbnz	r1, 8009a86 <sbrk_aligned+0x12>
 8009a80:	f000 fe62 	bl	800a748 <_sbrk_r>
 8009a84:	6030      	str	r0, [r6, #0]
 8009a86:	4621      	mov	r1, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 fe5d 	bl	800a748 <_sbrk_r>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d00a      	beq.n	8009aa8 <sbrk_aligned+0x34>
 8009a92:	1cc4      	adds	r4, r0, #3
 8009a94:	f024 0403 	bic.w	r4, r4, #3
 8009a98:	42a0      	cmp	r0, r4
 8009a9a:	d007      	beq.n	8009aac <sbrk_aligned+0x38>
 8009a9c:	1a21      	subs	r1, r4, r0
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 fe52 	bl	800a748 <_sbrk_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d101      	bne.n	8009aac <sbrk_aligned+0x38>
 8009aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8009aac:	4620      	mov	r0, r4
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	20001598 	.word	0x20001598

08009ab4 <_malloc_r>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	1ccd      	adds	r5, r1, #3
 8009aba:	f025 0503 	bic.w	r5, r5, #3
 8009abe:	3508      	adds	r5, #8
 8009ac0:	2d0c      	cmp	r5, #12
 8009ac2:	bf38      	it	cc
 8009ac4:	250c      	movcc	r5, #12
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	4607      	mov	r7, r0
 8009aca:	db01      	blt.n	8009ad0 <_malloc_r+0x1c>
 8009acc:	42a9      	cmp	r1, r5
 8009ace:	d905      	bls.n	8009adc <_malloc_r+0x28>
 8009ad0:	230c      	movs	r3, #12
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009adc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bb0 <_malloc_r+0xfc>
 8009ae0:	f000 f868 	bl	8009bb4 <__malloc_lock>
 8009ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae8:	461c      	mov	r4, r3
 8009aea:	bb5c      	cbnz	r4, 8009b44 <_malloc_r+0x90>
 8009aec:	4629      	mov	r1, r5
 8009aee:	4638      	mov	r0, r7
 8009af0:	f7ff ffc0 	bl	8009a74 <sbrk_aligned>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	4604      	mov	r4, r0
 8009af8:	d155      	bne.n	8009ba6 <_malloc_r+0xf2>
 8009afa:	f8d8 4000 	ldr.w	r4, [r8]
 8009afe:	4626      	mov	r6, r4
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	d145      	bne.n	8009b90 <_malloc_r+0xdc>
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	d048      	beq.n	8009b9a <_malloc_r+0xe6>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	eb04 0903 	add.w	r9, r4, r3
 8009b12:	f000 fe19 	bl	800a748 <_sbrk_r>
 8009b16:	4581      	cmp	r9, r0
 8009b18:	d13f      	bne.n	8009b9a <_malloc_r+0xe6>
 8009b1a:	6821      	ldr	r1, [r4, #0]
 8009b1c:	1a6d      	subs	r5, r5, r1
 8009b1e:	4629      	mov	r1, r5
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff ffa7 	bl	8009a74 <sbrk_aligned>
 8009b26:	3001      	adds	r0, #1
 8009b28:	d037      	beq.n	8009b9a <_malloc_r+0xe6>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	442b      	add	r3, r5
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	f8d8 3000 	ldr.w	r3, [r8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d038      	beq.n	8009baa <_malloc_r+0xf6>
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	42a2      	cmp	r2, r4
 8009b3c:	d12b      	bne.n	8009b96 <_malloc_r+0xe2>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	e00f      	b.n	8009b64 <_malloc_r+0xb0>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	1b52      	subs	r2, r2, r5
 8009b48:	d41f      	bmi.n	8009b8a <_malloc_r+0xd6>
 8009b4a:	2a0b      	cmp	r2, #11
 8009b4c:	d917      	bls.n	8009b7e <_malloc_r+0xca>
 8009b4e:	1961      	adds	r1, r4, r5
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	6059      	strne	r1, [r3, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	bf08      	it	eq
 8009b5c:	f8c8 1000 	streq.w	r1, [r8]
 8009b60:	5162      	str	r2, [r4, r5]
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	4638      	mov	r0, r7
 8009b66:	f104 060b 	add.w	r6, r4, #11
 8009b6a:	f000 f829 	bl	8009bc0 <__malloc_unlock>
 8009b6e:	f026 0607 	bic.w	r6, r6, #7
 8009b72:	1d23      	adds	r3, r4, #4
 8009b74:	1af2      	subs	r2, r6, r3
 8009b76:	d0ae      	beq.n	8009ad6 <_malloc_r+0x22>
 8009b78:	1b9b      	subs	r3, r3, r6
 8009b7a:	50a3      	str	r3, [r4, r2]
 8009b7c:	e7ab      	b.n	8009ad6 <_malloc_r+0x22>
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	6862      	ldr	r2, [r4, #4]
 8009b82:	d1dd      	bne.n	8009b40 <_malloc_r+0x8c>
 8009b84:	f8c8 2000 	str.w	r2, [r8]
 8009b88:	e7ec      	b.n	8009b64 <_malloc_r+0xb0>
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	6864      	ldr	r4, [r4, #4]
 8009b8e:	e7ac      	b.n	8009aea <_malloc_r+0x36>
 8009b90:	4634      	mov	r4, r6
 8009b92:	6876      	ldr	r6, [r6, #4]
 8009b94:	e7b4      	b.n	8009b00 <_malloc_r+0x4c>
 8009b96:	4613      	mov	r3, r2
 8009b98:	e7cc      	b.n	8009b34 <_malloc_r+0x80>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	603b      	str	r3, [r7, #0]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f000 f80e 	bl	8009bc0 <__malloc_unlock>
 8009ba4:	e797      	b.n	8009ad6 <_malloc_r+0x22>
 8009ba6:	6025      	str	r5, [r4, #0]
 8009ba8:	e7dc      	b.n	8009b64 <_malloc_r+0xb0>
 8009baa:	605b      	str	r3, [r3, #4]
 8009bac:	deff      	udf	#255	; 0xff
 8009bae:	bf00      	nop
 8009bb0:	20001594 	.word	0x20001594

08009bb4 <__malloc_lock>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__malloc_lock+0x8>)
 8009bb6:	f7ff bedb 	b.w	8009970 <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20001590 	.word	0x20001590

08009bc0 <__malloc_unlock>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__malloc_unlock+0x8>)
 8009bc2:	f7ff bed6 	b.w	8009972 <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20001590 	.word	0x20001590

08009bcc <__ssputs_r>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	688e      	ldr	r6, [r1, #8]
 8009bd2:	461f      	mov	r7, r3
 8009bd4:	42be      	cmp	r6, r7
 8009bd6:	680b      	ldr	r3, [r1, #0]
 8009bd8:	4682      	mov	sl, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	4690      	mov	r8, r2
 8009bde:	d82c      	bhi.n	8009c3a <__ssputs_r+0x6e>
 8009be0:	898a      	ldrh	r2, [r1, #12]
 8009be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009be6:	d026      	beq.n	8009c36 <__ssputs_r+0x6a>
 8009be8:	6965      	ldr	r5, [r4, #20]
 8009bea:	6909      	ldr	r1, [r1, #16]
 8009bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf0:	eba3 0901 	sub.w	r9, r3, r1
 8009bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bf8:	1c7b      	adds	r3, r7, #1
 8009bfa:	444b      	add	r3, r9
 8009bfc:	106d      	asrs	r5, r5, #1
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	bf38      	it	cc
 8009c02:	461d      	movcc	r5, r3
 8009c04:	0553      	lsls	r3, r2, #21
 8009c06:	d527      	bpl.n	8009c58 <__ssputs_r+0x8c>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7ff ff53 	bl	8009ab4 <_malloc_r>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	b360      	cbz	r0, 8009c6c <__ssputs_r+0xa0>
 8009c12:	6921      	ldr	r1, [r4, #16]
 8009c14:	464a      	mov	r2, r9
 8009c16:	f7ff fead 	bl	8009974 <memcpy>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	6126      	str	r6, [r4, #16]
 8009c28:	6165      	str	r5, [r4, #20]
 8009c2a:	444e      	add	r6, r9
 8009c2c:	eba5 0509 	sub.w	r5, r5, r9
 8009c30:	6026      	str	r6, [r4, #0]
 8009c32:	60a5      	str	r5, [r4, #8]
 8009c34:	463e      	mov	r6, r7
 8009c36:	42be      	cmp	r6, r7
 8009c38:	d900      	bls.n	8009c3c <__ssputs_r+0x70>
 8009c3a:	463e      	mov	r6, r7
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	4632      	mov	r2, r6
 8009c40:	4641      	mov	r1, r8
 8009c42:	f000 fd45 	bl	800a6d0 <memmove>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	1b9b      	subs	r3, r3, r6
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	4433      	add	r3, r6
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	2000      	movs	r0, #0
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	462a      	mov	r2, r5
 8009c5a:	f000 fd8c 	bl	800a776 <_realloc_r>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d1e0      	bne.n	8009c26 <__ssputs_r+0x5a>
 8009c64:	6921      	ldr	r1, [r4, #16]
 8009c66:	4650      	mov	r0, sl
 8009c68:	f7ff feb0 	bl	80099cc <_free_r>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	f8ca 3000 	str.w	r3, [sl]
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	e7e9      	b.n	8009c54 <__ssputs_r+0x88>

08009c80 <_svfiprintf_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	4698      	mov	r8, r3
 8009c86:	898b      	ldrh	r3, [r1, #12]
 8009c88:	061b      	lsls	r3, r3, #24
 8009c8a:	b09d      	sub	sp, #116	; 0x74
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	460d      	mov	r5, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	d50e      	bpl.n	8009cb2 <_svfiprintf_r+0x32>
 8009c94:	690b      	ldr	r3, [r1, #16]
 8009c96:	b963      	cbnz	r3, 8009cb2 <_svfiprintf_r+0x32>
 8009c98:	2140      	movs	r1, #64	; 0x40
 8009c9a:	f7ff ff0b 	bl	8009ab4 <_malloc_r>
 8009c9e:	6028      	str	r0, [r5, #0]
 8009ca0:	6128      	str	r0, [r5, #16]
 8009ca2:	b920      	cbnz	r0, 8009cae <_svfiprintf_r+0x2e>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	e0d0      	b.n	8009e50 <_svfiprintf_r+0x1d0>
 8009cae:	2340      	movs	r3, #64	; 0x40
 8009cb0:	616b      	str	r3, [r5, #20]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc0:	2330      	movs	r3, #48	; 0x30
 8009cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e68 <_svfiprintf_r+0x1e8>
 8009cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cca:	f04f 0901 	mov.w	r9, #1
 8009cce:	4623      	mov	r3, r4
 8009cd0:	469a      	mov	sl, r3
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	b10a      	cbz	r2, 8009cdc <_svfiprintf_r+0x5c>
 8009cd8:	2a25      	cmp	r2, #37	; 0x25
 8009cda:	d1f9      	bne.n	8009cd0 <_svfiprintf_r+0x50>
 8009cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce0:	d00b      	beq.n	8009cfa <_svfiprintf_r+0x7a>
 8009ce2:	465b      	mov	r3, fp
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ff6f 	bl	8009bcc <__ssputs_r>
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f000 80a9 	beq.w	8009e46 <_svfiprintf_r+0x1c6>
 8009cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf6:	445a      	add	r2, fp
 8009cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80a1 	beq.w	8009e46 <_svfiprintf_r+0x1c6>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d0e:	f10a 0a01 	add.w	sl, sl, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	9307      	str	r3, [sp, #28]
 8009d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2205      	movs	r2, #5
 8009d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d24:	4850      	ldr	r0, [pc, #320]	; (8009e68 <_svfiprintf_r+0x1e8>)
 8009d26:	f7f6 fa73 	bl	8000210 <memchr>
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	b9d8      	cbnz	r0, 8009d66 <_svfiprintf_r+0xe6>
 8009d2e:	06d0      	lsls	r0, r2, #27
 8009d30:	bf44      	itt	mi
 8009d32:	2320      	movmi	r3, #32
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d38:	0711      	lsls	r1, r2, #28
 8009d3a:	bf44      	itt	mi
 8009d3c:	232b      	movmi	r3, #43	; 0x2b
 8009d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d42:	f89a 3000 	ldrb.w	r3, [sl]
 8009d46:	2b2a      	cmp	r3, #42	; 0x2a
 8009d48:	d015      	beq.n	8009d76 <_svfiprintf_r+0xf6>
 8009d4a:	9a07      	ldr	r2, [sp, #28]
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f04f 0c0a 	mov.w	ip, #10
 8009d54:	4621      	mov	r1, r4
 8009d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d5a:	3b30      	subs	r3, #48	; 0x30
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d94d      	bls.n	8009dfc <_svfiprintf_r+0x17c>
 8009d60:	b1b0      	cbz	r0, 8009d90 <_svfiprintf_r+0x110>
 8009d62:	9207      	str	r2, [sp, #28]
 8009d64:	e014      	b.n	8009d90 <_svfiprintf_r+0x110>
 8009d66:	eba0 0308 	sub.w	r3, r0, r8
 8009d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	46a2      	mov	sl, r4
 8009d74:	e7d2      	b.n	8009d1c <_svfiprintf_r+0x9c>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	1d19      	adds	r1, r3, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	9103      	str	r1, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfbb      	ittet	lt
 8009d82:	425b      	neglt	r3, r3
 8009d84:	f042 0202 	orrlt.w	r2, r2, #2
 8009d88:	9307      	strge	r3, [sp, #28]
 8009d8a:	9307      	strlt	r3, [sp, #28]
 8009d8c:	bfb8      	it	lt
 8009d8e:	9204      	strlt	r2, [sp, #16]
 8009d90:	7823      	ldrb	r3, [r4, #0]
 8009d92:	2b2e      	cmp	r3, #46	; 0x2e
 8009d94:	d10c      	bne.n	8009db0 <_svfiprintf_r+0x130>
 8009d96:	7863      	ldrb	r3, [r4, #1]
 8009d98:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9a:	d134      	bne.n	8009e06 <_svfiprintf_r+0x186>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	1d1a      	adds	r2, r3, #4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	9203      	str	r2, [sp, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bfb8      	it	lt
 8009da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dac:	3402      	adds	r4, #2
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e78 <_svfiprintf_r+0x1f8>
 8009db4:	7821      	ldrb	r1, [r4, #0]
 8009db6:	2203      	movs	r2, #3
 8009db8:	4650      	mov	r0, sl
 8009dba:	f7f6 fa29 	bl	8000210 <memchr>
 8009dbe:	b138      	cbz	r0, 8009dd0 <_svfiprintf_r+0x150>
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	eba0 000a 	sub.w	r0, r0, sl
 8009dc6:	2240      	movs	r2, #64	; 0x40
 8009dc8:	4082      	lsls	r2, r0
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	3401      	adds	r4, #1
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd4:	4825      	ldr	r0, [pc, #148]	; (8009e6c <_svfiprintf_r+0x1ec>)
 8009dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dda:	2206      	movs	r2, #6
 8009ddc:	f7f6 fa18 	bl	8000210 <memchr>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d038      	beq.n	8009e56 <_svfiprintf_r+0x1d6>
 8009de4:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <_svfiprintf_r+0x1f0>)
 8009de6:	bb1b      	cbnz	r3, 8009e30 <_svfiprintf_r+0x1b0>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	3307      	adds	r3, #7
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	3308      	adds	r3, #8
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df6:	4433      	add	r3, r6
 8009df8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfa:	e768      	b.n	8009cce <_svfiprintf_r+0x4e>
 8009dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e00:	460c      	mov	r4, r1
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7a6      	b.n	8009d54 <_svfiprintf_r+0xd4>
 8009e06:	2300      	movs	r3, #0
 8009e08:	3401      	adds	r4, #1
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f04f 0c0a 	mov.w	ip, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e18:	3a30      	subs	r2, #48	; 0x30
 8009e1a:	2a09      	cmp	r2, #9
 8009e1c:	d903      	bls.n	8009e26 <_svfiprintf_r+0x1a6>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0c6      	beq.n	8009db0 <_svfiprintf_r+0x130>
 8009e22:	9105      	str	r1, [sp, #20]
 8009e24:	e7c4      	b.n	8009db0 <_svfiprintf_r+0x130>
 8009e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e7f0      	b.n	8009e12 <_svfiprintf_r+0x192>
 8009e30:	ab03      	add	r3, sp, #12
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <_svfiprintf_r+0x1f4>)
 8009e38:	a904      	add	r1, sp, #16
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f3af 8000 	nop.w
 8009e40:	1c42      	adds	r2, r0, #1
 8009e42:	4606      	mov	r6, r0
 8009e44:	d1d6      	bne.n	8009df4 <_svfiprintf_r+0x174>
 8009e46:	89ab      	ldrh	r3, [r5, #12]
 8009e48:	065b      	lsls	r3, r3, #25
 8009e4a:	f53f af2d 	bmi.w	8009ca8 <_svfiprintf_r+0x28>
 8009e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e50:	b01d      	add	sp, #116	; 0x74
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <_svfiprintf_r+0x1f4>)
 8009e5e:	a904      	add	r1, sp, #16
 8009e60:	4638      	mov	r0, r7
 8009e62:	f000 f9bd 	bl	800a1e0 <_printf_i>
 8009e66:	e7eb      	b.n	8009e40 <_svfiprintf_r+0x1c0>
 8009e68:	0800ba65 	.word	0x0800ba65
 8009e6c:	0800ba6f 	.word	0x0800ba6f
 8009e70:	00000000 	.word	0x00000000
 8009e74:	08009bcd 	.word	0x08009bcd
 8009e78:	0800ba6b 	.word	0x0800ba6b

08009e7c <__sfputc_r>:
 8009e7c:	6893      	ldr	r3, [r2, #8]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	b410      	push	{r4}
 8009e84:	6093      	str	r3, [r2, #8]
 8009e86:	da08      	bge.n	8009e9a <__sfputc_r+0x1e>
 8009e88:	6994      	ldr	r4, [r2, #24]
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	db01      	blt.n	8009e92 <__sfputc_r+0x16>
 8009e8e:	290a      	cmp	r1, #10
 8009e90:	d103      	bne.n	8009e9a <__sfputc_r+0x1e>
 8009e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e96:	f7ff bba8 	b.w	80095ea <__swbuf_r>
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	1c58      	adds	r0, r3, #1
 8009e9e:	6010      	str	r0, [r2, #0]
 8009ea0:	7019      	strb	r1, [r3, #0]
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <__sfputs_r>:
 8009eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	18d5      	adds	r5, r2, r3
 8009eb4:	42ac      	cmp	r4, r5
 8009eb6:	d101      	bne.n	8009ebc <__sfputs_r+0x12>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e007      	b.n	8009ecc <__sfputs_r+0x22>
 8009ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec0:	463a      	mov	r2, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ffda 	bl	8009e7c <__sfputc_r>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d1f3      	bne.n	8009eb4 <__sfputs_r+0xa>
 8009ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ed0 <_vfiprintf_r>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	b09d      	sub	sp, #116	; 0x74
 8009ed8:	4614      	mov	r4, r2
 8009eda:	4698      	mov	r8, r3
 8009edc:	4606      	mov	r6, r0
 8009ede:	b118      	cbz	r0, 8009ee8 <_vfiprintf_r+0x18>
 8009ee0:	6a03      	ldr	r3, [r0, #32]
 8009ee2:	b90b      	cbnz	r3, 8009ee8 <_vfiprintf_r+0x18>
 8009ee4:	f7ff fa72 	bl	80093cc <__sinit>
 8009ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eea:	07d9      	lsls	r1, r3, #31
 8009eec:	d405      	bmi.n	8009efa <_vfiprintf_r+0x2a>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	059a      	lsls	r2, r3, #22
 8009ef2:	d402      	bmi.n	8009efa <_vfiprintf_r+0x2a>
 8009ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef6:	f7ff fd3b 	bl	8009970 <__retarget_lock_acquire_recursive>
 8009efa:	89ab      	ldrh	r3, [r5, #12]
 8009efc:	071b      	lsls	r3, r3, #28
 8009efe:	d501      	bpl.n	8009f04 <_vfiprintf_r+0x34>
 8009f00:	692b      	ldr	r3, [r5, #16]
 8009f02:	b99b      	cbnz	r3, 8009f2c <_vfiprintf_r+0x5c>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7ff fbac 	bl	8009664 <__swsetup_r>
 8009f0c:	b170      	cbz	r0, 8009f2c <_vfiprintf_r+0x5c>
 8009f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f10:	07dc      	lsls	r4, r3, #31
 8009f12:	d504      	bpl.n	8009f1e <_vfiprintf_r+0x4e>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	b01d      	add	sp, #116	; 0x74
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	0598      	lsls	r0, r3, #22
 8009f22:	d4f7      	bmi.n	8009f14 <_vfiprintf_r+0x44>
 8009f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f26:	f7ff fd24 	bl	8009972 <__retarget_lock_release_recursive>
 8009f2a:	e7f3      	b.n	8009f14 <_vfiprintf_r+0x44>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	2320      	movs	r3, #32
 8009f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f3a:	2330      	movs	r3, #48	; 0x30
 8009f3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a0f0 <_vfiprintf_r+0x220>
 8009f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f44:	f04f 0901 	mov.w	r9, #1
 8009f48:	4623      	mov	r3, r4
 8009f4a:	469a      	mov	sl, r3
 8009f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f50:	b10a      	cbz	r2, 8009f56 <_vfiprintf_r+0x86>
 8009f52:	2a25      	cmp	r2, #37	; 0x25
 8009f54:	d1f9      	bne.n	8009f4a <_vfiprintf_r+0x7a>
 8009f56:	ebba 0b04 	subs.w	fp, sl, r4
 8009f5a:	d00b      	beq.n	8009f74 <_vfiprintf_r+0xa4>
 8009f5c:	465b      	mov	r3, fp
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7ff ffa1 	bl	8009eaa <__sfputs_r>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f000 80a9 	beq.w	800a0c0 <_vfiprintf_r+0x1f0>
 8009f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f70:	445a      	add	r2, fp
 8009f72:	9209      	str	r2, [sp, #36]	; 0x24
 8009f74:	f89a 3000 	ldrb.w	r3, [sl]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 80a1 	beq.w	800a0c0 <_vfiprintf_r+0x1f0>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f04f 32ff 	mov.w	r2, #4294967295
 8009f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f88:	f10a 0a01 	add.w	sl, sl, #1
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	9307      	str	r3, [sp, #28]
 8009f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f94:	931a      	str	r3, [sp, #104]	; 0x68
 8009f96:	4654      	mov	r4, sl
 8009f98:	2205      	movs	r2, #5
 8009f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9e:	4854      	ldr	r0, [pc, #336]	; (800a0f0 <_vfiprintf_r+0x220>)
 8009fa0:	f7f6 f936 	bl	8000210 <memchr>
 8009fa4:	9a04      	ldr	r2, [sp, #16]
 8009fa6:	b9d8      	cbnz	r0, 8009fe0 <_vfiprintf_r+0x110>
 8009fa8:	06d1      	lsls	r1, r2, #27
 8009faa:	bf44      	itt	mi
 8009fac:	2320      	movmi	r3, #32
 8009fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb2:	0713      	lsls	r3, r2, #28
 8009fb4:	bf44      	itt	mi
 8009fb6:	232b      	movmi	r3, #43	; 0x2b
 8009fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc2:	d015      	beq.n	8009ff0 <_vfiprintf_r+0x120>
 8009fc4:	9a07      	ldr	r2, [sp, #28]
 8009fc6:	4654      	mov	r4, sl
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f04f 0c0a 	mov.w	ip, #10
 8009fce:	4621      	mov	r1, r4
 8009fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd4:	3b30      	subs	r3, #48	; 0x30
 8009fd6:	2b09      	cmp	r3, #9
 8009fd8:	d94d      	bls.n	800a076 <_vfiprintf_r+0x1a6>
 8009fda:	b1b0      	cbz	r0, 800a00a <_vfiprintf_r+0x13a>
 8009fdc:	9207      	str	r2, [sp, #28]
 8009fde:	e014      	b.n	800a00a <_vfiprintf_r+0x13a>
 8009fe0:	eba0 0308 	sub.w	r3, r0, r8
 8009fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	46a2      	mov	sl, r4
 8009fee:	e7d2      	b.n	8009f96 <_vfiprintf_r+0xc6>
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	1d19      	adds	r1, r3, #4
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	9103      	str	r1, [sp, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfbb      	ittet	lt
 8009ffc:	425b      	neglt	r3, r3
 8009ffe:	f042 0202 	orrlt.w	r2, r2, #2
 800a002:	9307      	strge	r3, [sp, #28]
 800a004:	9307      	strlt	r3, [sp, #28]
 800a006:	bfb8      	it	lt
 800a008:	9204      	strlt	r2, [sp, #16]
 800a00a:	7823      	ldrb	r3, [r4, #0]
 800a00c:	2b2e      	cmp	r3, #46	; 0x2e
 800a00e:	d10c      	bne.n	800a02a <_vfiprintf_r+0x15a>
 800a010:	7863      	ldrb	r3, [r4, #1]
 800a012:	2b2a      	cmp	r3, #42	; 0x2a
 800a014:	d134      	bne.n	800a080 <_vfiprintf_r+0x1b0>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	9203      	str	r2, [sp, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfb8      	it	lt
 800a022:	f04f 33ff 	movlt.w	r3, #4294967295
 800a026:	3402      	adds	r4, #2
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a100 <_vfiprintf_r+0x230>
 800a02e:	7821      	ldrb	r1, [r4, #0]
 800a030:	2203      	movs	r2, #3
 800a032:	4650      	mov	r0, sl
 800a034:	f7f6 f8ec 	bl	8000210 <memchr>
 800a038:	b138      	cbz	r0, 800a04a <_vfiprintf_r+0x17a>
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	eba0 000a 	sub.w	r0, r0, sl
 800a040:	2240      	movs	r2, #64	; 0x40
 800a042:	4082      	lsls	r2, r0
 800a044:	4313      	orrs	r3, r2
 800a046:	3401      	adds	r4, #1
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04e:	4829      	ldr	r0, [pc, #164]	; (800a0f4 <_vfiprintf_r+0x224>)
 800a050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a054:	2206      	movs	r2, #6
 800a056:	f7f6 f8db 	bl	8000210 <memchr>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d03f      	beq.n	800a0de <_vfiprintf_r+0x20e>
 800a05e:	4b26      	ldr	r3, [pc, #152]	; (800a0f8 <_vfiprintf_r+0x228>)
 800a060:	bb1b      	cbnz	r3, 800a0aa <_vfiprintf_r+0x1da>
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	3307      	adds	r3, #7
 800a066:	f023 0307 	bic.w	r3, r3, #7
 800a06a:	3308      	adds	r3, #8
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	443b      	add	r3, r7
 800a072:	9309      	str	r3, [sp, #36]	; 0x24
 800a074:	e768      	b.n	8009f48 <_vfiprintf_r+0x78>
 800a076:	fb0c 3202 	mla	r2, ip, r2, r3
 800a07a:	460c      	mov	r4, r1
 800a07c:	2001      	movs	r0, #1
 800a07e:	e7a6      	b.n	8009fce <_vfiprintf_r+0xfe>
 800a080:	2300      	movs	r3, #0
 800a082:	3401      	adds	r4, #1
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	4619      	mov	r1, r3
 800a088:	f04f 0c0a 	mov.w	ip, #10
 800a08c:	4620      	mov	r0, r4
 800a08e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a092:	3a30      	subs	r2, #48	; 0x30
 800a094:	2a09      	cmp	r2, #9
 800a096:	d903      	bls.n	800a0a0 <_vfiprintf_r+0x1d0>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0c6      	beq.n	800a02a <_vfiprintf_r+0x15a>
 800a09c:	9105      	str	r1, [sp, #20]
 800a09e:	e7c4      	b.n	800a02a <_vfiprintf_r+0x15a>
 800a0a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e7f0      	b.n	800a08c <_vfiprintf_r+0x1bc>
 800a0aa:	ab03      	add	r3, sp, #12
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4b12      	ldr	r3, [pc, #72]	; (800a0fc <_vfiprintf_r+0x22c>)
 800a0b2:	a904      	add	r1, sp, #16
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f3af 8000 	nop.w
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	1c78      	adds	r0, r7, #1
 800a0be:	d1d6      	bne.n	800a06e <_vfiprintf_r+0x19e>
 800a0c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c2:	07d9      	lsls	r1, r3, #31
 800a0c4:	d405      	bmi.n	800a0d2 <_vfiprintf_r+0x202>
 800a0c6:	89ab      	ldrh	r3, [r5, #12]
 800a0c8:	059a      	lsls	r2, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_vfiprintf_r+0x202>
 800a0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ce:	f7ff fc50 	bl	8009972 <__retarget_lock_release_recursive>
 800a0d2:	89ab      	ldrh	r3, [r5, #12]
 800a0d4:	065b      	lsls	r3, r3, #25
 800a0d6:	f53f af1d 	bmi.w	8009f14 <_vfiprintf_r+0x44>
 800a0da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0dc:	e71c      	b.n	8009f18 <_vfiprintf_r+0x48>
 800a0de:	ab03      	add	r3, sp, #12
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <_vfiprintf_r+0x22c>)
 800a0e6:	a904      	add	r1, sp, #16
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f000 f879 	bl	800a1e0 <_printf_i>
 800a0ee:	e7e4      	b.n	800a0ba <_vfiprintf_r+0x1ea>
 800a0f0:	0800ba65 	.word	0x0800ba65
 800a0f4:	0800ba6f 	.word	0x0800ba6f
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	08009eab 	.word	0x08009eab
 800a100:	0800ba6b 	.word	0x0800ba6b

0800a104 <_printf_common>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	4616      	mov	r6, r2
 800a10a:	4699      	mov	r9, r3
 800a10c:	688a      	ldr	r2, [r1, #8]
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a114:	4293      	cmp	r3, r2
 800a116:	bfb8      	it	lt
 800a118:	4613      	movlt	r3, r2
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a120:	4607      	mov	r7, r0
 800a122:	460c      	mov	r4, r1
 800a124:	b10a      	cbz	r2, 800a12a <_printf_common+0x26>
 800a126:	3301      	adds	r3, #1
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	0699      	lsls	r1, r3, #26
 800a12e:	bf42      	ittt	mi
 800a130:	6833      	ldrmi	r3, [r6, #0]
 800a132:	3302      	addmi	r3, #2
 800a134:	6033      	strmi	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	f015 0506 	ands.w	r5, r5, #6
 800a13c:	d106      	bne.n	800a14c <_printf_common+0x48>
 800a13e:	f104 0a19 	add.w	sl, r4, #25
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	6832      	ldr	r2, [r6, #0]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dc26      	bgt.n	800a19a <_printf_common+0x96>
 800a14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a150:	1e13      	subs	r3, r2, #0
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	bf18      	it	ne
 800a156:	2301      	movne	r3, #1
 800a158:	0692      	lsls	r2, r2, #26
 800a15a:	d42b      	bmi.n	800a1b4 <_printf_common+0xb0>
 800a15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a160:	4649      	mov	r1, r9
 800a162:	4638      	mov	r0, r7
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d01e      	beq.n	800a1a8 <_printf_common+0xa4>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	f003 0306 	and.w	r3, r3, #6
 800a172:	2b04      	cmp	r3, #4
 800a174:	bf02      	ittt	eq
 800a176:	68e5      	ldreq	r5, [r4, #12]
 800a178:	6833      	ldreq	r3, [r6, #0]
 800a17a:	1aed      	subeq	r5, r5, r3
 800a17c:	68a3      	ldr	r3, [r4, #8]
 800a17e:	bf0c      	ite	eq
 800a180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a184:	2500      	movne	r5, #0
 800a186:	4293      	cmp	r3, r2
 800a188:	bfc4      	itt	gt
 800a18a:	1a9b      	subgt	r3, r3, r2
 800a18c:	18ed      	addgt	r5, r5, r3
 800a18e:	2600      	movs	r6, #0
 800a190:	341a      	adds	r4, #26
 800a192:	42b5      	cmp	r5, r6
 800a194:	d11a      	bne.n	800a1cc <_printf_common+0xc8>
 800a196:	2000      	movs	r0, #0
 800a198:	e008      	b.n	800a1ac <_printf_common+0xa8>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4652      	mov	r2, sl
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	47c0      	blx	r8
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d103      	bne.n	800a1b0 <_printf_common+0xac>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	e7c6      	b.n	800a142 <_printf_common+0x3e>
 800a1b4:	18e1      	adds	r1, r4, r3
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	2030      	movs	r0, #48	; 0x30
 800a1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1be:	4422      	add	r2, r4
 800a1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	e7c7      	b.n	800a15c <_printf_common+0x58>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d0e6      	beq.n	800a1a8 <_printf_common+0xa4>
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7d9      	b.n	800a192 <_printf_common+0x8e>
	...

0800a1e0 <_printf_i>:
 800a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	7e0f      	ldrb	r7, [r1, #24]
 800a1e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1e8:	2f78      	cmp	r7, #120	; 0x78
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	469a      	mov	sl, r3
 800a1f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1f6:	d807      	bhi.n	800a208 <_printf_i+0x28>
 800a1f8:	2f62      	cmp	r7, #98	; 0x62
 800a1fa:	d80a      	bhi.n	800a212 <_printf_i+0x32>
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	f000 80d4 	beq.w	800a3aa <_printf_i+0x1ca>
 800a202:	2f58      	cmp	r7, #88	; 0x58
 800a204:	f000 80c0 	beq.w	800a388 <_printf_i+0x1a8>
 800a208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a210:	e03a      	b.n	800a288 <_printf_i+0xa8>
 800a212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a216:	2b15      	cmp	r3, #21
 800a218:	d8f6      	bhi.n	800a208 <_printf_i+0x28>
 800a21a:	a101      	add	r1, pc, #4	; (adr r1, 800a220 <_printf_i+0x40>)
 800a21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a220:	0800a279 	.word	0x0800a279
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a209 	.word	0x0800a209
 800a22c:	0800a209 	.word	0x0800a209
 800a230:	0800a209 	.word	0x0800a209
 800a234:	0800a209 	.word	0x0800a209
 800a238:	0800a28d 	.word	0x0800a28d
 800a23c:	0800a209 	.word	0x0800a209
 800a240:	0800a209 	.word	0x0800a209
 800a244:	0800a209 	.word	0x0800a209
 800a248:	0800a209 	.word	0x0800a209
 800a24c:	0800a391 	.word	0x0800a391
 800a250:	0800a2b9 	.word	0x0800a2b9
 800a254:	0800a34b 	.word	0x0800a34b
 800a258:	0800a209 	.word	0x0800a209
 800a25c:	0800a209 	.word	0x0800a209
 800a260:	0800a3b3 	.word	0x0800a3b3
 800a264:	0800a209 	.word	0x0800a209
 800a268:	0800a2b9 	.word	0x0800a2b9
 800a26c:	0800a209 	.word	0x0800a209
 800a270:	0800a209 	.word	0x0800a209
 800a274:	0800a353 	.word	0x0800a353
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	602a      	str	r2, [r5, #0]
 800a280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a288:	2301      	movs	r3, #1
 800a28a:	e09f      	b.n	800a3cc <_printf_i+0x1ec>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	0607      	lsls	r7, r0, #24
 800a292:	f103 0104 	add.w	r1, r3, #4
 800a296:	6029      	str	r1, [r5, #0]
 800a298:	d501      	bpl.n	800a29e <_printf_i+0xbe>
 800a29a:	681e      	ldr	r6, [r3, #0]
 800a29c:	e003      	b.n	800a2a6 <_printf_i+0xc6>
 800a29e:	0646      	lsls	r6, r0, #25
 800a2a0:	d5fb      	bpl.n	800a29a <_printf_i+0xba>
 800a2a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	da03      	bge.n	800a2b2 <_printf_i+0xd2>
 800a2aa:	232d      	movs	r3, #45	; 0x2d
 800a2ac:	4276      	negs	r6, r6
 800a2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b2:	485a      	ldr	r0, [pc, #360]	; (800a41c <_printf_i+0x23c>)
 800a2b4:	230a      	movs	r3, #10
 800a2b6:	e012      	b.n	800a2de <_printf_i+0xfe>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	1d19      	adds	r1, r3, #4
 800a2be:	6029      	str	r1, [r5, #0]
 800a2c0:	0605      	lsls	r5, r0, #24
 800a2c2:	d501      	bpl.n	800a2c8 <_printf_i+0xe8>
 800a2c4:	681e      	ldr	r6, [r3, #0]
 800a2c6:	e002      	b.n	800a2ce <_printf_i+0xee>
 800a2c8:	0641      	lsls	r1, r0, #25
 800a2ca:	d5fb      	bpl.n	800a2c4 <_printf_i+0xe4>
 800a2cc:	881e      	ldrh	r6, [r3, #0]
 800a2ce:	4853      	ldr	r0, [pc, #332]	; (800a41c <_printf_i+0x23c>)
 800a2d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2308      	moveq	r3, #8
 800a2d6:	230a      	movne	r3, #10
 800a2d8:	2100      	movs	r1, #0
 800a2da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2de:	6865      	ldr	r5, [r4, #4]
 800a2e0:	60a5      	str	r5, [r4, #8]
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	bfa2      	ittt	ge
 800a2e6:	6821      	ldrge	r1, [r4, #0]
 800a2e8:	f021 0104 	bicge.w	r1, r1, #4
 800a2ec:	6021      	strge	r1, [r4, #0]
 800a2ee:	b90e      	cbnz	r6, 800a2f4 <_printf_i+0x114>
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	d04b      	beq.n	800a38c <_printf_i+0x1ac>
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a2fe:	5dc7      	ldrb	r7, [r0, r7]
 800a300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a304:	4637      	mov	r7, r6
 800a306:	42bb      	cmp	r3, r7
 800a308:	460e      	mov	r6, r1
 800a30a:	d9f4      	bls.n	800a2f6 <_printf_i+0x116>
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d10b      	bne.n	800a328 <_printf_i+0x148>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	07de      	lsls	r6, r3, #31
 800a314:	d508      	bpl.n	800a328 <_printf_i+0x148>
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	4299      	cmp	r1, r3
 800a31c:	bfde      	ittt	le
 800a31e:	2330      	movle	r3, #48	; 0x30
 800a320:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a324:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a328:	1b52      	subs	r2, r2, r5
 800a32a:	6122      	str	r2, [r4, #16]
 800a32c:	f8cd a000 	str.w	sl, [sp]
 800a330:	464b      	mov	r3, r9
 800a332:	aa03      	add	r2, sp, #12
 800a334:	4621      	mov	r1, r4
 800a336:	4640      	mov	r0, r8
 800a338:	f7ff fee4 	bl	800a104 <_printf_common>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d14a      	bne.n	800a3d6 <_printf_i+0x1f6>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	b004      	add	sp, #16
 800a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	f043 0320 	orr.w	r3, r3, #32
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	4833      	ldr	r0, [pc, #204]	; (800a420 <_printf_i+0x240>)
 800a354:	2778      	movs	r7, #120	; 0x78
 800a356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	6829      	ldr	r1, [r5, #0]
 800a35e:	061f      	lsls	r7, r3, #24
 800a360:	f851 6b04 	ldr.w	r6, [r1], #4
 800a364:	d402      	bmi.n	800a36c <_printf_i+0x18c>
 800a366:	065f      	lsls	r7, r3, #25
 800a368:	bf48      	it	mi
 800a36a:	b2b6      	uxthmi	r6, r6
 800a36c:	07df      	lsls	r7, r3, #31
 800a36e:	bf48      	it	mi
 800a370:	f043 0320 	orrmi.w	r3, r3, #32
 800a374:	6029      	str	r1, [r5, #0]
 800a376:	bf48      	it	mi
 800a378:	6023      	strmi	r3, [r4, #0]
 800a37a:	b91e      	cbnz	r6, 800a384 <_printf_i+0x1a4>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	f023 0320 	bic.w	r3, r3, #32
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	2310      	movs	r3, #16
 800a386:	e7a7      	b.n	800a2d8 <_printf_i+0xf8>
 800a388:	4824      	ldr	r0, [pc, #144]	; (800a41c <_printf_i+0x23c>)
 800a38a:	e7e4      	b.n	800a356 <_printf_i+0x176>
 800a38c:	4615      	mov	r5, r2
 800a38e:	e7bd      	b.n	800a30c <_printf_i+0x12c>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	6826      	ldr	r6, [r4, #0]
 800a394:	6961      	ldr	r1, [r4, #20]
 800a396:	1d18      	adds	r0, r3, #4
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	0635      	lsls	r5, r6, #24
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	d501      	bpl.n	800a3a4 <_printf_i+0x1c4>
 800a3a0:	6019      	str	r1, [r3, #0]
 800a3a2:	e002      	b.n	800a3aa <_printf_i+0x1ca>
 800a3a4:	0670      	lsls	r0, r6, #25
 800a3a6:	d5fb      	bpl.n	800a3a0 <_printf_i+0x1c0>
 800a3a8:	8019      	strh	r1, [r3, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	e7bc      	b.n	800a32c <_printf_i+0x14c>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	6862      	ldr	r2, [r4, #4]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f5 ff26 	bl	8000210 <memchr>
 800a3c4:	b108      	cbz	r0, 800a3ca <_printf_i+0x1ea>
 800a3c6:	1b40      	subs	r0, r0, r5
 800a3c8:	6060      	str	r0, [r4, #4]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	e7aa      	b.n	800a32c <_printf_i+0x14c>
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	462a      	mov	r2, r5
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4640      	mov	r0, r8
 800a3de:	47d0      	blx	sl
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0ad      	beq.n	800a340 <_printf_i+0x160>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	079b      	lsls	r3, r3, #30
 800a3e8:	d413      	bmi.n	800a412 <_printf_i+0x232>
 800a3ea:	68e0      	ldr	r0, [r4, #12]
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	bfb8      	it	lt
 800a3f2:	4618      	movlt	r0, r3
 800a3f4:	e7a6      	b.n	800a344 <_printf_i+0x164>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d09d      	beq.n	800a340 <_printf_i+0x160>
 800a404:	3501      	adds	r5, #1
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	9903      	ldr	r1, [sp, #12]
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dcf2      	bgt.n	800a3f6 <_printf_i+0x216>
 800a410:	e7eb      	b.n	800a3ea <_printf_i+0x20a>
 800a412:	2500      	movs	r5, #0
 800a414:	f104 0619 	add.w	r6, r4, #25
 800a418:	e7f5      	b.n	800a406 <_printf_i+0x226>
 800a41a:	bf00      	nop
 800a41c:	0800ba76 	.word	0x0800ba76
 800a420:	0800ba87 	.word	0x0800ba87

0800a424 <__sflush_r>:
 800a424:	898a      	ldrh	r2, [r1, #12]
 800a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	0710      	lsls	r0, r2, #28
 800a42e:	460c      	mov	r4, r1
 800a430:	d458      	bmi.n	800a4e4 <__sflush_r+0xc0>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc05      	bgt.n	800a444 <__sflush_r+0x20>
 800a438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc02      	bgt.n	800a444 <__sflush_r+0x20>
 800a43e:	2000      	movs	r0, #0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0f9      	beq.n	800a43e <__sflush_r+0x1a>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	6a21      	ldr	r1, [r4, #32]
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	d032      	beq.n	800a4be <__sflush_r+0x9a>
 800a458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	075a      	lsls	r2, r3, #29
 800a45e:	d505      	bpl.n	800a46c <__sflush_r+0x48>
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	1ac0      	subs	r0, r0, r3
 800a464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a466:	b10b      	cbz	r3, 800a46c <__sflush_r+0x48>
 800a468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46a:	1ac0      	subs	r0, r0, r3
 800a46c:	2300      	movs	r3, #0
 800a46e:	4602      	mov	r2, r0
 800a470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	4628      	mov	r0, r5
 800a476:	47b0      	blx	r6
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	d106      	bne.n	800a48c <__sflush_r+0x68>
 800a47e:	6829      	ldr	r1, [r5, #0]
 800a480:	291d      	cmp	r1, #29
 800a482:	d82b      	bhi.n	800a4dc <__sflush_r+0xb8>
 800a484:	4a29      	ldr	r2, [pc, #164]	; (800a52c <__sflush_r+0x108>)
 800a486:	410a      	asrs	r2, r1
 800a488:	07d6      	lsls	r6, r2, #31
 800a48a:	d427      	bmi.n	800a4dc <__sflush_r+0xb8>
 800a48c:	2200      	movs	r2, #0
 800a48e:	6062      	str	r2, [r4, #4]
 800a490:	04d9      	lsls	r1, r3, #19
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	6022      	str	r2, [r4, #0]
 800a496:	d504      	bpl.n	800a4a2 <__sflush_r+0x7e>
 800a498:	1c42      	adds	r2, r0, #1
 800a49a:	d101      	bne.n	800a4a0 <__sflush_r+0x7c>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b903      	cbnz	r3, 800a4a2 <__sflush_r+0x7e>
 800a4a0:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a4:	602f      	str	r7, [r5, #0]
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d0c9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	d002      	beq.n	800a4b8 <__sflush_r+0x94>
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7ff fa8a 	bl	80099cc <_free_r>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a4bc:	e7c0      	b.n	800a440 <__sflush_r+0x1c>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c8      	bne.n	800a45a <__sflush_r+0x36>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c5      	beq.n	800a45a <__sflush_r+0x36>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xb2>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb6>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b1      	b.n	800a43e <__sflush_r+0x1a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ad      	b.n	800a440 <__sflush_r+0x1c>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0a9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	680e      	ldr	r6, [r1, #0]
 800a4ee:	bf08      	it	eq
 800a4f0:	694b      	ldreq	r3, [r1, #20]
 800a4f2:	600f      	str	r7, [r1, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	eba6 0807 	sub.w	r8, r6, r7
 800a4fc:	608b      	str	r3, [r1, #8]
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	dd9c      	ble.n	800a43e <__sflush_r+0x1a>
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a508:	4643      	mov	r3, r8
 800a50a:	463a      	mov	r2, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	2800      	cmp	r0, #0
 800a512:	dc06      	bgt.n	800a522 <__sflush_r+0xfe>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e78e      	b.n	800a440 <__sflush_r+0x1c>
 800a522:	4407      	add	r7, r0
 800a524:	eba8 0800 	sub.w	r8, r8, r0
 800a528:	e7e9      	b.n	800a4fe <__sflush_r+0xda>
 800a52a:	bf00      	nop
 800a52c:	dfbffffe 	.word	0xdfbffffe

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6a03      	ldr	r3, [r0, #32]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f7fe ff41 	bl	80093cc <__sinit>
 800a54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0f3      	beq.n	800a53a <_fflush_r+0xa>
 800a552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a554:	07d0      	lsls	r0, r2, #31
 800a556:	d404      	bmi.n	800a562 <_fflush_r+0x32>
 800a558:	0599      	lsls	r1, r3, #22
 800a55a:	d402      	bmi.n	800a562 <_fflush_r+0x32>
 800a55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55e:	f7ff fa07 	bl	8009970 <__retarget_lock_acquire_recursive>
 800a562:	4628      	mov	r0, r5
 800a564:	4621      	mov	r1, r4
 800a566:	f7ff ff5d 	bl	800a424 <__sflush_r>
 800a56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a56c:	07da      	lsls	r2, r3, #31
 800a56e:	4605      	mov	r5, r0
 800a570:	d4e4      	bmi.n	800a53c <_fflush_r+0xc>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	059b      	lsls	r3, r3, #22
 800a576:	d4e1      	bmi.n	800a53c <_fflush_r+0xc>
 800a578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57a:	f7ff f9fa 	bl	8009972 <__retarget_lock_release_recursive>
 800a57e:	e7dd      	b.n	800a53c <_fflush_r+0xc>

0800a580 <fiprintf>:
 800a580:	b40e      	push	{r1, r2, r3}
 800a582:	b503      	push	{r0, r1, lr}
 800a584:	4601      	mov	r1, r0
 800a586:	ab03      	add	r3, sp, #12
 800a588:	4805      	ldr	r0, [pc, #20]	; (800a5a0 <fiprintf+0x20>)
 800a58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a58e:	6800      	ldr	r0, [r0, #0]
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f7ff fc9d 	bl	8009ed0 <_vfiprintf_r>
 800a596:	b002      	add	sp, #8
 800a598:	f85d eb04 	ldr.w	lr, [sp], #4
 800a59c:	b003      	add	sp, #12
 800a59e:	4770      	bx	lr
 800a5a0:	20000088 	.word	0x20000088

0800a5a4 <__swhatbuf_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	b096      	sub	sp, #88	; 0x58
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	461e      	mov	r6, r3
 800a5b4:	da0d      	bge.n	800a5d2 <__swhatbuf_r+0x2e>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5bc:	f04f 0100 	mov.w	r1, #0
 800a5c0:	bf0c      	ite	eq
 800a5c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a5c6:	2340      	movne	r3, #64	; 0x40
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	6031      	str	r1, [r6, #0]
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	b016      	add	sp, #88	; 0x58
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}
 800a5d2:	466a      	mov	r2, sp
 800a5d4:	f000 f896 	bl	800a704 <_fstat_r>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dbec      	blt.n	800a5b6 <__swhatbuf_r+0x12>
 800a5dc:	9901      	ldr	r1, [sp, #4]
 800a5de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a5e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a5e6:	4259      	negs	r1, r3
 800a5e8:	4159      	adcs	r1, r3
 800a5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ee:	e7eb      	b.n	800a5c8 <__swhatbuf_r+0x24>

0800a5f0 <__smakebuf_r>:
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5f4:	079d      	lsls	r5, r3, #30
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	d507      	bpl.n	800a60c <__smakebuf_r+0x1c>
 800a5fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	2301      	movs	r3, #1
 800a606:	6163      	str	r3, [r4, #20]
 800a608:	b002      	add	sp, #8
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	ab01      	add	r3, sp, #4
 800a60e:	466a      	mov	r2, sp
 800a610:	f7ff ffc8 	bl	800a5a4 <__swhatbuf_r>
 800a614:	9900      	ldr	r1, [sp, #0]
 800a616:	4605      	mov	r5, r0
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff fa4b 	bl	8009ab4 <_malloc_r>
 800a61e:	b948      	cbnz	r0, 800a634 <__smakebuf_r+0x44>
 800a620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a624:	059a      	lsls	r2, r3, #22
 800a626:	d4ef      	bmi.n	800a608 <__smakebuf_r+0x18>
 800a628:	f023 0303 	bic.w	r3, r3, #3
 800a62c:	f043 0302 	orr.w	r3, r3, #2
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	e7e3      	b.n	800a5fc <__smakebuf_r+0xc>
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	6020      	str	r0, [r4, #0]
 800a638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	9b00      	ldr	r3, [sp, #0]
 800a640:	6163      	str	r3, [r4, #20]
 800a642:	9b01      	ldr	r3, [sp, #4]
 800a644:	6120      	str	r0, [r4, #16]
 800a646:	b15b      	cbz	r3, 800a660 <__smakebuf_r+0x70>
 800a648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f86b 	bl	800a728 <_isatty_r>
 800a652:	b128      	cbz	r0, 800a660 <__smakebuf_r+0x70>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	f043 0301 	orr.w	r3, r3, #1
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	431d      	orrs	r5, r3
 800a664:	81a5      	strh	r5, [r4, #12]
 800a666:	e7cf      	b.n	800a608 <__smakebuf_r+0x18>

0800a668 <_putc_r>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	460d      	mov	r5, r1
 800a66c:	4614      	mov	r4, r2
 800a66e:	4606      	mov	r6, r0
 800a670:	b118      	cbz	r0, 800a67a <_putc_r+0x12>
 800a672:	6a03      	ldr	r3, [r0, #32]
 800a674:	b90b      	cbnz	r3, 800a67a <_putc_r+0x12>
 800a676:	f7fe fea9 	bl	80093cc <__sinit>
 800a67a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a67c:	07d8      	lsls	r0, r3, #31
 800a67e:	d405      	bmi.n	800a68c <_putc_r+0x24>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	0599      	lsls	r1, r3, #22
 800a684:	d402      	bmi.n	800a68c <_putc_r+0x24>
 800a686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a688:	f7ff f972 	bl	8009970 <__retarget_lock_acquire_recursive>
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	3b01      	subs	r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	60a3      	str	r3, [r4, #8]
 800a694:	da05      	bge.n	800a6a2 <_putc_r+0x3a>
 800a696:	69a2      	ldr	r2, [r4, #24]
 800a698:	4293      	cmp	r3, r2
 800a69a:	db12      	blt.n	800a6c2 <_putc_r+0x5a>
 800a69c:	b2eb      	uxtb	r3, r5
 800a69e:	2b0a      	cmp	r3, #10
 800a6a0:	d00f      	beq.n	800a6c2 <_putc_r+0x5a>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	6022      	str	r2, [r4, #0]
 800a6a8:	701d      	strb	r5, [r3, #0]
 800a6aa:	b2ed      	uxtb	r5, r5
 800a6ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ae:	07da      	lsls	r2, r3, #31
 800a6b0:	d405      	bmi.n	800a6be <_putc_r+0x56>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	059b      	lsls	r3, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <_putc_r+0x56>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ba:	f7ff f95a 	bl	8009972 <__retarget_lock_release_recursive>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	bd70      	pop	{r4, r5, r6, pc}
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7fe ff8f 	bl	80095ea <__swbuf_r>
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	e7ed      	b.n	800a6ac <_putc_r+0x44>

0800a6d0 <memmove>:
 800a6d0:	4288      	cmp	r0, r1
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	eb01 0402 	add.w	r4, r1, r2
 800a6d8:	d902      	bls.n	800a6e0 <memmove+0x10>
 800a6da:	4284      	cmp	r4, r0
 800a6dc:	4623      	mov	r3, r4
 800a6de:	d807      	bhi.n	800a6f0 <memmove+0x20>
 800a6e0:	1e43      	subs	r3, r0, #1
 800a6e2:	42a1      	cmp	r1, r4
 800a6e4:	d008      	beq.n	800a6f8 <memmove+0x28>
 800a6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ee:	e7f8      	b.n	800a6e2 <memmove+0x12>
 800a6f0:	4402      	add	r2, r0
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	428a      	cmp	r2, r1
 800a6f6:	d100      	bne.n	800a6fa <memmove+0x2a>
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a702:	e7f7      	b.n	800a6f4 <memmove+0x24>

0800a704 <_fstat_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d07      	ldr	r5, [pc, #28]	; (800a724 <_fstat_r+0x20>)
 800a708:	2300      	movs	r3, #0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	4611      	mov	r1, r2
 800a710:	602b      	str	r3, [r5, #0]
 800a712:	f7f8 fe5d 	bl	80033d0 <_fstat>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d102      	bne.n	800a720 <_fstat_r+0x1c>
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	b103      	cbz	r3, 800a720 <_fstat_r+0x1c>
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	bd38      	pop	{r3, r4, r5, pc}
 800a722:	bf00      	nop
 800a724:	2000158c 	.word	0x2000158c

0800a728 <_isatty_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_isatty_r+0x1c>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f8 fe5c 	bl	80033f0 <_isatty>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_isatty_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_isatty_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	2000158c 	.word	0x2000158c

0800a748 <_sbrk_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	; (800a764 <_sbrk_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f8 fe64 	bl	8003420 <_sbrk>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_sbrk_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_sbrk_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000158c 	.word	0x2000158c

0800a768 <abort>:
 800a768:	b508      	push	{r3, lr}
 800a76a:	2006      	movs	r0, #6
 800a76c:	f000 f85a 	bl	800a824 <raise>
 800a770:	2001      	movs	r0, #1
 800a772:	f7f8 fdde 	bl	8003332 <_exit>

0800a776 <_realloc_r>:
 800a776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a77a:	4680      	mov	r8, r0
 800a77c:	4614      	mov	r4, r2
 800a77e:	460e      	mov	r6, r1
 800a780:	b921      	cbnz	r1, 800a78c <_realloc_r+0x16>
 800a782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a786:	4611      	mov	r1, r2
 800a788:	f7ff b994 	b.w	8009ab4 <_malloc_r>
 800a78c:	b92a      	cbnz	r2, 800a79a <_realloc_r+0x24>
 800a78e:	f7ff f91d 	bl	80099cc <_free_r>
 800a792:	4625      	mov	r5, r4
 800a794:	4628      	mov	r0, r5
 800a796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79a:	f000 f85f 	bl	800a85c <_malloc_usable_size_r>
 800a79e:	4284      	cmp	r4, r0
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	d802      	bhi.n	800a7aa <_realloc_r+0x34>
 800a7a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7a8:	d812      	bhi.n	800a7d0 <_realloc_r+0x5a>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	f7ff f981 	bl	8009ab4 <_malloc_r>
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d0ed      	beq.n	800a794 <_realloc_r+0x1e>
 800a7b8:	42bc      	cmp	r4, r7
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4631      	mov	r1, r6
 800a7be:	bf28      	it	cs
 800a7c0:	463a      	movcs	r2, r7
 800a7c2:	f7ff f8d7 	bl	8009974 <memcpy>
 800a7c6:	4631      	mov	r1, r6
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	f7ff f8ff 	bl	80099cc <_free_r>
 800a7ce:	e7e1      	b.n	800a794 <_realloc_r+0x1e>
 800a7d0:	4635      	mov	r5, r6
 800a7d2:	e7df      	b.n	800a794 <_realloc_r+0x1e>

0800a7d4 <_raise_r>:
 800a7d4:	291f      	cmp	r1, #31
 800a7d6:	b538      	push	{r3, r4, r5, lr}
 800a7d8:	4604      	mov	r4, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	d904      	bls.n	800a7e8 <_raise_r+0x14>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a7ea:	b112      	cbz	r2, 800a7f2 <_raise_r+0x1e>
 800a7ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7f0:	b94b      	cbnz	r3, 800a806 <_raise_r+0x32>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 f830 	bl	800a858 <_getpid_r>
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a802:	f000 b817 	b.w	800a834 <_kill_r>
 800a806:	2b01      	cmp	r3, #1
 800a808:	d00a      	beq.n	800a820 <_raise_r+0x4c>
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	d103      	bne.n	800a816 <_raise_r+0x42>
 800a80e:	2316      	movs	r3, #22
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	2001      	movs	r0, #1
 800a814:	e7e7      	b.n	800a7e6 <_raise_r+0x12>
 800a816:	2400      	movs	r4, #0
 800a818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a81c:	4628      	mov	r0, r5
 800a81e:	4798      	blx	r3
 800a820:	2000      	movs	r0, #0
 800a822:	e7e0      	b.n	800a7e6 <_raise_r+0x12>

0800a824 <raise>:
 800a824:	4b02      	ldr	r3, [pc, #8]	; (800a830 <raise+0xc>)
 800a826:	4601      	mov	r1, r0
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	f7ff bfd3 	b.w	800a7d4 <_raise_r>
 800a82e:	bf00      	nop
 800a830:	20000088 	.word	0x20000088

0800a834 <_kill_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_kill_r+0x20>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	f7f8 fd66 	bl	8003312 <_kill>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d102      	bne.n	800a850 <_kill_r+0x1c>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	b103      	cbz	r3, 800a850 <_kill_r+0x1c>
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	bf00      	nop
 800a854:	2000158c 	.word	0x2000158c

0800a858 <_getpid_r>:
 800a858:	f7f8 bd53 	b.w	8003302 <_getpid>

0800a85c <_malloc_usable_size_r>:
 800a85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a860:	1f18      	subs	r0, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	bfbc      	itt	lt
 800a866:	580b      	ldrlt	r3, [r1, r0]
 800a868:	18c0      	addlt	r0, r0, r3
 800a86a:	4770      	bx	lr

0800a86c <_init>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr

0800a878 <_fini>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr
