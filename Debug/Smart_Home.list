
Smart_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001420  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa5c  0800aa5c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa64  0800aa64  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800aa6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024dc  20000090  0800aaf8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000256c  0800aaf8  0002256c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018312  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a9  00000000  00000000  00038411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001108  00000000  00000000  0003cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf09  00000000  00000000  0003dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae03  00000000  00000000  0006aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123a65  00000000  00000000  00085cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006838  00000000  00000000  001a971c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001aff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009624 	.word	0x08009624

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	08009624 	.word	0x08009624

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2120      	movs	r1, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fabe 	bl	8002b40 <SENSOR_IO_Read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f023 0304 	bic.w	r3, r3, #4
 80005ce:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f023 0303 	bic.w	r3, r3, #3
 80005de:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ee:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	7bfa      	ldrb	r2, [r7, #15]
 80005f6:	2120      	movs	r1, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fa87 	bl	8002b0c <SENSOR_IO_Write>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b088      	sub	sp, #32
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	b2d8      	uxtb	r0, r3
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	2302      	movs	r3, #2
 800061a:	21b2      	movs	r1, #178	; 0xb2
 800061c:	f002 faae 	bl	8002b7c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2135      	movs	r1, #53	; 0x35
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa8a 	bl	8002b40 <SENSOR_IO_Read>
 800062c:	4603      	mov	r3, r0
 800062e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	021b      	lsls	r3, r3, #8
 8000634:	b21b      	sxth	r3, r3
 8000636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800063a:	b21a      	sxth	r2, r3
 800063c:	7a3b      	ldrb	r3, [r7, #8]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000644:	7ffb      	ldrb	r3, [r7, #31]
 8000646:	019b      	lsls	r3, r3, #6
 8000648:	b21b      	sxth	r3, r3
 800064a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800064e:	b21a      	sxth	r2, r3
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000658:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800065c:	10db      	asrs	r3, r3, #3
 800065e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000660:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000664:	10db      	asrs	r3, r3, #3
 8000666:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	f107 0208 	add.w	r2, r7, #8
 8000670:	2304      	movs	r3, #4
 8000672:	21bc      	movs	r1, #188	; 0xbc
 8000674:	f002 fa82 	bl	8002b7c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	b21a      	sxth	r2, r3
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	b21b      	sxth	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7abb      	ldrb	r3, [r7, #10]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	b2d8      	uxtb	r0, r3
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	2302      	movs	r3, #2
 800069e:	21aa      	movs	r1, #170	; 0xaa
 80006a0:	f002 fa6c 	bl	8002b7c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006a4:	7a7b      	ldrb	r3, [r7, #9]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	7a3b      	ldrb	r3, [r7, #8]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80006b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	ee07 3a90 	vmov	s15, r3
 80006d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80006de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000700:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	ee07 3a90 	vmov	s15, r3
}
 800070a:	eeb0 0a67 	vmov.f32	s0, s15
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b2f      	cmp	r3, #47	; 0x2f
 8000722:	d906      	bls.n	8000732 <Hex2Num+0x1e>
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b39      	cmp	r3, #57	; 0x39
 8000728:	d803      	bhi.n	8000732 <Hex2Num+0x1e>
        return a - '0';
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	3b30      	subs	r3, #48	; 0x30
 800072e:	b2db      	uxtb	r3, r3
 8000730:	e014      	b.n	800075c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b60      	cmp	r3, #96	; 0x60
 8000736:	d906      	bls.n	8000746 <Hex2Num+0x32>
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b66      	cmp	r3, #102	; 0x66
 800073c:	d803      	bhi.n	8000746 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3b57      	subs	r3, #87	; 0x57
 8000742:	b2db      	uxtb	r3, r3
 8000744:	e00a      	b.n	800075c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b40      	cmp	r3, #64	; 0x40
 800074a:	d906      	bls.n	800075a <Hex2Num+0x46>
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b46      	cmp	r3, #70	; 0x46
 8000750:	d803      	bhi.n	800075a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3b37      	subs	r3, #55	; 0x37
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e000      	b.n	800075c <Hex2Num+0x48>
    }

    return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800077a:	e012      	b.n	80007a2 <ParseHexNumber+0x3a>
        sum <<= 4;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffc4 	bl	8000714 <Hex2Num>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4413      	add	r3, r2
 8000794:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
        done_count++;
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	3301      	adds	r3, #1
 80007a0:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b2f      	cmp	r3, #47	; 0x2f
 80007a8:	d903      	bls.n	80007b2 <ParseHexNumber+0x4a>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	; 0x39
 80007b0:	d90f      	bls.n	80007d2 <ParseHexNumber+0x6a>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b60      	cmp	r3, #96	; 0x60
 80007b8:	d903      	bls.n	80007c2 <ParseHexNumber+0x5a>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b66      	cmp	r3, #102	; 0x66
 80007c0:	d907      	bls.n	80007d2 <ParseHexNumber+0x6a>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b40      	cmp	r3, #64	; 0x40
 80007c8:	d906      	bls.n	80007d8 <ParseHexNumber+0x70>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b46      	cmp	r3, #70	; 0x46
 80007d0:	d802      	bhi.n	80007d8 <ParseHexNumber+0x70>
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d9d1      	bls.n	800077c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	7bba      	ldrb	r2, [r7, #14]
 80007e2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b2d      	cmp	r3, #45	; 0x2d
 800080a:	d119      	bne.n	8000840 <ParseNumber+0x52>
        minus = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
        done_count++;
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800081c:	e010      	b.n	8000840 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b30      	subs	r3, #48	; 0x30
 8000830:	4413      	add	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3301      	adds	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
        done_count++;
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b2f      	cmp	r3, #47	; 0x2f
 8000846:	d903      	bls.n	8000850 <ParseNumber+0x62>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b39      	cmp	r3, #57	; 0x39
 800084e:	d9e6      	bls.n	800081e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <ParseNumber+0x6e>
        *cnt = done_count;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	7bba      	ldrb	r2, [r7, #14]
 800085a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <ParseNumber+0x7a>
        return 0 - sum;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	425b      	negs	r3, r3
 8000866:	e000      	b.n	800086a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000868:	68bb      	ldr	r3, [r7, #8]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b087      	sub	sp, #28
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d027      	beq.n	80008dc <ParseMAC+0x66>
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000892:	e018      	b.n	80008c6 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b3a      	cmp	r3, #58	; 0x3a
 800089e:	d00d      	beq.n	80008bc <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	75fa      	strb	r2, [r7, #23]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	189c      	adds	r4, r3, r2
 80008ac:	f107 0316 	add.w	r3, r7, #22
 80008b0:	4619      	mov	r1, r3
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ff58 	bl	8000768 <ParseHexNumber>
 80008b8:	4603      	mov	r3, r0
 80008ba:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80008bc:	7dbb      	ldrb	r3, [r7, #22]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d906      	bls.n	80008dc <ParseMAC+0x66>
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d803      	bhi.n	80008dc <ParseMAC+0x66>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1db      	bne.n	8000894 <ParseMAC+0x1e>
   }
  }
}
 80008dc:	bf00      	nop
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d027      	beq.n	800094a <ParseIP+0x66>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d024      	beq.n	800094a <ParseIP+0x66>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d921      	bls.n	800094a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000906:	e019      	b.n	800093c <ParseIP+0x58>
    uint8_t done_count = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b2e      	cmp	r3, #46	; 0x2e
 8000912:	d00e      	beq.n	8000932 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000914:	f107 0316 	add.w	r3, r7, #22
 8000918:	4619      	mov	r1, r3
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff ff67 	bl	80007ee <ParseNumber>
 8000920:	4601      	mov	r1, r0
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	75fa      	strb	r2, [r7, #23]
 8000928:	461a      	mov	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8000932:	7dbb      	ldrb	r3, [r7, #22]
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d803      	bhi.n	800094a <ParseIP+0x66>
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1de      	bne.n	8000908 <ParseIP+0x24>
   }
  }
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3302      	adds	r3, #2
 8000966:	4940      	ldr	r1, [pc, #256]	; (8000a68 <AT_ParseInfo+0x114>)
 8000968:	4618      	mov	r0, r3
 800096a:	f007 fead 	bl	80086c8 <strtok>
 800096e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000970:	e071      	b.n	8000a56 <AT_ParseInfo+0x102>
    switch (num++) {
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	72fa      	strb	r2, [r7, #11]
 8000978:	2b06      	cmp	r3, #6
 800097a:	d866      	bhi.n	8000a4a <AT_ParseInfo+0xf6>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <AT_ParseInfo+0x30>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009a1 	.word	0x080009a1
 8000988:	080009b5 	.word	0x080009b5
 800098c:	080009cd 	.word	0x080009cd
 8000990:	080009e5 	.word	0x080009e5
 8000994:	080009fd 	.word	0x080009fd
 8000998:	08000a15 	.word	0x08000a15
 800099c:	08000a29 	.word	0x08000a29
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	221f      	movs	r2, #31
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 fe7b 	bl	80086a2 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	77da      	strb	r2, [r3, #31]
      break;
 80009b2:	e04b      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3320      	adds	r3, #32
 80009b8:	2217      	movs	r2, #23
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 fe70 	bl	80086a2 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80009ca:	e03f      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3338      	adds	r3, #56	; 0x38
 80009d0:	220f      	movs	r2, #15
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f007 fe64 	bl	80086a2 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80009e2:	e033      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3348      	adds	r3, #72	; 0x48
 80009e8:	220f      	movs	r2, #15
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 fe58 	bl	80086a2 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 80009fa:	e027      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3358      	adds	r3, #88	; 0x58
 8000a00:	220f      	movs	r2, #15
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 fe4c 	bl	80086a2 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8000a12:	e01b      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000a14:	2100      	movs	r1, #0
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fee9 	bl	80007ee <ParseNumber>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000a26:	e011      	b.n	8000a4c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <AT_ParseInfo+0x118>)
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f007 fe4c 	bl	80086c8 <strtok>
 8000a30:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3368      	adds	r3, #104	; 0x68
 8000a36:	221f      	movs	r2, #31
 8000a38:	68f9      	ldr	r1, [r7, #12]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 fe31 	bl	80086a2 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8000a48:	e000      	b.n	8000a4c <AT_ParseInfo+0xf8>

    default: break;
 8000a4a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <AT_ParseInfo+0x114>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f007 fe3a 	bl	80086c8 <strtok>
 8000a54:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d18a      	bne.n	8000972 <AT_ParseInfo+0x1e>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	0800966c 	.word	0x0800966c
 8000a6c:	08009670 	.word	0x08009670

08000a70 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3302      	adds	r3, #2
 8000a82:	4959      	ldr	r1, [pc, #356]	; (8000be8 <AT_ParseConnSettings+0x178>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 fe1f 	bl	80086c8 <strtok>
 8000a8a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000a8c:	e0a2      	b.n	8000bd4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	73fa      	strb	r2, [r7, #15]
 8000a94:	2b0b      	cmp	r3, #11
 8000a96:	f200 808c 	bhi.w	8000bb2 <AT_ParseConnSettings+0x142>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <AT_ParseConnSettings+0x30>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ad1 	.word	0x08000ad1
 8000aa4:	08000ae7 	.word	0x08000ae7
 8000aa8:	08000aff 	.word	0x08000aff
 8000aac:	08000b13 	.word	0x08000b13
 8000ab0:	08000b27 	.word	0x08000b27
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b4b 	.word	0x08000b4b
 8000abc:	08000b5b 	.word	0x08000b5b
 8000ac0:	08000b6b 	.word	0x08000b6b
 8000ac4:	08000b7b 	.word	0x08000b7b
 8000ac8:	08000b8b 	.word	0x08000b8b
 8000acc:	08000b9f 	.word	0x08000b9f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 fde3 	bl	80086a2 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8000ae4:	e066      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3321      	adds	r3, #33	; 0x21
 8000aea:	2220      	movs	r2, #32
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f007 fdd7 	bl	80086a2 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8000afc:	e05a      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000afe:	2100      	movs	r1, #0
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f7ff fe74 	bl	80007ee <ParseNumber>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8000b10:	e050      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000b12:	2100      	movs	r1, #0
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff fe6a 	bl	80007ee <ParseNumber>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000b24:	e046      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000b26:	2100      	movs	r1, #0
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fe60 	bl	80007ee <ParseNumber>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000b38:	e03c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3348      	adds	r3, #72	; 0x48
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f7ff fece 	bl	80008e4 <ParseIP>
      break;
 8000b48:	e034      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	334c      	adds	r3, #76	; 0x4c
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	f7ff fec6 	bl	80008e4 <ParseIP>
      break;
 8000b58:	e02c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3350      	adds	r3, #80	; 0x50
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	68b8      	ldr	r0, [r7, #8]
 8000b64:	f7ff febe 	bl	80008e4 <ParseIP>
      break;
 8000b68:	e024      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3354      	adds	r3, #84	; 0x54
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	68b8      	ldr	r0, [r7, #8]
 8000b74:	f7ff feb6 	bl	80008e4 <ParseIP>
      break;
 8000b78:	e01c      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	3358      	adds	r3, #88	; 0x58
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	f7ff feae 	bl	80008e4 <ParseIP>
      break;
 8000b88:	e014      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f7ff fe2e 	bl	80007ee <ParseNumber>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8000b9c:	e00a      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f7ff fe24 	bl	80007ee <ParseNumber>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8000bb0:	e000      	b.n	8000bb4 <AT_ParseConnSettings+0x144>

    default:
      break;
 8000bb2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <AT_ParseConnSettings+0x178>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f007 fd86 	bl	80086c8 <strtok>
 8000bbc:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <AT_ParseConnSettings+0x164>
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b2c      	cmp	r3, #44	; 0x2c
 8000bcc:	d102      	bne.n	8000bd4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f af59 	bne.w	8000a8e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	0800966c 	.word	0x0800966c

08000bec <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d056      	beq.n	8000cb8 <AT_ExecuteCommand+0xcc>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d051      	beq.n	8000cb8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f7ff faf0 	bl	8000200 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b299      	uxth	r1, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	47a0      	blx	r4
 8000c30:	4603      	mov	r3, r0
 8000c32:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dd3e      	ble.n	8000cb8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000c46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	4798      	blx	r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd27      	ble.n	8000caa <AT_ExecuteCommand+0xbe>
 8000c5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c62:	dc22      	bgt.n	8000caa <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000c64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c6c:	d105      	bne.n	8000c7a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8000c6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000c7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if (strstr((char *)pdata, AT_OK_STRING))
 8000c86:	490f      	ldr	r1, [pc, #60]	; (8000cc4 <AT_ExecuteCommand+0xd8>)
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f007 fd79 	bl	8008780 <strstr>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <AT_ExecuteCommand+0xac>
      {
        return ES_WIFI_STATUS_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e010      	b.n	8000cba <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8000c98:	490b      	ldr	r1, [pc, #44]	; (8000cc8 <AT_ExecuteCommand+0xdc>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f007 fd70 	bl	8008780 <strstr>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <AT_ExecuteCommand+0xbe>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e007      	b.n	8000cba <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000caa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cae:	f113 0f04 	cmn.w	r3, #4
 8000cb2:	d101      	bne.n	8000cb8 <AT_ExecuteCommand+0xcc>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	e000      	b.n	8000cba <AT_ExecuteCommand+0xce>
    }
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000cb8:	2304      	movs	r3, #4
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08009684 	.word	0x08009684
 8000cc8:	08009690 	.word	0x08009690

08000ccc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  cmd_len = strlen((char*)cmd);
 8000ce6:	68b8      	ldr	r0, [r7, #8]
 8000ce8:	f7ff fa8a 	bl	8000200 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000cf0:	8a7b      	ldrh	r3, [r7, #18]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <AT_RequestSendData+0x32>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e05d      	b.n	8000dba <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d057      	beq.n	8000db8 <AT_RequestSendData+0xec>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d052      	beq.n	8000db8 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d1e:	8a79      	ldrh	r1, [r7, #18]
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	4798      	blx	r3
 8000d24:	4603      	mov	r3, r0
 8000d26:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000d28:	8a3a      	ldrh	r2, [r7, #16]
 8000d2a:	8a7b      	ldrh	r3, [r7, #18]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d143      	bne.n	8000db8 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d3c:	8879      	ldrh	r1, [r7, #2]
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000d46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d131      	bne.n	8000db4 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	6a38      	ldr	r0, [r7, #32]
 8000d60:	4798      	blx	r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000d66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd19      	ble.n	8000da2 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8000d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000d7a:	4912      	ldr	r1, [pc, #72]	; (8000dc4 <AT_RequestSendData+0xf8>)
 8000d7c:	6a38      	ldr	r0, [r7, #32]
 8000d7e:	f007 fcff 	bl	8008780 <strstr>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <AT_RequestSendData+0xc0>
        {
          return ES_WIFI_STATUS_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e016      	b.n	8000dba <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <AT_RequestSendData+0xfc>)
 8000d8e:	6a38      	ldr	r0, [r7, #32]
 8000d90:	f007 fcf6 	bl	8008780 <strstr>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <AT_RequestSendData+0xd2>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e00d      	b.n	8000dba <AT_RequestSendData+0xee>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e00b      	b.n	8000dba <AT_RequestSendData+0xee>
        }
      }

      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000da6:	f113 0f04 	cmn.w	r3, #4
 8000daa:	d101      	bne.n	8000db0 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000dac:	2306      	movs	r3, #6
 8000dae:	e004      	b.n	8000dba <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000db4:	2302      	movs	r3, #2
 8000db6:	e000      	b.n	8000dba <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8000db8:	2304      	movs	r3, #4
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08009684 	.word	0x08009684
 8000dc8:	08009690 	.word	0x08009690

08000dcc <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000de0:	613b      	str	r3, [r7, #16]

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 8087 	beq.w	8000efc <AT_RequestReceiveData+0x130>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8081 	beq.w	8000efc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000e00:	68b8      	ldr	r0, [r7, #8]
 8000e02:	f7ff f9fd 	bl	8000200 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8000e10:	461a      	mov	r2, r3
 8000e12:	68b8      	ldr	r0, [r7, #8]
 8000e14:	47a0      	blx	r4
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd6f      	ble.n	8000efc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6938      	ldr	r0, [r7, #16]
 8000e2c:	4798      	blx	r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b0d      	cmp	r3, #13
 8000e38:	d104      	bne.n	8000e44 <AT_RequestReceiveData+0x78>
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d001      	beq.n	8000e48 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8000e44:	2304      	movs	r3, #4
 8000e46:	e05a      	b.n	8000efe <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
    p += 2;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	3302      	adds	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b07      	cmp	r3, #7
 8000e58:	d94a      	bls.n	8000ef0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8000e5a:	e002      	b.n	8000e62 <AT_RequestReceiveData+0x96>
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <AT_RequestReceiveData+0xaa>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b15      	cmp	r3, #21
 8000e74:	d0f2      	beq.n	8000e5c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3b08      	subs	r3, #8
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	491f      	ldr	r1, [pc, #124]	; (8000f08 <AT_RequestReceiveData+0x13c>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fc78 	bl	8008780 <strstr>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d016      	beq.n	8000ec4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3b08      	subs	r3, #8
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d202      	bcs.n	8000eb2 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f007 fcf9 	bl	80088b2 <memcpy>
       return ES_WIFI_STATUS_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e01c      	b.n	8000efe <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4413      	add	r3, r2
 8000ecc:	2204      	movs	r2, #4
 8000ece:	490f      	ldr	r1, [pc, #60]	; (8000f0c <AT_RequestReceiveData+0x140>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fbad 	bl	8008630 <memcmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d104      	bne.n	8000ee6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e00b      	b.n	8000efe <AT_RequestReceiveData+0x132>
     }

     *ReadData = 0;
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000eec:	2305      	movs	r3, #5
 8000eee:	e006      	b.n	8000efe <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f113 0f04 	cmn.w	r3, #4
 8000ef6:	d101      	bne.n	8000efc <AT_RequestReceiveData+0x130>
   {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e000      	b.n	8000efe <AT_RequestReceiveData+0x132>
   }
  }
 }

  return ES_WIFI_STATUS_IO_ERROR;
 8000efc:	2304      	movs	r3, #4
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	08009684 	.word	0x08009684
 8000f0c:	08009698 	.word	0x08009698

08000f10 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000f22:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d01b      	beq.n	8000f68 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000f36:	2000      	movs	r0, #0
 8000f38:	4798      	blx	r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d113      	bne.n	8000f68 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f46:	461a      	mov	r2, r3
 8000f48:	490a      	ldr	r1, [pc, #40]	; (8000f74 <ES_WIFI_Init+0x64>)
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe4e 	bl	8000bec <AT_ExecuteCommand>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fcf6 	bl	8000954 <AT_ParseInfo>
    }
   }
  }
  return ret;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	080096a0 	.word	0x080096a0

08000f78 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d008      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <ES_WIFI_RegisterBusIO+0x2c>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e014      	b.n	8000fd2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4932      	ldr	r1, [pc, #200]	; (80010c0 <ES_WIFI_Connect+0xe0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f007 fa21 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800100a:	461a      	mov	r2, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fded 	bl	8000bec <AT_ExecuteCommand>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d14b      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4927      	ldr	r1, [pc, #156]	; (80010c4 <ES_WIFI_Connect+0xe4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f007 fa0a 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001038:	461a      	mov	r2, r3
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fdd6 	bl	8000bec <AT_ExecuteCommand>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d134      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	491b      	ldr	r1, [pc, #108]	; (80010c8 <ES_WIFI_Connect+0xe8>)
 800105c:	4618      	mov	r0, r3
 800105e:	f007 f9ef 	bl	8008440 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800106e:	461a      	mov	r2, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fdbb 	bl	8000bec <AT_ExecuteCommand>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d119      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001086:	4911      	ldr	r1, [pc, #68]	; (80010cc <ES_WIFI_Connect+0xec>)
 8001088:	4618      	mov	r0, r3
 800108a:	f007 f9d9 	bl	8008440 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800109a:	461a      	mov	r2, r3
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fda5 	bl	8000bec <AT_ExecuteCommand>
 80010a2:	4603      	mov	r3, r0
 80010a4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	080096b8 	.word	0x080096b8
 80010c4:	080096c0 	.word	0x080096c0
 80010c8:	080096c8 	.word	0x080096c8
 80010cc:	080096d0 	.word	0x080096d0

080010d0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <ES_WIFI_IsConnected+0x5c>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f007 f9ad 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010f2:	461a      	mov	r2, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fd79 	bl	8000bec <AT_ExecuteCommand>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800110a:	2b31      	cmp	r3, #49	; 0x31
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080096d4 	.word	0x080096d4

08001130 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800113e:	4910      	ldr	r1, [pc, #64]	; (8001180 <ES_WIFI_GetNetworkSettings+0x50>)
 8001140:	4618      	mov	r0, r3
 8001142:	f007 f97d 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001152:	461a      	mov	r2, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fd49 	bl	8000bec <AT_ExecuteCommand>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d108      	bne.n	8001176 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	338d      	adds	r3, #141	; 0x8d
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f7ff fc7d 	bl	8000a70 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	080096dc 	.word	0x080096dc

08001184 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	4613      	mov	r3, r2
 8001190:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001198:	4913      	ldr	r1, [pc, #76]	; (80011e8 <ES_WIFI_GetMACAddress+0x64>)
 800119a:	4618      	mov	r0, r3
 800119c:	f007 f950 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ac:	461a      	mov	r2, r3
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff fd1c 	bl	8000bec <AT_ExecuteCommand>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10e      	bne.n	80011dc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011c4:	3302      	adds	r3, #2
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <ES_WIFI_GetMACAddress+0x68>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f007 fa7d 	bl	80086c8 <strtok>
 80011ce:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6938      	ldr	r0, [r7, #16]
 80011d8:	f7ff fb4d 	bl	8000876 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800972c 	.word	0x0800972c
 80011ec:	08009730 	.word	0x08009730

080011f0 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	461a      	mov	r2, r3
 800120a:	4949      	ldr	r1, [pc, #292]	; (8001330 <ES_WIFI_StartServerSingleConn+0x140>)
 800120c:	f007 f918 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800121c:	461a      	mov	r2, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fce4 	bl	8000bec <AT_ExecuteCommand>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	e079      	b.n	8001326 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d016      	beq.n	8001268 <ES_WIFI_StartServerSingleConn+0x78>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d012      	beq.n	8001268 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001248:	493a      	ldr	r1, [pc, #232]	; (8001334 <ES_WIFI_StartServerSingleConn+0x144>)
 800124a:	4618      	mov	r0, r3
 800124c:	f007 f8f8 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800125c:	461a      	mov	r2, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fcc4 	bl	8000bec <AT_ExecuteCommand>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d15a      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <ES_WIFI_StartServerSingleConn+0x148>)
 800127c:	f007 f8e0 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800128c:	461a      	mov	r2, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fcac 	bl	8000bec <AT_ExecuteCommand>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d142      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	7c1b      	ldrb	r3, [r3, #16]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4924      	ldr	r1, [pc, #144]	; (800133c <ES_WIFI_StartServerSingleConn+0x14c>)
 80012ac:	f007 f8c8 	bl	8008440 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012bc:	461a      	mov	r2, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fc94 	bl	8000bec <AT_ExecuteCommand>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d12a      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	88db      	ldrh	r3, [r3, #6]
 80012d8:	461a      	mov	r2, r3
 80012da:	4919      	ldr	r1, [pc, #100]	; (8001340 <ES_WIFI_StartServerSingleConn+0x150>)
 80012dc:	f007 f8b0 	bl	8008440 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012ec:	461a      	mov	r2, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fc7c 	bl	8000bec <AT_ExecuteCommand>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d112      	bne.n	8001324 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001304:	490f      	ldr	r1, [pc, #60]	; (8001344 <ES_WIFI_StartServerSingleConn+0x154>)
 8001306:	4618      	mov	r0, r3
 8001308:	f007 f89a 	bl	8008440 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001318:	461a      	mov	r2, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fc66 	bl	8000bec <AT_ExecuteCommand>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	08009794 	.word	0x08009794
 8001334:	080097dc 	.word	0x080097dc
 8001338:	0800979c 	.word	0x0800979c
 800133c:	080097e8 	.word	0x080097e8
 8001340:	080097a4 	.word	0x080097a4
 8001344:	080097f0 	.word	0x080097f0

08001348 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 800135a:	f001 ff97 	bl	800328c <HAL_GetTick>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8001360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	429a      	cmp	r2, r3
 800136e:	d201      	bcs.n	8001374 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800137a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f007 f965 	bl	8008650 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800138c:	495f      	ldr	r1, [pc, #380]	; (800150c <ES_WIFI_WaitServerConnection+0x1c4>)
 800138e:	4618      	mov	r0, r3
 8001390:	f007 f856 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a0:	461a      	mov	r2, r3
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff fc22 	bl	8000bec <AT_ExecuteCommand>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 80013ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d129      	bne.n	800140a <ES_WIFI_WaitServerConnection+0xc2>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013bc:	4954      	ldr	r1, [pc, #336]	; (8001510 <ES_WIFI_WaitServerConnection+0x1c8>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f9de 	bl	8008780 <strstr>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d021      	beq.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013d0:	4950      	ldr	r1, [pc, #320]	; (8001514 <ES_WIFI_WaitServerConnection+0x1cc>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 f9d4 	bl	8008780 <strstr>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d017      	beq.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013e4:	494c      	ldr	r1, [pc, #304]	; (8001518 <ES_WIFI_WaitServerConnection+0x1d0>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 f9ca 	bl	8008780 <strstr>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013f8:	4948      	ldr	r1, [pc, #288]	; (800151c <ES_WIFI_WaitServerConnection+0x1d4>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 f9c0 	bl	8008780 <strstr>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <ES_WIFI_WaitServerConnection+0xc6>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8001406:	2302      	movs	r3, #2
 8001408:	e07c      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 800140a:	2302      	movs	r3, #2
 800140c:	e07a      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 f918 	bl	8008650 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001426:	493e      	ldr	r1, [pc, #248]	; (8001520 <ES_WIFI_WaitServerConnection+0x1d8>)
 8001428:	4618      	mov	r0, r3
 800142a:	f007 f809 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143a:	461a      	mov	r2, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fbd5 	bl	8000bec <AT_ExecuteCommand>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800144c:	2b00      	cmp	r3, #0
 800144e:	d140      	bne.n	80014d2 <ES_WIFI_WaitServerConnection+0x18a>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001456:	220c      	movs	r2, #12
 8001458:	4932      	ldr	r1, [pc, #200]	; (8001524 <ES_WIFI_WaitServerConnection+0x1dc>)
 800145a:	4618      	mov	r0, r3
 800145c:	f007 f90f 	bl	800867e <strncmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d037      	beq.n	80014d6 <ES_WIFI_WaitServerConnection+0x18e>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800146c:	3302      	adds	r3, #2
 800146e:	492e      	ldr	r1, [pc, #184]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001470:	4618      	mov	r0, r3
 8001472:	f007 f929 	bl	80086c8 <strtok>
 8001476:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8001478:	492b      	ldr	r1, [pc, #172]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 800147a:	2000      	movs	r0, #0
 800147c:	f007 f924 	bl	80086c8 <strtok>
 8001480:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3308      	adds	r3, #8
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff fa2a 	bl	80008e4 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8001490:	4925      	ldr	r1, [pc, #148]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 8001492:	2000      	movs	r0, #0
 8001494:	f007 f918 	bl	80086c8 <strtok>
 8001498:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 800149a:	2100      	movs	r1, #0
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff f9a6 	bl	80007ee <ParseNumber>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	80da      	strh	r2, [r3, #6]
        ptr = strtok(0, ","); /* ip */
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f007 f90b 	bl	80086c8 <strtok>
 80014b2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 80014b4:	491c      	ldr	r1, [pc, #112]	; (8001528 <ES_WIFI_WaitServerConnection+0x1e0>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f007 f906 	bl	80086c8 <strtok>
 80014bc:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80014be:	2100      	movs	r1, #0
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff f994 	bl	80007ee <ParseNumber>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	809a      	strh	r2, [r3, #4]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e018      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e016      	b.n	8001504 <ES_WIFI_WaitServerConnection+0x1bc>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80014dc:	2064      	movs	r0, #100	; 0x64
 80014de:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 80014e0:	f001 fed4 	bl	800328c <HAL_GetTick>
 80014e4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f43f af43 	beq.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	f4ff af3e 	bcc.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f4ff af39 	bcc.w	8001374 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8001502:	2303      	movs	r3, #3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	080096b0 	.word	0x080096b0
 8001510:	080097f8 	.word	0x080097f8
 8001514:	08009800 	.word	0x08009800
 8001518:	08009808 	.word	0x08009808
 800151c:	08009814 	.word	0x08009814
 8001520:	08009824 	.word	0x08009824
 8001524:	08009828 	.word	0x08009828
 8001528:	0800966c 	.word	0x0800966c

0800152c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	4916      	ldr	r1, [pc, #88]	; (800159c <ES_WIFI_CloseServerConnection+0x70>)
 8001542:	4618      	mov	r0, r3
 8001544:	f006 ff7c 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001554:	461a      	mov	r2, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fb48 	bl	8000bec <AT_ExecuteCommand>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <ES_WIFI_CloseServerConnection+0x3e>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	e013      	b.n	8001592 <ES_WIFI_CloseServerConnection+0x66>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001570:	490b      	ldr	r1, [pc, #44]	; (80015a0 <ES_WIFI_CloseServerConnection+0x74>)
 8001572:	4618      	mov	r0, r3
 8001574:	f006 ff64 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001584:	461a      	mov	r2, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fb30 	bl	8000bec <AT_ExecuteCommand>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	08009794 	.word	0x08009794
 80015a0:	08009838 	.word	0x08009838

080015a4 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	4918      	ldr	r1, [pc, #96]	; (800161c <ES_WIFI_StopServerSingleConn+0x78>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 ff40 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015cc:	461a      	mov	r2, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fb0c 	bl	8000bec <AT_ExecuteCommand>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <ES_WIFI_StopServerSingleConn+0x3e>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	e018      	b.n	8001614 <ES_WIFI_StopServerSingleConn+0x70>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e8:	490d      	ldr	r1, [pc, #52]	; (8001620 <ES_WIFI_StopServerSingleConn+0x7c>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 ff28 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015fc:	461a      	mov	r2, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff faf4 	bl	8000bec <AT_ExecuteCommand>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <ES_WIFI_StopServerSingleConn+0x6e>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
    UNLOCK_WIFI();
    return ret;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	e000      	b.n	8001614 <ES_WIFI_StopServerSingleConn+0x70>
  }

  UNLOCK_WIFI();
  return ret;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08009794 	.word	0x08009794
 8001620:	08009840 	.word	0x08009840

08001624 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	460b      	mov	r3, r1
 8001632:	72fb      	strb	r3, [r7, #11]
 8001634:	4613      	mov	r3, r2
 8001636:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001638:	2302      	movs	r3, #2
 800163a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e001      	b.n	800164c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001652:	4293      	cmp	r3, r2
 8001654:	d902      	bls.n	800165c <ES_WIFI_SendData+0x38>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001656:	f241 3388 	movw	r3, #5000	; 0x1388
 800165a:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	893a      	ldrh	r2, [r7, #8]
 8001660:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001668:	7afa      	ldrb	r2, [r7, #11]
 800166a:	492d      	ldr	r1, [pc, #180]	; (8001720 <ES_WIFI_SendData+0xfc>)
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fee7 	bl	8008440 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800167e:	461a      	mov	r2, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fab3 	bl	8000bec <AT_ExecuteCommand>
 8001686:	4603      	mov	r3, r0
 8001688:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d13c      	bne.n	800170a <ES_WIFI_SendData+0xe6>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4922      	ldr	r1, [pc, #136]	; (8001724 <ES_WIFI_SendData+0x100>)
 800169a:	4618      	mov	r0, r3
 800169c:	f006 fed0 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ac:	461a      	mov	r2, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fa9c 	bl	8000bec <AT_ExecuteCommand>
 80016b4:	4603      	mov	r3, r0
 80016b6:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d125      	bne.n	800170a <ES_WIFI_SendData+0xe6>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c4:	893a      	ldrh	r2, [r7, #8]
 80016c6:	4918      	ldr	r1, [pc, #96]	; (8001728 <ES_WIFI_SendData+0x104>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 feb9 	bl	8008440 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016da:	893a      	ldrh	r2, [r7, #8]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff faf2 	bl	8000ccc <AT_RequestSendData>
 80016e8:	4603      	mov	r3, r0
 80016ea:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10b      	bne.n	800170a <ES_WIFI_SendData+0xe6>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <ES_WIFI_SendData+0x108>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f840 	bl	8008780 <strstr>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <ES_WIFI_SendData+0xe6>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8001706:	2302      	movs	r3, #2
 8001708:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800170a:	7cfb      	ldrb	r3, [r7, #19]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d102      	bne.n	8001716 <ES_WIFI_SendData+0xf2>
  {
    *SentLen = 0;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2200      	movs	r2, #0
 8001714:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8001716:	7cfb      	ldrb	r3, [r7, #19]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08009794 	.word	0x08009794
 8001724:	08009870 	.word	0x08009870
 8001728:	08009878 	.word	0x08009878
 800172c:	08009884 	.word	0x08009884

08001730 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	460b      	mov	r3, r1
 800173e:	72fb      	strb	r3, [r7, #11]
 8001740:	4613      	mov	r3, r2
 8001742:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001744:	2302      	movs	r3, #2
 8001746:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e001      	b.n	8001758 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001758:	893b      	ldrh	r3, [r7, #8]
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d862      	bhi.n	8001828 <ES_WIFI_ReceiveData+0xf8>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001768:	7afa      	ldrb	r2, [r7, #11]
 800176a:	4932      	ldr	r1, [pc, #200]	; (8001834 <ES_WIFI_ReceiveData+0x104>)
 800176c:	4618      	mov	r0, r3
 800176e:	f006 fe67 	bl	8008440 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800177e:	461a      	mov	r2, r3
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fa33 	bl	8000bec <AT_ExecuteCommand>
 8001786:	4603      	mov	r3, r0
 8001788:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d146      	bne.n	800181e <ES_WIFI_ReceiveData+0xee>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001796:	893a      	ldrh	r2, [r7, #8]
 8001798:	4927      	ldr	r1, [pc, #156]	; (8001838 <ES_WIFI_ReceiveData+0x108>)
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fe50 	bl	8008440 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ac:	461a      	mov	r2, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff fa1c 	bl	8000bec <AT_ExecuteCommand>
 80017b4:	4603      	mov	r3, r0
 80017b6:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 80017b8:	7cfb      	ldrb	r3, [r7, #19]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d12b      	bne.n	8001816 <ES_WIFI_ReceiveData+0xe6>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	491d      	ldr	r1, [pc, #116]	; (800183c <ES_WIFI_ReceiveData+0x10c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f006 fe39 	bl	8008440 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017da:	461a      	mov	r2, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fa05 	bl	8000bec <AT_ExecuteCommand>
 80017e2:	4603      	mov	r3, r0
 80017e4:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11d      	bne.n	8001828 <ES_WIFI_ReceiveData+0xf8>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f2:	4913      	ldr	r1, [pc, #76]	; (8001840 <ES_WIFI_ReceiveData+0x110>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 fe23 	bl	8008440 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4613      	mov	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fade 	bl	8000dcc <AT_RequestReceiveData>
 8001810:	4603      	mov	r3, r0
 8001812:	74fb      	strb	r3, [r7, #19]
 8001814:	e008      	b.n	8001828 <ES_WIFI_ReceiveData+0xf8>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
        *Receivedlen = 0;
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e004      	b.n	8001828 <ES_WIFI_ReceiveData+0xf8>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
      issue15++;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <ES_WIFI_ReceiveData+0x114>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <ES_WIFI_ReceiveData+0x114>)
 8001826:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001828:	7cfb      	ldrb	r3, [r7, #19]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	08009794 	.word	0x08009794
 8001838:	0800988c 	.word	0x0800988c
 800183c:	08009894 	.word	0x08009894
 8001840:	0800989c 	.word	0x0800989c
 8001844:	200000ac 	.word	0x200000ac

08001848 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001850:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	6593      	str	r3, [r2, #88]	; 0x58
 800185c:	4b54      	ldr	r3, [pc, #336]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001898:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a44      	ldr	r2, [pc, #272]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <SPI_WIFI_MspInit+0x168>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	483f      	ldr	r0, [pc, #252]	; (80019b4 <SPI_WIFI_MspInit+0x16c>)
 80018b8:	f002 f832 	bl	8003920 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80018bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4837      	ldr	r0, [pc, #220]	; (80019b4 <SPI_WIFI_MspInit+0x16c>)
 80018d6:	f001 fe79 	bl	80035cc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 80018f4:	f001 fe6a 	bl	80035cc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4828      	ldr	r0, [pc, #160]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 8001916:	f001 fe59 	bl	80035cc <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800191a:	2201      	movs	r2, #1
 800191c:	2101      	movs	r1, #1
 800191e:	4826      	ldr	r0, [pc, #152]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 8001920:	f001 fffe 	bl	8003920 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <SPI_WIFI_MspInit+0x170>)
 800193c:	f001 fe46 	bl	80035cc <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800194e:	2301      	movs	r3, #1
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001952:	2306      	movs	r3, #6
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4817      	ldr	r0, [pc, #92]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 800195e:	f001 fe35 	bl	80035cc <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001970:	2301      	movs	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001974:	2306      	movs	r3, #6
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 8001980:	f001 fe24 	bl	80035cc <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001992:	2301      	movs	r3, #1
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001996:	2306      	movs	r3, #6
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4806      	ldr	r0, [pc, #24]	; (80019bc <SPI_WIFI_MspInit+0x174>)
 80019a2:	f001 fe13 	bl	80035cc <HAL_GPIO_Init>
}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48000800 	.word	0x48000800

080019c0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d145      	bne.n	8001a60 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019d6:	4a28      	ldr	r2, [pc, #160]	; (8001a78 <SPI_WIFI_Init+0xb8>)
 80019d8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80019da:	4826      	ldr	r0, [pc, #152]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019dc:	f7ff ff34 	bl	8001848 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019f0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80019f4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <SPI_WIFI_Init+0xb4>)
 8001a2a:	f003 fcb1 	bl	8005390 <HAL_SPI_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e018      	b.n	8001a6c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2007      	movs	r0, #7
 8001a40:	f001 fd2f 	bl	80034a2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001a44:	2007      	movs	r0, #7
 8001a46:	f001 fd48 	bl	80034da <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2033      	movs	r0, #51	; 0x33
 8001a50:	f001 fd27 	bl	80034a2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001a54:	2033      	movs	r0, #51	; 0x33
 8001a56:	f001 fd40 	bl	80034da <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f000 f9fe 	bl	8001e5c <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001a60:	f000 f80c 	bl	8001a7c <SPI_WIFI_ResetModule>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000b0 	.word	0x200000b0
 8001a78:	40003c00 	.word	0x40003c00

08001a7c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f001 fc03 	bl	800328c <HAL_GetTick>
 8001a86:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a92:	4830      	ldr	r0, [pc, #192]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001a94:	f001 ff44 	bl	8003920 <HAL_GPIO_WritePin>
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f001 fc03 	bl	80032a4 <HAL_Delay>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001aa6:	f001 ff3b 	bl	8003920 <HAL_GPIO_WritePin>
 8001aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aae:	f001 fbf9 	bl	80032a4 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4827      	ldr	r0, [pc, #156]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001ab8:	f001 ff32 	bl	8003920 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001abc:	200f      	movs	r0, #15
 8001abe:	f000 f9cd 	bl	8001e5c <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001ac2:	e020      	b.n	8001b06 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	463a      	mov	r2, r7
 8001ac8:	18d1      	adds	r1, r2, r3
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <SPI_WIFI_ResetModule+0xdc>)
 8001ad2:	f003 fd65 	bl	80055a0 <HAL_SPI_Receive>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3302      	adds	r3, #2
 8001ade:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001ae0:	f001 fbd4 	bl	800328c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d202      	bcs.n	8001af6 <SPI_WIFI_ResetModule+0x7a>
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001af6:	2201      	movs	r2, #1
 8001af8:	2101      	movs	r1, #1
 8001afa:	4816      	ldr	r0, [pc, #88]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001afc:	f001 ff10 	bl	8003920 <HAL_GPIO_WritePin>
      return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	e021      	b.n	8001b4a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001b06:	2102      	movs	r1, #2
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001b0a:	f001 fef1 	bl	80038f0 <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d0d7      	beq.n	8001ac4 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001b14:	2201      	movs	r2, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <SPI_WIFI_ResetModule+0xd8>)
 8001b1a:	f001 ff01 	bl	8003920 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001b1e:	783b      	ldrb	r3, [r7, #0]
 8001b20:	2b15      	cmp	r3, #21
 8001b22:	d10e      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b15      	cmp	r3, #21
 8001b28:	d10b      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b0d      	cmp	r3, #13
 8001b2e:	d108      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001b30:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d105      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001b36:	793b      	ldrb	r3, [r7, #4]
 8001b38:	2b3e      	cmp	r3, #62	; 0x3e
 8001b3a:	d102      	bne.n	8001b42 <SPI_WIFI_ResetModule+0xc6>
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d002      	beq.n	8001b48 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e000      	b.n	8001b4a <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	48001000 	.word	0x48001000
 8001b58:	200000b0 	.word	0x200000b0

08001b5c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <SPI_WIFI_DeInit+0x10>)
 8001b62:	f003 fce1 	bl	8005528 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200000b0 	.word	0x200000b0

08001b70 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001b78:	f001 fb88 	bl	800328c <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001b80:	e00a      	b.n	8001b98 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b82:	f001 fb83 	bl	800328c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d902      	bls.n	8001b98 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e007      	b.n	8001ba8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <wait_cmddata_rdy_high+0x40>)
 8001b9c:	f001 fea8 	bl	80038f0 <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1ed      	bne.n	8001b82 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	48001000 	.word	0x48001000

08001bb4 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001bbc:	f001 fb66 	bl	800328c <HAL_GetTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001bc4:	e00a      	b.n	8001bdc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bc6:	f001 fb61 	bl	800328c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad2      	subs	r2, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d902      	bls.n	8001bdc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e004      	b.n	8001be6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <wait_cmddata_rdy_rising_event+0x3c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d0f0      	beq.n	8001bc6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001be4:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000011c 	.word	0x2000011c

08001bf4 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001bfc:	f001 fb46 	bl	800328c <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001c04:	e00a      	b.n	8001c1c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c06:	f001 fb41 	bl	800328c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d902      	bls.n	8001c1c <wait_spi_rx_event+0x28>
    {
      return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e004      	b.n	8001c26 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <wait_spi_rx_event+0x3c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d0f0      	beq.n	8001c06 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001c24:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000114 	.word	0x20000114

08001c34 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001c3c:	f001 fb26 	bl	800328c <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001c44:	e00a      	b.n	8001c5c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c46:	f001 fb21 	bl	800328c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d902      	bls.n	8001c5c <wait_spi_tx_event+0x28>
    {
      return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e004      	b.n	8001c66 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <wait_spi_tx_event+0x3c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d0f0      	beq.n	8001c46 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001c64:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000118 	.word	0x20000118

08001c74 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001c86:	2201      	movs	r2, #1
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4834      	ldr	r0, [pc, #208]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001c8c:	f001 fe48 	bl	8003920 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f8e3 	bl	8001e5c <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff8b 	bl	8001bb4 <wait_cmddata_rdy_rising_event>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da02      	bge.n	8001caa <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001ca4:	f06f 0302 	mvn.w	r3, #2
 8001ca8:	e054      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	482b      	ldr	r0, [pc, #172]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001cb0:	f001 fe36 	bl	8003920 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f000 f8d1 	bl	8001e5c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001cba:	e03d      	b.n	8001d38 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001cbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	db02      	blt.n	8001ccc <SPI_WIFI_ReceiveData+0x58>
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13c      	bne.n	8001d46 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <SPI_WIFI_ReceiveData+0xec>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4822      	ldr	r0, [pc, #136]	; (8001d64 <SPI_WIFI_ReceiveData+0xf0>)
 8001cdc:	f004 fa2e 	bl	800613c <HAL_SPI_Receive_IT>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	481c      	ldr	r0, [pc, #112]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001cec:	f001 fe18 	bl	8003920 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e02e      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff7b 	bl	8001bf4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001cfe:	7d3a      	ldrb	r2, [r7, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3301      	adds	r3, #1
 8001d08:	7d7a      	ldrb	r2, [r7, #21]
 8001d0a:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001d0c:	8afb      	ldrh	r3, [r7, #22]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3302      	adds	r3, #2
 8001d18:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8001d1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d22:	db09      	blt.n	8001d38 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001d24:	2201      	movs	r2, #1
 8001d26:	2101      	movs	r1, #1
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d2a:	f001 fdf9 	bl	8003920 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001d2e:	f7ff fea5 	bl	8001a7c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d32:	f06f 0303 	mvn.w	r3, #3
 8001d36:	e00d      	b.n	8001d54 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d3c:	f001 fdd8 	bl	80038f0 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d0ba      	beq.n	8001cbc <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001d46:	2201      	movs	r2, #1
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <SPI_WIFI_ReceiveData+0xe8>)
 8001d4c:	f001 fde8 	bl	8003920 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	48001000 	.word	0x48001000
 8001d60:	20000114 	.word	0x20000114
 8001d64:	200000b0 	.word	0x200000b0

08001d68 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	460b      	mov	r3, r1
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fef9 	bl	8001b70 <wait_cmddata_rdy_high>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da02      	bge.n	8001d8a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e04f      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <SPI_WIFI_SendData+0xcc>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d90:	2200      	movs	r2, #0
 8001d92:	2101      	movs	r1, #1
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001d96:	f001 fdc3 	bl	8003920 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f85e 	bl	8001e5c <SPI_WIFI_DelayUs>
  if (len > 1)
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d919      	bls.n	8001dda <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <SPI_WIFI_SendData+0xd4>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001dac:	897b      	ldrh	r3, [r7, #10]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	4822      	ldr	r0, [pc, #136]	; (8001e40 <SPI_WIFI_SendData+0xd8>)
 8001db8:	f004 f920 	bl	8005ffc <HAL_SPI_Transmit_IT>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001dc8:	f001 fdaa 	bl	8003920 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	e02b      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff2d 	bl	8001c34 <wait_spi_tx_event>
  }

  if (len & 1)
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8001de4:	897b      	ldrh	r3, [r7, #10]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001df0:	230a      	movs	r3, #10
 8001df2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <SPI_WIFI_SendData+0xd4>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4619      	mov	r1, r3
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <SPI_WIFI_SendData+0xd8>)
 8001e04:	f004 f8fa 	bl	8005ffc <HAL_SPI_Transmit_IT>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2101      	movs	r1, #1
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <SPI_WIFI_SendData+0xd0>)
 8001e14:	f001 fd84 	bl	8003920 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e005      	b.n	8001e2a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff07 	bl	8001c34 <wait_spi_tx_event>
  }
  return len;
 8001e26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000011c 	.word	0x2000011c
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	20000118 	.word	0x20000118
 8001e40:	200000b0 	.word	0x200000b0

08001e44 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f001 fa29 	bl	80032a4 <HAL_Delay>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d122      	bne.n	8001eba <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <SPI_WIFI_DelayUs+0x98>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <SPI_WIFI_DelayUs+0x9c>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001e8a:	f001 f9ff 	bl	800328c <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001e90:	e002      	b.n	8001e98 <SPI_WIFI_DelayUs+0x3c>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8001e9e:	f001 f9f5 	bl	800328c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eaa:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <SPI_WIFI_DelayUs+0x5e>
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <SPI_WIFI_DelayUs+0x98>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <SPI_WIFI_DelayUs+0xa0>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9a      	lsrs	r2, r3, #18
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <SPI_WIFI_DelayUs+0x94>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001eda:	e002      	b.n	8001ee2 <SPI_WIFI_DelayUs+0x86>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <SPI_WIFI_DelayUs+0x80>
  return;
 8001ee8:	bf00      	nop
}
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000120 	.word	0x20000120
 8001ef4:	20000024 	.word	0x20000024
 8001ef8:	10624dd3 	.word	0x10624dd3
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_SPI_RxCpltCallback+0x24>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_SPI_RxCpltCallback+0x24>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000114 	.word	0x20000114

08001f28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_SPI_TxCpltCallback+0x24>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_SPI_TxCpltCallback+0x24>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000118 	.word	0x20000118

08001f50 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SPI_WIFI_ISR+0x1c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <SPI_WIFI_ISR+0x1c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
   }
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	2000011c 	.word	0x2000011c

08001f70 <inject>:
#include <stdio.h>


const char html[] = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><title>Document</title></head><body><h1>Smart Home System - Online</h1><div class=\"card\"><div class=\"title\"><h2>Alarm</h2><label class=\"switch\"><input type=\"checkbox\" id=\"alarm-checkbox\"              > <span class=\"slider round\"></span></label></div><div>Status: Nothing to report</div></div><div class=\"card\"><div class=\"title\"><h2>Temperature</h2></div><div class=\"temp\"><div class=\"thermometer\"><div class=\"stem\"><div class=\"stem-perct\"></div></div><div class=\"bulb\"></div></div><div class=\"temp-value\">                 </div></div></div></body></html><style>html{--background-color:#303030;--color-accent-extra-light:#437e56;--color-accent-light:#2a4e36;background-color:var(--background-color);color:#fff;font-family:sans-serif}h2{margin:0}.card{max-width:30rem;padding:1.5rem;background-color:var(--color-accent-extra-light);border-radius:1rem;margin-bottom:2rem}.title{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem}.switch{position:relative;display:inline-block;--switch-height:1.5rem;--switch-width:3rem;width:var(--switch-width);height:var(--switch-height)}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:\"\";height:calc(var(--switch-height) - .2rem);width:calc(var(--switch-height) - .2rem);left:.09rem;bottom:.11rem;background-color:#fff;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider:before{-webkit-transform:translateX(calc(var(--switch-width) - var(--switch-height)));-ms-transform:translateX(calc(var(--switch-width) - var(--switch-height)));transform:translateX(calc(var(--switch-width) - var(--switch-height)))}.slider.round{border-radius:calc(var(--switch-height)/ 2)}.slider.round:before{border-radius:50%}.thermometer{display:block;position:relative;height:100px}.bulb{display:inline-block;border:2px solid #222;width:25px;height:25px;border-radius:50%;position:absolute;left:0;bottom:0;box-shadow:0 0 0 2px #fff inset;background:red}.stem{display:inline-block;border:2px solid #222;width:14px;height:80px;border-radius:0 0 20px 20px;border-top:2px solid transparent;position:absolute;bottom:24px;left:5px;box-shadow:0 0 0 2px #fff inset;transform:rotate(180deg);z-index:10;padding-bottom:3px}.stem-perct{height:calc(             + 6px);width:10px;background:red;display:block;margin:0 auto;border-radius:10px;transform:translateY(-5px)}.temp{width:100%;padding:3rem 0;justify-content:center;display:flex;align-items:center}.temp-value{font-size:2rem;margin-left:3rem}</style><script>document.getElementById(\"alarm-checkbox\").addEventListener('change', (event) => {\n    if (event.currentTarget.checked) {\n      fetch(\"/?radio=1\", { method: \"POST\" });\n    } else {\n      fetch('/?radio=0', { method: \"POST\" });\n    }\n  });</script>";

char* inject(int alarmEnabled, int temp, int thermPercent){
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
    char* injected = malloc(sizeof(char) * strlen(html));
 8001f7c:	f640 400a 	movw	r0, #3082	; 0xc0a
 8001f80:	f006 f872 	bl	8008068 <malloc>
 8001f84:	4603      	mov	r3, r0
 8001f86:	61fb      	str	r3, [r7, #28]
    strcpy(injected, html);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <inject+0xac>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4611      	mov	r1, r2
 8001f90:	f640 430b 	movw	r3, #3083	; 0xc0b
 8001f94:	461a      	mov	r2, r3
 8001f96:	f006 fc8c 	bl	80088b2 <memcpy>

    strncpy(&injected[313], alarmEnabled ? "checked" : "       ", 7);
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f203 1039 	addw	r0, r3, #313	; 0x139
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <inject+0x3a>
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <inject+0xb0>)
 8001fa8:	e000      	b.n	8001fac <inject+0x3c>
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <inject+0xb4>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f006 fb77 	bl	80086a2 <strncpy>

    char* tempStr = malloc(sizeof(char) * 20);
 8001fb4:	2014      	movs	r0, #20
 8001fb6:	f006 f857 	bl	8008068 <malloc>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	61bb      	str	r3, [r7, #24]
    sprintf(tempStr, "%d&deg;C", temp);
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4919      	ldr	r1, [pc, #100]	; (8002028 <inject+0xb8>)
 8001fc2:	69b8      	ldr	r0, [r7, #24]
 8001fc4:	f006 fa3c 	bl	8008440 <siprintf>
    strncpy(&injected[632], tempStr, strlen(tempStr) - 1);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	f7fe f916 	bl	8000200 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	461a      	mov	r2, r3
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f006 fb60 	bl	80086a2 <strncpy>

    char* thermPercentStr = malloc(sizeof(char) * 20);
 8001fe2:	2014      	movs	r0, #20
 8001fe4:	f006 f840 	bl	8008068 <malloc>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]
    sprintf(thermPercentStr, "%d%s", thermPercent, "%%");
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <inject+0xbc>)
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	490f      	ldr	r1, [pc, #60]	; (8002030 <inject+0xc0>)
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f006 fa24 	bl	8008440 <siprintf>
    strncpy(&injected[2569], thermPercentStr, strlen(thermPercentStr) - 1);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f603 2409 	addw	r4, r3, #2569	; 0xa09
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7fe f8fe 	bl	8000200 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	3b01      	subs	r3, #1
 8002008:	461a      	mov	r2, r3
 800200a:	6979      	ldr	r1, [r7, #20]
 800200c:	4620      	mov	r0, r4
 800200e:	f006 fb48 	bl	80086a2 <strncpy>

    return injected;
 8002012:	69fb      	ldr	r3, [r7, #28]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	08009d10 	.word	0x08009d10
 8002020:	080098dc 	.word	0x080098dc
 8002024:	080098e4 	.word	0x080098e4
 8002028:	080098ec 	.word	0x080098ec
 800202c:	080098f8 	.word	0x080098f8
 8002030:	080098fc 	.word	0x080098fc

08002034 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002038:	f001 f8b9 	bl	80031ae <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800203c:	f000 faba 	bl	80025b4 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 fb4b 	bl	80026dc <BSP_LED_Init>

  /* USER push button is used to ask if reconfiguration is needed */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002046:	2101      	movs	r1, #1
 8002048:	2000      	movs	r0, #0
 800204a:	f000 fba3 	bl	8002794 <BSP_PB_Init>

  BSP_TSENSOR_Init();
 800204e:	f000 fdb3 	bl	8002bb8 <BSP_TSENSOR_Init>


  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <main+0x74>)
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <main+0x78>)
 8002056:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <main+0x74>)
 800205a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205e:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <main+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <main+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <main+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <main+0x74>)
 8002074:	220c      	movs	r2, #12
 8002076:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <main+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <main+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <main+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <main+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28


  BSP_COM_Init(COM1, &hDiscoUart);
 8002090:	4905      	ldr	r1, [pc, #20]	; (80020a8 <main+0x74>)
 8002092:	2000      	movs	r0, #0
 8002094:	f000 fbd4 	bl	8002840 <BSP_COM_Init>

  printf("\n****** WIFI Web Server demonstration ******\n\r");
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <main+0x7c>)
 800209a:	f006 f95b 	bl	8008354 <iprintf>
//	/* definition and creation of taskBtnInput */
//	osThreadDef(taskSensors, StartTaskSensors, osPriorityNormal, 0, 256);
//	taskSensorsHandle = osThreadCreate(osThread(taskSensors), NULL);
//
//	osKernelStart();
  wifi_server();
 800209e:	f000 f8b9 	bl	8002214 <wifi_server>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200019e4 	.word	0x200019e4
 80020ac:	40013800 	.word	0x40013800
 80020b0:	08009904 	.word	0x08009904

080020b4 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80020ba:	f000 fed1 	bl	8002e60 <WIFI_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d124      	bne.n	800210e <wifi_start+0x5a>
  {
    printf("eS-WiFi Initialized.\n\r");
 80020c4:	4815      	ldr	r0, [pc, #84]	; (800211c <wifi_start+0x68>)
 80020c6:	f006 f945 	bl	8008354 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	2106      	movs	r1, #6
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 ff14 	bl	8002efc <WIFI_GetMAC_Address>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <wifi_start+0x4e>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 80020da:	783b      	ldrb	r3, [r7, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	787b      	ldrb	r3, [r7, #1]
 80020e0:	461c      	mov	r4, r3
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	461d      	mov	r5, r3
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	793a      	ldrb	r2, [r7, #4]
 80020ea:	7979      	ldrb	r1, [r7, #5]
 80020ec:	9102      	str	r1, [sp, #8]
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	462b      	mov	r3, r5
 80020f4:	4622      	mov	r2, r4
 80020f6:	4601      	mov	r1, r0
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <wifi_start+0x6c>)
 80020fa:	f006 f92b 	bl	8008354 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	e007      	b.n	8002112 <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n\r"));
 8002102:	4808      	ldr	r0, [pc, #32]	; (8002124 <wifi_start+0x70>)
 8002104:	f006 f926 	bl	8008354 <iprintf>
      return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	e001      	b.n	8002112 <wifi_start+0x5e>
    return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	bf00      	nop
 800211c:	08009934 	.word	0x08009934
 8002120:	0800994c 	.word	0x0800994c
 8002124:	0800998c 	.word	0x0800998c

08002128 <wifi_connect>:



int wifi_connect(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af02      	add	r7, sp, #8
  wifi_start();
 800212e:	f7ff ffc1 	bl	80020b4 <wifi_start>

  memset(&user_config, 0, sizeof(user_config));
 8002132:	22d8      	movs	r2, #216	; 0xd8
 8002134:	2100      	movs	r1, #0
 8002136:	482c      	ldr	r0, [pc, #176]	; (80021e8 <wifi_connect+0xc0>)
 8002138:	f006 fa8a 	bl	8008650 <memset>

//  Set wifi config
  printf("Configuring SSID and password.\n\r");
 800213c:	482b      	ldr	r0, [pc, #172]	; (80021ec <wifi_connect+0xc4>)
 800213e:	f006 f909 	bl	8008354 <iprintf>
  strcpy(user_config.wifi_config.ssid, "Philippe");
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <wifi_connect+0xc8>)
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <wifi_connect+0xcc>)
 8002146:	ca07      	ldmia	r2, {r0, r1, r2}
 8002148:	c303      	stmia	r3!, {r0, r1}
 800214a:	701a      	strb	r2, [r3, #0]
  char c = '3';
 800214c:	2333      	movs	r3, #51	; 0x33
 800214e:	71fb      	strb	r3, [r7, #7]
  user_config.wifi_config.security = c - '0';
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3b30      	subs	r3, #48	; 0x30
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <wifi_connect+0xc0>)
 8002158:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  strcpy(user_config.wifi_config.password, "hahahaha");
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <wifi_connect+0xd0>)
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <wifi_connect+0xd4>)
 8002160:	ca07      	ldmia	r2, {r0, r1, r2}
 8002162:	c303      	stmia	r3!, {r0, r1}
 8002164:	701a      	strb	r2, [r3, #0]
  user_config.wifi_config_magic = USER_CONF_MAGIC;
 8002166:	4920      	ldr	r1, [pc, #128]	; (80021e8 <wifi_connect+0xc0>)
 8002168:	a31d      	add	r3, pc, #116	; (adr r3, 80021e0 <wifi_connect+0xb8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	e9c1 2300 	strd	r2, r3, [r1]
// Try to connect to wifi
  printf("Connecting to %s\n\r", user_config.wifi_config.ssid);
 8002172:	491f      	ldr	r1, [pc, #124]	; (80021f0 <wifi_connect+0xc8>)
 8002174:	4822      	ldr	r0, [pc, #136]	; (8002200 <wifi_connect+0xd8>)
 8002176:	f006 f8ed 	bl	8008354 <iprintf>
  WIFI_Ecn_t security =  WIFI_ECN_WPA2_PSK;
 800217a:	2303      	movs	r3, #3
 800217c:	71bb      	strb	r3, [r7, #6]

  if (WIFI_Connect(user_config.wifi_config.ssid, user_config.wifi_config.password, security) == WIFI_STATUS_OK)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	491d      	ldr	r1, [pc, #116]	; (80021f8 <wifi_connect+0xd0>)
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <wifi_connect+0xc8>)
 8002186:	f000 fe97 	bl	8002eb8 <WIFI_Connect>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11e      	bne.n	80021ce <wifi_connect+0xa6>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8002190:	2104      	movs	r1, #4
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <wifi_connect+0xdc>)
 8002194:	f000 fed2 	bl	8002f3c <WIFI_GetIP_Address>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d111      	bne.n	80021c2 <wifi_connect+0x9a>
    {
      LOG(("eS-WiFi module connected: got IP Address : %d.%d.%d.%d\n\r",
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <wifi_connect+0xdc>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <wifi_connect+0xdc>)
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <wifi_connect+0xdc>)
 80021ac:	789b      	ldrb	r3, [r3, #2]
 80021ae:	4618      	mov	r0, r3
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <wifi_connect+0xdc>)
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <wifi_connect+0xe0>)
 80021ba:	f006 f8cb 	bl	8008354 <iprintf>
  else
  {
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
     return -1;
  }
  return 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	e00a      	b.n	80021d8 <wifi_connect+0xb0>
      LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
 80021c2:	4812      	ldr	r0, [pc, #72]	; (800220c <wifi_connect+0xe4>)
 80021c4:	f006 f8c6 	bl	8008354 <iprintf>
      return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e004      	b.n	80021d8 <wifi_connect+0xb0>
     LOG(("ERROR : es-wifi module NOT connected\n\r"));
 80021ce:	4810      	ldr	r0, [pc, #64]	; (8002210 <wifi_connect+0xe8>)
 80021d0:	f006 f8c0 	bl	8008354 <iprintf>
     return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	89abcdef 	.word	0x89abcdef
 80021e4:	01234567 	.word	0x01234567
 80021e8:	20000128 	.word	0x20000128
 80021ec:	080099b0 	.word	0x080099b0
 80021f0:	20000130 	.word	0x20000130
 80021f4:	080099d4 	.word	0x080099d4
 80021f8:	20000194 	.word	0x20000194
 80021fc:	080099e0 	.word	0x080099e0
 8002200:	080099ec 	.word	0x080099ec
 8002204:	20001588 	.word	0x20001588
 8002208:	08009a00 	.word	0x08009a00
 800220c:	08009a3c 	.word	0x08009a3c
 8002210:	08009a6c 	.word	0x08009a6c

08002214 <wifi_server>:

int wifi_server(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af02      	add	r7, sp, #8
  bool StopServer = false;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n\r"));
 800221e:	4840      	ldr	r0, [pc, #256]	; (8002320 <wifi_server+0x10c>)
 8002220:	f006 f898 	bl	8008354 <iprintf>
  if (wifi_connect()!=0) return -1;
 8002224:	f7ff ff80 	bl	8002128 <wifi_connect>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <wifi_server+0x20>
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e070      	b.n	8002316 <wifi_server+0x102>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8002234:	2350      	movs	r3, #80	; 0x50
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <wifi_server+0x110>)
 800223a:	2201      	movs	r2, #1
 800223c:	2100      	movs	r1, #0
 800223e:	2000      	movs	r0, #0
 8002240:	f000 fea0 	bl	8002f84 <WIFI_StartServer>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 800224a:	4837      	ldr	r0, [pc, #220]	; (8002328 <wifi_server+0x114>)
 800224c:	f006 f8f0 	bl	8008430 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <wifi_server+0x118>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <wifi_server+0x118>)
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	461a      	mov	r2, r3
 800225c:	4b33      	ldr	r3, [pc, #204]	; (800232c <wifi_server+0x118>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	4618      	mov	r0, r3
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <wifi_server+0x118>)
 8002264:	78db      	ldrb	r3, [r3, #3]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	4831      	ldr	r0, [pc, #196]	; (8002330 <wifi_server+0x11c>)
 800226c:	f006 f872 	bl	8008354 <iprintf>
  {
//	osDelay(100);
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    LOG(("Waiting connection to http://%d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <wifi_server+0x118>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <wifi_server+0x118>)
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	461a      	mov	r2, r3
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <wifi_server+0x118>)
 800227e:	789b      	ldrb	r3, [r3, #2]
 8002280:	4618      	mov	r0, r3
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <wifi_server+0x118>)
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	482a      	ldr	r0, [pc, #168]	; (8002334 <wifi_server+0x120>)
 800228c:	f006 f862 	bl	8008354 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002290:	e002      	b.n	8002298 <wifi_server+0x84>
    {
        LOG(("."));
 8002292:	202e      	movs	r0, #46	; 0x2e
 8002294:	f006 f870 	bl	8008378 <putchar>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort))
 8002298:	f107 0208 	add.w	r2, r7, #8
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2304      	movs	r3, #4
 80022a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 fe9c 	bl	8002fe4 <WIFI_WaitServerConnection>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ef      	bne.n	8002292 <wifi_server+0x7e>
    }

    LOG(("\nClient connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80022b2:	7a3b      	ldrb	r3, [r7, #8]
 80022b4:	4619      	mov	r1, r3
 80022b6:	7a7b      	ldrb	r3, [r7, #9]
 80022b8:	4618      	mov	r0, r3
 80022ba:	7abb      	ldrb	r3, [r7, #10]
 80022bc:	461c      	mov	r4, r3
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	9201      	str	r2, [sp, #4]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4623      	mov	r3, r4
 80022c8:	4602      	mov	r2, r0
 80022ca:	481b      	ldr	r0, [pc, #108]	; (8002338 <wifi_server+0x124>)
 80022cc:	f006 f842 	bl	8008354 <iprintf>

    StopServer = WebServerProcess();
 80022d0:	f000 f83a 	bl	8002348 <WebServerProcess>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]

    if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 fecb 	bl	8003074 <WIFI_CloseServerConnection>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <wifi_server+0xdc>
    {
      LOG(("ERROR: failed to close current Server connection\n\r"));
 80022e4:	4815      	ldr	r0, [pc, #84]	; (800233c <wifi_server+0x128>)
 80022e6:	f006 f835 	bl	8008354 <iprintf>
      return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	e012      	b.n	8002316 <wifi_server+0x102>
    }
  }
  while(StopServer == false);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1b9      	bne.n	8002270 <wifi_server+0x5c>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 fed1 	bl	80030a4 <WIFI_StopServer>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <wifi_server+0xfa>
  {
    LOG(("ERROR: Cannot stop server.\n\r"));
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <wifi_server+0x12c>)
 800230a:	f006 f823 	bl	8008354 <iprintf>
  }

  LOG(("Server is stop\n"));
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <wifi_server+0x130>)
 8002310:	f006 f88e 	bl	8008430 <puts>
  return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	08009a94 	.word	0x08009a94
 8002324:	08009ab0 	.word	0x08009ab0
 8002328:	08009ab4 	.word	0x08009ab4
 800232c:	20001588 	.word	0x20001588
 8002330:	08009ad0 	.word	0x08009ad0
 8002334:	08009b20 	.word	0x08009b20
 8002338:	08009b4c 	.word	0x08009b4c
 800233c:	08009b70 	.word	0x08009b70
 8002340:	08009ba4 	.word	0x08009ba4
 8002344:	08009bc4 	.word	0x08009bc4

08002348 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint8_t pres;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	f242 7210 	movw	r2, #10000	; 0x2710
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002360:	4954      	ldr	r1, [pc, #336]	; (80024b4 <WebServerProcess+0x16c>)
 8002362:	2000      	movs	r0, #0
 8002364:	f000 fed8 	bl	8003118 <WIFI_ReceiveData>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 809a 	bne.w	80024a4 <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n\r",respLen));
 8002370:	89bb      	ldrh	r3, [r7, #12]
 8002372:	4619      	mov	r1, r3
 8002374:	4850      	ldr	r0, [pc, #320]	; (80024b8 <WebServerProcess+0x170>)
 8002376:	f005 ffed 	bl	8008354 <iprintf>

   if( respLen > 0)
 800237a:	89bb      	ldrh	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8094 	beq.w	80024aa <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8002382:	494e      	ldr	r1, [pc, #312]	; (80024bc <WebServerProcess+0x174>)
 8002384:	484b      	ldr	r0, [pc, #300]	; (80024b4 <WebServerProcess+0x16c>)
 8002386:	f006 f9fb 	bl	8008780 <strstr>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <WebServerProcess+0x82>
      {
        temp = (uint8_t) BSP_TSENSOR_ReadTemp();
 8002390:	f000 fc2e 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 8002394:	eef0 7a40 	vmov.f32	s15, s0
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	edc7 7a01 	vstr	s15, [r7, #4]
 80023a0:	793b      	ldrb	r3, [r7, #4]
 80023a2:	73bb      	strb	r3, [r7, #14]
//        pres = (uint8_t) BSP_PSENSOR_ReadPres();
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <WebServerProcess+0x178>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	7bba      	ldrb	r2, [r7, #14]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f8a0 	bl	80024f4 <SendWebPage>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n\r"));
 80023ba:	4842      	ldr	r0, [pc, #264]	; (80024c4 <WebServerProcess+0x17c>)
 80023bc:	f005 ffca 	bl	8008354 <iprintf>
 80023c0:	e073      	b.n	80024aa <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n\r"));
 80023c2:	4841      	ldr	r0, [pc, #260]	; (80024c8 <WebServerProcess+0x180>)
 80023c4:	f005 ffc6 	bl	8008354 <iprintf>
 80023c8:	e06f      	b.n	80024aa <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80023ca:	4940      	ldr	r1, [pc, #256]	; (80024cc <WebServerProcess+0x184>)
 80023cc:	4839      	ldr	r0, [pc, #228]	; (80024b4 <WebServerProcess+0x16c>)
 80023ce:	f006 f9d7 	bl	8008780 <strstr>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d068      	beq.n	80024aa <WebServerProcess+0x162>
       {
         LOG(("Post request\n\r"));
 80023d8:	483d      	ldr	r0, [pc, #244]	; (80024d0 <WebServerProcess+0x188>)
 80023da:	f005 ffbb 	bl	8008354 <iprintf>

         if(strstr((char *)resp, "radio"))
 80023de:	493d      	ldr	r1, [pc, #244]	; (80024d4 <WebServerProcess+0x18c>)
 80023e0:	4834      	ldr	r0, [pc, #208]	; (80024b4 <WebServerProcess+0x16c>)
 80023e2:	f006 f9cd 	bl	8008780 <strstr>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d024      	beq.n	8002436 <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 80023ec:	493a      	ldr	r1, [pc, #232]	; (80024d8 <WebServerProcess+0x190>)
 80023ee:	4831      	ldr	r0, [pc, #196]	; (80024b4 <WebServerProcess+0x16c>)
 80023f0:	f006 f9c6 	bl	8008780 <strstr>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <WebServerProcess+0xc0>
           {
             LedState = 0;
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <WebServerProcess+0x178>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f9b1 	bl	8002768 <BSP_LED_Off>
 8002406:	e00c      	b.n	8002422 <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 8002408:	4934      	ldr	r1, [pc, #208]	; (80024dc <WebServerProcess+0x194>)
 800240a:	482a      	ldr	r0, [pc, #168]	; (80024b4 <WebServerProcess+0x16c>)
 800240c:	f006 f9b8 	bl	8008780 <strstr>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <WebServerProcess+0xda>
           {
             LedState = 1;
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <WebServerProcess+0x178>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f98d 	bl	800273c <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8002422:	f000 fbe5 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 8002426:	eef0 7a40 	vmov.f32	s15, s0
 800242a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002432:	793b      	ldrb	r3, [r7, #4]
 8002434:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <WebServerProcess+0x198>)
 8002438:	481e      	ldr	r0, [pc, #120]	; (80024b4 <WebServerProcess+0x16c>)
 800243a:	f006 f9a1 	bl	8008780 <strstr>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d012      	beq.n	800246a <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8002444:	4927      	ldr	r1, [pc, #156]	; (80024e4 <WebServerProcess+0x19c>)
 8002446:	481b      	ldr	r0, [pc, #108]	; (80024b4 <WebServerProcess+0x16c>)
 8002448:	f006 f99a 	bl	8008780 <strstr>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <WebServerProcess+0x110>
           {
             stopserver = false;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e008      	b.n	800246a <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8002458:	4923      	ldr	r1, [pc, #140]	; (80024e8 <WebServerProcess+0x1a0>)
 800245a:	4816      	ldr	r0, [pc, #88]	; (80024b4 <WebServerProcess+0x16c>)
 800245c:	f006 f990 	bl	8008780 <strstr>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <WebServerProcess+0x122>
           {
             stopserver = true;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 800246a:	f000 fbc1 	bl	8002bf0 <BSP_TSENSOR_ReadTemp>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	edc7 7a01 	vstr	s15, [r7, #4]
 800247a:	793b      	ldrb	r3, [r7, #4]
 800247c:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <WebServerProcess+0x178>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	7bba      	ldrb	r2, [r7, #14]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f833 	bl	80024f4 <SendWebPage>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n\r"));
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <WebServerProcess+0x17c>)
 8002496:	f005 ff5d 	bl	8008354 <iprintf>
 800249a:	e006      	b.n	80024aa <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n\r"));
 800249c:	4813      	ldr	r0, [pc, #76]	; (80024ec <WebServerProcess+0x1a4>)
 800249e:	f005 ff59 	bl	8008354 <iprintf>
 80024a2:	e002      	b.n	80024aa <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n\r"));
 80024a4:	4812      	ldr	r0, [pc, #72]	; (80024f0 <WebServerProcess+0x1a8>)
 80024a6:	f005 ff55 	bl	8008354 <iprintf>
  }
  return stopserver;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]

 }
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20001590 	.word	0x20001590
 80024b8:	08009bd4 	.word	0x08009bd4
 80024bc:	08009bf0 	.word	0x08009bf0
 80024c0:	2000158c 	.word	0x2000158c
 80024c4:	08009bf4 	.word	0x08009bf4
 80024c8:	08009c18 	.word	0x08009c18
 80024cc:	08009c38 	.word	0x08009c38
 80024d0:	08009c40 	.word	0x08009c40
 80024d4:	08009c50 	.word	0x08009c50
 80024d8:	08009c58 	.word	0x08009c58
 80024dc:	08009c60 	.word	0x08009c60
 80024e0:	08009c68 	.word	0x08009c68
 80024e4:	08009c74 	.word	0x08009c74
 80024e8:	08009c84 	.word	0x08009c84
 80024ec:	08009c94 	.word	0x08009c94
 80024f0:	08009cb4 	.word	0x08009cb4

080024f4 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temp)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	460a      	mov	r2, r1
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	4613      	mov	r3, r2
 8002502:	71bb      	strb	r3, [r7, #6]
  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <SendWebPage+0xb8>)
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <SendWebPage+0xbc>)
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800251c:	c407      	stmia	r4!, {r0, r1, r2}
 800251e:	8023      	strh	r3, [r4, #0]
 8002520:	3402      	adds	r4, #2
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, inject(0, temp, 50));
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2232      	movs	r2, #50	; 0x32
 800252a:	4619      	mov	r1, r3
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fd1f 	bl	8001f70 <inject>
 8002532:	4603      	mov	r3, r0
 8002534:	4619      	mov	r1, r3
 8002536:	481d      	ldr	r0, [pc, #116]	; (80025ac <SendWebPage+0xb8>)
 8002538:	f006 f892 	bl	8008660 <strcat>

  /* http is the buffer which contains the data to send. */
  /* httpDataLength is the length of the data to be sent. */
  WIFI_Status_t ret;
  uint32_t httpDataLength = strlen(http);
 800253c:	481b      	ldr	r0, [pc, #108]	; (80025ac <SendWebPage+0xb8>)
 800253e:	f7fd fe5f 	bl	8000200 <strlen>
 8002542:	61b8      	str	r0, [r7, #24]
  uint32_t dataLengthToSend;
  uint32_t dataLengthSent = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]

  while( httpDataLength > 0 )
 8002548:	e025      	b.n	8002596 <SendWebPage+0xa2>
  {
      if(httpDataLength > 500)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002550:	d903      	bls.n	800255a <SendWebPage+0x66>
      {
          dataLengthToSend = 500;
 8002552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e001      	b.n	800255e <SendWebPage+0x6a>
      }
      else
      {
          dataLengthToSend = httpDataLength;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	617b      	str	r3, [r7, #20]
      }

      uint16_t curDataLengthSent;
      ret = WIFI_SendData(0, &http[dataLengthSent], dataLengthToSend, &curDataLengthSent, WIFI_WRITE_TIMEOUT );
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <SendWebPage+0xb8>)
 8002562:	1899      	adds	r1, r3, r2
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f107 030e 	add.w	r3, r7, #14
 800256c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002570:	9000      	str	r0, [sp, #0]
 8002572:	2000      	movs	r0, #0
 8002574:	f000 fdae 	bl	80030d4 <WIFI_SendData>
 8002578:	4603      	mov	r3, r0
 800257a:	77fb      	strb	r3, [r7, #31]

      if( ret != WIFI_STATUS_OK)
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <SendWebPage+0xaa>
          break;
      }
      else
      {
          /* Update what is left to send based on the length of the data actually sent. */
    	  dataLengthSent += curDataLengthSent;
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	461a      	mov	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
          httpDataLength -= curDataLengthSent;
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	461a      	mov	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
  while( httpDataLength > 0 )
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1d6      	bne.n	800254a <SendWebPage+0x56>
 800259c:	e000      	b.n	80025a0 <SendWebPage+0xac>
          break;
 800259e:	bf00      	nop
//  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
//  {
//    ret = WIFI_STATUS_ERROR;
//  }

  return ret;
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdb0      	pop	{r4, r5, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000200 	.word	0x20000200
 80025b0:	08009cd0 	.word	0x08009cd0

080025b4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b096      	sub	sp, #88	; 0x58
 80025b8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025ba:	2310      	movs	r3, #16
 80025bc:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025c2:	2360      	movs	r3, #96	; 0x60
 80025c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ca:	2302      	movs	r3, #2
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025ce:	2301      	movs	r3, #1
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80025d6:	2328      	movs	r3, #40	; 0x28
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025da:	2302      	movs	r3, #2
 80025dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 80025de:	2307      	movs	r3, #7
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e2:	2304      	movs	r3, #4
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fff9 	bl	80045e0 <HAL_RCC_OscConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d000      	beq.n	80025f6 <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 80025f4:	e7fe      	b.n	80025f4 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80025f6:	230f      	movs	r3, #15
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fa:	2303      	movs	r3, #3
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800260a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800260e:	2104      	movs	r1, #4
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fbff 	bl	8004e14 <HAL_RCC_ClockConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d000      	beq.n	800261e <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 800261c:	e7fe      	b.n	800261c <SystemClock_Config+0x68>
  }
}
 800261e:	bf00      	nop
 8002620:	3758      	adds	r7, #88	; 0x58
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002630:	1d39      	adds	r1, r7, #4
 8002632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002636:	2201      	movs	r2, #1
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <__io_putchar+0x20>)
 800263a:	f004 fdfc 	bl	8007236 <HAL_UART_Transmit>

  return ch;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200019e4 	.word	0x200019e4

0800264c <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 8002656:	bf00      	nop
 8002658:	1df9      	adds	r1, r7, #7
 800265a:	f247 5330 	movw	r3, #30000	; 0x7530
 800265e:	2201      	movs	r2, #1
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <__io_getchar+0x2c>)
 8002662:	f004 fe77 	bl	8007354 <HAL_UART_Receive>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f5      	bne.n	8002658 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 800266c:	79fb      	ldrb	r3, [r7, #7]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200019e4 	.word	0x200019e4

0800267c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d005      	beq.n	8002698 <HAL_GPIO_EXTI_Callback+0x1c>
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002690:	d105      	bne.n	800269e <HAL_GPIO_EXTI_Callback+0x22>
  {
    case (USER_BUTTON_PIN):
    {
      Button_ISR();
 8002692:	f000 f813 	bl	80026bc <Button_ISR>
      break;
 8002696:	e003      	b.n	80026a0 <HAL_GPIO_EXTI_Callback+0x24>
    }
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002698:	f7ff fc5a 	bl	8001f50 <SPI_WIFI_ISR>
      break;
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_EXTI_Callback+0x24>
    }
    default:
    {
      break;
 800269e:	bf00      	nop
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <SPI3_IRQHandler+0x10>)
 80026ae:	f003 fef1 	bl	8006494 <HAL_SPI_IRQHandler>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200000b0 	.word	0x200000b0

080026bc <Button_ISR>:

/**
  * @brief Update button ISR status
  */
static void Button_ISR(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  button_flag++;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <Button_ISR+0x1c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <Button_ISR+0x1c>)
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20000124 	.word	0x20000124

080026dc <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <BSP_LED_Init+0x28>
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <BSP_LED_Init+0x58>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a10      	ldr	r2, [pc, #64]	; (8002734 <BSP_LED_Init+0x58>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <BSP_LED_Init+0x58>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002708:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <BSP_LED_Init+0x5c>)
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	f107 020c 	add.w	r2, r7, #12
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 ff51 	bl	80035cc <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	20000010 	.word	0x20000010

0800273c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <BSP_LED_On+0x28>)
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002752:	b291      	uxth	r1, r2
 8002754:	2201      	movs	r2, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f8e2 	bl	8003920 <HAL_GPIO_WritePin>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000010 	.word	0x20000010

08002768 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <BSP_LED_Off+0x28>)
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800277e:	b291      	uxth	r1, r2
 8002780:	2200      	movs	r2, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f8cc 	bl	8003920 <HAL_GPIO_WritePin>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000010 	.word	0x20000010

08002794 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <BSP_PB_Init+0xa4>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <BSP_PB_Init+0xa4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <BSP_PB_Init+0xa4>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <BSP_PB_Init+0xa8>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fef2 	bl	80035cc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80027e8:	79bb      	ldrb	r3, [r7, #6]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d11f      	bne.n	800282e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80027fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002800:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <BSP_PB_Init+0xa8>)
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	f107 020c 	add.w	r2, r7, #12
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fedb 	bl	80035cc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002816:	2328      	movs	r3, #40	; 0x28
 8002818:	b25b      	sxtb	r3, r3
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fe3f 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002824:	2328      	movs	r3, #40	; 0x28
 8002826:	b25b      	sxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fe56 	bl	80034da <HAL_NVIC_EnableIRQ>
  }
}
 800282e:	bf00      	nop
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	20000014 	.word	0x20000014

08002840 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <BSP_COM_Init+0x2a>
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <BSP_COM_Init+0xc8>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <BSP_COM_Init+0xc8>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <BSP_COM_Init+0xc8>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <BSP_COM_Init+0x48>
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <BSP_COM_Init+0xc8>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4a24      	ldr	r2, [pc, #144]	; (8002908 <BSP_COM_Init+0xc8>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <BSP_COM_Init+0xc8>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <BSP_COM_Init+0x66>
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <BSP_COM_Init+0xc8>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <BSP_COM_Init+0xc8>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002898:	6613      	str	r3, [r2, #96]	; 0x60
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <BSP_COM_Init+0xc8>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ae:	2302      	movs	r3, #2
 80028b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80028b6:	2307      	movs	r3, #7
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <BSP_COM_Init+0xcc>)
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	f107 0214 	add.w	r2, r7, #20
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fe7f 	bl	80035cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80028d6:	2307      	movs	r3, #7
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <BSP_COM_Init+0xd0>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	f107 0214 	add.w	r2, r7, #20
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe6f 	bl	80035cc <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <BSP_COM_Init+0xd4>)
 80028f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f004 fc41 	bl	8007182 <HAL_UART_Init>
}
 8002900:	bf00      	nop
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	2000001c 	.word	0x2000001c
 8002910:	20000020 	.word	0x20000020
 8002914:	20000018 	.word	0x20000018

08002918 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002938:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800293c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002942:	2301      	movs	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800294a:	2304      	movs	r3, #4
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	481b      	ldr	r0, [pc, #108]	; (80029c4 <I2Cx_MspInit+0xac>)
 8002956:	f000 fe39 	bl	80035cc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4818      	ldr	r0, [pc, #96]	; (80029c4 <I2Cx_MspInit+0xac>)
 8002962:	f000 fe33 	bl	80035cc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800296c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002988:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <I2Cx_MspInit+0xa8>)
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <I2Cx_MspInit+0xa8>)
 8002990:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002994:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	2021      	movs	r0, #33	; 0x21
 800299c:	f000 fd81 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029a0:	2021      	movs	r0, #33	; 0x21
 80029a2:	f000 fd9a 	bl	80034da <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	210f      	movs	r1, #15
 80029aa:	2022      	movs	r0, #34	; 0x22
 80029ac:	f000 fd79 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80029b0:	2022      	movs	r0, #34	; 0x22
 80029b2:	f000 fd92 	bl	80034da <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	48000400 	.word	0x48000400

080029c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <I2Cx_Init+0x54>)
 80029d4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <I2Cx_Init+0x58>)
 80029da:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff89 	bl	8002918 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 ffba 	bl	8003980 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 fd7a 	bl	8004508 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005800 	.word	0x40005800
 8002a20:	00702681 	.word	0x00702681

08002a24 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	72fb      	strb	r3, [r7, #11]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a42:	7afb      	ldrb	r3, [r7, #11]
 8002a44:	b299      	uxth	r1, r3
 8002a46:	88f8      	ldrh	r0, [r7, #6]
 8002a48:	893a      	ldrh	r2, [r7, #8]
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f001 f982 	bl	8003d64 <HAL_I2C_Mem_Read>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f832 	bl	8002ad8 <I2Cx_Error>
  }
  return status;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af04      	add	r7, sp, #16
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	72fb      	strb	r3, [r7, #11]
 8002a90:	460b      	mov	r3, r1
 8002a92:	813b      	strh	r3, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	88f8      	ldrh	r0, [r7, #6]
 8002aa2:	893a      	ldrh	r2, [r7, #8]
 8002aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f001 f841 	bl	8003b3c <HAL_I2C_Mem_Write>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f805 	bl	8002ad8 <I2Cx_Error>
  }
  return status;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ffe6 	bl	8003ab6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff6c 	bl	80029c8 <I2Cx_Init>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <SENSOR_IO_Init+0x10>)
 8002afe:	f7ff ff63 	bl	80029c8 <I2Cx_Init>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20001990 	.word	0x20001990

08002b0c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	460b      	mov	r3, r1
 8002b18:	71bb      	strb	r3, [r7, #6]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	79f9      	ldrb	r1, [r7, #7]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	1d7b      	adds	r3, r7, #5
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4803      	ldr	r0, [pc, #12]	; (8002b3c <SENSOR_IO_Write+0x30>)
 8002b30:	f7ff ffa5 	bl	8002a7e <I2Cx_WriteMultiple>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20001990 	.word	0x20001990

08002b40 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	79f9      	ldrb	r1, [r7, #7]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	f107 030f 	add.w	r3, r7, #15
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2301      	movs	r3, #1
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <SENSOR_IO_Read+0x38>)
 8002b68:	f7ff ff5c 	bl	8002a24 <I2Cx_ReadMultiple>

  return read_value;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20001990 	.word	0x20001990

08002b7c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	603a      	str	r2, [r7, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	71bb      	strb	r3, [r7, #6]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	79f9      	ldrb	r1, [r7, #7]
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <SENSOR_IO_ReadMultiple+0x38>)
 8002ba4:	f7ff ff3e 	bl	8002a24 <I2Cx_ReadMultiple>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29b      	uxth	r3, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20001990 	.word	0x20001990

08002bb8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <BSP_TSENSOR_Init+0x30>)
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <BSP_TSENSOR_Init+0x34>)
 8002bc6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002bc8:	f7ff ff96 	bl	8002af8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <BSP_TSENSOR_Init+0x30>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	20be      	movs	r0, #190	; 0xbe
 8002bd6:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20001a78 	.word	0x20001a78
 8002bec:	20000000 	.word	0x20000000

08002bf0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <BSP_TSENSOR_ReadTemp+0x18>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	20be      	movs	r0, #190	; 0xbe
 8002bfc:	4798      	blx	r3
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20001a78 	.word	0x20001a78

08002c0c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002c44:	f000 fb0e 	bl	8003264 <HAL_IncTick>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c50:	2002      	movs	r0, #2
 8002c52:	f000 fe7d 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8002c5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c62:	f000 fe75 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return 1;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_kill>:

int _kill(int pid, int sig)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c84:	f005 fde8 	bl	8008858 <__errno>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2216      	movs	r2, #22
 8002c8c:	601a      	str	r2, [r3, #0]
  return -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_exit>:

void _exit (int status)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffe7 	bl	8002c7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cac:	e7fe      	b.n	8002cac <_exit+0x12>

08002cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e00a      	b.n	8002cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cc0:	f7ff fcc4 	bl	800264c <__io_getchar>
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	60ba      	str	r2, [r7, #8]
 8002ccc:	b2ca      	uxtb	r2, r1
 8002cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbf0      	blt.n	8002cc0 <_read+0x12>
  }

  return len;
 8002cde:	687b      	ldr	r3, [r7, #4]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e009      	b.n	8002d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	60ba      	str	r2, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fc90 	bl	8002628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	dbf1      	blt.n	8002cfa <_write+0x12>
  }
  return len;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_close>:

int _close(int file)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d48:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_isatty>:

int _isatty(int file)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d60:	2301      	movs	r3, #1
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f005 fd4e 	bl	8008858 <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200a0000 	.word	0x200a0000
 8002de8:	00000400 	.word	0x00000400
 8002dec:	20001a7c 	.word	0x20001a7c
 8002df0:	20002570 	.word	0x20002570

08002df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <SystemInit+0x64>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <SystemInit+0x64>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <SystemInit+0x68>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <SystemInit+0x68>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <SystemInit+0x68>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <SystemInit+0x68>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <SystemInit+0x68>)
 8002e20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <SystemInit+0x68>)
 8002e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <SystemInit+0x68>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <SystemInit+0x68>)
 8002e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <SystemInit+0x68>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SystemInit+0x64>)
 8002e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	40021000 	.word	0x40021000

08002e60 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <WIFI_Init+0x40>)
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <WIFI_Init+0x44>)
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <WIFI_Init+0x48>)
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <WIFI_Init+0x4c>)
 8002e76:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <WIFI_Init+0x50>)
 8002e78:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <WIFI_Init+0x54>)
 8002e7a:	f7fe f87d 	bl	8000f78 <ES_WIFI_RegisterBusIO>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002e84:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <WIFI_Init+0x54>)
 8002e86:	f7fe f843 	bl	8000f10 <ES_WIFI_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002e94:	79fb      	ldrb	r3, [r7, #7]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	08001c75 	.word	0x08001c75
 8002ea4:	08001d69 	.word	0x08001d69
 8002ea8:	08001e45 	.word	0x08001e45
 8002eac:	08001b5d 	.word	0x08001b5d
 8002eb0:	080019c1 	.word	0x080019c1
 8002eb4:	20001a80 	.word	0x20001a80

08002eb8 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <WIFI_Connect+0x40>)
 8002ed2:	f7fe f885 	bl	8000fe0 <ES_WIFI_Connect>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002edc:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <WIFI_Connect+0x40>)
 8002ede:	f7fe f927 	bl	8001130 <ES_WIFI_GetNetworkSettings>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20001a80 	.word	0x20001a80

08002efc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <WIFI_GetMAC_Address+0x32>
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <WIFI_GetMAC_Address+0x3c>)
 8002f20:	f7fe f930 	bl	8001184 <ES_WIFI_GetMACAddress>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20001a80 	.word	0x20001a80

08002f3c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <WIFI_GetIP_Address+0x38>
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d90d      	bls.n	8002f74 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002f58:	4809      	ldr	r0, [pc, #36]	; (8002f80 <WIFI_GetIP_Address+0x44>)
 8002f5a:	f7fe f8b9 	bl	80010d0 <ES_WIFI_IsConnected>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <WIFI_GetIP_Address+0x38>
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <WIFI_GetIP_Address+0x44>)
 8002f66:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002f6a:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20001a80 	.word	0x20001a80

08002f84 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	4613      	mov	r3, r2
 8002f94:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	74bb      	strb	r3, [r7, #18]
  conn.LocalPort = port;
 8002fa2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fa4:	82fb      	strh	r3, [r7, #22]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002fb4:	893b      	ldrh	r3, [r7, #8]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <WIFI_StartServer+0x5c>)
 8002fc4:	f7fe f914 	bl	80011f0 <ES_WIFI_StartServerSingleConn>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20001a80 	.word	0x20001a80

08002fe4 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	74bb      	strb	r3, [r7, #18]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	481b      	ldr	r0, [pc, #108]	; (8003070 <WIFI_WaitServerConnection+0x8c>)
 8003002:	f7fe f9a1 	bl	8001348 <ES_WIFI_WaitServerConnection>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 800300c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003010:	2b00      	cmp	r3, #0
 8003012:	d110      	bne.n	8003036 <WIFI_WaitServerConnection+0x52>
  {
    if (RemotePort)
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 800301a:	8aba      	ldrh	r2, [r7, #20]
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <WIFI_WaitServerConnection+0x4e>
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d902      	bls.n	8003032 <WIFI_WaitServerConnection+0x4e>
 800302c:	69ba      	ldr	r2, [r7, #24]
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e017      	b.n	8003066 <WIFI_WaitServerConnection+0x82>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 8003036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303a:	2b03      	cmp	r3, #3
 800303c:	d112      	bne.n	8003064 <WIFI_WaitServerConnection+0x80>
  {
    if (RemotePort)
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <WIFI_WaitServerConnection+0x66>
    {
      *RemotePort = 0;
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <WIFI_WaitServerConnection+0x7c>
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d904      	bls.n	8003060 <WIFI_WaitServerConnection+0x7c>
    {
      memset(RemoteIp, 0, 4);
 8003056:	2204      	movs	r2, #4
 8003058:	2100      	movs	r1, #0
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f005 faf8 	bl	8008650 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8003060:	2305      	movs	r3, #5
 8003062:	e000      	b.n	8003066 <WIFI_WaitServerConnection+0x82>
  }

  return WIFI_STATUS_ERROR;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20001a80 	.word	0x20001a80

08003074 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4619      	mov	r1, r3
 8003086:	4806      	ldr	r0, [pc, #24]	; (80030a0 <WIFI_CloseServerConnection+0x2c>)
 8003088:	f7fe fa50 	bl	800152c <ES_WIFI_CloseServerConnection>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20001a80 	.word	0x20001a80

080030a4 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	4806      	ldr	r0, [pc, #24]	; (80030d0 <WIFI_StopServer+0x2c>)
 80030b8:	f7fe fa74 	bl	80015a4 <ES_WIFI_StopServerSingleConn>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20001a80 	.word	0x20001a80

080030d4 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4806      	ldr	r0, [pc, #24]	; (8003114 <WIFI_SendData+0x40>)
 80030fc:	f7fe fa92 	bl	8001624 <ES_WIFI_SendData>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20001a80 	.word	0x20001a80

08003118 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	4806      	ldr	r0, [pc, #24]	; (8003158 <WIFI_ReceiveData+0x40>)
 8003140:	f7fe faf6 	bl	8001730 <ES_WIFI_ReceiveData>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20001a80 	.word	0x20001a80

0800315c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800315c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003160:	f7ff fe48 	bl	8002df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <LoopForever+0x6>)
  ldr r1, =_edata
 8003166:	490d      	ldr	r1, [pc, #52]	; (800319c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <LoopForever+0xe>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800316c:	e002      	b.n	8003174 <LoopCopyDataInit>

0800316e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003172:	3304      	adds	r3, #4

08003174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003178:	d3f9      	bcc.n	800316e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800317c:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <LoopForever+0x16>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003180:	e001      	b.n	8003186 <LoopFillZerobss>

08003182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003184:	3204      	adds	r2, #4

08003186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003188:	d3fb      	bcc.n	8003182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800318a:	f005 fb6b 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800318e:	f7fe ff51 	bl	8002034 <main>

08003192 <LoopForever>:

LoopForever:
    b LoopForever
 8003192:	e7fe      	b.n	8003192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003194:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800319c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80031a0:	0800aa6c 	.word	0x0800aa6c
  ldr r2, =_sbss
 80031a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80031a8:	2000256c 	.word	0x2000256c

080031ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC1_IRQHandler>

080031ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f967 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031be:	200f      	movs	r0, #15
 80031c0:	f000 f814 	bl	80031ec <HAL_InitTick>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	71fb      	strb	r3, [r7, #7]
 80031ce:	e001      	b.n	80031d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031d0:	f000 f805 	bl	80031de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_InitTick+0x6c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_InitTick+0x70>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_InitTick+0x6c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f96d 	bl	80034f6 <HAL_SYSTICK_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b0f      	cmp	r3, #15
 8003226:	d809      	bhi.n	800323c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003228:	2200      	movs	r2, #0
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f000 f937 	bl	80034a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_InitTick+0x74>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e007      	b.n	800324c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e004      	b.n	800324c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e001      	b.n	800324c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2000002c 	.word	0x2000002c
 800325c:	20000024 	.word	0x20000024
 8003260:	20000028 	.word	0x20000028

08003264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x20>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x24>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_IncTick+0x24>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000002c 	.word	0x2000002c
 8003288:	20002380 	.word	0x20002380

0800328c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTick;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_GetTick+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20002380 	.word	0x20002380

080032a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff ffee 	bl	800328c <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d005      	beq.n	80032ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_Delay+0x44>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ca:	bf00      	nop
 80032cc:	f7ff ffde 	bl	800328c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8f7      	bhi.n	80032cc <HAL_Delay+0x28>
  {
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000002c 	.word	0x2000002c

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d005      	beq.n	8003532 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2204      	movs	r2, #4
 800352a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e047      	b.n	80035c2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 020e 	bic.w	r2, r2, #14
 8003540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003560:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f003 021c 	and.w	r2, r3, #28
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800357e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00c      	beq.n	80035a2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003596:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035a0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
    }
  }
  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	e166      	b.n	80038aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8158 	beq.w	80038a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d005      	beq.n	800360c <HAL_GPIO_Init+0x40>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b03      	cmp	r3, #3
 8003678:	d017      	beq.n	80036aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d123      	bne.n	80036fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	6939      	ldr	r1, [r7, #16]
 80036fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80b2 	beq.w	80038a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003740:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_GPIO_Init+0x2fc>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <HAL_GPIO_Init+0x2fc>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6613      	str	r3, [r2, #96]	; 0x60
 800374c:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <HAL_GPIO_Init+0x2fc>)
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003758:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <HAL_GPIO_Init+0x300>)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	220f      	movs	r2, #15
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003782:	d02b      	beq.n	80037dc <HAL_GPIO_Init+0x210>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_GPIO_Init+0x304>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d025      	beq.n	80037d8 <HAL_GPIO_Init+0x20c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a51      	ldr	r2, [pc, #324]	; (80038d4 <HAL_GPIO_Init+0x308>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01f      	beq.n	80037d4 <HAL_GPIO_Init+0x208>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <HAL_GPIO_Init+0x30c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d019      	beq.n	80037d0 <HAL_GPIO_Init+0x204>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <HAL_GPIO_Init+0x310>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_GPIO_Init+0x200>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_GPIO_Init+0x314>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00d      	beq.n	80037c8 <HAL_GPIO_Init+0x1fc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_GPIO_Init+0x318>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <HAL_GPIO_Init+0x1f8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4c      	ldr	r2, [pc, #304]	; (80038e8 <HAL_GPIO_Init+0x31c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_GPIO_Init+0x1f4>
 80037bc:	2307      	movs	r3, #7
 80037be:	e00e      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037c0:	2308      	movs	r3, #8
 80037c2:	e00c      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037c4:	2306      	movs	r3, #6
 80037c6:	e00a      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037c8:	2305      	movs	r3, #5
 80037ca:	e008      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e006      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e004      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e002      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_GPIO_Init+0x212>
 80037dc:	2300      	movs	r3, #0
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ee:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_GPIO_Init+0x300>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fc:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_GPIO_Init+0x320>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003820:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_GPIO_Init+0x320>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_GPIO_Init+0x320>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <HAL_GPIO_Init+0x320>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <HAL_GPIO_Init+0x320>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_GPIO_Init+0x320>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800387a:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <HAL_GPIO_Init+0x320>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_GPIO_Init+0x320>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3301      	adds	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f ae91 	bne.w	80035dc <HAL_GPIO_Init+0x10>
  }
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	48000400 	.word	0x48000400
 80038d4:	48000800 	.word	0x48000800
 80038d8:	48000c00 	.word	0x48000c00
 80038dc:	48001000 	.word	0x48001000
 80038e0:	48001400 	.word	0x48001400
 80038e4:	48001800 	.word	0x48001800
 80038e8:	48001c00 	.word	0x48001c00
 80038ec:	40010400 	.word	0x40010400

080038f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e001      	b.n	8003912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	787b      	ldrb	r3, [r7, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800393c:	e002      	b.n	8003944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fe84 	bl	800267c <HAL_GPIO_EXTI_Callback>
  }
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40010400 	.word	0x40010400

08003980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e08d      	b.n	8003aae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8b4 	bl	8003b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d108      	bne.n	8003a22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e007      	b.n	8003a32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f821 	bl	8003b28 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	f040 80f9 	bne.w	8003d56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x34>
 8003b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0ed      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Write+0x4e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0e6      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b92:	f7ff fb7b 	bl	800328c <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fac3 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0d1      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2221      	movs	r2, #33	; 0x21
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bdc:	88f8      	ldrh	r0, [r7, #6]
 8003bde:	893a      	ldrh	r2, [r7, #8]
 8003be0:	8979      	ldrh	r1, [r7, #10]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	4603      	mov	r3, r0
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f9d3 	bl	8003f98 <I2C_RequestMemoryWrite>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0a9      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fc3d 	bl	80044a4 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fc2c 	bl	80044a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fabc 	bl	80041ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e07b      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d034      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x1c8>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d130      	bne.n	8003d04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa3f 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e04d      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	d90e      	bls.n	8003ce4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	8979      	ldrh	r1, [r7, #10]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fbe1 	bl	80044a4 <I2C_TransferConfig>
 8003ce2:	e00f      	b.n	8003d04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	8979      	ldrh	r1, [r7, #10]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fbd0 	bl	80044a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d19e      	bne.n	8003c4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 faa2 	bl	800425c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e01a      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2220      	movs	r2, #32
 8003d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_I2C_Mem_Write+0x224>)
 8003d36:	400b      	ands	r3, r1
 8003d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	fe00e800 	.word	0xfe00e800

08003d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	460b      	mov	r3, r1
 8003d78:	813b      	strh	r3, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	f040 80fd 	bne.w	8003f86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x34>
 8003d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0f1      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x4e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e0ea      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dba:	f7ff fa67 	bl	800328c <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2319      	movs	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f9af 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0d5      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2222      	movs	r2, #34	; 0x22
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e04:	88f8      	ldrh	r0, [r7, #6]
 8003e06:	893a      	ldrh	r2, [r7, #8]
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4603      	mov	r3, r0
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f913 	bl	8004040 <I2C_RequestMemoryRead>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0ad      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2bff      	cmp	r3, #255	; 0xff
 8003e34:	d90e      	bls.n	8003e54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_I2C_Mem_Read+0x22c>)
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb29 	bl	80044a4 <I2C_TransferConfig>
 8003e52:	e00f      	b.n	8003e74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_I2C_Mem_Read+0x22c>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb18 	bl	80044a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f956 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07c      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d034      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d130      	bne.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f927 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e04d      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2bff      	cmp	r3, #255	; 0xff
 8003ef4:	d90e      	bls.n	8003f14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	8979      	ldrh	r1, [r7, #10]
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fac9 	bl	80044a4 <I2C_TransferConfig>
 8003f12:	e00f      	b.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	8979      	ldrh	r1, [r7, #10]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fab8 	bl	80044a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d19a      	bne.n	8003e74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f98a 	bl	800425c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e01a      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2220      	movs	r2, #32
 8003f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_I2C_Mem_Read+0x230>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	80002400 	.word	0x80002400
 8003f94:	fe00e800 	.word	0xfe00e800

08003f98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	460b      	mov	r3, r1
 8003fac:	813b      	strh	r3, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <I2C_RequestMemoryWrite+0xa4>)
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fa6f 	bl	80044a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8ff 	bl	80041ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e02c      	b.n	8004034 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8003fea:	e015      	b.n	8004018 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fec:	893b      	ldrh	r3, [r7, #8]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f8e5 	bl	80041ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e012      	b.n	8004034 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800400e:	893b      	ldrh	r3, [r7, #8]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2200      	movs	r2, #0
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f884 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	80002000 	.word	0x80002000

08004040 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	4608      	mov	r0, r1
 800404a:	4611      	mov	r1, r2
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]
 8004052:	460b      	mov	r3, r1
 8004054:	813b      	strh	r3, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	8979      	ldrh	r1, [r7, #10]
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <I2C_RequestMemoryRead+0xa4>)
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa1c 	bl	80044a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f8ac 	bl	80041ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e02c      	b.n	80040da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004086:	893b      	ldrh	r3, [r7, #8]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
 8004090:	e015      	b.n	80040be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004092:	893b      	ldrh	r3, [r7, #8]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	b29b      	uxth	r3, r3
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f892 	bl	80041ce <I2C_WaitOnTXISFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e012      	b.n	80040da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2140      	movs	r1, #64	; 0x40
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f831 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	80002000 	.word	0x80002000

080040e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d103      	bne.n	8004106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d007      	beq.n	8004124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	619a      	str	r2, [r3, #24]
  }
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004140:	e031      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d02d      	beq.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7ff f89f 	bl	800328c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d122      	bne.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	429a      	cmp	r2, r3
 800417c:	d113      	bne.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e00f      	b.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d0be      	beq.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041da:	e033      	b.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f87f 	bl	80042e4 <I2C_IsErrorOccurred>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e031      	b.n	8004254 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d025      	beq.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7ff f848 	bl	800328c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11a      	bne.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d013      	beq.n	8004244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d1c4      	bne.n	80041dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004268:	e02f      	b.n	80042ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f838 	bl	80042e4 <I2C_IsErrorOccurred>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02d      	b.n	80042da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7ff f805 	bl	800328c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11a      	bne.n	80042ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d013      	beq.n	80042ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e007      	b.n	80042da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d1c8      	bne.n	800426a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d068      	beq.n	80043e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2210      	movs	r2, #16
 8004316:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004318:	e049      	b.n	80043ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d045      	beq.n	80043ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe ffb3 	bl	800328c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_IsErrorOccurred+0x54>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13a      	bne.n	80043ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800434a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435a:	d121      	bne.n	80043a0 <I2C_IsErrorOccurred+0xbc>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004362:	d01d      	beq.n	80043a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	2b20      	cmp	r3, #32
 8004368:	d01a      	beq.n	80043a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004378:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800437a:	f7fe ff87 	bl	800328c <HAL_GetTick>
 800437e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e00e      	b.n	80043a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004382:	f7fe ff83 	bl	800328c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b19      	cmp	r3, #25
 800438e:	d907      	bls.n	80043a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800439e:	e006      	b.n	80043ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d1e9      	bne.n	8004382 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d003      	beq.n	80043c4 <I2C_IsErrorOccurred+0xe0>
 80043bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0aa      	beq.n	800431a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f043 0302 	orr.w	r3, r3, #2
 800443e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01c      	beq.n	8004492 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fe45 	bl	80040e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <I2C_IsErrorOccurred+0x1bc>)
 800446a:	400b      	ands	r3, r1
 800446c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	817b      	strh	r3, [r7, #10]
 80044b2:	4613      	mov	r3, r2
 80044b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044bc:	7a7b      	ldrb	r3, [r7, #9]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	0d5b      	lsrs	r3, r3, #21
 80044de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <I2C_TransferConfig+0x60>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	43db      	mvns	r3, r3
 80044e8:	ea02 0103 	and.w	r1, r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	03ff63ff 	.word	0x03ff63ff

08004508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b20      	cmp	r3, #32
 800451c:	d138      	bne.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004528:	2302      	movs	r3, #2
 800452a:	e032      	b.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800455a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6819      	ldr	r1, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d102      	bne.n	80045b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80045b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b6:	e00b      	b.n	80045d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d102      	bne.n	80045ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045cc:	e000      	b.n	80045d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40007000 	.word	0x40007000

080045e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f000 bc08 	b.w	8004e04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f4:	4b96      	ldr	r3, [pc, #600]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045fe:	4b94      	ldr	r3, [pc, #592]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80e4 	beq.w	80047de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_RCC_OscConfig+0x4c>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	f040 808b 	bne.w	800473a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	f040 8087 	bne.w	800473a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800462c:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x64>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e3df      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	4b81      	ldr	r3, [pc, #516]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_RCC_OscConfig+0x7e>
 8004654:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465c:	e005      	b.n	800466a <HAL_RCC_OscConfig+0x8a>
 800465e:	4b7c      	ldr	r3, [pc, #496]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466a:	4293      	cmp	r3, r2
 800466c:	d223      	bcs.n	80046b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fdcc 	bl	8005210 <RCC_SetFlashLatencyFromMSIRange>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e3c0      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	4b73      	ldr	r3, [pc, #460]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a72      	ldr	r2, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b70      	ldr	r3, [pc, #448]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	496d      	ldr	r1, [pc, #436]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4968      	ldr	r1, [pc, #416]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e025      	b.n	8004702 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b6:	4b66      	ldr	r3, [pc, #408]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a65      	ldr	r2, [pc, #404]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046bc:	f043 0308 	orr.w	r3, r3, #8
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4960      	ldr	r1, [pc, #384]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d4:	4b5e      	ldr	r3, [pc, #376]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	495b      	ldr	r1, [pc, #364]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fd8c 	bl	8005210 <RCC_SetFlashLatencyFromMSIRange>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e380      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004702:	f000 fcc1 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	4950      	ldr	r1, [pc, #320]	; (8004854 <HAL_RCC_OscConfig+0x274>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_RCC_OscConfig+0x278>)
 8004720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fd60 	bl	80031ec <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d052      	beq.n	80047dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	e364      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d032      	beq.n	80047a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004742:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800474e:	f7fe fd9d 	bl	800328c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004756:	f7fe fd99 	bl	800328c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e34d      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004768:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800477a:	f043 0308 	orr.w	r3, r3, #8
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4930      	ldr	r1, [pc, #192]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	492b      	ldr	r1, [pc, #172]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
 80047a6:	e01a      	b.n	80047de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fd6a 	bl	800328c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047bc:	f7fe fd66 	bl	800328c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e31a      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x1dc>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d073      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_OscConfig+0x21c>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d10e      	bne.n	8004814 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d063      	beq.n	80048d0 <HAL_RCC_OscConfig+0x2f0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15f      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e2f7      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x24c>
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e025      	b.n	8004878 <HAL_RCC_OscConfig+0x298>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d114      	bne.n	8004860 <HAL_RCC_OscConfig+0x280>
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a02      	ldr	r2, [pc, #8]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e013      	b.n	8004878 <HAL_RCC_OscConfig+0x298>
 8004850:	40021000 	.word	0x40021000
 8004854:	0800a91c 	.word	0x0800a91c
 8004858:	20000024 	.word	0x20000024
 800485c:	20000028 	.word	0x20000028
 8004860:	4ba0      	ldr	r3, [pc, #640]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a9f      	ldr	r2, [pc, #636]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b9d      	ldr	r3, [pc, #628]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a9c      	ldr	r2, [pc, #624]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fe fd04 	bl	800328c <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fe fd00 	bl	800328c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e2b4      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	4b92      	ldr	r3, [pc, #584]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x2a8>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fcf0 	bl	800328c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fe fcec 	bl	800328c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e2a0      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2d0>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d060      	beq.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x310>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d119      	bne.n	800491e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d116      	bne.n	800491e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f0:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_OscConfig+0x328>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e27d      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004908:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	4973      	ldr	r1, [pc, #460]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800491c:	e040      	b.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d023      	beq.n	800496e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004926:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fe fcab 	bl	800328c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe fca7 	bl	800328c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e25b      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b62      	ldr	r3, [pc, #392]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	495f      	ldr	r1, [pc, #380]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e018      	b.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496e:	4b5d      	ldr	r3, [pc, #372]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5c      	ldr	r2, [pc, #368]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fe fc87 	bl	800328c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004982:	f7fe fc83 	bl	800328c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e237      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004994:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d03c      	beq.n	8004a26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fe fc62 	bl	800328c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049cc:	f7fe fc5e 	bl	800328c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e212      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ef      	beq.n	80049cc <HAL_RCC_OscConfig+0x3ec>
 80049ec:	e01b      	b.n	8004a26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ee:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fe fc45 	bl	800328c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fe fc41 	bl	800328c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e1f5      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ef      	bne.n	8004a06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80a6 	beq.w	8004b80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a38:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d118      	bne.n	8004a9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a78:	f7fe fc08 	bl	800328c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fe fc04 	bl	800328c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1b8      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d108      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x4d8>
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab6:	e029      	b.n	8004b0c <HAL_RCC_OscConfig+0x52c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d115      	bne.n	8004aec <HAL_RCC_OscConfig+0x50c>
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a03      	ldr	r2, [pc, #12]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae0:	e014      	b.n	8004b0c <HAL_RCC_OscConfig+0x52c>
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	4b9d      	ldr	r3, [pc, #628]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	4a9c      	ldr	r2, [pc, #624]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004afc:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	4a98      	ldr	r2, [pc, #608]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fe fbba 	bl	800328c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fe fbb6 	bl	800328c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e168      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b32:	4b8c      	ldr	r3, [pc, #560]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ed      	beq.n	8004b1c <HAL_RCC_OscConfig+0x53c>
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b42:	f7fe fba3 	bl	800328c <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fe fb9f 	bl	800328c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e151      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b60:	4b80      	ldr	r3, [pc, #512]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ed      	bne.n	8004b4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b74:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	4a7a      	ldr	r2, [pc, #488]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d03c      	beq.n	8004c06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01c      	beq.n	8004bce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b94:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b9a:	4a72      	ldr	r2, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fe fb72 	bl	800328c <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bac:	f7fe fb6e 	bl	800328c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e122      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bbe:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCC_OscConfig+0x5cc>
 8004bcc:	e01b      	b.n	8004c06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bce:	4b65      	ldr	r3, [pc, #404]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	4a63      	ldr	r2, [pc, #396]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fe fb55 	bl	800328c <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004be6:	f7fe fb51 	bl	800328c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e105      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf8:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ef      	bne.n	8004be6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80f9 	beq.w	8004e02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	f040 80cf 	bne.w	8004db8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c1a:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d12c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d123      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d11b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d113      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d109      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d071      	beq.n	8004d6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d068      	beq.n	8004d60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c8e:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0ac      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb6:	f7fe fae9 	bl	800328c <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe fae5 	bl	800328c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e099      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd0:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_RCC_OscConfig+0x788>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cf6:	0212      	lsls	r2, r2, #8
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0552      	lsls	r2, r2, #21
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0652      	lsls	r2, r2, #25
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d16:	06d2      	lsls	r2, r2, #27
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	4912      	ldr	r1, [pc, #72]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d38:	f7fe faa8 	bl	800328c <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe faa4 	bl	800328c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e058      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5e:	e050      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e04f      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
 8004d64:	40021000 	.word	0x40021000
 8004d68:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d144      	bne.n	8004e02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d84:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d90:	f7fe fa7c 	bl	800328c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fe fa78 	bl	800328c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e02c      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x7b8>
 8004db6:	e024      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d01f      	beq.n	8004dfe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fe fa5f 	bl	800328c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fe fa5b 	bl	800328c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e00f      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4905      	ldr	r1, [pc, #20]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_OscConfig+0x830>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e001      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	feeefffc 	.word	0xfeeefffc

08004e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e11d      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b90      	ldr	r3, [pc, #576]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d910      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 020f 	bic.w	r2, r3, #15
 8004e42:	498b      	ldr	r1, [pc, #556]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b89      	ldr	r3, [pc, #548]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e105      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d908      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	497b      	ldr	r1, [pc, #492]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d079      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d11e      	bne.n	8004edc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	4b75      	ldr	r3, [pc, #468]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0dc      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004eae:	f000 fa09 	bl	80052c4 <RCC_GetSysClockFreqFromPLLSource>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a70      	ldr	r2, [pc, #448]	; (8005078 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d946      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004eba:	4b6e      	ldr	r3, [pc, #440]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d140      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ec6:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ece:	4a69      	ldr	r2, [pc, #420]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e035      	b.n	8004f48 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee4:	4b63      	ldr	r3, [pc, #396]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d115      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b9      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004efc:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0ad      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0a5      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f1c:	f000 f8b4 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a55      	ldr	r2, [pc, #340]	; (8005078 <HAL_RCC_ClockConfig+0x264>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d90f      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f28:	4b52      	ldr	r3, [pc, #328]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f48:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 0203 	bic.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4947      	ldr	r1, [pc, #284]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5a:	f7fe f997 	bl	800328c <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f62:	f7fe f993 	bl	800328c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e077      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	4b3e      	ldr	r3, [pc, #248]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 020c 	and.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d1eb      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f90:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a37      	ldr	r2, [pc, #220]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d208      	bcs.n	8004fca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	492b      	ldr	r1, [pc, #172]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d210      	bcs.n	8004ffa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd8:	4b25      	ldr	r3, [pc, #148]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 020f 	bic.w	r2, r3, #15
 8004fe0:	4923      	ldr	r1, [pc, #140]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e036      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4918      	ldr	r1, [pc, #96]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4910      	ldr	r1, [pc, #64]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005038:	f000 f826 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	490c      	ldr	r1, [pc, #48]	; (800507c <HAL_RCC_ClockConfig+0x268>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <HAL_RCC_ClockConfig+0x26c>)
 8005056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_RCC_ClockConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe f8c5 	bl	80031ec <HAL_InitTick>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

  return status;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40022000 	.word	0x40022000
 8005074:	40021000 	.word	0x40021000
 8005078:	04c4b400 	.word	0x04c4b400
 800507c:	0800a91c 	.word	0x0800a91c
 8005080:	20000024 	.word	0x20000024
 8005084:	20000028 	.word	0x20000028

08005088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a0:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x34>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d121      	bne.n	80050fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d11e      	bne.n	80050fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050bc:	4b34      	ldr	r3, [pc, #208]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050c8:	4b31      	ldr	r3, [pc, #196]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e005      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050d8:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050e4:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050f8:	e00a      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d102      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005100:	4b25      	ldr	r3, [pc, #148]	; (8005198 <HAL_RCC_GetSysClockFreq+0x110>)
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e004      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d101      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_RCC_GetSysClockFreq+0x114>)
 800510e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d134      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005116:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0xa6>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d003      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0xac>
 800512c:	e005      	b.n	800513a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <HAL_RCC_GetSysClockFreq+0x110>)
 8005130:	617b      	str	r3, [r7, #20]
      break;
 8005132:	e005      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_GetSysClockFreq+0x114>)
 8005136:	617b      	str	r3, [r7, #20]
      break;
 8005138:	e002      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	617b      	str	r3, [r7, #20]
      break;
 800513e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b13      	ldr	r3, [pc, #76]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3301      	adds	r3, #1
 800514c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	fb03 f202 	mul.w	r2, r3, r2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	0e5b      	lsrs	r3, r3, #25
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	3301      	adds	r3, #1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005180:	69bb      	ldr	r3, [r7, #24]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	0800a934 	.word	0x0800a934
 8005198:	00f42400 	.word	0x00f42400
 800519c:	007a1200 	.word	0x007a1200

080051a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051a6:	681b      	ldr	r3, [r3, #0]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000024 	.word	0x20000024

080051b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051bc:	f7ff fff0 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4904      	ldr	r1, [pc, #16]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021000 	.word	0x40021000
 80051e0:	0800a92c 	.word	0x0800a92c

080051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051e8:	f7ff ffda 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	0adb      	lsrs	r3, r3, #11
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4904      	ldr	r1, [pc, #16]	; (800520c <HAL_RCC_GetPCLK2Freq+0x28>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	0800a92c 	.word	0x0800a92c

08005210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005228:	f7ff f9ba 	bl	80045a0 <HAL_PWREx_GetVoltageRange>
 800522c:	6178      	str	r0, [r7, #20]
 800522e:	e014      	b.n	800525a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4a21      	ldr	r2, [pc, #132]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523a:	6593      	str	r3, [r2, #88]	; 0x58
 800523c:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005248:	f7ff f9aa 	bl	80045a0 <HAL_PWREx_GetVoltageRange>
 800524c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d10b      	bne.n	800527a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d913      	bls.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2ba0      	cmp	r3, #160	; 0xa0
 800526c:	d902      	bls.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800526e:	2302      	movs	r3, #2
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e00d      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005274:	2301      	movs	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e00a      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b7f      	cmp	r3, #127	; 0x7f
 800527e:	d902      	bls.n	8005286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005280:	2302      	movs	r3, #2
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e004      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d101      	bne.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800528c:	2301      	movs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 020f 	bic.w	r2, r3, #15
 8005298:	4909      	ldr	r1, [pc, #36]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d001      	beq.n	80052b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40022000 	.word	0x40022000

080052c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d00b      	beq.n	80052f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d825      	bhi.n	800532c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d008      	beq.n	80052f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d11f      	bne.n	800532c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052ee:	613b      	str	r3, [r7, #16]
    break;
 80052f0:	e01f      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80052f2:	4b25      	ldr	r3, [pc, #148]	; (8005388 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80052f4:	613b      	str	r3, [r7, #16]
    break;
 80052f6:	e01c      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e005      	b.n	8005320 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	613b      	str	r3, [r7, #16]
    break;
 800532a:	e002      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
    break;
 8005330:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	3301      	adds	r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	fb03 f202 	mul.w	r2, r3, r2
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0e5b      	lsrs	r3, r3, #25
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	3301      	adds	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005372:	683b      	ldr	r3, [r7, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40021000 	.word	0x40021000
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200
 800538c:	0800a934 	.word	0x0800a934

08005390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0be      	b.n	8005520 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b2:	d009      	beq.n	80053c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
 80053ba:	e005      	b.n	80053c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8cb 	bl	8005578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005402:	d902      	bls.n	800540a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e002      	b.n	8005410 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800540a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800540e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005418:	d007      	beq.n	800542a <HAL_SPI_Init+0x9a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005422:	d002      	beq.n	800542a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d11b      	bne.n	80054c2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800549a:	d903      	bls.n	80054a4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
 80054a2:	e002      	b.n	80054aa <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d107      	bne.n	80054c2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f003 0204 	and.w	r2, r3, #4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054e8:	ea42 0103 	orr.w	r1, r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	d105      	bne.n	8005510 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	b292      	uxth	r2, r2
 800550e:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e01a      	b.n	8005570 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005550:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f81a 	bl	800558c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d003      	beq.n	80055d2 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80055d0:	e1cc      	b.n	800596c <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055da:	d112      	bne.n	8005602 <HAL_SPI_Receive+0x62>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10e      	bne.n	8005602 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2204      	movs	r2, #4
 80055e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f9c1 	bl	8005980 <HAL_SPI_TransmitReceive>
 80055fe:	4603      	mov	r3, r0
 8005600:	e1ba      	b.n	8005978 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_SPI_Receive+0x70>
 800560c:	2302      	movs	r3, #2
 800560e:	e1b3      	b.n	8005978 <HAL_SPI_Receive+0x3d8>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005618:	f7fd fe38 	bl	800328c <HAL_GetTick>
 800561c:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_SPI_Receive+0x8a>
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005630:	e19c      	b.n	800596c <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2204      	movs	r2, #4
 8005636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d118      	bne.n	80056b0 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800569c:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056b8:	d908      	bls.n	80056cc <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	e007      	b.n	80056dc <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e4:	d10f      	bne.n	8005706 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005704:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d007      	beq.n	8005724 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572c:	d871      	bhi.n	8005812 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800572e:	e035      	b.n	800579c <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d117      	bne.n	800576e <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f103 020c 	add.w	r2, r3, #12
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	7812      	ldrb	r2, [r2, #0]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800576c:	e016      	b.n	800579c <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576e:	f7fd fd8d 	bl	800328c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d803      	bhi.n	8005786 <HAL_SPI_Receive+0x1e6>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d102      	bne.n	800578c <HAL_SPI_Receive+0x1ec>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800579a:	e0e7      	b.n	800596c <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1c3      	bne.n	8005730 <HAL_SPI_Receive+0x190>
 80057a8:	e039      	b.n	800581e <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d115      	bne.n	80057e4 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	b292      	uxth	r2, r2
 80057c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057e2:	e016      	b.n	8005812 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e4:	f7fd fd52 	bl	800328c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d803      	bhi.n	80057fc <HAL_SPI_Receive+0x25c>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d102      	bne.n	8005802 <HAL_SPI_Receive+0x262>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005810:	e0ac      	b.n	800596c <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1c5      	bne.n	80057aa <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d178      	bne.n	800591a <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005836:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	2101      	movs	r1, #1
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f001 fa00 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005854:	e08a      	b.n	800596c <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800585e:	d907      	bls.n	8005870 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	b292      	uxth	r2, r2
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e008      	b.n	8005882 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f103 020c 	add.w	r2, r3, #12
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2201      	movs	r2, #1
 800588a:	2101      	movs	r1, #1
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f001 f9db 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589c:	f043 0202 	orr.w	r2, r3, #2
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80058aa:	e05f      	b.n	800596c <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058b4:	d105      	bne.n	80058c2 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	e02b      	b.n	800591a <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058d2:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058dc:	d11d      	bne.n	800591a <HAL_SPI_Receive+0x37a>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d119      	bne.n	800591a <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	2101      	movs	r1, #1
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f001 f9a9 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f043 0202 	orr.w	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800590e:	e02d      	b.n	800596c <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005918:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 fab0 	bl	8006e84 <SPI_EndRxTransaction>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b10      	cmp	r3, #16
 800593c:	d10a      	bne.n	8005954 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	f043 0202 	orr.w	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005952:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005962:	e003      	b.n	800596c <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005978:	4618      	mov	r0, r3
 800597a:	3728      	adds	r7, #40	; 0x28
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b092      	sub	sp, #72	; 0x48
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x2e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e322      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x674>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b6:	f7fd fc69 	bl	800328c <HAL_GetTick>
 80059ba:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d00f      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x8c>
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f2:	d107      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d103      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x84>
 80059fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d003      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005a0a:	e2ed      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x9e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x9e>
 8005a18:	887b      	ldrh	r3, [r7, #2]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005a24:	e2e0      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d003      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2205      	movs	r2, #5
 8005a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	887a      	ldrh	r2, [r7, #2]
 8005a4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	887a      	ldrh	r2, [r7, #2]
 8005a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	887a      	ldrh	r2, [r7, #2]
 8005a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7c:	d10f      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a9c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa6:	d802      	bhi.n	8005aae <HAL_SPI_TransmitReceive+0x12e>
 8005aa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d908      	bls.n	8005ac0 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e007      	b.n	8005ad0 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d007      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af6:	f240 80ce 	bls.w	8005c96 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x18a>
 8005b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 80b8 	bne.w	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f040 80a0 	bne.w	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b42:	f040 809a 	bne.w	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10c      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x1ea>
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b78:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7a:	e07e      	b.n	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d13f      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x28a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d03a      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x28a>
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d137      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	1c9a      	adds	r2, r3, #2
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d11e      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x28a>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d119      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10c      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x27a>
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c08:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11c      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x2d2>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c52:	f7fd fb1b 	bl	800328c <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d80b      	bhi.n	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
 8005c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005c78:	e1b6      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f47f af7b 	bne.w	8005b7c <HAL_SPI_TransmitReceive+0x1fc>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f47f af74 	bne.w	8005b7c <HAL_SPI_TransmitReceive+0x1fc>
 8005c94:	e12d      	b.n	8005ef2 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x326>
 8005c9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f040 8119 	bne.w	8005ed8 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d912      	bls.n	8005cd6 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	1c9a      	adds	r2, r3, #2
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b02      	subs	r3, #2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd4:	e100      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80e8 	bne.w	8005ed8 <HAL_SPI_TransmitReceive+0x558>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d10:	f040 80e2 	bne.w	8005ed8 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x3b8>
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d36:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d46:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d48:	e0c6      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d158      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x48a>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d053      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x48a>
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d150      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d912      	bls.n	8005d98 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	881a      	ldrh	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b02      	subs	r3, #2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d96:	e012      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11e      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x48a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d119      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10c      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x47a>
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e08:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d148      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x52a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d042      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d923      	bls.n	8005e78 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	b292      	uxth	r2, r2
 8005e3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	1c9a      	adds	r2, r3, #2
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b02      	subs	r3, #2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d81f      	bhi.n	8005ea6 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	e016      	b.n	8005ea6 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f103 020c 	add.w	r2, r3, #12
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eaa:	f7fd f9ef 	bl	800328c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d803      	bhi.n	8005ec2 <HAL_SPI_TransmitReceive+0x542>
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x548>
 8005ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005ed6:	e087      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f af33 	bne.w	8005d4a <HAL_SPI_TransmitReceive+0x3ca>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af2c 	bne.w	8005d4a <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efa:	d146      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f02:	2201      	movs	r2, #1
 8005f04:	2101      	movs	r1, #1
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fe9e 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8005f24:	e060      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f2e:	d105      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	e026      	b.n	8005f8a <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d119      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	2101      	movs	r1, #1
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fe71 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f70:	f043 0202 	orr.w	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8005f7e:	e033      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d10d      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9c:	f043 0202 	orr.w	r2, r3, #2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005fac:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 ffbb 	bl	8006f34 <SPI_EndRxTxTransaction>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fde:	e003      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ff0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3740      	adds	r7, #64	; 0x40
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_SPI_Transmit_IT+0x1e>
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800601e:	e082      	b.n	8006126 <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d002      	beq.n	8006032 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006030:	e079      	b.n	8006126 <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_SPI_Transmit_IT+0x44>
 800603c:	2302      	movs	r3, #2
 800603e:	e073      	b.n	8006128 <HAL_SPI_Transmit_IT+0x12c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2203      	movs	r2, #3
 800604c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800608c:	d903      	bls.n	8006096 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a28      	ldr	r2, [pc, #160]	; (8006134 <HAL_SPI_Transmit_IT+0x138>)
 8006092:	651a      	str	r2, [r3, #80]	; 0x50
 8006094:	e002      	b.n	800609c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <HAL_SPI_Transmit_IT+0x13c>)
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d10f      	bne.n	80060c6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060c4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ce:	d10f      	bne.n	80060f0 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d007      	beq.n	800610e <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006124:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	08006be9 	.word	0x08006be9
 8006138:	08006b89 	.word	0x08006b89

0800613c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800615a:	2302      	movs	r3, #2
 800615c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800615e:	e0ba      	b.n	80062d6 <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d110      	bne.n	800618a <HAL_SPI_Receive_IT+0x4e>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006170:	d10b      	bne.n	800618a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2204      	movs	r2, #4
 8006176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f8b1 	bl	80062e8 <HAL_SPI_TransmitReceive_IT>
 8006186:	4603      	mov	r3, r0
 8006188:	e0a6      	b.n	80062d8 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_Receive_IT+0x5a>
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800619a:	e09c      	b.n	80062d6 <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_SPI_Receive_IT+0x6e>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e096      	b.n	80062d8 <HAL_SPI_Receive_IT+0x19c>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f6:	d90b      	bls.n	8006210 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006206:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a35      	ldr	r2, [pc, #212]	; (80062e0 <HAL_SPI_Receive_IT+0x1a4>)
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
 800620e:	e00a      	b.n	8006226 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800621e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a30      	ldr	r2, [pc, #192]	; (80062e4 <HAL_SPI_Receive_IT+0x1a8>)
 8006224:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	d10f      	bne.n	8006250 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800624e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006258:	d11f      	bne.n	800629a <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006268:	d806      	bhi.n	8006278 <HAL_SPI_Receive_IT+0x13c>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	2b02      	cmp	r3, #2
 8006270:	d102      	bne.n	8006278 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2202      	movs	r2, #2
 8006276:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e002      	b.n	80062a0 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d007      	beq.n	80062be <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80062d4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08006b01 	.word	0x08006b01
 80062e4:	08006a41 	.word	0x08006a41

080062e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006300:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006308:	7dbb      	ldrb	r3, [r7, #22]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d00d      	beq.n	800632a <HAL_SPI_TransmitReceive_IT+0x42>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006314:	d106      	bne.n	8006324 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <HAL_SPI_TransmitReceive_IT+0x3c>
 800631e:	7dbb      	ldrb	r3, [r7, #22]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d002      	beq.n	800632a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006324:	2302      	movs	r3, #2
 8006326:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006328:	e0a5      	b.n	8006476 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_SPI_TransmitReceive_IT+0x54>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_SPI_TransmitReceive_IT+0x54>
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006340:	e099      	b.n	8006476 <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_SPI_TransmitReceive_IT+0x68>
 800634c:	2302      	movs	r3, #2
 800634e:	e093      	b.n	8006478 <HAL_SPI_TransmitReceive_IT+0x190>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b04      	cmp	r3, #4
 8006362:	d003      	beq.n	800636c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2205      	movs	r2, #5
 8006368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	887a      	ldrh	r2, [r7, #2]
 800637c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	887a      	ldrh	r2, [r7, #2]
 8006382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	887a      	ldrh	r2, [r7, #2]
 800638e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	887a      	ldrh	r2, [r7, #2]
 8006396:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a2:	d906      	bls.n	80063b2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4a37      	ldr	r2, [pc, #220]	; (8006484 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80063a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a36      	ldr	r2, [pc, #216]	; (8006488 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80063ae:	651a      	str	r2, [r3, #80]	; 0x50
 80063b0:	e005      	b.n	80063be <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a35      	ldr	r2, [pc, #212]	; (800648c <HAL_SPI_TransmitReceive_IT+0x1a4>)
 80063b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a35      	ldr	r2, [pc, #212]	; (8006490 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80063bc:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	d11f      	bne.n	8006408 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063d6:	d806      	bhi.n	80063e6 <HAL_SPI_TransmitReceive_IT+0xfe>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2202      	movs	r2, #2
 80063e4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e002      	b.n	800640e <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006416:	d802      	bhi.n	800641e <HAL_SPI_TransmitReceive_IT+0x136>
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d908      	bls.n	8006430 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	e007      	b.n	8006440 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800643e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d007      	beq.n	800645e <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800645c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006474:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
}
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	080068c9 	.word	0x080068c9
 8006488:	08006979 	.word	0x08006979
 800648c:	080066d1 	.word	0x080066d1
 8006490:	0800680d 	.word	0x0800680d

08006494 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10e      	bne.n	80064d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
    return;
 80064d2:	e0ce      	b.n	8006672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x5e>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
    return;
 80064f0:	e0bf      	b.n	8006672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_SPI_IRQHandler+0x7e>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80b0 	beq.w	8006672 <HAL_SPI_IRQHandler+0x1de>
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80aa 	beq.w	8006672 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d023      	beq.n	8006570 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b03      	cmp	r3, #3
 8006532:	d011      	beq.n	8006558 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	e00b      	b.n	8006570 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
        return;
 800656e:	e080      	b.n	8006672 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d014      	beq.n	80065a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	f043 0208 	orr.w	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d04f      	beq.n	8006670 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <HAL_SPI_IRQHandler+0x168>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d034      	beq.n	8006666 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0203 	bic.w	r2, r2, #3
 800660a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	2b00      	cmp	r3, #0
 8006612:	d011      	beq.n	8006638 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006618:	4a17      	ldr	r2, [pc, #92]	; (8006678 <HAL_SPI_IRQHandler+0x1e4>)
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	4618      	mov	r0, r3
 8006622:	f7fc ff74 	bl	800350e <HAL_DMA_Abort_IT>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <HAL_SPI_IRQHandler+0x1e4>)
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	4618      	mov	r0, r3
 800664e:	f7fc ff5e 	bl	800350e <HAL_DMA_Abort_IT>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006664:	e003      	b.n	800666e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f812 	bl	8006690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800666c:	e000      	b.n	8006670 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800666e:	bf00      	nop
    return;
 8006670:	bf00      	nop
  }
}
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	080066a5 	.word	0x080066a5

0800667c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff ffe5 	bl	8006690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d923      	bls.n	800672c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	b292      	uxth	r2, r2
 80066f0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b02      	subs	r3, #2
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d11f      	bne.n	800675a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e016      	b.n	800675a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f103 020c 	add.w	r2, r3, #12
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d120      	bne.n	80067a8 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	d10b      	bne.n	8006788 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800677e:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <SPI_2linesRxISR_8BIT+0xe0>)
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006786:	e00f      	b.n	80067a8 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006796:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc0c 	bl	8006fc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	080067b5 	.word	0x080067b5

080067b4 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80067d0:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d6:	1e5a      	subs	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fbde 	bl	8006fc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	d912      	bls.n	8006844 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	1c9a      	adds	r2, r3, #2
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b02      	subs	r3, #2
 800683c:	b29a      	uxth	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006842:	e012      	b.n	800686a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d126      	bne.n	80068c2 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687c:	d110      	bne.n	80068a0 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800688c:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689c:	605a      	str	r2, [r3, #4]
      return;
 800689e:	e010      	b.n	80068c2 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fb7f 	bl	8006fc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	b292      	uxth	r2, r2
 80068dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d118      	bne.n	8006938 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690e:	d103      	bne.n	8006918 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <SPI_2linesRxISR_16BIT+0x78>)
 8006914:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006916:	e00f      	b.n	8006938 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb44 	bl	8006fc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	08006945 	.word	0x08006945

08006944 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006958:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006968:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb28 	bl	8006fc0 <SPI_CloseRxTx_ISR>
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	881a      	ldrh	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d126      	bne.n	80069fc <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b6:	d110      	bne.n	80069da <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069c6:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069d6:	605a      	str	r2, [r3, #4]
      return;
 80069d8:	e010      	b.n	80069fc <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fae2 	bl	8006fc0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a1e:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb20 	bl	8007078 <SPI_CloseRx_ISR>
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f103 020c 	add.w	r2, r3, #12
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10c      	bne.n	8006a9c <SPI_RxISR_8BIT+0x5c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8a:	d107      	bne.n	8006a9c <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a9a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab0:	d103      	bne.n	8006aba <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <SPI_RxISR_8BIT+0x88>)
 8006ab6:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006ab8:	e002      	b.n	8006ac0 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fadc 	bl	8007078 <SPI_CloseRx_ISR>
  }
}
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08006a03 	.word	0x08006a03

08006acc <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006ae0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006af0:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fac0 	bl	8007078 <SPI_CloseRx_ISR>
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	b292      	uxth	r2, r2
 8006b14:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	1c9a      	adds	r2, r3, #2
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10c      	bne.n	8006b58 <SPI_RxISR_16BIT+0x58>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b46:	d107      	bne.n	8006b58 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b56:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6c:	d103      	bne.n	8006b76 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <SPI_RxISR_16BIT+0x84>)
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006b74:	e002      	b.n	8006b7c <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa7e 	bl	8007078 <SPI_CloseRx_ISR>
  }
}
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	08006acd 	.word	0x08006acd

08006b88 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10f      	bne.n	8006be0 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d107      	bne.n	8006bda <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bd8:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa92 	bl	8007104 <SPI_CloseTx_ISR>
  }
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	881a      	ldrh	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	1c9a      	adds	r2, r3, #2
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d107      	bne.n	8006c38 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c36:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa63 	bl	8007104 <SPI_CloseTx_ISR>
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c58:	f7fc fb18 	bl	800328c <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c68:	f7fc fb10 	bl	800328c <HAL_GetTick>
 8006c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c6e:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	015b      	lsls	r3, r3, #5
 8006c74:	0d1b      	lsrs	r3, r3, #20
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c7e:	e054      	b.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d050      	beq.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c88:	f7fc fb00 	bl	800328c <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d902      	bls.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d13d      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cb6:	d111      	bne.n	8006cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc0:	d004      	beq.n	8006ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cca:	d107      	bne.n	8006cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce4:	d10f      	bne.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e017      	b.n	8006d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d19b      	bne.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000024 	.word	0x20000024

08006d58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d6a:	f7fc fa8f 	bl	800328c <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d7a:	f7fc fa87 	bl	800328c <HAL_GetTick>
 8006d7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d88:	4b3d      	ldr	r3, [pc, #244]	; (8006e80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	00da      	lsls	r2, r3, #3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	0d1b      	lsrs	r3, r3, #20
 8006d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006da0:	e060      	b.n	8006e64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006da8:	d107      	bne.n	8006dba <SPI_WaitFifoStateUntilTimeout+0x62>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d050      	beq.n	8006e64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dc2:	f7fc fa63 	bl	800328c <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d902      	bls.n	8006dd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d13d      	bne.n	8006e54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006de6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df0:	d111      	bne.n	8006e16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfa:	d004      	beq.n	8006e06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d107      	bne.n	8006e16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	d10f      	bne.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e010      	b.n	8006e76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d196      	bne.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3728      	adds	r7, #40	; 0x28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000024 	.word	0x20000024

08006e84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e98:	d111      	bne.n	8006ebe <SPI_EndRxTransaction+0x3a>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea2:	d004      	beq.n	8006eae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eac:	d107      	bne.n	8006ebe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ebc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff febd 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	f043 0220 	orr.w	r2, r3, #32
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e023      	b.n	8006f2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eec:	d11d      	bne.n	8006f2a <SPI_EndRxTransaction+0xa6>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef6:	d004      	beq.n	8006f02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f00:	d113      	bne.n	8006f2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff ff22 	bl	8006d58 <SPI_WaitFifoStateUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e000      	b.n	8006f2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff03 	bl	8006d58 <SPI_WaitFifoStateUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e027      	b.n	8006fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fe68 	bl	8006c48 <SPI_WaitFlagStateUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f82:	f043 0220 	orr.w	r2, r3, #32
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e014      	b.n	8006fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fedc 	bl	8006d58 <SPI_WaitFifoStateUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006faa:	f043 0220 	orr.w	r2, r3, #32
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e000      	b.n	8006fb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc8:	f7fc f960 	bl	800328c <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0220 	bic.w	r2, r2, #32
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	2164      	movs	r1, #100	; 0x64
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ffa6 	bl	8006f34 <SPI_EndRxTxTransaction>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b10      	cmp	r3, #16
 8007006:	d112      	bne.n	800702e <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007014:	f043 0202 	orr.w	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007024:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fb32 	bl	8006690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800702c:	e020      	b.n	8007070 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b04      	cmp	r3, #4
 8007040:	d107      	bne.n	8007052 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fa ff58 	bl	8001f00 <HAL_SPI_RxCpltCallback>
}
 8007050:	e00e      	b.n	8007070 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fb0e 	bl	800667c <HAL_SPI_TxRxCpltCallback>
}
 8007060:	e006      	b.n	8007070 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fb10 	bl	8006690 <HAL_SPI_ErrorCallback>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800708e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007090:	f7fc f8fc 	bl	800328c <HAL_GetTick>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	2164      	movs	r1, #100	; 0x64
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fef2 	bl	8006e84 <SPI_EndRxTransaction>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d10e      	bne.n	80070e6 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070cc:	f043 0202 	orr.w	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80070dc:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fad6 	bl	8006690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80070e4:	e00a      	b.n	80070fc <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fa ff06 	bl	8001f00 <HAL_SPI_RxCpltCallback>
}
 80070f4:	e002      	b.n	80070fc <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff faca 	bl	8006690 <HAL_SPI_ErrorCallback>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800710c:	f7fc f8be 	bl	800328c <HAL_GetTick>
 8007110:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007120:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	2164      	movs	r1, #100	; 0x64
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff ff04 	bl	8006f34 <SPI_EndRxTxTransaction>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	60bb      	str	r3, [r7, #8]
 800715a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fa8f 	bl	8006690 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007172:	e002      	b.n	800717a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fa fed7 	bl	8001f28 <HAL_SPI_TxCpltCallback>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e042      	b.n	800721a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f83b 	bl	8007222 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2224      	movs	r2, #36	; 0x24
 80071b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc87 	bl	8007ae0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f988 	bl	80074e8 <UART_SetConfig>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e01b      	b.n	800721a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007200:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fd06 	bl	8007c24 <UART_CheckIdleState>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b08a      	sub	sp, #40	; 0x28
 800723a:	af02      	add	r7, sp, #8
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724c:	2b20      	cmp	r3, #32
 800724e:	d17c      	bne.n	800734a <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_UART_Transmit+0x26>
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e075      	b.n	800734c <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2221      	movs	r2, #33	; 0x21
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007270:	f7fc f80c 	bl	800328c <HAL_GetTick>
 8007274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728e:	d108      	bne.n	80072a2 <HAL_UART_Transmit+0x6c>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	e003      	b.n	80072aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072aa:	e031      	b.n	8007310 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2200      	movs	r2, #0
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fd5e 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e03e      	b.n	800734c <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e0:	b292      	uxth	r2, r2
 80072e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	3302      	adds	r3, #2
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e008      	b.n	80072fe <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	b292      	uxth	r2, r2
 80072f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1c7      	bne.n	80072ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	2140      	movs	r1, #64	; 0x40
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fd26 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e006      	b.n	800734c <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736a:	2b20      	cmp	r3, #32
 800736c:	f040 80b6 	bne.w	80074dc <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_UART_Receive+0x28>
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0ae      	b.n	80074de <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2222      	movs	r2, #34	; 0x22
 800738c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007396:	f7fb ff79 	bl	800328c <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b4:	d10e      	bne.n	80073d4 <HAL_UART_Receive+0x80>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <HAL_UART_Receive+0x76>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c8:	e02d      	b.n	8007426 <HAL_UART_Receive+0xd2>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073d2:	e028      	b.n	8007426 <HAL_UART_Receive+0xd2>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10d      	bne.n	80073f8 <HAL_UART_Receive+0xa4>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <HAL_UART_Receive+0x9a>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	22ff      	movs	r2, #255	; 0xff
 80073e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073ec:	e01b      	b.n	8007426 <HAL_UART_Receive+0xd2>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	227f      	movs	r2, #127	; 0x7f
 80073f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073f6:	e016      	b.n	8007426 <HAL_UART_Receive+0xd2>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007400:	d10d      	bne.n	800741e <HAL_UART_Receive+0xca>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <HAL_UART_Receive+0xc0>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	227f      	movs	r2, #127	; 0x7f
 800740e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007412:	e008      	b.n	8007426 <HAL_UART_Receive+0xd2>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	223f      	movs	r2, #63	; 0x3f
 8007418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800741c:	e003      	b.n	8007426 <HAL_UART_Receive+0xd2>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800742c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007436:	d108      	bne.n	800744a <HAL_UART_Receive+0xf6>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	e003      	b.n	8007452 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007452:	e037      	b.n	80074c4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2200      	movs	r2, #0
 800745c:	2120      	movs	r1, #32
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fc8a 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e033      	b.n	80074de <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007482:	b29a      	uxth	r2, r3
 8007484:	8a7b      	ldrh	r3, [r7, #18]
 8007486:	4013      	ands	r3, r2
 8007488:	b29a      	uxth	r2, r3
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	3302      	adds	r3, #2
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e00d      	b.n	80074b2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800749c:	b29b      	uxth	r3, r3
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	8a7b      	ldrh	r3, [r7, #18]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	4013      	ands	r3, r2
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1c1      	bne.n	8007454 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ec:	b08c      	sub	sp, #48	; 0x30
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	431a      	orrs	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	431a      	orrs	r2, r3
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	4313      	orrs	r3, r2
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4baa      	ldr	r3, [pc, #680]	; (80077c0 <UART_SetConfig+0x2d8>)
 8007518:	4013      	ands	r3, r2
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007520:	430b      	orrs	r3, r1
 8007522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a9f      	ldr	r2, [pc, #636]	; (80077c4 <UART_SetConfig+0x2dc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007550:	4313      	orrs	r3, r2
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800755e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	430b      	orrs	r3, r1
 800756a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	f023 010f 	bic.w	r1, r3, #15
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a90      	ldr	r2, [pc, #576]	; (80077c8 <UART_SetConfig+0x2e0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d125      	bne.n	80075d8 <UART_SetConfig+0xf0>
 800758c:	4b8f      	ldr	r3, [pc, #572]	; (80077cc <UART_SetConfig+0x2e4>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d81a      	bhi.n	80075d0 <UART_SetConfig+0xe8>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0xb8>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075b9 	.word	0x080075b9
 80075ac:	080075c9 	.word	0x080075c9
 80075b0:	2301      	movs	r3, #1
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075b6:	e116      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80075b8:	2302      	movs	r3, #2
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075be:	e112      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e10e      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e10a      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075d6:	e106      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a7c      	ldr	r2, [pc, #496]	; (80077d0 <UART_SetConfig+0x2e8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d138      	bne.n	8007654 <UART_SetConfig+0x16c>
 80075e2:	4b7a      	ldr	r3, [pc, #488]	; (80077cc <UART_SetConfig+0x2e4>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e8:	f003 030c 	and.w	r3, r3, #12
 80075ec:	2b0c      	cmp	r3, #12
 80075ee:	d82d      	bhi.n	800764c <UART_SetConfig+0x164>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x110>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800762d 	.word	0x0800762d
 80075fc:	0800764d 	.word	0x0800764d
 8007600:	0800764d 	.word	0x0800764d
 8007604:	0800764d 	.word	0x0800764d
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800764d 	.word	0x0800764d
 8007610:	0800764d 	.word	0x0800764d
 8007614:	0800764d 	.word	0x0800764d
 8007618:	08007635 	.word	0x08007635
 800761c:	0800764d 	.word	0x0800764d
 8007620:	0800764d 	.word	0x0800764d
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007645 	.word	0x08007645
 800762c:	2300      	movs	r3, #0
 800762e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007632:	e0d8      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007634:	2302      	movs	r3, #2
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763a:	e0d4      	b.n	80077e6 <UART_SetConfig+0x2fe>
 800763c:	2304      	movs	r3, #4
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007642:	e0d0      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007644:	2308      	movs	r3, #8
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764a:	e0cc      	b.n	80077e6 <UART_SetConfig+0x2fe>
 800764c:	2310      	movs	r3, #16
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007652:	e0c8      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a5e      	ldr	r2, [pc, #376]	; (80077d4 <UART_SetConfig+0x2ec>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d125      	bne.n	80076aa <UART_SetConfig+0x1c2>
 800765e:	4b5b      	ldr	r3, [pc, #364]	; (80077cc <UART_SetConfig+0x2e4>)
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d016      	beq.n	800769a <UART_SetConfig+0x1b2>
 800766c:	2b30      	cmp	r3, #48	; 0x30
 800766e:	d818      	bhi.n	80076a2 <UART_SetConfig+0x1ba>
 8007670:	2b20      	cmp	r3, #32
 8007672:	d00a      	beq.n	800768a <UART_SetConfig+0x1a2>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d814      	bhi.n	80076a2 <UART_SetConfig+0x1ba>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <UART_SetConfig+0x19a>
 800767c:	2b10      	cmp	r3, #16
 800767e:	d008      	beq.n	8007692 <UART_SetConfig+0x1aa>
 8007680:	e00f      	b.n	80076a2 <UART_SetConfig+0x1ba>
 8007682:	2300      	movs	r3, #0
 8007684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007688:	e0ad      	b.n	80077e6 <UART_SetConfig+0x2fe>
 800768a:	2302      	movs	r3, #2
 800768c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007690:	e0a9      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007692:	2304      	movs	r3, #4
 8007694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007698:	e0a5      	b.n	80077e6 <UART_SetConfig+0x2fe>
 800769a:	2308      	movs	r3, #8
 800769c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a0:	e0a1      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076a2:	2310      	movs	r3, #16
 80076a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a8:	e09d      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4a      	ldr	r2, [pc, #296]	; (80077d8 <UART_SetConfig+0x2f0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d125      	bne.n	8007700 <UART_SetConfig+0x218>
 80076b4:	4b45      	ldr	r3, [pc, #276]	; (80077cc <UART_SetConfig+0x2e4>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076be:	2bc0      	cmp	r3, #192	; 0xc0
 80076c0:	d016      	beq.n	80076f0 <UART_SetConfig+0x208>
 80076c2:	2bc0      	cmp	r3, #192	; 0xc0
 80076c4:	d818      	bhi.n	80076f8 <UART_SetConfig+0x210>
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d00a      	beq.n	80076e0 <UART_SetConfig+0x1f8>
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d814      	bhi.n	80076f8 <UART_SetConfig+0x210>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <UART_SetConfig+0x1f0>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d008      	beq.n	80076e8 <UART_SetConfig+0x200>
 80076d6:	e00f      	b.n	80076f8 <UART_SetConfig+0x210>
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076de:	e082      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076e6:	e07e      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ee:	e07a      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076f6:	e076      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076fe:	e072      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a35      	ldr	r2, [pc, #212]	; (80077dc <UART_SetConfig+0x2f4>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d12a      	bne.n	8007760 <UART_SetConfig+0x278>
 800770a:	4b30      	ldr	r3, [pc, #192]	; (80077cc <UART_SetConfig+0x2e4>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007718:	d01a      	beq.n	8007750 <UART_SetConfig+0x268>
 800771a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800771e:	d81b      	bhi.n	8007758 <UART_SetConfig+0x270>
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d00c      	beq.n	8007740 <UART_SetConfig+0x258>
 8007726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772a:	d815      	bhi.n	8007758 <UART_SetConfig+0x270>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <UART_SetConfig+0x250>
 8007730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007734:	d008      	beq.n	8007748 <UART_SetConfig+0x260>
 8007736:	e00f      	b.n	8007758 <UART_SetConfig+0x270>
 8007738:	2300      	movs	r3, #0
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800773e:	e052      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007746:	e04e      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800774e:	e04a      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007756:	e046      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800775e:	e042      	b.n	80077e6 <UART_SetConfig+0x2fe>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <UART_SetConfig+0x2dc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d13a      	bne.n	80077e0 <UART_SetConfig+0x2f8>
 800776a:	4b18      	ldr	r3, [pc, #96]	; (80077cc <UART_SetConfig+0x2e4>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007778:	d01a      	beq.n	80077b0 <UART_SetConfig+0x2c8>
 800777a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800777e:	d81b      	bhi.n	80077b8 <UART_SetConfig+0x2d0>
 8007780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007784:	d00c      	beq.n	80077a0 <UART_SetConfig+0x2b8>
 8007786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800778a:	d815      	bhi.n	80077b8 <UART_SetConfig+0x2d0>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <UART_SetConfig+0x2b0>
 8007790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007794:	d008      	beq.n	80077a8 <UART_SetConfig+0x2c0>
 8007796:	e00f      	b.n	80077b8 <UART_SetConfig+0x2d0>
 8007798:	2300      	movs	r3, #0
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779e:	e022      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077a6:	e01e      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ae:	e01a      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077b6:	e016      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077be:	e012      	b.n	80077e6 <UART_SetConfig+0x2fe>
 80077c0:	cfff69f3 	.word	0xcfff69f3
 80077c4:	40008000 	.word	0x40008000
 80077c8:	40013800 	.word	0x40013800
 80077cc:	40021000 	.word	0x40021000
 80077d0:	40004400 	.word	0x40004400
 80077d4:	40004800 	.word	0x40004800
 80077d8:	40004c00 	.word	0x40004c00
 80077dc:	40005000 	.word	0x40005000
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4aae      	ldr	r2, [pc, #696]	; (8007aa4 <UART_SetConfig+0x5bc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	f040 8097 	bne.w	8007920 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d823      	bhi.n	8007842 <UART_SetConfig+0x35a>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x318>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007825 	.word	0x08007825
 8007804:	08007843 	.word	0x08007843
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007843 	.word	0x08007843
 8007810:	08007833 	.word	0x08007833
 8007814:	08007843 	.word	0x08007843
 8007818:	08007843 	.word	0x08007843
 800781c:	08007843 	.word	0x08007843
 8007820:	0800783b 	.word	0x0800783b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007824:	f7fd fcc8 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8007828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800782a:	e010      	b.n	800784e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800782c:	4b9e      	ldr	r3, [pc, #632]	; (8007aa8 <UART_SetConfig+0x5c0>)
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007830:	e00d      	b.n	800784e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007832:	f7fd fc29 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8007836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007838:	e009      	b.n	800784e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007840:	e005      	b.n	800784e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800784c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 8130 	beq.w	8007ab6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	4a94      	ldr	r2, [pc, #592]	; (8007aac <UART_SetConfig+0x5c4>)
 800785c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007860:	461a      	mov	r2, r3
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	fbb3 f3f2 	udiv	r3, r3, r2
 8007868:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	429a      	cmp	r2, r3
 8007878:	d305      	bcc.n	8007886 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	429a      	cmp	r2, r3
 8007884:	d903      	bls.n	800788e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800788c:	e113      	b.n	8007ab6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	2200      	movs	r2, #0
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	60fa      	str	r2, [r7, #12]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	4a84      	ldr	r2, [pc, #528]	; (8007aac <UART_SetConfig+0x5c4>)
 800789c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2200      	movs	r2, #0
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078b0:	f7f8 fcfe 	bl	80002b0 <__aeabi_uldivmod>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	020b      	lsls	r3, r1, #8
 80078c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078ca:	0202      	lsls	r2, r0, #8
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	6849      	ldr	r1, [r1, #4]
 80078d0:	0849      	lsrs	r1, r1, #1
 80078d2:	2000      	movs	r0, #0
 80078d4:	460c      	mov	r4, r1
 80078d6:	4605      	mov	r5, r0
 80078d8:	eb12 0804 	adds.w	r8, r2, r4
 80078dc:	eb43 0905 	adc.w	r9, r3, r5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	469a      	mov	sl, r3
 80078e8:	4693      	mov	fp, r2
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	4640      	mov	r0, r8
 80078f0:	4649      	mov	r1, r9
 80078f2:	f7f8 fcdd 	bl	80002b0 <__aeabi_uldivmod>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4613      	mov	r3, r2
 80078fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007904:	d308      	bcc.n	8007918 <UART_SetConfig+0x430>
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790c:	d204      	bcs.n	8007918 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6a3a      	ldr	r2, [r7, #32]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e0ce      	b.n	8007ab6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800791e:	e0ca      	b.n	8007ab6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007928:	d166      	bne.n	80079f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800792a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800792e:	2b08      	cmp	r3, #8
 8007930:	d827      	bhi.n	8007982 <UART_SetConfig+0x49a>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x450>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007983 	.word	0x08007983
 8007948:	08007973 	.word	0x08007973
 800794c:	08007983 	.word	0x08007983
 8007950:	08007983 	.word	0x08007983
 8007954:	08007983 	.word	0x08007983
 8007958:	0800797b 	.word	0x0800797b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fd fc2c 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8007960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007962:	e014      	b.n	800798e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fd fc3e 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8007968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800796a:	e010      	b.n	800798e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b4e      	ldr	r3, [pc, #312]	; (8007aa8 <UART_SetConfig+0x5c0>)
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007970:	e00d      	b.n	800798e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fd fb89 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007978:	e009      	b.n	800798e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007980:	e005      	b.n	800798e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800798c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8090 	beq.w	8007ab6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	4a44      	ldr	r2, [pc, #272]	; (8007aac <UART_SetConfig+0x5c4>)
 800799c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a8:	005a      	lsls	r2, r3, #1
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	441a      	add	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d916      	bls.n	80079f0 <UART_SetConfig+0x508>
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c8:	d212      	bcs.n	80079f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f023 030f 	bic.w	r3, r3, #15
 80079d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	085b      	lsrs	r3, r3, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	b29a      	uxth	r2, r3
 80079e0:	8bfb      	ldrh	r3, [r7, #30]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	8bfa      	ldrh	r2, [r7, #30]
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	e062      	b.n	8007ab6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079f6:	e05e      	b.n	8007ab6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d828      	bhi.n	8007a52 <UART_SetConfig+0x56a>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x520>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	08007a53 	.word	0x08007a53
 8007a18:	08007a43 	.word	0x08007a43
 8007a1c:	08007a53 	.word	0x08007a53
 8007a20:	08007a53 	.word	0x08007a53
 8007a24:	08007a53 	.word	0x08007a53
 8007a28:	08007a4b 	.word	0x08007a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a2c:	f7fd fbc4 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8007a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a32:	e014      	b.n	8007a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a34:	f7fd fbd6 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8007a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a3a:	e010      	b.n	8007a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <UART_SetConfig+0x5c0>)
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a40:	e00d      	b.n	8007a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a42:	f7fd fb21 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8007a46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a48:	e009      	b.n	8007a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a50:	e005      	b.n	8007a5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d028      	beq.n	8007ab6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	4a10      	ldr	r2, [pc, #64]	; (8007aac <UART_SetConfig+0x5c4>)
 8007a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	441a      	add	r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d910      	bls.n	8007ab0 <UART_SetConfig+0x5c8>
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a94:	d20c      	bcs.n	8007ab0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	e009      	b.n	8007ab6 <UART_SetConfig+0x5ce>
 8007aa2:	bf00      	nop
 8007aa4:	40008000 	.word	0x40008000
 8007aa8:	00f42400 	.word	0x00f42400
 8007aac:	0800a964 	.word	0x0800a964
      }
      else
      {
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ad2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3730      	adds	r7, #48	; 0x30
 8007ada:	46bd      	mov	sp, r7
 8007adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01a      	beq.n	8007bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bde:	d10a      	bne.n	8007bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	605a      	str	r2, [r3, #4]
  }
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b098      	sub	sp, #96	; 0x60
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c34:	f7fb fb2a 	bl	800328c <HAL_GetTick>
 8007c38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d12f      	bne.n	8007ca8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c50:	2200      	movs	r2, #0
 8007c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f88e 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d022      	beq.n	8007ca8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	653b      	str	r3, [r7, #80]	; 0x50
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c80:	647b      	str	r3, [r7, #68]	; 0x44
 8007c82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e6      	bne.n	8007c62 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e063      	b.n	8007d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d149      	bne.n	8007d4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f857 	bl	8007d78 <UART_WaitOnFlagUntilTimeout>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d03c      	beq.n	8007d4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e6      	bne.n	8007cd0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f023 0301 	bic.w	r3, r3, #1
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d22:	61fa      	str	r2, [r7, #28]
 8007d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	69b9      	ldr	r1, [r7, #24]
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e012      	b.n	8007d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3758      	adds	r7, #88	; 0x58
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d88:	e049      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d045      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d92:	f7fb fa7b 	bl	800328c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d302      	bcc.n	8007da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e048      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d031      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d110      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f838 	bl	8007e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2208      	movs	r2, #8
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e029      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d111      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 f81e 	bl	8007e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e00f      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	bf0c      	ite	eq
 8007e2e:	2301      	moveq	r3, #1
 8007e30:	2300      	movne	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d0a6      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b095      	sub	sp, #84	; 0x54
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e3      	bne.n	8007e80 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d118      	bne.n	8007ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f023 0310 	bic.w	r3, r3, #16
 8007ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6979      	ldr	r1, [r7, #20]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	613b      	str	r3, [r7, #16]
   return(result);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e6      	bne.n	8007ec0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007f06:	bf00      	nop
 8007f08:	3754      	adds	r7, #84	; 0x54
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f1a:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <vTaskSwitchContext+0xa4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f22:	4b26      	ldr	r3, [pc, #152]	; (8007fbc <vTaskSwitchContext+0xa8>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f28:	e03f      	b.n	8007faa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <vTaskSwitchContext+0xa8>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <vTaskSwitchContext+0xac>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	fab3 f383 	clz	r3, r3
 8007f3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	f1c3 031f 	rsb	r3, r3, #31
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	491f      	ldr	r1, [pc, #124]	; (8007fc4 <vTaskSwitchContext+0xb0>)
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <vTaskSwitchContext+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <vTaskSwitchContext+0x5a>
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a12      	ldr	r2, [pc, #72]	; (8007fc4 <vTaskSwitchContext+0xb0>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3308      	adds	r3, #8
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d104      	bne.n	8007fa0 <vTaskSwitchContext+0x8c>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	4a08      	ldr	r2, [pc, #32]	; (8007fc8 <vTaskSwitchContext+0xb4>)
 8007fa8:	6013      	str	r3, [r2, #0]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000241c 	.word	0x2000241c
 8007fbc:	20002418 	.word	0x20002418
 8007fc0:	20002414 	.word	0x20002414
 8007fc4:	20002388 	.word	0x20002388
 8007fc8:	20002384 	.word	0x20002384
 8007fcc:	00000000 	.word	0x00000000

08007fd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <pxCurrentTCBConst2>)
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f380 8809 	msr	PSP, r0
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	4770      	bx	lr
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst2>:
 8007ff0:	20002384 	.word	0x20002384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
	...

08008000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008000:	f3ef 8009 	mrs	r0, PSP
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4b15      	ldr	r3, [pc, #84]	; (8008060 <pxCurrentTCBConst>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	f01e 0f10 	tst.w	lr, #16
 8008010:	bf08      	it	eq
 8008012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	6010      	str	r0, [r2, #0]
 800801c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008024:	f380 8811 	msr	BASEPRI, r0
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f7ff ff70 	bl	8007f14 <vTaskSwitchContext>
 8008034:	f04f 0000 	mov.w	r0, #0
 8008038:	f380 8811 	msr	BASEPRI, r0
 800803c:	bc09      	pop	{r0, r3}
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	6808      	ldr	r0, [r1, #0]
 8008042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008046:	f01e 0f10 	tst.w	lr, #16
 800804a:	bf08      	it	eq
 800804c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008050:	f380 8809 	msr	PSP, r0
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	f3af 8000 	nop.w

08008060 <pxCurrentTCBConst>:
 8008060:	20002384 	.word	0x20002384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop

08008068 <malloc>:
 8008068:	4b02      	ldr	r3, [pc, #8]	; (8008074 <malloc+0xc>)
 800806a:	4601      	mov	r1, r0
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	f000 b823 	b.w	80080b8 <_malloc_r>
 8008072:	bf00      	nop
 8008074:	20000088 	.word	0x20000088

08008078 <sbrk_aligned>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4e0e      	ldr	r6, [pc, #56]	; (80080b4 <sbrk_aligned+0x3c>)
 800807c:	460c      	mov	r4, r1
 800807e:	6831      	ldr	r1, [r6, #0]
 8008080:	4605      	mov	r5, r0
 8008082:	b911      	cbnz	r1, 800808a <sbrk_aligned+0x12>
 8008084:	f000 fbc6 	bl	8008814 <_sbrk_r>
 8008088:	6030      	str	r0, [r6, #0]
 800808a:	4621      	mov	r1, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fbc1 	bl	8008814 <_sbrk_r>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d00a      	beq.n	80080ac <sbrk_aligned+0x34>
 8008096:	1cc4      	adds	r4, r0, #3
 8008098:	f024 0403 	bic.w	r4, r4, #3
 800809c:	42a0      	cmp	r0, r4
 800809e:	d007      	beq.n	80080b0 <sbrk_aligned+0x38>
 80080a0:	1a21      	subs	r1, r4, r0
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 fbb6 	bl	8008814 <_sbrk_r>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d101      	bne.n	80080b0 <sbrk_aligned+0x38>
 80080ac:	f04f 34ff 	mov.w	r4, #4294967295
 80080b0:	4620      	mov	r0, r4
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	20002424 	.word	0x20002424

080080b8 <_malloc_r>:
 80080b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080bc:	1ccd      	adds	r5, r1, #3
 80080be:	f025 0503 	bic.w	r5, r5, #3
 80080c2:	3508      	adds	r5, #8
 80080c4:	2d0c      	cmp	r5, #12
 80080c6:	bf38      	it	cc
 80080c8:	250c      	movcc	r5, #12
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	4607      	mov	r7, r0
 80080ce:	db01      	blt.n	80080d4 <_malloc_r+0x1c>
 80080d0:	42a9      	cmp	r1, r5
 80080d2:	d905      	bls.n	80080e0 <_malloc_r+0x28>
 80080d4:	230c      	movs	r3, #12
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	2600      	movs	r6, #0
 80080da:	4630      	mov	r0, r6
 80080dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081b4 <_malloc_r+0xfc>
 80080e4:	f000 f868 	bl	80081b8 <__malloc_lock>
 80080e8:	f8d8 3000 	ldr.w	r3, [r8]
 80080ec:	461c      	mov	r4, r3
 80080ee:	bb5c      	cbnz	r4, 8008148 <_malloc_r+0x90>
 80080f0:	4629      	mov	r1, r5
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff ffc0 	bl	8008078 <sbrk_aligned>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	4604      	mov	r4, r0
 80080fc:	d155      	bne.n	80081aa <_malloc_r+0xf2>
 80080fe:	f8d8 4000 	ldr.w	r4, [r8]
 8008102:	4626      	mov	r6, r4
 8008104:	2e00      	cmp	r6, #0
 8008106:	d145      	bne.n	8008194 <_malloc_r+0xdc>
 8008108:	2c00      	cmp	r4, #0
 800810a:	d048      	beq.n	800819e <_malloc_r+0xe6>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	4631      	mov	r1, r6
 8008110:	4638      	mov	r0, r7
 8008112:	eb04 0903 	add.w	r9, r4, r3
 8008116:	f000 fb7d 	bl	8008814 <_sbrk_r>
 800811a:	4581      	cmp	r9, r0
 800811c:	d13f      	bne.n	800819e <_malloc_r+0xe6>
 800811e:	6821      	ldr	r1, [r4, #0]
 8008120:	1a6d      	subs	r5, r5, r1
 8008122:	4629      	mov	r1, r5
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ffa7 	bl	8008078 <sbrk_aligned>
 800812a:	3001      	adds	r0, #1
 800812c:	d037      	beq.n	800819e <_malloc_r+0xe6>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	442b      	add	r3, r5
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	f8d8 3000 	ldr.w	r3, [r8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d038      	beq.n	80081ae <_malloc_r+0xf6>
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	42a2      	cmp	r2, r4
 8008140:	d12b      	bne.n	800819a <_malloc_r+0xe2>
 8008142:	2200      	movs	r2, #0
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	e00f      	b.n	8008168 <_malloc_r+0xb0>
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	1b52      	subs	r2, r2, r5
 800814c:	d41f      	bmi.n	800818e <_malloc_r+0xd6>
 800814e:	2a0b      	cmp	r2, #11
 8008150:	d917      	bls.n	8008182 <_malloc_r+0xca>
 8008152:	1961      	adds	r1, r4, r5
 8008154:	42a3      	cmp	r3, r4
 8008156:	6025      	str	r5, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	6059      	strne	r1, [r3, #4]
 800815c:	6863      	ldr	r3, [r4, #4]
 800815e:	bf08      	it	eq
 8008160:	f8c8 1000 	streq.w	r1, [r8]
 8008164:	5162      	str	r2, [r4, r5]
 8008166:	604b      	str	r3, [r1, #4]
 8008168:	4638      	mov	r0, r7
 800816a:	f104 060b 	add.w	r6, r4, #11
 800816e:	f000 f829 	bl	80081c4 <__malloc_unlock>
 8008172:	f026 0607 	bic.w	r6, r6, #7
 8008176:	1d23      	adds	r3, r4, #4
 8008178:	1af2      	subs	r2, r6, r3
 800817a:	d0ae      	beq.n	80080da <_malloc_r+0x22>
 800817c:	1b9b      	subs	r3, r3, r6
 800817e:	50a3      	str	r3, [r4, r2]
 8008180:	e7ab      	b.n	80080da <_malloc_r+0x22>
 8008182:	42a3      	cmp	r3, r4
 8008184:	6862      	ldr	r2, [r4, #4]
 8008186:	d1dd      	bne.n	8008144 <_malloc_r+0x8c>
 8008188:	f8c8 2000 	str.w	r2, [r8]
 800818c:	e7ec      	b.n	8008168 <_malloc_r+0xb0>
 800818e:	4623      	mov	r3, r4
 8008190:	6864      	ldr	r4, [r4, #4]
 8008192:	e7ac      	b.n	80080ee <_malloc_r+0x36>
 8008194:	4634      	mov	r4, r6
 8008196:	6876      	ldr	r6, [r6, #4]
 8008198:	e7b4      	b.n	8008104 <_malloc_r+0x4c>
 800819a:	4613      	mov	r3, r2
 800819c:	e7cc      	b.n	8008138 <_malloc_r+0x80>
 800819e:	230c      	movs	r3, #12
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	4638      	mov	r0, r7
 80081a4:	f000 f80e 	bl	80081c4 <__malloc_unlock>
 80081a8:	e797      	b.n	80080da <_malloc_r+0x22>
 80081aa:	6025      	str	r5, [r4, #0]
 80081ac:	e7dc      	b.n	8008168 <_malloc_r+0xb0>
 80081ae:	605b      	str	r3, [r3, #4]
 80081b0:	deff      	udf	#255	; 0xff
 80081b2:	bf00      	nop
 80081b4:	20002420 	.word	0x20002420

080081b8 <__malloc_lock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_lock+0x8>)
 80081ba:	f000 bb78 	b.w	80088ae <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	20002568 	.word	0x20002568

080081c4 <__malloc_unlock>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__malloc_unlock+0x8>)
 80081c6:	f000 bb73 	b.w	80088b0 <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	20002568 	.word	0x20002568

080081d0 <std>:
 80081d0:	2300      	movs	r3, #0
 80081d2:	b510      	push	{r4, lr}
 80081d4:	4604      	mov	r4, r0
 80081d6:	e9c0 3300 	strd	r3, r3, [r0]
 80081da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081de:	6083      	str	r3, [r0, #8]
 80081e0:	8181      	strh	r1, [r0, #12]
 80081e2:	6643      	str	r3, [r0, #100]	; 0x64
 80081e4:	81c2      	strh	r2, [r0, #14]
 80081e6:	6183      	str	r3, [r0, #24]
 80081e8:	4619      	mov	r1, r3
 80081ea:	2208      	movs	r2, #8
 80081ec:	305c      	adds	r0, #92	; 0x5c
 80081ee:	f000 fa2f 	bl	8008650 <memset>
 80081f2:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <std+0x58>)
 80081f4:	6263      	str	r3, [r4, #36]	; 0x24
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <std+0x5c>)
 80081f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <std+0x60>)
 80081fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <std+0x64>)
 8008200:	6323      	str	r3, [r4, #48]	; 0x30
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <std+0x68>)
 8008204:	6224      	str	r4, [r4, #32]
 8008206:	429c      	cmp	r4, r3
 8008208:	d006      	beq.n	8008218 <std+0x48>
 800820a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800820e:	4294      	cmp	r4, r2
 8008210:	d002      	beq.n	8008218 <std+0x48>
 8008212:	33d0      	adds	r3, #208	; 0xd0
 8008214:	429c      	cmp	r4, r3
 8008216:	d105      	bne.n	8008224 <std+0x54>
 8008218:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f000 bb44 	b.w	80088ac <__retarget_lock_init_recursive>
 8008224:	bd10      	pop	{r4, pc}
 8008226:	bf00      	nop
 8008228:	08008481 	.word	0x08008481
 800822c:	080084a3 	.word	0x080084a3
 8008230:	080084db 	.word	0x080084db
 8008234:	080084ff 	.word	0x080084ff
 8008238:	20002428 	.word	0x20002428

0800823c <stdio_exit_handler>:
 800823c:	4a02      	ldr	r2, [pc, #8]	; (8008248 <stdio_exit_handler+0xc>)
 800823e:	4903      	ldr	r1, [pc, #12]	; (800824c <stdio_exit_handler+0x10>)
 8008240:	4803      	ldr	r0, [pc, #12]	; (8008250 <stdio_exit_handler+0x14>)
 8008242:	f000 b869 	b.w	8008318 <_fwalk_sglue>
 8008246:	bf00      	nop
 8008248:	20000030 	.word	0x20000030
 800824c:	08009309 	.word	0x08009309
 8008250:	2000003c 	.word	0x2000003c

08008254 <cleanup_stdio>:
 8008254:	6841      	ldr	r1, [r0, #4]
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <cleanup_stdio+0x34>)
 8008258:	4299      	cmp	r1, r3
 800825a:	b510      	push	{r4, lr}
 800825c:	4604      	mov	r4, r0
 800825e:	d001      	beq.n	8008264 <cleanup_stdio+0x10>
 8008260:	f001 f852 	bl	8009308 <_fflush_r>
 8008264:	68a1      	ldr	r1, [r4, #8]
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <cleanup_stdio+0x38>)
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <cleanup_stdio+0x1e>
 800826c:	4620      	mov	r0, r4
 800826e:	f001 f84b 	bl	8009308 <_fflush_r>
 8008272:	68e1      	ldr	r1, [r4, #12]
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <cleanup_stdio+0x3c>)
 8008276:	4299      	cmp	r1, r3
 8008278:	d004      	beq.n	8008284 <cleanup_stdio+0x30>
 800827a:	4620      	mov	r0, r4
 800827c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008280:	f001 b842 	b.w	8009308 <_fflush_r>
 8008284:	bd10      	pop	{r4, pc}
 8008286:	bf00      	nop
 8008288:	20002428 	.word	0x20002428
 800828c:	20002490 	.word	0x20002490
 8008290:	200024f8 	.word	0x200024f8

08008294 <global_stdio_init.part.0>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <global_stdio_init.part.0+0x30>)
 8008298:	4c0b      	ldr	r4, [pc, #44]	; (80082c8 <global_stdio_init.part.0+0x34>)
 800829a:	4a0c      	ldr	r2, [pc, #48]	; (80082cc <global_stdio_init.part.0+0x38>)
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	4620      	mov	r0, r4
 80082a0:	2200      	movs	r2, #0
 80082a2:	2104      	movs	r1, #4
 80082a4:	f7ff ff94 	bl	80081d0 <std>
 80082a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80082ac:	2201      	movs	r2, #1
 80082ae:	2109      	movs	r1, #9
 80082b0:	f7ff ff8e 	bl	80081d0 <std>
 80082b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80082b8:	2202      	movs	r2, #2
 80082ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082be:	2112      	movs	r1, #18
 80082c0:	f7ff bf86 	b.w	80081d0 <std>
 80082c4:	20002560 	.word	0x20002560
 80082c8:	20002428 	.word	0x20002428
 80082cc:	0800823d 	.word	0x0800823d

080082d0 <__sfp_lock_acquire>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__sfp_lock_acquire+0x8>)
 80082d2:	f000 baec 	b.w	80088ae <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	20002569 	.word	0x20002569

080082dc <__sfp_lock_release>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__sfp_lock_release+0x8>)
 80082de:	f000 bae7 	b.w	80088b0 <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	20002569 	.word	0x20002569

080082e8 <__sinit>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	4604      	mov	r4, r0
 80082ec:	f7ff fff0 	bl	80082d0 <__sfp_lock_acquire>
 80082f0:	6a23      	ldr	r3, [r4, #32]
 80082f2:	b11b      	cbz	r3, 80082fc <__sinit+0x14>
 80082f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f8:	f7ff bff0 	b.w	80082dc <__sfp_lock_release>
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <__sinit+0x28>)
 80082fe:	6223      	str	r3, [r4, #32]
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <__sinit+0x2c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f5      	bne.n	80082f4 <__sinit+0xc>
 8008308:	f7ff ffc4 	bl	8008294 <global_stdio_init.part.0>
 800830c:	e7f2      	b.n	80082f4 <__sinit+0xc>
 800830e:	bf00      	nop
 8008310:	08008255 	.word	0x08008255
 8008314:	20002560 	.word	0x20002560

08008318 <_fwalk_sglue>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	4607      	mov	r7, r0
 800831e:	4688      	mov	r8, r1
 8008320:	4614      	mov	r4, r2
 8008322:	2600      	movs	r6, #0
 8008324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008328:	f1b9 0901 	subs.w	r9, r9, #1
 800832c:	d505      	bpl.n	800833a <_fwalk_sglue+0x22>
 800832e:	6824      	ldr	r4, [r4, #0]
 8008330:	2c00      	cmp	r4, #0
 8008332:	d1f7      	bne.n	8008324 <_fwalk_sglue+0xc>
 8008334:	4630      	mov	r0, r6
 8008336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d907      	bls.n	8008350 <_fwalk_sglue+0x38>
 8008340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008344:	3301      	adds	r3, #1
 8008346:	d003      	beq.n	8008350 <_fwalk_sglue+0x38>
 8008348:	4629      	mov	r1, r5
 800834a:	4638      	mov	r0, r7
 800834c:	47c0      	blx	r8
 800834e:	4306      	orrs	r6, r0
 8008350:	3568      	adds	r5, #104	; 0x68
 8008352:	e7e9      	b.n	8008328 <_fwalk_sglue+0x10>

08008354 <iprintf>:
 8008354:	b40f      	push	{r0, r1, r2, r3}
 8008356:	b507      	push	{r0, r1, r2, lr}
 8008358:	4906      	ldr	r1, [pc, #24]	; (8008374 <iprintf+0x20>)
 800835a:	ab04      	add	r3, sp, #16
 800835c:	6808      	ldr	r0, [r1, #0]
 800835e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008362:	6881      	ldr	r1, [r0, #8]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	f000 fc9f 	bl	8008ca8 <_vfiprintf_r>
 800836a:	b003      	add	sp, #12
 800836c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008370:	b004      	add	sp, #16
 8008372:	4770      	bx	lr
 8008374:	20000088 	.word	0x20000088

08008378 <putchar>:
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <putchar+0xc>)
 800837a:	4601      	mov	r1, r0
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	6882      	ldr	r2, [r0, #8]
 8008380:	f001 b85e 	b.w	8009440 <_putc_r>
 8008384:	20000088 	.word	0x20000088

08008388 <_puts_r>:
 8008388:	6a03      	ldr	r3, [r0, #32]
 800838a:	b570      	push	{r4, r5, r6, lr}
 800838c:	6884      	ldr	r4, [r0, #8]
 800838e:	4605      	mov	r5, r0
 8008390:	460e      	mov	r6, r1
 8008392:	b90b      	cbnz	r3, 8008398 <_puts_r+0x10>
 8008394:	f7ff ffa8 	bl	80082e8 <__sinit>
 8008398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839a:	07db      	lsls	r3, r3, #31
 800839c:	d405      	bmi.n	80083aa <_puts_r+0x22>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	0598      	lsls	r0, r3, #22
 80083a2:	d402      	bmi.n	80083aa <_puts_r+0x22>
 80083a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a6:	f000 fa82 	bl	80088ae <__retarget_lock_acquire_recursive>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	0719      	lsls	r1, r3, #28
 80083ae:	d513      	bpl.n	80083d8 <_puts_r+0x50>
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	b18b      	cbz	r3, 80083d8 <_puts_r+0x50>
 80083b4:	3e01      	subs	r6, #1
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083bc:	3b01      	subs	r3, #1
 80083be:	60a3      	str	r3, [r4, #8]
 80083c0:	b9e9      	cbnz	r1, 80083fe <_puts_r+0x76>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da2e      	bge.n	8008424 <_puts_r+0x9c>
 80083c6:	4622      	mov	r2, r4
 80083c8:	210a      	movs	r1, #10
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f89b 	bl	8008506 <__swbuf_r>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d007      	beq.n	80083e4 <_puts_r+0x5c>
 80083d4:	250a      	movs	r5, #10
 80083d6:	e007      	b.n	80083e8 <_puts_r+0x60>
 80083d8:	4621      	mov	r1, r4
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 f8d0 	bl	8008580 <__swsetup_r>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d0e7      	beq.n	80083b4 <_puts_r+0x2c>
 80083e4:	f04f 35ff 	mov.w	r5, #4294967295
 80083e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_puts_r+0x72>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_puts_r+0x72>
 80083f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f6:	f000 fa5b 	bl	80088b0 <__retarget_lock_release_recursive>
 80083fa:	4628      	mov	r0, r5
 80083fc:	bd70      	pop	{r4, r5, r6, pc}
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da04      	bge.n	800840c <_puts_r+0x84>
 8008402:	69a2      	ldr	r2, [r4, #24]
 8008404:	429a      	cmp	r2, r3
 8008406:	dc06      	bgt.n	8008416 <_puts_r+0x8e>
 8008408:	290a      	cmp	r1, #10
 800840a:	d004      	beq.n	8008416 <_puts_r+0x8e>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	6022      	str	r2, [r4, #0]
 8008412:	7019      	strb	r1, [r3, #0]
 8008414:	e7cf      	b.n	80083b6 <_puts_r+0x2e>
 8008416:	4622      	mov	r2, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 f874 	bl	8008506 <__swbuf_r>
 800841e:	3001      	adds	r0, #1
 8008420:	d1c9      	bne.n	80083b6 <_puts_r+0x2e>
 8008422:	e7df      	b.n	80083e4 <_puts_r+0x5c>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	250a      	movs	r5, #10
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	701d      	strb	r5, [r3, #0]
 800842e:	e7db      	b.n	80083e8 <_puts_r+0x60>

08008430 <puts>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <puts+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f7ff bfa7 	b.w	8008388 <_puts_r>
 800843a:	bf00      	nop
 800843c:	20000088 	.word	0x20000088

08008440 <siprintf>:
 8008440:	b40e      	push	{r1, r2, r3}
 8008442:	b500      	push	{lr}
 8008444:	b09c      	sub	sp, #112	; 0x70
 8008446:	ab1d      	add	r3, sp, #116	; 0x74
 8008448:	9002      	str	r0, [sp, #8]
 800844a:	9006      	str	r0, [sp, #24]
 800844c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008450:	4809      	ldr	r0, [pc, #36]	; (8008478 <siprintf+0x38>)
 8008452:	9107      	str	r1, [sp, #28]
 8008454:	9104      	str	r1, [sp, #16]
 8008456:	4909      	ldr	r1, [pc, #36]	; (800847c <siprintf+0x3c>)
 8008458:	f853 2b04 	ldr.w	r2, [r3], #4
 800845c:	9105      	str	r1, [sp, #20]
 800845e:	6800      	ldr	r0, [r0, #0]
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	a902      	add	r1, sp, #8
 8008464:	f000 faf8 	bl	8008a58 <_svfiprintf_r>
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	b01c      	add	sp, #112	; 0x70
 8008470:	f85d eb04 	ldr.w	lr, [sp], #4
 8008474:	b003      	add	sp, #12
 8008476:	4770      	bx	lr
 8008478:	20000088 	.word	0x20000088
 800847c:	ffff0208 	.word	0xffff0208

08008480 <__sread>:
 8008480:	b510      	push	{r4, lr}
 8008482:	460c      	mov	r4, r1
 8008484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008488:	f000 f9b2 	bl	80087f0 <_read_r>
 800848c:	2800      	cmp	r0, #0
 800848e:	bfab      	itete	ge
 8008490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008492:	89a3      	ldrhlt	r3, [r4, #12]
 8008494:	181b      	addge	r3, r3, r0
 8008496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800849a:	bfac      	ite	ge
 800849c:	6563      	strge	r3, [r4, #84]	; 0x54
 800849e:	81a3      	strhlt	r3, [r4, #12]
 80084a0:	bd10      	pop	{r4, pc}

080084a2 <__swrite>:
 80084a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a6:	461f      	mov	r7, r3
 80084a8:	898b      	ldrh	r3, [r1, #12]
 80084aa:	05db      	lsls	r3, r3, #23
 80084ac:	4605      	mov	r5, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	4616      	mov	r6, r2
 80084b2:	d505      	bpl.n	80084c0 <__swrite+0x1e>
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	2302      	movs	r3, #2
 80084ba:	2200      	movs	r2, #0
 80084bc:	f000 f986 	bl	80087cc <_lseek_r>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	4632      	mov	r2, r6
 80084ce:	463b      	mov	r3, r7
 80084d0:	4628      	mov	r0, r5
 80084d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d6:	f000 b9ad 	b.w	8008834 <_write_r>

080084da <__sseek>:
 80084da:	b510      	push	{r4, lr}
 80084dc:	460c      	mov	r4, r1
 80084de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e2:	f000 f973 	bl	80087cc <_lseek_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	bf15      	itete	ne
 80084ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084f6:	81a3      	strheq	r3, [r4, #12]
 80084f8:	bf18      	it	ne
 80084fa:	81a3      	strhne	r3, [r4, #12]
 80084fc:	bd10      	pop	{r4, pc}

080084fe <__sclose>:
 80084fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008502:	f000 b953 	b.w	80087ac <_close_r>

08008506 <__swbuf_r>:
 8008506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008508:	460e      	mov	r6, r1
 800850a:	4614      	mov	r4, r2
 800850c:	4605      	mov	r5, r0
 800850e:	b118      	cbz	r0, 8008518 <__swbuf_r+0x12>
 8008510:	6a03      	ldr	r3, [r0, #32]
 8008512:	b90b      	cbnz	r3, 8008518 <__swbuf_r+0x12>
 8008514:	f7ff fee8 	bl	80082e8 <__sinit>
 8008518:	69a3      	ldr	r3, [r4, #24]
 800851a:	60a3      	str	r3, [r4, #8]
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	071a      	lsls	r2, r3, #28
 8008520:	d525      	bpl.n	800856e <__swbuf_r+0x68>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	b31b      	cbz	r3, 800856e <__swbuf_r+0x68>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	6922      	ldr	r2, [r4, #16]
 800852a:	1a98      	subs	r0, r3, r2
 800852c:	6963      	ldr	r3, [r4, #20]
 800852e:	b2f6      	uxtb	r6, r6
 8008530:	4283      	cmp	r3, r0
 8008532:	4637      	mov	r7, r6
 8008534:	dc04      	bgt.n	8008540 <__swbuf_r+0x3a>
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 fee5 	bl	8009308 <_fflush_r>
 800853e:	b9e0      	cbnz	r0, 800857a <__swbuf_r+0x74>
 8008540:	68a3      	ldr	r3, [r4, #8]
 8008542:	3b01      	subs	r3, #1
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	6022      	str	r2, [r4, #0]
 800854c:	701e      	strb	r6, [r3, #0]
 800854e:	6962      	ldr	r2, [r4, #20]
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	429a      	cmp	r2, r3
 8008554:	d004      	beq.n	8008560 <__swbuf_r+0x5a>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	07db      	lsls	r3, r3, #31
 800855a:	d506      	bpl.n	800856a <__swbuf_r+0x64>
 800855c:	2e0a      	cmp	r6, #10
 800855e:	d104      	bne.n	800856a <__swbuf_r+0x64>
 8008560:	4621      	mov	r1, r4
 8008562:	4628      	mov	r0, r5
 8008564:	f000 fed0 	bl	8009308 <_fflush_r>
 8008568:	b938      	cbnz	r0, 800857a <__swbuf_r+0x74>
 800856a:	4638      	mov	r0, r7
 800856c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f000 f805 	bl	8008580 <__swsetup_r>
 8008576:	2800      	cmp	r0, #0
 8008578:	d0d5      	beq.n	8008526 <__swbuf_r+0x20>
 800857a:	f04f 37ff 	mov.w	r7, #4294967295
 800857e:	e7f4      	b.n	800856a <__swbuf_r+0x64>

08008580 <__swsetup_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4b2a      	ldr	r3, [pc, #168]	; (800862c <__swsetup_r+0xac>)
 8008584:	4605      	mov	r5, r0
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	460c      	mov	r4, r1
 800858a:	b118      	cbz	r0, 8008594 <__swsetup_r+0x14>
 800858c:	6a03      	ldr	r3, [r0, #32]
 800858e:	b90b      	cbnz	r3, 8008594 <__swsetup_r+0x14>
 8008590:	f7ff feaa 	bl	80082e8 <__sinit>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800859a:	0718      	lsls	r0, r3, #28
 800859c:	d422      	bmi.n	80085e4 <__swsetup_r+0x64>
 800859e:	06d9      	lsls	r1, r3, #27
 80085a0:	d407      	bmi.n	80085b2 <__swsetup_r+0x32>
 80085a2:	2309      	movs	r3, #9
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085aa:	81a3      	strh	r3, [r4, #12]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e034      	b.n	800861c <__swsetup_r+0x9c>
 80085b2:	0758      	lsls	r0, r3, #29
 80085b4:	d512      	bpl.n	80085dc <__swsetup_r+0x5c>
 80085b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b8:	b141      	cbz	r1, 80085cc <__swsetup_r+0x4c>
 80085ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085be:	4299      	cmp	r1, r3
 80085c0:	d002      	beq.n	80085c8 <__swsetup_r+0x48>
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f9a2 	bl	800890c <_free_r>
 80085c8:	2300      	movs	r3, #0
 80085ca:	6363      	str	r3, [r4, #52]	; 0x34
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	2300      	movs	r3, #0
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f043 0308 	orr.w	r3, r3, #8
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	b94b      	cbnz	r3, 80085fc <__swsetup_r+0x7c>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f2:	d003      	beq.n	80085fc <__swsetup_r+0x7c>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fee6 	bl	80093c8 <__smakebuf_r>
 80085fc:	89a0      	ldrh	r0, [r4, #12]
 80085fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008602:	f010 0301 	ands.w	r3, r0, #1
 8008606:	d00a      	beq.n	800861e <__swsetup_r+0x9e>
 8008608:	2300      	movs	r3, #0
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	6963      	ldr	r3, [r4, #20]
 800860e:	425b      	negs	r3, r3
 8008610:	61a3      	str	r3, [r4, #24]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	b943      	cbnz	r3, 8008628 <__swsetup_r+0xa8>
 8008616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800861a:	d1c4      	bne.n	80085a6 <__swsetup_r+0x26>
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	0781      	lsls	r1, r0, #30
 8008620:	bf58      	it	pl
 8008622:	6963      	ldrpl	r3, [r4, #20]
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	e7f4      	b.n	8008612 <__swsetup_r+0x92>
 8008628:	2000      	movs	r0, #0
 800862a:	e7f7      	b.n	800861c <__swsetup_r+0x9c>
 800862c:	20000088 	.word	0x20000088

08008630 <memcmp>:
 8008630:	b510      	push	{r4, lr}
 8008632:	3901      	subs	r1, #1
 8008634:	4402      	add	r2, r0
 8008636:	4290      	cmp	r0, r2
 8008638:	d101      	bne.n	800863e <memcmp+0xe>
 800863a:	2000      	movs	r0, #0
 800863c:	e005      	b.n	800864a <memcmp+0x1a>
 800863e:	7803      	ldrb	r3, [r0, #0]
 8008640:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008644:	42a3      	cmp	r3, r4
 8008646:	d001      	beq.n	800864c <memcmp+0x1c>
 8008648:	1b18      	subs	r0, r3, r4
 800864a:	bd10      	pop	{r4, pc}
 800864c:	3001      	adds	r0, #1
 800864e:	e7f2      	b.n	8008636 <memcmp+0x6>

08008650 <memset>:
 8008650:	4402      	add	r2, r0
 8008652:	4603      	mov	r3, r0
 8008654:	4293      	cmp	r3, r2
 8008656:	d100      	bne.n	800865a <memset+0xa>
 8008658:	4770      	bx	lr
 800865a:	f803 1b01 	strb.w	r1, [r3], #1
 800865e:	e7f9      	b.n	8008654 <memset+0x4>

08008660 <strcat>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4602      	mov	r2, r0
 8008664:	7814      	ldrb	r4, [r2, #0]
 8008666:	4613      	mov	r3, r2
 8008668:	3201      	adds	r2, #1
 800866a:	2c00      	cmp	r4, #0
 800866c:	d1fa      	bne.n	8008664 <strcat+0x4>
 800866e:	3b01      	subs	r3, #1
 8008670:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008674:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008678:	2a00      	cmp	r2, #0
 800867a:	d1f9      	bne.n	8008670 <strcat+0x10>
 800867c:	bd10      	pop	{r4, pc}

0800867e <strncmp>:
 800867e:	b510      	push	{r4, lr}
 8008680:	b16a      	cbz	r2, 800869e <strncmp+0x20>
 8008682:	3901      	subs	r1, #1
 8008684:	1884      	adds	r4, r0, r2
 8008686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800868e:	429a      	cmp	r2, r3
 8008690:	d103      	bne.n	800869a <strncmp+0x1c>
 8008692:	42a0      	cmp	r0, r4
 8008694:	d001      	beq.n	800869a <strncmp+0x1c>
 8008696:	2a00      	cmp	r2, #0
 8008698:	d1f5      	bne.n	8008686 <strncmp+0x8>
 800869a:	1ad0      	subs	r0, r2, r3
 800869c:	bd10      	pop	{r4, pc}
 800869e:	4610      	mov	r0, r2
 80086a0:	e7fc      	b.n	800869c <strncmp+0x1e>

080086a2 <strncpy>:
 80086a2:	b510      	push	{r4, lr}
 80086a4:	3901      	subs	r1, #1
 80086a6:	4603      	mov	r3, r0
 80086a8:	b132      	cbz	r2, 80086b8 <strncpy+0x16>
 80086aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80086ae:	f803 4b01 	strb.w	r4, [r3], #1
 80086b2:	3a01      	subs	r2, #1
 80086b4:	2c00      	cmp	r4, #0
 80086b6:	d1f7      	bne.n	80086a8 <strncpy+0x6>
 80086b8:	441a      	add	r2, r3
 80086ba:	2100      	movs	r1, #0
 80086bc:	4293      	cmp	r3, r2
 80086be:	d100      	bne.n	80086c2 <strncpy+0x20>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	f803 1b01 	strb.w	r1, [r3], #1
 80086c6:	e7f9      	b.n	80086bc <strncpy+0x1a>

080086c8 <strtok>:
 80086c8:	4b16      	ldr	r3, [pc, #88]	; (8008724 <strtok+0x5c>)
 80086ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086cc:	681e      	ldr	r6, [r3, #0]
 80086ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80086d0:	4605      	mov	r5, r0
 80086d2:	b9fc      	cbnz	r4, 8008714 <strtok+0x4c>
 80086d4:	2050      	movs	r0, #80	; 0x50
 80086d6:	9101      	str	r1, [sp, #4]
 80086d8:	f7ff fcc6 	bl	8008068 <malloc>
 80086dc:	9901      	ldr	r1, [sp, #4]
 80086de:	6470      	str	r0, [r6, #68]	; 0x44
 80086e0:	4602      	mov	r2, r0
 80086e2:	b920      	cbnz	r0, 80086ee <strtok+0x26>
 80086e4:	4b10      	ldr	r3, [pc, #64]	; (8008728 <strtok+0x60>)
 80086e6:	4811      	ldr	r0, [pc, #68]	; (800872c <strtok+0x64>)
 80086e8:	215b      	movs	r1, #91	; 0x5b
 80086ea:	f000 f8f1 	bl	80088d0 <__assert_func>
 80086ee:	e9c0 4400 	strd	r4, r4, [r0]
 80086f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80086fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008702:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008706:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800870a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800870e:	6184      	str	r4, [r0, #24]
 8008710:	7704      	strb	r4, [r0, #28]
 8008712:	6244      	str	r4, [r0, #36]	; 0x24
 8008714:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008716:	2301      	movs	r3, #1
 8008718:	4628      	mov	r0, r5
 800871a:	b002      	add	sp, #8
 800871c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008720:	f000 b806 	b.w	8008730 <__strtok_r>
 8008724:	20000088 	.word	0x20000088
 8008728:	0800a97c 	.word	0x0800a97c
 800872c:	0800a993 	.word	0x0800a993

08008730 <__strtok_r>:
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	b908      	cbnz	r0, 8008738 <__strtok_r+0x8>
 8008734:	6810      	ldr	r0, [r2, #0]
 8008736:	b188      	cbz	r0, 800875c <__strtok_r+0x2c>
 8008738:	4604      	mov	r4, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008740:	460f      	mov	r7, r1
 8008742:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008746:	b91e      	cbnz	r6, 8008750 <__strtok_r+0x20>
 8008748:	b965      	cbnz	r5, 8008764 <__strtok_r+0x34>
 800874a:	6015      	str	r5, [r2, #0]
 800874c:	4628      	mov	r0, r5
 800874e:	e005      	b.n	800875c <__strtok_r+0x2c>
 8008750:	42b5      	cmp	r5, r6
 8008752:	d1f6      	bne.n	8008742 <__strtok_r+0x12>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <__strtok_r+0xa>
 8008758:	6014      	str	r4, [r2, #0]
 800875a:	7003      	strb	r3, [r0, #0]
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	461c      	mov	r4, r3
 8008760:	e00c      	b.n	800877c <__strtok_r+0x4c>
 8008762:	b915      	cbnz	r5, 800876a <__strtok_r+0x3a>
 8008764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008768:	460e      	mov	r6, r1
 800876a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800876e:	42ab      	cmp	r3, r5
 8008770:	d1f7      	bne.n	8008762 <__strtok_r+0x32>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f3      	beq.n	800875e <__strtok_r+0x2e>
 8008776:	2300      	movs	r3, #0
 8008778:	f804 3c01 	strb.w	r3, [r4, #-1]
 800877c:	6014      	str	r4, [r2, #0]
 800877e:	e7ed      	b.n	800875c <__strtok_r+0x2c>

08008780 <strstr>:
 8008780:	780a      	ldrb	r2, [r1, #0]
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	b96a      	cbnz	r2, 80087a2 <strstr+0x22>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	429a      	cmp	r2, r3
 800878a:	d109      	bne.n	80087a0 <strstr+0x20>
 800878c:	460c      	mov	r4, r1
 800878e:	4605      	mov	r5, r0
 8008790:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f6      	beq.n	8008786 <strstr+0x6>
 8008798:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800879c:	429e      	cmp	r6, r3
 800879e:	d0f7      	beq.n	8008790 <strstr+0x10>
 80087a0:	3001      	adds	r0, #1
 80087a2:	7803      	ldrb	r3, [r0, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1ef      	bne.n	8008788 <strstr+0x8>
 80087a8:	4618      	mov	r0, r3
 80087aa:	e7ec      	b.n	8008786 <strstr+0x6>

080087ac <_close_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	; (80087c8 <_close_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7fa fab2 	bl	8002d20 <_close>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_close_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_close_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20002564 	.word	0x20002564

080087cc <_lseek_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	; (80087ec <_lseek_r+0x20>)
 80087d0:	4604      	mov	r4, r0
 80087d2:	4608      	mov	r0, r1
 80087d4:	4611      	mov	r1, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	602a      	str	r2, [r5, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f7fa fac7 	bl	8002d6e <_lseek>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_lseek_r+0x1e>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_lseek_r+0x1e>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20002564 	.word	0x20002564

080087f0 <_read_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d07      	ldr	r5, [pc, #28]	; (8008810 <_read_r+0x20>)
 80087f4:	4604      	mov	r4, r0
 80087f6:	4608      	mov	r0, r1
 80087f8:	4611      	mov	r1, r2
 80087fa:	2200      	movs	r2, #0
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7fa fa55 	bl	8002cae <_read>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_read_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_read_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20002564 	.word	0x20002564

08008814 <_sbrk_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_sbrk_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7fa fab2 	bl	8002d88 <_sbrk>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_sbrk_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_sbrk_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20002564 	.word	0x20002564

08008834 <_write_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_write_r+0x20>)
 8008838:	4604      	mov	r4, r0
 800883a:	4608      	mov	r0, r1
 800883c:	4611      	mov	r1, r2
 800883e:	2200      	movs	r2, #0
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7fa fa50 	bl	8002ce8 <_write>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_write_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_write_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20002564 	.word	0x20002564

08008858 <__errno>:
 8008858:	4b01      	ldr	r3, [pc, #4]	; (8008860 <__errno+0x8>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20000088 	.word	0x20000088

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	; (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	; (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	; (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	; (80088a8 <__libc_init_array+0x44>)
 8008878:	f000 fed4 	bl	8009624 <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	0800aa64 	.word	0x0800aa64
 80088a0:	0800aa64 	.word	0x0800aa64
 80088a4:	0800aa64 	.word	0x0800aa64
 80088a8:	0800aa68 	.word	0x0800aa68

080088ac <__retarget_lock_init_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_acquire_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_release_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <memcpy>:
 80088b2:	440a      	add	r2, r1
 80088b4:	4291      	cmp	r1, r2
 80088b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ba:	d100      	bne.n	80088be <memcpy+0xc>
 80088bc:	4770      	bx	lr
 80088be:	b510      	push	{r4, lr}
 80088c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c8:	4291      	cmp	r1, r2
 80088ca:	d1f9      	bne.n	80088c0 <memcpy+0xe>
 80088cc:	bd10      	pop	{r4, pc}
	...

080088d0 <__assert_func>:
 80088d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d2:	4614      	mov	r4, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__assert_func+0x2c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	68d8      	ldr	r0, [r3, #12]
 80088de:	b14c      	cbz	r4, 80088f4 <__assert_func+0x24>
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <__assert_func+0x30>)
 80088e2:	9100      	str	r1, [sp, #0]
 80088e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088e8:	4906      	ldr	r1, [pc, #24]	; (8008904 <__assert_func+0x34>)
 80088ea:	462b      	mov	r3, r5
 80088ec:	f000 fd34 	bl	8009358 <fiprintf>
 80088f0:	f000 fe16 	bl	8009520 <abort>
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <__assert_func+0x38>)
 80088f6:	461c      	mov	r4, r3
 80088f8:	e7f3      	b.n	80088e2 <__assert_func+0x12>
 80088fa:	bf00      	nop
 80088fc:	20000088 	.word	0x20000088
 8008900:	0800a9ed 	.word	0x0800a9ed
 8008904:	0800a9fa 	.word	0x0800a9fa
 8008908:	0800aa28 	.word	0x0800aa28

0800890c <_free_r>:
 800890c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890e:	2900      	cmp	r1, #0
 8008910:	d044      	beq.n	800899c <_free_r+0x90>
 8008912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008916:	9001      	str	r0, [sp, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f1a1 0404 	sub.w	r4, r1, #4
 800891e:	bfb8      	it	lt
 8008920:	18e4      	addlt	r4, r4, r3
 8008922:	f7ff fc49 	bl	80081b8 <__malloc_lock>
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <_free_r+0x94>)
 8008928:	9801      	ldr	r0, [sp, #4]
 800892a:	6813      	ldr	r3, [r2, #0]
 800892c:	b933      	cbnz	r3, 800893c <_free_r+0x30>
 800892e:	6063      	str	r3, [r4, #4]
 8008930:	6014      	str	r4, [r2, #0]
 8008932:	b003      	add	sp, #12
 8008934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008938:	f7ff bc44 	b.w	80081c4 <__malloc_unlock>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d908      	bls.n	8008952 <_free_r+0x46>
 8008940:	6825      	ldr	r5, [r4, #0]
 8008942:	1961      	adds	r1, r4, r5
 8008944:	428b      	cmp	r3, r1
 8008946:	bf01      	itttt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	e7ed      	b.n	800892e <_free_r+0x22>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x50>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x46>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1855      	adds	r5, r2, r1
 8008960:	42a5      	cmp	r5, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x70>
 8008964:	6824      	ldr	r4, [r4, #0]
 8008966:	4421      	add	r1, r4
 8008968:	1854      	adds	r4, r2, r1
 800896a:	42a3      	cmp	r3, r4
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1e0      	bne.n	8008932 <_free_r+0x26>
 8008970:	681c      	ldr	r4, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	6053      	str	r3, [r2, #4]
 8008976:	440c      	add	r4, r1
 8008978:	6014      	str	r4, [r2, #0]
 800897a:	e7da      	b.n	8008932 <_free_r+0x26>
 800897c:	d902      	bls.n	8008984 <_free_r+0x78>
 800897e:	230c      	movs	r3, #12
 8008980:	6003      	str	r3, [r0, #0]
 8008982:	e7d6      	b.n	8008932 <_free_r+0x26>
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	1961      	adds	r1, r4, r5
 8008988:	428b      	cmp	r3, r1
 800898a:	bf04      	itt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	bf04      	itt	eq
 8008994:	1949      	addeq	r1, r1, r5
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	6054      	str	r4, [r2, #4]
 800899a:	e7ca      	b.n	8008932 <_free_r+0x26>
 800899c:	b003      	add	sp, #12
 800899e:	bd30      	pop	{r4, r5, pc}
 80089a0:	20002420 	.word	0x20002420

080089a4 <__ssputs_r>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	688e      	ldr	r6, [r1, #8]
 80089aa:	461f      	mov	r7, r3
 80089ac:	42be      	cmp	r6, r7
 80089ae:	680b      	ldr	r3, [r1, #0]
 80089b0:	4682      	mov	sl, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4690      	mov	r8, r2
 80089b6:	d82c      	bhi.n	8008a12 <__ssputs_r+0x6e>
 80089b8:	898a      	ldrh	r2, [r1, #12]
 80089ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089be:	d026      	beq.n	8008a0e <__ssputs_r+0x6a>
 80089c0:	6965      	ldr	r5, [r4, #20]
 80089c2:	6909      	ldr	r1, [r1, #16]
 80089c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c8:	eba3 0901 	sub.w	r9, r3, r1
 80089cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089d0:	1c7b      	adds	r3, r7, #1
 80089d2:	444b      	add	r3, r9
 80089d4:	106d      	asrs	r5, r5, #1
 80089d6:	429d      	cmp	r5, r3
 80089d8:	bf38      	it	cc
 80089da:	461d      	movcc	r5, r3
 80089dc:	0553      	lsls	r3, r2, #21
 80089de:	d527      	bpl.n	8008a30 <__ssputs_r+0x8c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7ff fb69 	bl	80080b8 <_malloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	b360      	cbz	r0, 8008a44 <__ssputs_r+0xa0>
 80089ea:	6921      	ldr	r1, [r4, #16]
 80089ec:	464a      	mov	r2, r9
 80089ee:	f7ff ff60 	bl	80088b2 <memcpy>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	6126      	str	r6, [r4, #16]
 8008a00:	6165      	str	r5, [r4, #20]
 8008a02:	444e      	add	r6, r9
 8008a04:	eba5 0509 	sub.w	r5, r5, r9
 8008a08:	6026      	str	r6, [r4, #0]
 8008a0a:	60a5      	str	r5, [r4, #8]
 8008a0c:	463e      	mov	r6, r7
 8008a0e:	42be      	cmp	r6, r7
 8008a10:	d900      	bls.n	8008a14 <__ssputs_r+0x70>
 8008a12:	463e      	mov	r6, r7
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	4632      	mov	r2, r6
 8008a18:	4641      	mov	r1, r8
 8008a1a:	f000 fd45 	bl	80094a8 <memmove>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	1b9b      	subs	r3, r3, r6
 8008a22:	60a3      	str	r3, [r4, #8]
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	4433      	add	r3, r6
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	462a      	mov	r2, r5
 8008a32:	f000 fd7c 	bl	800952e <_realloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1e0      	bne.n	80089fe <__ssputs_r+0x5a>
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	4650      	mov	r0, sl
 8008a40:	f7ff ff64 	bl	800890c <_free_r>
 8008a44:	230c      	movs	r3, #12
 8008a46:	f8ca 3000 	str.w	r3, [sl]
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
 8008a56:	e7e9      	b.n	8008a2c <__ssputs_r+0x88>

08008a58 <_svfiprintf_r>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	898b      	ldrh	r3, [r1, #12]
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	b09d      	sub	sp, #116	; 0x74
 8008a64:	4607      	mov	r7, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	d50e      	bpl.n	8008a8a <_svfiprintf_r+0x32>
 8008a6c:	690b      	ldr	r3, [r1, #16]
 8008a6e:	b963      	cbnz	r3, 8008a8a <_svfiprintf_r+0x32>
 8008a70:	2140      	movs	r1, #64	; 0x40
 8008a72:	f7ff fb21 	bl	80080b8 <_malloc_r>
 8008a76:	6028      	str	r0, [r5, #0]
 8008a78:	6128      	str	r0, [r5, #16]
 8008a7a:	b920      	cbnz	r0, 8008a86 <_svfiprintf_r+0x2e>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e0d0      	b.n	8008c28 <_svfiprintf_r+0x1d0>
 8008a86:	2340      	movs	r3, #64	; 0x40
 8008a88:	616b      	str	r3, [r5, #20]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8e:	2320      	movs	r3, #32
 8008a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a98:	2330      	movs	r3, #48	; 0x30
 8008a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c40 <_svfiprintf_r+0x1e8>
 8008a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa2:	f04f 0901 	mov.w	r9, #1
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aae:	b10a      	cbz	r2, 8008ab4 <_svfiprintf_r+0x5c>
 8008ab0:	2a25      	cmp	r2, #37	; 0x25
 8008ab2:	d1f9      	bne.n	8008aa8 <_svfiprintf_r+0x50>
 8008ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab8:	d00b      	beq.n	8008ad2 <_svfiprintf_r+0x7a>
 8008aba:	465b      	mov	r3, fp
 8008abc:	4622      	mov	r2, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7ff ff6f 	bl	80089a4 <__ssputs_r>
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f000 80a9 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ace:	445a      	add	r2, fp
 8008ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 80a1 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008adc:	2300      	movs	r3, #0
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae6:	f10a 0a01 	add.w	sl, sl, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af2:	931a      	str	r3, [sp, #104]	; 0x68
 8008af4:	4654      	mov	r4, sl
 8008af6:	2205      	movs	r2, #5
 8008af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afc:	4850      	ldr	r0, [pc, #320]	; (8008c40 <_svfiprintf_r+0x1e8>)
 8008afe:	f7f7 fb87 	bl	8000210 <memchr>
 8008b02:	9a04      	ldr	r2, [sp, #16]
 8008b04:	b9d8      	cbnz	r0, 8008b3e <_svfiprintf_r+0xe6>
 8008b06:	06d0      	lsls	r0, r2, #27
 8008b08:	bf44      	itt	mi
 8008b0a:	2320      	movmi	r3, #32
 8008b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b10:	0711      	lsls	r1, r2, #28
 8008b12:	bf44      	itt	mi
 8008b14:	232b      	movmi	r3, #43	; 0x2b
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b20:	d015      	beq.n	8008b4e <_svfiprintf_r+0xf6>
 8008b22:	9a07      	ldr	r2, [sp, #28]
 8008b24:	4654      	mov	r4, sl
 8008b26:	2000      	movs	r0, #0
 8008b28:	f04f 0c0a 	mov.w	ip, #10
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b32:	3b30      	subs	r3, #48	; 0x30
 8008b34:	2b09      	cmp	r3, #9
 8008b36:	d94d      	bls.n	8008bd4 <_svfiprintf_r+0x17c>
 8008b38:	b1b0      	cbz	r0, 8008b68 <_svfiprintf_r+0x110>
 8008b3a:	9207      	str	r2, [sp, #28]
 8008b3c:	e014      	b.n	8008b68 <_svfiprintf_r+0x110>
 8008b3e:	eba0 0308 	sub.w	r3, r0, r8
 8008b42:	fa09 f303 	lsl.w	r3, r9, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	46a2      	mov	sl, r4
 8008b4c:	e7d2      	b.n	8008af4 <_svfiprintf_r+0x9c>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	1d19      	adds	r1, r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9103      	str	r1, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbb      	ittet	lt
 8008b5a:	425b      	neglt	r3, r3
 8008b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b60:	9307      	strge	r3, [sp, #28]
 8008b62:	9307      	strlt	r3, [sp, #28]
 8008b64:	bfb8      	it	lt
 8008b66:	9204      	strlt	r2, [sp, #16]
 8008b68:	7823      	ldrb	r3, [r4, #0]
 8008b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b6c:	d10c      	bne.n	8008b88 <_svfiprintf_r+0x130>
 8008b6e:	7863      	ldrb	r3, [r4, #1]
 8008b70:	2b2a      	cmp	r3, #42	; 0x2a
 8008b72:	d134      	bne.n	8008bde <_svfiprintf_r+0x186>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	9203      	str	r2, [sp, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfb8      	it	lt
 8008b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b84:	3402      	adds	r4, #2
 8008b86:	9305      	str	r3, [sp, #20]
 8008b88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008c50 <_svfiprintf_r+0x1f8>
 8008b8c:	7821      	ldrb	r1, [r4, #0]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	4650      	mov	r0, sl
 8008b92:	f7f7 fb3d 	bl	8000210 <memchr>
 8008b96:	b138      	cbz	r0, 8008ba8 <_svfiprintf_r+0x150>
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	eba0 000a 	sub.w	r0, r0, sl
 8008b9e:	2240      	movs	r2, #64	; 0x40
 8008ba0:	4082      	lsls	r2, r0
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bac:	4825      	ldr	r0, [pc, #148]	; (8008c44 <_svfiprintf_r+0x1ec>)
 8008bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb2:	2206      	movs	r2, #6
 8008bb4:	f7f7 fb2c 	bl	8000210 <memchr>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d038      	beq.n	8008c2e <_svfiprintf_r+0x1d6>
 8008bbc:	4b22      	ldr	r3, [pc, #136]	; (8008c48 <_svfiprintf_r+0x1f0>)
 8008bbe:	bb1b      	cbnz	r3, 8008c08 <_svfiprintf_r+0x1b0>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	3307      	adds	r3, #7
 8008bc4:	f023 0307 	bic.w	r3, r3, #7
 8008bc8:	3308      	adds	r3, #8
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bce:	4433      	add	r3, r6
 8008bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd2:	e768      	b.n	8008aa6 <_svfiprintf_r+0x4e>
 8008bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd8:	460c      	mov	r4, r1
 8008bda:	2001      	movs	r0, #1
 8008bdc:	e7a6      	b.n	8008b2c <_svfiprintf_r+0xd4>
 8008bde:	2300      	movs	r3, #0
 8008be0:	3401      	adds	r4, #1
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	4619      	mov	r1, r3
 8008be6:	f04f 0c0a 	mov.w	ip, #10
 8008bea:	4620      	mov	r0, r4
 8008bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf0:	3a30      	subs	r2, #48	; 0x30
 8008bf2:	2a09      	cmp	r2, #9
 8008bf4:	d903      	bls.n	8008bfe <_svfiprintf_r+0x1a6>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c6      	beq.n	8008b88 <_svfiprintf_r+0x130>
 8008bfa:	9105      	str	r1, [sp, #20]
 8008bfc:	e7c4      	b.n	8008b88 <_svfiprintf_r+0x130>
 8008bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c02:	4604      	mov	r4, r0
 8008c04:	2301      	movs	r3, #1
 8008c06:	e7f0      	b.n	8008bea <_svfiprintf_r+0x192>
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <_svfiprintf_r+0x1f4>)
 8008c10:	a904      	add	r1, sp, #16
 8008c12:	4638      	mov	r0, r7
 8008c14:	f3af 8000 	nop.w
 8008c18:	1c42      	adds	r2, r0, #1
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	d1d6      	bne.n	8008bcc <_svfiprintf_r+0x174>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	065b      	lsls	r3, r3, #25
 8008c22:	f53f af2d 	bmi.w	8008a80 <_svfiprintf_r+0x28>
 8008c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c28:	b01d      	add	sp, #116	; 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <_svfiprintf_r+0x1f4>)
 8008c36:	a904      	add	r1, sp, #16
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f000 f9bd 	bl	8008fb8 <_printf_i>
 8008c3e:	e7eb      	b.n	8008c18 <_svfiprintf_r+0x1c0>
 8008c40:	0800aa29 	.word	0x0800aa29
 8008c44:	0800aa33 	.word	0x0800aa33
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	080089a5 	.word	0x080089a5
 8008c50:	0800aa2f 	.word	0x0800aa2f

08008c54 <__sfputc_r>:
 8008c54:	6893      	ldr	r3, [r2, #8]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	b410      	push	{r4}
 8008c5c:	6093      	str	r3, [r2, #8]
 8008c5e:	da08      	bge.n	8008c72 <__sfputc_r+0x1e>
 8008c60:	6994      	ldr	r4, [r2, #24]
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	db01      	blt.n	8008c6a <__sfputc_r+0x16>
 8008c66:	290a      	cmp	r1, #10
 8008c68:	d103      	bne.n	8008c72 <__sfputc_r+0x1e>
 8008c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6e:	f7ff bc4a 	b.w	8008506 <__swbuf_r>
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	1c58      	adds	r0, r3, #1
 8008c76:	6010      	str	r0, [r2, #0]
 8008c78:	7019      	strb	r1, [r3, #0]
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <__sfputs_r>:
 8008c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	4614      	mov	r4, r2
 8008c8a:	18d5      	adds	r5, r2, r3
 8008c8c:	42ac      	cmp	r4, r5
 8008c8e:	d101      	bne.n	8008c94 <__sfputs_r+0x12>
 8008c90:	2000      	movs	r0, #0
 8008c92:	e007      	b.n	8008ca4 <__sfputs_r+0x22>
 8008c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c98:	463a      	mov	r2, r7
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff ffda 	bl	8008c54 <__sfputc_r>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d1f3      	bne.n	8008c8c <__sfputs_r+0xa>
 8008ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ca8 <_vfiprintf_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	460d      	mov	r5, r1
 8008cae:	b09d      	sub	sp, #116	; 0x74
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	4698      	mov	r8, r3
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	b118      	cbz	r0, 8008cc0 <_vfiprintf_r+0x18>
 8008cb8:	6a03      	ldr	r3, [r0, #32]
 8008cba:	b90b      	cbnz	r3, 8008cc0 <_vfiprintf_r+0x18>
 8008cbc:	f7ff fb14 	bl	80082e8 <__sinit>
 8008cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc2:	07d9      	lsls	r1, r3, #31
 8008cc4:	d405      	bmi.n	8008cd2 <_vfiprintf_r+0x2a>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	059a      	lsls	r2, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_vfiprintf_r+0x2a>
 8008ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cce:	f7ff fdee 	bl	80088ae <__retarget_lock_acquire_recursive>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	071b      	lsls	r3, r3, #28
 8008cd6:	d501      	bpl.n	8008cdc <_vfiprintf_r+0x34>
 8008cd8:	692b      	ldr	r3, [r5, #16]
 8008cda:	b99b      	cbnz	r3, 8008d04 <_vfiprintf_r+0x5c>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7ff fc4e 	bl	8008580 <__swsetup_r>
 8008ce4:	b170      	cbz	r0, 8008d04 <_vfiprintf_r+0x5c>
 8008ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce8:	07dc      	lsls	r4, r3, #31
 8008cea:	d504      	bpl.n	8008cf6 <_vfiprintf_r+0x4e>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	b01d      	add	sp, #116	; 0x74
 8008cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	0598      	lsls	r0, r3, #22
 8008cfa:	d4f7      	bmi.n	8008cec <_vfiprintf_r+0x44>
 8008cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cfe:	f7ff fdd7 	bl	80088b0 <__retarget_lock_release_recursive>
 8008d02:	e7f3      	b.n	8008cec <_vfiprintf_r+0x44>
 8008d04:	2300      	movs	r3, #0
 8008d06:	9309      	str	r3, [sp, #36]	; 0x24
 8008d08:	2320      	movs	r3, #32
 8008d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d12:	2330      	movs	r3, #48	; 0x30
 8008d14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ec8 <_vfiprintf_r+0x220>
 8008d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1c:	f04f 0901 	mov.w	r9, #1
 8008d20:	4623      	mov	r3, r4
 8008d22:	469a      	mov	sl, r3
 8008d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d28:	b10a      	cbz	r2, 8008d2e <_vfiprintf_r+0x86>
 8008d2a:	2a25      	cmp	r2, #37	; 0x25
 8008d2c:	d1f9      	bne.n	8008d22 <_vfiprintf_r+0x7a>
 8008d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d32:	d00b      	beq.n	8008d4c <_vfiprintf_r+0xa4>
 8008d34:	465b      	mov	r3, fp
 8008d36:	4622      	mov	r2, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff ffa1 	bl	8008c82 <__sfputs_r>
 8008d40:	3001      	adds	r0, #1
 8008d42:	f000 80a9 	beq.w	8008e98 <_vfiprintf_r+0x1f0>
 8008d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d48:	445a      	add	r2, fp
 8008d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80a1 	beq.w	8008e98 <_vfiprintf_r+0x1f0>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d60:	f10a 0a01 	add.w	sl, sl, #1
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	9307      	str	r3, [sp, #28]
 8008d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6e:	4654      	mov	r4, sl
 8008d70:	2205      	movs	r2, #5
 8008d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d76:	4854      	ldr	r0, [pc, #336]	; (8008ec8 <_vfiprintf_r+0x220>)
 8008d78:	f7f7 fa4a 	bl	8000210 <memchr>
 8008d7c:	9a04      	ldr	r2, [sp, #16]
 8008d7e:	b9d8      	cbnz	r0, 8008db8 <_vfiprintf_r+0x110>
 8008d80:	06d1      	lsls	r1, r2, #27
 8008d82:	bf44      	itt	mi
 8008d84:	2320      	movmi	r3, #32
 8008d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d8a:	0713      	lsls	r3, r2, #28
 8008d8c:	bf44      	itt	mi
 8008d8e:	232b      	movmi	r3, #43	; 0x2b
 8008d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d94:	f89a 3000 	ldrb.w	r3, [sl]
 8008d98:	2b2a      	cmp	r3, #42	; 0x2a
 8008d9a:	d015      	beq.n	8008dc8 <_vfiprintf_r+0x120>
 8008d9c:	9a07      	ldr	r2, [sp, #28]
 8008d9e:	4654      	mov	r4, sl
 8008da0:	2000      	movs	r0, #0
 8008da2:	f04f 0c0a 	mov.w	ip, #10
 8008da6:	4621      	mov	r1, r4
 8008da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dac:	3b30      	subs	r3, #48	; 0x30
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d94d      	bls.n	8008e4e <_vfiprintf_r+0x1a6>
 8008db2:	b1b0      	cbz	r0, 8008de2 <_vfiprintf_r+0x13a>
 8008db4:	9207      	str	r2, [sp, #28]
 8008db6:	e014      	b.n	8008de2 <_vfiprintf_r+0x13a>
 8008db8:	eba0 0308 	sub.w	r3, r0, r8
 8008dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	46a2      	mov	sl, r4
 8008dc6:	e7d2      	b.n	8008d6e <_vfiprintf_r+0xc6>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	1d19      	adds	r1, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	9103      	str	r1, [sp, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bfbb      	ittet	lt
 8008dd4:	425b      	neglt	r3, r3
 8008dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dda:	9307      	strge	r3, [sp, #28]
 8008ddc:	9307      	strlt	r3, [sp, #28]
 8008dde:	bfb8      	it	lt
 8008de0:	9204      	strlt	r2, [sp, #16]
 8008de2:	7823      	ldrb	r3, [r4, #0]
 8008de4:	2b2e      	cmp	r3, #46	; 0x2e
 8008de6:	d10c      	bne.n	8008e02 <_vfiprintf_r+0x15a>
 8008de8:	7863      	ldrb	r3, [r4, #1]
 8008dea:	2b2a      	cmp	r3, #42	; 0x2a
 8008dec:	d134      	bne.n	8008e58 <_vfiprintf_r+0x1b0>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	9203      	str	r2, [sp, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dfe:	3402      	adds	r4, #2
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ed8 <_vfiprintf_r+0x230>
 8008e06:	7821      	ldrb	r1, [r4, #0]
 8008e08:	2203      	movs	r2, #3
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	f7f7 fa00 	bl	8000210 <memchr>
 8008e10:	b138      	cbz	r0, 8008e22 <_vfiprintf_r+0x17a>
 8008e12:	9b04      	ldr	r3, [sp, #16]
 8008e14:	eba0 000a 	sub.w	r0, r0, sl
 8008e18:	2240      	movs	r2, #64	; 0x40
 8008e1a:	4082      	lsls	r2, r0
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	3401      	adds	r4, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	4829      	ldr	r0, [pc, #164]	; (8008ecc <_vfiprintf_r+0x224>)
 8008e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e2c:	2206      	movs	r2, #6
 8008e2e:	f7f7 f9ef 	bl	8000210 <memchr>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d03f      	beq.n	8008eb6 <_vfiprintf_r+0x20e>
 8008e36:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <_vfiprintf_r+0x228>)
 8008e38:	bb1b      	cbnz	r3, 8008e82 <_vfiprintf_r+0x1da>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	f023 0307 	bic.w	r3, r3, #7
 8008e42:	3308      	adds	r3, #8
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	443b      	add	r3, r7
 8008e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4c:	e768      	b.n	8008d20 <_vfiprintf_r+0x78>
 8008e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e52:	460c      	mov	r4, r1
 8008e54:	2001      	movs	r0, #1
 8008e56:	e7a6      	b.n	8008da6 <_vfiprintf_r+0xfe>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f04f 0c0a 	mov.w	ip, #10
 8008e64:	4620      	mov	r0, r4
 8008e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e6a:	3a30      	subs	r2, #48	; 0x30
 8008e6c:	2a09      	cmp	r2, #9
 8008e6e:	d903      	bls.n	8008e78 <_vfiprintf_r+0x1d0>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0c6      	beq.n	8008e02 <_vfiprintf_r+0x15a>
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	e7c4      	b.n	8008e02 <_vfiprintf_r+0x15a>
 8008e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e7f0      	b.n	8008e64 <_vfiprintf_r+0x1bc>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <_vfiprintf_r+0x22c>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f3af 8000 	nop.w
 8008e92:	4607      	mov	r7, r0
 8008e94:	1c78      	adds	r0, r7, #1
 8008e96:	d1d6      	bne.n	8008e46 <_vfiprintf_r+0x19e>
 8008e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d405      	bmi.n	8008eaa <_vfiprintf_r+0x202>
 8008e9e:	89ab      	ldrh	r3, [r5, #12]
 8008ea0:	059a      	lsls	r2, r3, #22
 8008ea2:	d402      	bmi.n	8008eaa <_vfiprintf_r+0x202>
 8008ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ea6:	f7ff fd03 	bl	80088b0 <__retarget_lock_release_recursive>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	065b      	lsls	r3, r3, #25
 8008eae:	f53f af1d 	bmi.w	8008cec <_vfiprintf_r+0x44>
 8008eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb4:	e71c      	b.n	8008cf0 <_vfiprintf_r+0x48>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <_vfiprintf_r+0x22c>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f879 	bl	8008fb8 <_printf_i>
 8008ec6:	e7e4      	b.n	8008e92 <_vfiprintf_r+0x1ea>
 8008ec8:	0800aa29 	.word	0x0800aa29
 8008ecc:	0800aa33 	.word	0x0800aa33
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	08008c83 	.word	0x08008c83
 8008ed8:	0800aa2f 	.word	0x0800aa2f

08008edc <_printf_common>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	4699      	mov	r9, r3
 8008ee4:	688a      	ldr	r2, [r1, #8]
 8008ee6:	690b      	ldr	r3, [r1, #16]
 8008ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	bfb8      	it	lt
 8008ef0:	4613      	movlt	r3, r2
 8008ef2:	6033      	str	r3, [r6, #0]
 8008ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ef8:	4607      	mov	r7, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	b10a      	cbz	r2, 8008f02 <_printf_common+0x26>
 8008efe:	3301      	adds	r3, #1
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	0699      	lsls	r1, r3, #26
 8008f06:	bf42      	ittt	mi
 8008f08:	6833      	ldrmi	r3, [r6, #0]
 8008f0a:	3302      	addmi	r3, #2
 8008f0c:	6033      	strmi	r3, [r6, #0]
 8008f0e:	6825      	ldr	r5, [r4, #0]
 8008f10:	f015 0506 	ands.w	r5, r5, #6
 8008f14:	d106      	bne.n	8008f24 <_printf_common+0x48>
 8008f16:	f104 0a19 	add.w	sl, r4, #25
 8008f1a:	68e3      	ldr	r3, [r4, #12]
 8008f1c:	6832      	ldr	r2, [r6, #0]
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	42ab      	cmp	r3, r5
 8008f22:	dc26      	bgt.n	8008f72 <_printf_common+0x96>
 8008f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f28:	1e13      	subs	r3, r2, #0
 8008f2a:	6822      	ldr	r2, [r4, #0]
 8008f2c:	bf18      	it	ne
 8008f2e:	2301      	movne	r3, #1
 8008f30:	0692      	lsls	r2, r2, #26
 8008f32:	d42b      	bmi.n	8008f8c <_printf_common+0xb0>
 8008f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f38:	4649      	mov	r1, r9
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	47c0      	blx	r8
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d01e      	beq.n	8008f80 <_printf_common+0xa4>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	f003 0306 	and.w	r3, r3, #6
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	bf02      	ittt	eq
 8008f4e:	68e5      	ldreq	r5, [r4, #12]
 8008f50:	6833      	ldreq	r3, [r6, #0]
 8008f52:	1aed      	subeq	r5, r5, r3
 8008f54:	68a3      	ldr	r3, [r4, #8]
 8008f56:	bf0c      	ite	eq
 8008f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f5c:	2500      	movne	r5, #0
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	bfc4      	itt	gt
 8008f62:	1a9b      	subgt	r3, r3, r2
 8008f64:	18ed      	addgt	r5, r5, r3
 8008f66:	2600      	movs	r6, #0
 8008f68:	341a      	adds	r4, #26
 8008f6a:	42b5      	cmp	r5, r6
 8008f6c:	d11a      	bne.n	8008fa4 <_printf_common+0xc8>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e008      	b.n	8008f84 <_printf_common+0xa8>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4652      	mov	r2, sl
 8008f76:	4649      	mov	r1, r9
 8008f78:	4638      	mov	r0, r7
 8008f7a:	47c0      	blx	r8
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d103      	bne.n	8008f88 <_printf_common+0xac>
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	3501      	adds	r5, #1
 8008f8a:	e7c6      	b.n	8008f1a <_printf_common+0x3e>
 8008f8c:	18e1      	adds	r1, r4, r3
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	2030      	movs	r0, #48	; 0x30
 8008f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f96:	4422      	add	r2, r4
 8008f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	e7c7      	b.n	8008f34 <_printf_common+0x58>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	4649      	mov	r1, r9
 8008faa:	4638      	mov	r0, r7
 8008fac:	47c0      	blx	r8
 8008fae:	3001      	adds	r0, #1
 8008fb0:	d0e6      	beq.n	8008f80 <_printf_common+0xa4>
 8008fb2:	3601      	adds	r6, #1
 8008fb4:	e7d9      	b.n	8008f6a <_printf_common+0x8e>
	...

08008fb8 <_printf_i>:
 8008fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbc:	7e0f      	ldrb	r7, [r1, #24]
 8008fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fc0:	2f78      	cmp	r7, #120	; 0x78
 8008fc2:	4691      	mov	r9, r2
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	469a      	mov	sl, r3
 8008fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fce:	d807      	bhi.n	8008fe0 <_printf_i+0x28>
 8008fd0:	2f62      	cmp	r7, #98	; 0x62
 8008fd2:	d80a      	bhi.n	8008fea <_printf_i+0x32>
 8008fd4:	2f00      	cmp	r7, #0
 8008fd6:	f000 80d4 	beq.w	8009182 <_printf_i+0x1ca>
 8008fda:	2f58      	cmp	r7, #88	; 0x58
 8008fdc:	f000 80c0 	beq.w	8009160 <_printf_i+0x1a8>
 8008fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fe8:	e03a      	b.n	8009060 <_printf_i+0xa8>
 8008fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fee:	2b15      	cmp	r3, #21
 8008ff0:	d8f6      	bhi.n	8008fe0 <_printf_i+0x28>
 8008ff2:	a101      	add	r1, pc, #4	; (adr r1, 8008ff8 <_printf_i+0x40>)
 8008ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ff8:	08009051 	.word	0x08009051
 8008ffc:	08009065 	.word	0x08009065
 8009000:	08008fe1 	.word	0x08008fe1
 8009004:	08008fe1 	.word	0x08008fe1
 8009008:	08008fe1 	.word	0x08008fe1
 800900c:	08008fe1 	.word	0x08008fe1
 8009010:	08009065 	.word	0x08009065
 8009014:	08008fe1 	.word	0x08008fe1
 8009018:	08008fe1 	.word	0x08008fe1
 800901c:	08008fe1 	.word	0x08008fe1
 8009020:	08008fe1 	.word	0x08008fe1
 8009024:	08009169 	.word	0x08009169
 8009028:	08009091 	.word	0x08009091
 800902c:	08009123 	.word	0x08009123
 8009030:	08008fe1 	.word	0x08008fe1
 8009034:	08008fe1 	.word	0x08008fe1
 8009038:	0800918b 	.word	0x0800918b
 800903c:	08008fe1 	.word	0x08008fe1
 8009040:	08009091 	.word	0x08009091
 8009044:	08008fe1 	.word	0x08008fe1
 8009048:	08008fe1 	.word	0x08008fe1
 800904c:	0800912b 	.word	0x0800912b
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	1d1a      	adds	r2, r3, #4
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	602a      	str	r2, [r5, #0]
 8009058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800905c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009060:	2301      	movs	r3, #1
 8009062:	e09f      	b.n	80091a4 <_printf_i+0x1ec>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	0607      	lsls	r7, r0, #24
 800906a:	f103 0104 	add.w	r1, r3, #4
 800906e:	6029      	str	r1, [r5, #0]
 8009070:	d501      	bpl.n	8009076 <_printf_i+0xbe>
 8009072:	681e      	ldr	r6, [r3, #0]
 8009074:	e003      	b.n	800907e <_printf_i+0xc6>
 8009076:	0646      	lsls	r6, r0, #25
 8009078:	d5fb      	bpl.n	8009072 <_printf_i+0xba>
 800907a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800907e:	2e00      	cmp	r6, #0
 8009080:	da03      	bge.n	800908a <_printf_i+0xd2>
 8009082:	232d      	movs	r3, #45	; 0x2d
 8009084:	4276      	negs	r6, r6
 8009086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908a:	485a      	ldr	r0, [pc, #360]	; (80091f4 <_printf_i+0x23c>)
 800908c:	230a      	movs	r3, #10
 800908e:	e012      	b.n	80090b6 <_printf_i+0xfe>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	6820      	ldr	r0, [r4, #0]
 8009094:	1d19      	adds	r1, r3, #4
 8009096:	6029      	str	r1, [r5, #0]
 8009098:	0605      	lsls	r5, r0, #24
 800909a:	d501      	bpl.n	80090a0 <_printf_i+0xe8>
 800909c:	681e      	ldr	r6, [r3, #0]
 800909e:	e002      	b.n	80090a6 <_printf_i+0xee>
 80090a0:	0641      	lsls	r1, r0, #25
 80090a2:	d5fb      	bpl.n	800909c <_printf_i+0xe4>
 80090a4:	881e      	ldrh	r6, [r3, #0]
 80090a6:	4853      	ldr	r0, [pc, #332]	; (80091f4 <_printf_i+0x23c>)
 80090a8:	2f6f      	cmp	r7, #111	; 0x6f
 80090aa:	bf0c      	ite	eq
 80090ac:	2308      	moveq	r3, #8
 80090ae:	230a      	movne	r3, #10
 80090b0:	2100      	movs	r1, #0
 80090b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090b6:	6865      	ldr	r5, [r4, #4]
 80090b8:	60a5      	str	r5, [r4, #8]
 80090ba:	2d00      	cmp	r5, #0
 80090bc:	bfa2      	ittt	ge
 80090be:	6821      	ldrge	r1, [r4, #0]
 80090c0:	f021 0104 	bicge.w	r1, r1, #4
 80090c4:	6021      	strge	r1, [r4, #0]
 80090c6:	b90e      	cbnz	r6, 80090cc <_printf_i+0x114>
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	d04b      	beq.n	8009164 <_printf_i+0x1ac>
 80090cc:	4615      	mov	r5, r2
 80090ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80090d2:	fb03 6711 	mls	r7, r3, r1, r6
 80090d6:	5dc7      	ldrb	r7, [r0, r7]
 80090d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090dc:	4637      	mov	r7, r6
 80090de:	42bb      	cmp	r3, r7
 80090e0:	460e      	mov	r6, r1
 80090e2:	d9f4      	bls.n	80090ce <_printf_i+0x116>
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d10b      	bne.n	8009100 <_printf_i+0x148>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	07de      	lsls	r6, r3, #31
 80090ec:	d508      	bpl.n	8009100 <_printf_i+0x148>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	6861      	ldr	r1, [r4, #4]
 80090f2:	4299      	cmp	r1, r3
 80090f4:	bfde      	ittt	le
 80090f6:	2330      	movle	r3, #48	; 0x30
 80090f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009100:	1b52      	subs	r2, r2, r5
 8009102:	6122      	str	r2, [r4, #16]
 8009104:	f8cd a000 	str.w	sl, [sp]
 8009108:	464b      	mov	r3, r9
 800910a:	aa03      	add	r2, sp, #12
 800910c:	4621      	mov	r1, r4
 800910e:	4640      	mov	r0, r8
 8009110:	f7ff fee4 	bl	8008edc <_printf_common>
 8009114:	3001      	adds	r0, #1
 8009116:	d14a      	bne.n	80091ae <_printf_i+0x1f6>
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	b004      	add	sp, #16
 800911e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	f043 0320 	orr.w	r3, r3, #32
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	4833      	ldr	r0, [pc, #204]	; (80091f8 <_printf_i+0x240>)
 800912c:	2778      	movs	r7, #120	; 0x78
 800912e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	6829      	ldr	r1, [r5, #0]
 8009136:	061f      	lsls	r7, r3, #24
 8009138:	f851 6b04 	ldr.w	r6, [r1], #4
 800913c:	d402      	bmi.n	8009144 <_printf_i+0x18c>
 800913e:	065f      	lsls	r7, r3, #25
 8009140:	bf48      	it	mi
 8009142:	b2b6      	uxthmi	r6, r6
 8009144:	07df      	lsls	r7, r3, #31
 8009146:	bf48      	it	mi
 8009148:	f043 0320 	orrmi.w	r3, r3, #32
 800914c:	6029      	str	r1, [r5, #0]
 800914e:	bf48      	it	mi
 8009150:	6023      	strmi	r3, [r4, #0]
 8009152:	b91e      	cbnz	r6, 800915c <_printf_i+0x1a4>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	f023 0320 	bic.w	r3, r3, #32
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	2310      	movs	r3, #16
 800915e:	e7a7      	b.n	80090b0 <_printf_i+0xf8>
 8009160:	4824      	ldr	r0, [pc, #144]	; (80091f4 <_printf_i+0x23c>)
 8009162:	e7e4      	b.n	800912e <_printf_i+0x176>
 8009164:	4615      	mov	r5, r2
 8009166:	e7bd      	b.n	80090e4 <_printf_i+0x12c>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	6826      	ldr	r6, [r4, #0]
 800916c:	6961      	ldr	r1, [r4, #20]
 800916e:	1d18      	adds	r0, r3, #4
 8009170:	6028      	str	r0, [r5, #0]
 8009172:	0635      	lsls	r5, r6, #24
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	d501      	bpl.n	800917c <_printf_i+0x1c4>
 8009178:	6019      	str	r1, [r3, #0]
 800917a:	e002      	b.n	8009182 <_printf_i+0x1ca>
 800917c:	0670      	lsls	r0, r6, #25
 800917e:	d5fb      	bpl.n	8009178 <_printf_i+0x1c0>
 8009180:	8019      	strh	r1, [r3, #0]
 8009182:	2300      	movs	r3, #0
 8009184:	6123      	str	r3, [r4, #16]
 8009186:	4615      	mov	r5, r2
 8009188:	e7bc      	b.n	8009104 <_printf_i+0x14c>
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	1d1a      	adds	r2, r3, #4
 800918e:	602a      	str	r2, [r5, #0]
 8009190:	681d      	ldr	r5, [r3, #0]
 8009192:	6862      	ldr	r2, [r4, #4]
 8009194:	2100      	movs	r1, #0
 8009196:	4628      	mov	r0, r5
 8009198:	f7f7 f83a 	bl	8000210 <memchr>
 800919c:	b108      	cbz	r0, 80091a2 <_printf_i+0x1ea>
 800919e:	1b40      	subs	r0, r0, r5
 80091a0:	6060      	str	r0, [r4, #4]
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	2300      	movs	r3, #0
 80091a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ac:	e7aa      	b.n	8009104 <_printf_i+0x14c>
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	462a      	mov	r2, r5
 80091b2:	4649      	mov	r1, r9
 80091b4:	4640      	mov	r0, r8
 80091b6:	47d0      	blx	sl
 80091b8:	3001      	adds	r0, #1
 80091ba:	d0ad      	beq.n	8009118 <_printf_i+0x160>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	079b      	lsls	r3, r3, #30
 80091c0:	d413      	bmi.n	80091ea <_printf_i+0x232>
 80091c2:	68e0      	ldr	r0, [r4, #12]
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	4298      	cmp	r0, r3
 80091c8:	bfb8      	it	lt
 80091ca:	4618      	movlt	r0, r3
 80091cc:	e7a6      	b.n	800911c <_printf_i+0x164>
 80091ce:	2301      	movs	r3, #1
 80091d0:	4632      	mov	r2, r6
 80091d2:	4649      	mov	r1, r9
 80091d4:	4640      	mov	r0, r8
 80091d6:	47d0      	blx	sl
 80091d8:	3001      	adds	r0, #1
 80091da:	d09d      	beq.n	8009118 <_printf_i+0x160>
 80091dc:	3501      	adds	r5, #1
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	9903      	ldr	r1, [sp, #12]
 80091e2:	1a5b      	subs	r3, r3, r1
 80091e4:	42ab      	cmp	r3, r5
 80091e6:	dcf2      	bgt.n	80091ce <_printf_i+0x216>
 80091e8:	e7eb      	b.n	80091c2 <_printf_i+0x20a>
 80091ea:	2500      	movs	r5, #0
 80091ec:	f104 0619 	add.w	r6, r4, #25
 80091f0:	e7f5      	b.n	80091de <_printf_i+0x226>
 80091f2:	bf00      	nop
 80091f4:	0800aa3a 	.word	0x0800aa3a
 80091f8:	0800aa4b 	.word	0x0800aa4b

080091fc <__sflush_r>:
 80091fc:	898a      	ldrh	r2, [r1, #12]
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	4605      	mov	r5, r0
 8009204:	0710      	lsls	r0, r2, #28
 8009206:	460c      	mov	r4, r1
 8009208:	d458      	bmi.n	80092bc <__sflush_r+0xc0>
 800920a:	684b      	ldr	r3, [r1, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dc05      	bgt.n	800921c <__sflush_r+0x20>
 8009210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	dc02      	bgt.n	800921c <__sflush_r+0x20>
 8009216:	2000      	movs	r0, #0
 8009218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800921e:	2e00      	cmp	r6, #0
 8009220:	d0f9      	beq.n	8009216 <__sflush_r+0x1a>
 8009222:	2300      	movs	r3, #0
 8009224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009228:	682f      	ldr	r7, [r5, #0]
 800922a:	6a21      	ldr	r1, [r4, #32]
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	d032      	beq.n	8009296 <__sflush_r+0x9a>
 8009230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	075a      	lsls	r2, r3, #29
 8009236:	d505      	bpl.n	8009244 <__sflush_r+0x48>
 8009238:	6863      	ldr	r3, [r4, #4]
 800923a:	1ac0      	subs	r0, r0, r3
 800923c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800923e:	b10b      	cbz	r3, 8009244 <__sflush_r+0x48>
 8009240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009242:	1ac0      	subs	r0, r0, r3
 8009244:	2300      	movs	r3, #0
 8009246:	4602      	mov	r2, r0
 8009248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800924a:	6a21      	ldr	r1, [r4, #32]
 800924c:	4628      	mov	r0, r5
 800924e:	47b0      	blx	r6
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	d106      	bne.n	8009264 <__sflush_r+0x68>
 8009256:	6829      	ldr	r1, [r5, #0]
 8009258:	291d      	cmp	r1, #29
 800925a:	d82b      	bhi.n	80092b4 <__sflush_r+0xb8>
 800925c:	4a29      	ldr	r2, [pc, #164]	; (8009304 <__sflush_r+0x108>)
 800925e:	410a      	asrs	r2, r1
 8009260:	07d6      	lsls	r6, r2, #31
 8009262:	d427      	bmi.n	80092b4 <__sflush_r+0xb8>
 8009264:	2200      	movs	r2, #0
 8009266:	6062      	str	r2, [r4, #4]
 8009268:	04d9      	lsls	r1, r3, #19
 800926a:	6922      	ldr	r2, [r4, #16]
 800926c:	6022      	str	r2, [r4, #0]
 800926e:	d504      	bpl.n	800927a <__sflush_r+0x7e>
 8009270:	1c42      	adds	r2, r0, #1
 8009272:	d101      	bne.n	8009278 <__sflush_r+0x7c>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b903      	cbnz	r3, 800927a <__sflush_r+0x7e>
 8009278:	6560      	str	r0, [r4, #84]	; 0x54
 800927a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927c:	602f      	str	r7, [r5, #0]
 800927e:	2900      	cmp	r1, #0
 8009280:	d0c9      	beq.n	8009216 <__sflush_r+0x1a>
 8009282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009286:	4299      	cmp	r1, r3
 8009288:	d002      	beq.n	8009290 <__sflush_r+0x94>
 800928a:	4628      	mov	r0, r5
 800928c:	f7ff fb3e 	bl	800890c <_free_r>
 8009290:	2000      	movs	r0, #0
 8009292:	6360      	str	r0, [r4, #52]	; 0x34
 8009294:	e7c0      	b.n	8009218 <__sflush_r+0x1c>
 8009296:	2301      	movs	r3, #1
 8009298:	4628      	mov	r0, r5
 800929a:	47b0      	blx	r6
 800929c:	1c41      	adds	r1, r0, #1
 800929e:	d1c8      	bne.n	8009232 <__sflush_r+0x36>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c5      	beq.n	8009232 <__sflush_r+0x36>
 80092a6:	2b1d      	cmp	r3, #29
 80092a8:	d001      	beq.n	80092ae <__sflush_r+0xb2>
 80092aa:	2b16      	cmp	r3, #22
 80092ac:	d101      	bne.n	80092b2 <__sflush_r+0xb6>
 80092ae:	602f      	str	r7, [r5, #0]
 80092b0:	e7b1      	b.n	8009216 <__sflush_r+0x1a>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	e7ad      	b.n	8009218 <__sflush_r+0x1c>
 80092bc:	690f      	ldr	r7, [r1, #16]
 80092be:	2f00      	cmp	r7, #0
 80092c0:	d0a9      	beq.n	8009216 <__sflush_r+0x1a>
 80092c2:	0793      	lsls	r3, r2, #30
 80092c4:	680e      	ldr	r6, [r1, #0]
 80092c6:	bf08      	it	eq
 80092c8:	694b      	ldreq	r3, [r1, #20]
 80092ca:	600f      	str	r7, [r1, #0]
 80092cc:	bf18      	it	ne
 80092ce:	2300      	movne	r3, #0
 80092d0:	eba6 0807 	sub.w	r8, r6, r7
 80092d4:	608b      	str	r3, [r1, #8]
 80092d6:	f1b8 0f00 	cmp.w	r8, #0
 80092da:	dd9c      	ble.n	8009216 <__sflush_r+0x1a>
 80092dc:	6a21      	ldr	r1, [r4, #32]
 80092de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092e0:	4643      	mov	r3, r8
 80092e2:	463a      	mov	r2, r7
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dc06      	bgt.n	80092fa <__sflush_r+0xfe>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e78e      	b.n	8009218 <__sflush_r+0x1c>
 80092fa:	4407      	add	r7, r0
 80092fc:	eba8 0800 	sub.w	r8, r8, r0
 8009300:	e7e9      	b.n	80092d6 <__sflush_r+0xda>
 8009302:	bf00      	nop
 8009304:	dfbffffe 	.word	0xdfbffffe

08009308 <_fflush_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	690b      	ldr	r3, [r1, #16]
 800930c:	4605      	mov	r5, r0
 800930e:	460c      	mov	r4, r1
 8009310:	b913      	cbnz	r3, 8009318 <_fflush_r+0x10>
 8009312:	2500      	movs	r5, #0
 8009314:	4628      	mov	r0, r5
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	b118      	cbz	r0, 8009322 <_fflush_r+0x1a>
 800931a:	6a03      	ldr	r3, [r0, #32]
 800931c:	b90b      	cbnz	r3, 8009322 <_fflush_r+0x1a>
 800931e:	f7fe ffe3 	bl	80082e8 <__sinit>
 8009322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0f3      	beq.n	8009312 <_fflush_r+0xa>
 800932a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800932c:	07d0      	lsls	r0, r2, #31
 800932e:	d404      	bmi.n	800933a <_fflush_r+0x32>
 8009330:	0599      	lsls	r1, r3, #22
 8009332:	d402      	bmi.n	800933a <_fflush_r+0x32>
 8009334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009336:	f7ff faba 	bl	80088ae <__retarget_lock_acquire_recursive>
 800933a:	4628      	mov	r0, r5
 800933c:	4621      	mov	r1, r4
 800933e:	f7ff ff5d 	bl	80091fc <__sflush_r>
 8009342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009344:	07da      	lsls	r2, r3, #31
 8009346:	4605      	mov	r5, r0
 8009348:	d4e4      	bmi.n	8009314 <_fflush_r+0xc>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	059b      	lsls	r3, r3, #22
 800934e:	d4e1      	bmi.n	8009314 <_fflush_r+0xc>
 8009350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009352:	f7ff faad 	bl	80088b0 <__retarget_lock_release_recursive>
 8009356:	e7dd      	b.n	8009314 <_fflush_r+0xc>

08009358 <fiprintf>:
 8009358:	b40e      	push	{r1, r2, r3}
 800935a:	b503      	push	{r0, r1, lr}
 800935c:	4601      	mov	r1, r0
 800935e:	ab03      	add	r3, sp, #12
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <fiprintf+0x20>)
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	f7ff fc9d 	bl	8008ca8 <_vfiprintf_r>
 800936e:	b002      	add	sp, #8
 8009370:	f85d eb04 	ldr.w	lr, [sp], #4
 8009374:	b003      	add	sp, #12
 8009376:	4770      	bx	lr
 8009378:	20000088 	.word	0x20000088

0800937c <__swhatbuf_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	460c      	mov	r4, r1
 8009380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009384:	2900      	cmp	r1, #0
 8009386:	b096      	sub	sp, #88	; 0x58
 8009388:	4615      	mov	r5, r2
 800938a:	461e      	mov	r6, r3
 800938c:	da0d      	bge.n	80093aa <__swhatbuf_r+0x2e>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009394:	f04f 0100 	mov.w	r1, #0
 8009398:	bf0c      	ite	eq
 800939a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800939e:	2340      	movne	r3, #64	; 0x40
 80093a0:	2000      	movs	r0, #0
 80093a2:	6031      	str	r1, [r6, #0]
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	b016      	add	sp, #88	; 0x58
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	466a      	mov	r2, sp
 80093ac:	f000 f896 	bl	80094dc <_fstat_r>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	dbec      	blt.n	800938e <__swhatbuf_r+0x12>
 80093b4:	9901      	ldr	r1, [sp, #4]
 80093b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80093ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80093be:	4259      	negs	r1, r3
 80093c0:	4159      	adcs	r1, r3
 80093c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c6:	e7eb      	b.n	80093a0 <__swhatbuf_r+0x24>

080093c8 <__smakebuf_r>:
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093cc:	079d      	lsls	r5, r3, #30
 80093ce:	4606      	mov	r6, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	d507      	bpl.n	80093e4 <__smakebuf_r+0x1c>
 80093d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	2301      	movs	r3, #1
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	b002      	add	sp, #8
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	ab01      	add	r3, sp, #4
 80093e6:	466a      	mov	r2, sp
 80093e8:	f7ff ffc8 	bl	800937c <__swhatbuf_r>
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7fe fe61 	bl	80080b8 <_malloc_r>
 80093f6:	b948      	cbnz	r0, 800940c <__smakebuf_r+0x44>
 80093f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fc:	059a      	lsls	r2, r3, #22
 80093fe:	d4ef      	bmi.n	80093e0 <__smakebuf_r+0x18>
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	e7e3      	b.n	80093d4 <__smakebuf_r+0xc>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	6020      	str	r0, [r4, #0]
 8009410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	9b00      	ldr	r3, [sp, #0]
 8009418:	6163      	str	r3, [r4, #20]
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	6120      	str	r0, [r4, #16]
 800941e:	b15b      	cbz	r3, 8009438 <__smakebuf_r+0x70>
 8009420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009424:	4630      	mov	r0, r6
 8009426:	f000 f86b 	bl	8009500 <_isatty_r>
 800942a:	b128      	cbz	r0, 8009438 <__smakebuf_r+0x70>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	f023 0303 	bic.w	r3, r3, #3
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	431d      	orrs	r5, r3
 800943c:	81a5      	strh	r5, [r4, #12]
 800943e:	e7cf      	b.n	80093e0 <__smakebuf_r+0x18>

08009440 <_putc_r>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	460d      	mov	r5, r1
 8009444:	4614      	mov	r4, r2
 8009446:	4606      	mov	r6, r0
 8009448:	b118      	cbz	r0, 8009452 <_putc_r+0x12>
 800944a:	6a03      	ldr	r3, [r0, #32]
 800944c:	b90b      	cbnz	r3, 8009452 <_putc_r+0x12>
 800944e:	f7fe ff4b 	bl	80082e8 <__sinit>
 8009452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009454:	07d8      	lsls	r0, r3, #31
 8009456:	d405      	bmi.n	8009464 <_putc_r+0x24>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	0599      	lsls	r1, r3, #22
 800945c:	d402      	bmi.n	8009464 <_putc_r+0x24>
 800945e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009460:	f7ff fa25 	bl	80088ae <__retarget_lock_acquire_recursive>
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	3b01      	subs	r3, #1
 8009468:	2b00      	cmp	r3, #0
 800946a:	60a3      	str	r3, [r4, #8]
 800946c:	da05      	bge.n	800947a <_putc_r+0x3a>
 800946e:	69a2      	ldr	r2, [r4, #24]
 8009470:	4293      	cmp	r3, r2
 8009472:	db12      	blt.n	800949a <_putc_r+0x5a>
 8009474:	b2eb      	uxtb	r3, r5
 8009476:	2b0a      	cmp	r3, #10
 8009478:	d00f      	beq.n	800949a <_putc_r+0x5a>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	6022      	str	r2, [r4, #0]
 8009480:	701d      	strb	r5, [r3, #0]
 8009482:	b2ed      	uxtb	r5, r5
 8009484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009486:	07da      	lsls	r2, r3, #31
 8009488:	d405      	bmi.n	8009496 <_putc_r+0x56>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	059b      	lsls	r3, r3, #22
 800948e:	d402      	bmi.n	8009496 <_putc_r+0x56>
 8009490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009492:	f7ff fa0d 	bl	80088b0 <__retarget_lock_release_recursive>
 8009496:	4628      	mov	r0, r5
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	4629      	mov	r1, r5
 800949c:	4622      	mov	r2, r4
 800949e:	4630      	mov	r0, r6
 80094a0:	f7ff f831 	bl	8008506 <__swbuf_r>
 80094a4:	4605      	mov	r5, r0
 80094a6:	e7ed      	b.n	8009484 <_putc_r+0x44>

080094a8 <memmove>:
 80094a8:	4288      	cmp	r0, r1
 80094aa:	b510      	push	{r4, lr}
 80094ac:	eb01 0402 	add.w	r4, r1, r2
 80094b0:	d902      	bls.n	80094b8 <memmove+0x10>
 80094b2:	4284      	cmp	r4, r0
 80094b4:	4623      	mov	r3, r4
 80094b6:	d807      	bhi.n	80094c8 <memmove+0x20>
 80094b8:	1e43      	subs	r3, r0, #1
 80094ba:	42a1      	cmp	r1, r4
 80094bc:	d008      	beq.n	80094d0 <memmove+0x28>
 80094be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094c6:	e7f8      	b.n	80094ba <memmove+0x12>
 80094c8:	4402      	add	r2, r0
 80094ca:	4601      	mov	r1, r0
 80094cc:	428a      	cmp	r2, r1
 80094ce:	d100      	bne.n	80094d2 <memmove+0x2a>
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094da:	e7f7      	b.n	80094cc <memmove+0x24>

080094dc <_fstat_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d07      	ldr	r5, [pc, #28]	; (80094fc <_fstat_r+0x20>)
 80094e0:	2300      	movs	r3, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	4611      	mov	r1, r2
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	f7f9 fc25 	bl	8002d38 <_fstat>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	d102      	bne.n	80094f8 <_fstat_r+0x1c>
 80094f2:	682b      	ldr	r3, [r5, #0]
 80094f4:	b103      	cbz	r3, 80094f8 <_fstat_r+0x1c>
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	bd38      	pop	{r3, r4, r5, pc}
 80094fa:	bf00      	nop
 80094fc:	20002564 	.word	0x20002564

08009500 <_isatty_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <_isatty_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f9 fc24 	bl	8002d58 <_isatty>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_isatty_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_isatty_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20002564 	.word	0x20002564

08009520 <abort>:
 8009520:	b508      	push	{r3, lr}
 8009522:	2006      	movs	r0, #6
 8009524:	f000 f85a 	bl	80095dc <raise>
 8009528:	2001      	movs	r0, #1
 800952a:	f7f9 fbb6 	bl	8002c9a <_exit>

0800952e <_realloc_r>:
 800952e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	4680      	mov	r8, r0
 8009534:	4614      	mov	r4, r2
 8009536:	460e      	mov	r6, r1
 8009538:	b921      	cbnz	r1, 8009544 <_realloc_r+0x16>
 800953a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	4611      	mov	r1, r2
 8009540:	f7fe bdba 	b.w	80080b8 <_malloc_r>
 8009544:	b92a      	cbnz	r2, 8009552 <_realloc_r+0x24>
 8009546:	f7ff f9e1 	bl	800890c <_free_r>
 800954a:	4625      	mov	r5, r4
 800954c:	4628      	mov	r0, r5
 800954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009552:	f000 f85f 	bl	8009614 <_malloc_usable_size_r>
 8009556:	4284      	cmp	r4, r0
 8009558:	4607      	mov	r7, r0
 800955a:	d802      	bhi.n	8009562 <_realloc_r+0x34>
 800955c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009560:	d812      	bhi.n	8009588 <_realloc_r+0x5a>
 8009562:	4621      	mov	r1, r4
 8009564:	4640      	mov	r0, r8
 8009566:	f7fe fda7 	bl	80080b8 <_malloc_r>
 800956a:	4605      	mov	r5, r0
 800956c:	2800      	cmp	r0, #0
 800956e:	d0ed      	beq.n	800954c <_realloc_r+0x1e>
 8009570:	42bc      	cmp	r4, r7
 8009572:	4622      	mov	r2, r4
 8009574:	4631      	mov	r1, r6
 8009576:	bf28      	it	cs
 8009578:	463a      	movcs	r2, r7
 800957a:	f7ff f99a 	bl	80088b2 <memcpy>
 800957e:	4631      	mov	r1, r6
 8009580:	4640      	mov	r0, r8
 8009582:	f7ff f9c3 	bl	800890c <_free_r>
 8009586:	e7e1      	b.n	800954c <_realloc_r+0x1e>
 8009588:	4635      	mov	r5, r6
 800958a:	e7df      	b.n	800954c <_realloc_r+0x1e>

0800958c <_raise_r>:
 800958c:	291f      	cmp	r1, #31
 800958e:	b538      	push	{r3, r4, r5, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	d904      	bls.n	80095a0 <_raise_r+0x14>
 8009596:	2316      	movs	r3, #22
 8009598:	6003      	str	r3, [r0, #0]
 800959a:	f04f 30ff 	mov.w	r0, #4294967295
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095a2:	b112      	cbz	r2, 80095aa <_raise_r+0x1e>
 80095a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a8:	b94b      	cbnz	r3, 80095be <_raise_r+0x32>
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 f830 	bl	8009610 <_getpid_r>
 80095b0:	462a      	mov	r2, r5
 80095b2:	4601      	mov	r1, r0
 80095b4:	4620      	mov	r0, r4
 80095b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ba:	f000 b817 	b.w	80095ec <_kill_r>
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d00a      	beq.n	80095d8 <_raise_r+0x4c>
 80095c2:	1c59      	adds	r1, r3, #1
 80095c4:	d103      	bne.n	80095ce <_raise_r+0x42>
 80095c6:	2316      	movs	r3, #22
 80095c8:	6003      	str	r3, [r0, #0]
 80095ca:	2001      	movs	r0, #1
 80095cc:	e7e7      	b.n	800959e <_raise_r+0x12>
 80095ce:	2400      	movs	r4, #0
 80095d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095d4:	4628      	mov	r0, r5
 80095d6:	4798      	blx	r3
 80095d8:	2000      	movs	r0, #0
 80095da:	e7e0      	b.n	800959e <_raise_r+0x12>

080095dc <raise>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <raise+0xc>)
 80095de:	4601      	mov	r1, r0
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f7ff bfd3 	b.w	800958c <_raise_r>
 80095e6:	bf00      	nop
 80095e8:	20000088 	.word	0x20000088

080095ec <_kill_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d07      	ldr	r5, [pc, #28]	; (800960c <_kill_r+0x20>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	4611      	mov	r1, r2
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	f7f9 fb3e 	bl	8002c7a <_kill>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	d102      	bne.n	8009608 <_kill_r+0x1c>
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	b103      	cbz	r3, 8009608 <_kill_r+0x1c>
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	bf00      	nop
 800960c:	20002564 	.word	0x20002564

08009610 <_getpid_r>:
 8009610:	f7f9 bb2b 	b.w	8002c6a <_getpid>

08009614 <_malloc_usable_size_r>:
 8009614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009618:	1f18      	subs	r0, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfbc      	itt	lt
 800961e:	580b      	ldrlt	r3, [r1, r0]
 8009620:	18c0      	addlt	r0, r0, r3
 8009622:	4770      	bx	lr

08009624 <_init>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr

08009630 <_fini>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr
