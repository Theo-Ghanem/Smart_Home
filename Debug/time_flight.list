
time_flight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b4  080064b4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064bc  080064bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080064c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000060  08006524  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006524  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f0c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f1  00000000  00000000  00030fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae1  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a612  00000000  00000000  00034bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012172  00000000  00000000  0005f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001032e8  00000000  00000000  00071335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004088  00000000  00000000  00174620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001786a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080063e8 	.word	0x080063e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	080063e8 	.word	0x080063e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__gedf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpdf2+0x4>
 800061e:	bf00      	nop

08000620 <__ledf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpdf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpdf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800063c:	bf18      	it	ne
 800063e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000642:	d01b      	beq.n	800067c <__cmpdf2+0x54>
 8000644:	b001      	add	sp, #4
 8000646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800064a:	bf0c      	ite	eq
 800064c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000650:	ea91 0f03 	teqne	r1, r3
 8000654:	bf02      	ittt	eq
 8000656:	ea90 0f02 	teqeq	r0, r2
 800065a:	2000      	moveq	r0, #0
 800065c:	4770      	bxeq	lr
 800065e:	f110 0f00 	cmn.w	r0, #0
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf58      	it	pl
 8000668:	4299      	cmppl	r1, r3
 800066a:	bf08      	it	eq
 800066c:	4290      	cmpeq	r0, r2
 800066e:	bf2c      	ite	cs
 8000670:	17d8      	asrcs	r0, r3, #31
 8000672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000676:	f040 0001 	orr.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000684:	d102      	bne.n	800068c <__cmpdf2+0x64>
 8000686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800068a:	d107      	bne.n	800069c <__cmpdf2+0x74>
 800068c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d1d6      	bne.n	8000644 <__cmpdf2+0x1c>
 8000696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800069a:	d0d3      	beq.n	8000644 <__cmpdf2+0x1c>
 800069c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__aeabi_cdrcmple>:
 80006a4:	4684      	mov	ip, r0
 80006a6:	4610      	mov	r0, r2
 80006a8:	4662      	mov	r2, ip
 80006aa:	468c      	mov	ip, r1
 80006ac:	4619      	mov	r1, r3
 80006ae:	4663      	mov	r3, ip
 80006b0:	e000      	b.n	80006b4 <__aeabi_cdcmpeq>
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdcmpeq>:
 80006b4:	b501      	push	{r0, lr}
 80006b6:	f7ff ffb7 	bl	8000628 <__cmpdf2>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	bf48      	it	mi
 80006be:	f110 0f00 	cmnmi.w	r0, #0
 80006c2:	bd01      	pop	{r0, pc}

080006c4 <__aeabi_dcmpeq>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff fff4 	bl	80006b4 <__aeabi_cdcmpeq>
 80006cc:	bf0c      	ite	eq
 80006ce:	2001      	moveq	r0, #1
 80006d0:	2000      	movne	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_dcmplt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffea 	bl	80006b4 <__aeabi_cdcmpeq>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_dcmple>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffe0 	bl	80006b4 <__aeabi_cdcmpeq>
 80006f4:	bf94      	ite	ls
 80006f6:	2001      	movls	r0, #1
 80006f8:	2000      	movhi	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_dcmpge>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffce 	bl	80006a4 <__aeabi_cdrcmple>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_dcmpgt>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffc4 	bl	80006a4 <__aeabi_cdrcmple>
 800071c:	bf34      	ite	cc
 800071e:	2001      	movcc	r0, #1
 8000720:	2000      	movcs	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b970 	b.w	8000a20 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9e08      	ldr	r6, [sp, #32]
 800075e:	460d      	mov	r5, r1
 8000760:	4604      	mov	r4, r0
 8000762:	460f      	mov	r7, r1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d14a      	bne.n	80007fe <__udivmoddi4+0xa6>
 8000768:	428a      	cmp	r2, r1
 800076a:	4694      	mov	ip, r2
 800076c:	d965      	bls.n	800083a <__udivmoddi4+0xe2>
 800076e:	fab2 f382 	clz	r3, r2
 8000772:	b143      	cbz	r3, 8000786 <__udivmoddi4+0x2e>
 8000774:	fa02 fc03 	lsl.w	ip, r2, r3
 8000778:	f1c3 0220 	rsb	r2, r3, #32
 800077c:	409f      	lsls	r7, r3
 800077e:	fa20 f202 	lsr.w	r2, r0, r2
 8000782:	4317      	orrs	r7, r2
 8000784:	409c      	lsls	r4, r3
 8000786:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800078a:	fa1f f58c 	uxth.w	r5, ip
 800078e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000792:	0c22      	lsrs	r2, r4, #16
 8000794:	fb0e 7711 	mls	r7, lr, r1, r7
 8000798:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800079c:	fb01 f005 	mul.w	r0, r1, r5
 80007a0:	4290      	cmp	r0, r2
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x62>
 80007a4:	eb1c 0202 	adds.w	r2, ip, r2
 80007a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007ac:	f080 811c 	bcs.w	80009e8 <__udivmoddi4+0x290>
 80007b0:	4290      	cmp	r0, r2
 80007b2:	f240 8119 	bls.w	80009e8 <__udivmoddi4+0x290>
 80007b6:	3902      	subs	r1, #2
 80007b8:	4462      	add	r2, ip
 80007ba:	1a12      	subs	r2, r2, r0
 80007bc:	b2a4      	uxth	r4, r4
 80007be:	fbb2 f0fe 	udiv	r0, r2, lr
 80007c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007ca:	fb00 f505 	mul.w	r5, r0, r5
 80007ce:	42a5      	cmp	r5, r4
 80007d0:	d90a      	bls.n	80007e8 <__udivmoddi4+0x90>
 80007d2:	eb1c 0404 	adds.w	r4, ip, r4
 80007d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007da:	f080 8107 	bcs.w	80009ec <__udivmoddi4+0x294>
 80007de:	42a5      	cmp	r5, r4
 80007e0:	f240 8104 	bls.w	80009ec <__udivmoddi4+0x294>
 80007e4:	4464      	add	r4, ip
 80007e6:	3802      	subs	r0, #2
 80007e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ec:	1b64      	subs	r4, r4, r5
 80007ee:	2100      	movs	r1, #0
 80007f0:	b11e      	cbz	r6, 80007fa <__udivmoddi4+0xa2>
 80007f2:	40dc      	lsrs	r4, r3
 80007f4:	2300      	movs	r3, #0
 80007f6:	e9c6 4300 	strd	r4, r3, [r6]
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fe:	428b      	cmp	r3, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0xbc>
 8000802:	2e00      	cmp	r6, #0
 8000804:	f000 80ed 	beq.w	80009e2 <__udivmoddi4+0x28a>
 8000808:	2100      	movs	r1, #0
 800080a:	e9c6 0500 	strd	r0, r5, [r6]
 800080e:	4608      	mov	r0, r1
 8000810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000814:	fab3 f183 	clz	r1, r3
 8000818:	2900      	cmp	r1, #0
 800081a:	d149      	bne.n	80008b0 <__udivmoddi4+0x158>
 800081c:	42ab      	cmp	r3, r5
 800081e:	d302      	bcc.n	8000826 <__udivmoddi4+0xce>
 8000820:	4282      	cmp	r2, r0
 8000822:	f200 80f8 	bhi.w	8000a16 <__udivmoddi4+0x2be>
 8000826:	1a84      	subs	r4, r0, r2
 8000828:	eb65 0203 	sbc.w	r2, r5, r3
 800082c:	2001      	movs	r0, #1
 800082e:	4617      	mov	r7, r2
 8000830:	2e00      	cmp	r6, #0
 8000832:	d0e2      	beq.n	80007fa <__udivmoddi4+0xa2>
 8000834:	e9c6 4700 	strd	r4, r7, [r6]
 8000838:	e7df      	b.n	80007fa <__udivmoddi4+0xa2>
 800083a:	b902      	cbnz	r2, 800083e <__udivmoddi4+0xe6>
 800083c:	deff      	udf	#255	; 0xff
 800083e:	fab2 f382 	clz	r3, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	f040 8090 	bne.w	8000968 <__udivmoddi4+0x210>
 8000848:	1a8a      	subs	r2, r1, r2
 800084a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800084e:	fa1f fe8c 	uxth.w	lr, ip
 8000852:	2101      	movs	r1, #1
 8000854:	fbb2 f5f7 	udiv	r5, r2, r7
 8000858:	fb07 2015 	mls	r0, r7, r5, r2
 800085c:	0c22      	lsrs	r2, r4, #16
 800085e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000862:	fb0e f005 	mul.w	r0, lr, r5
 8000866:	4290      	cmp	r0, r2
 8000868:	d908      	bls.n	800087c <__udivmoddi4+0x124>
 800086a:	eb1c 0202 	adds.w	r2, ip, r2
 800086e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x122>
 8000874:	4290      	cmp	r0, r2
 8000876:	f200 80cb 	bhi.w	8000a10 <__udivmoddi4+0x2b8>
 800087a:	4645      	mov	r5, r8
 800087c:	1a12      	subs	r2, r2, r0
 800087e:	b2a4      	uxth	r4, r4
 8000880:	fbb2 f0f7 	udiv	r0, r2, r7
 8000884:	fb07 2210 	mls	r2, r7, r0, r2
 8000888:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800088c:	fb0e fe00 	mul.w	lr, lr, r0
 8000890:	45a6      	cmp	lr, r4
 8000892:	d908      	bls.n	80008a6 <__udivmoddi4+0x14e>
 8000894:	eb1c 0404 	adds.w	r4, ip, r4
 8000898:	f100 32ff 	add.w	r2, r0, #4294967295
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0x14c>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f200 80bb 	bhi.w	8000a1a <__udivmoddi4+0x2c2>
 80008a4:	4610      	mov	r0, r2
 80008a6:	eba4 040e 	sub.w	r4, r4, lr
 80008aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008ae:	e79f      	b.n	80007f0 <__udivmoddi4+0x98>
 80008b0:	f1c1 0720 	rsb	r7, r1, #32
 80008b4:	408b      	lsls	r3, r1
 80008b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80008ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80008be:	fa05 f401 	lsl.w	r4, r5, r1
 80008c2:	fa20 f307 	lsr.w	r3, r0, r7
 80008c6:	40fd      	lsrs	r5, r7
 80008c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008cc:	4323      	orrs	r3, r4
 80008ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80008d2:	fa1f fe8c 	uxth.w	lr, ip
 80008d6:	fb09 5518 	mls	r5, r9, r8, r5
 80008da:	0c1c      	lsrs	r4, r3, #16
 80008dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008e0:	fb08 f50e 	mul.w	r5, r8, lr
 80008e4:	42a5      	cmp	r5, r4
 80008e6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ea:	fa00 f001 	lsl.w	r0, r0, r1
 80008ee:	d90b      	bls.n	8000908 <__udivmoddi4+0x1b0>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008f8:	f080 8088 	bcs.w	8000a0c <__udivmoddi4+0x2b4>
 80008fc:	42a5      	cmp	r5, r4
 80008fe:	f240 8085 	bls.w	8000a0c <__udivmoddi4+0x2b4>
 8000902:	f1a8 0802 	sub.w	r8, r8, #2
 8000906:	4464      	add	r4, ip
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	b29d      	uxth	r5, r3
 800090c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000910:	fb09 4413 	mls	r4, r9, r3, r4
 8000914:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000918:	fb03 fe0e 	mul.w	lr, r3, lr
 800091c:	45a6      	cmp	lr, r4
 800091e:	d908      	bls.n	8000932 <__udivmoddi4+0x1da>
 8000920:	eb1c 0404 	adds.w	r4, ip, r4
 8000924:	f103 35ff 	add.w	r5, r3, #4294967295
 8000928:	d26c      	bcs.n	8000a04 <__udivmoddi4+0x2ac>
 800092a:	45a6      	cmp	lr, r4
 800092c:	d96a      	bls.n	8000a04 <__udivmoddi4+0x2ac>
 800092e:	3b02      	subs	r3, #2
 8000930:	4464      	add	r4, ip
 8000932:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000936:	fba3 9502 	umull	r9, r5, r3, r2
 800093a:	eba4 040e 	sub.w	r4, r4, lr
 800093e:	42ac      	cmp	r4, r5
 8000940:	46c8      	mov	r8, r9
 8000942:	46ae      	mov	lr, r5
 8000944:	d356      	bcc.n	80009f4 <__udivmoddi4+0x29c>
 8000946:	d053      	beq.n	80009f0 <__udivmoddi4+0x298>
 8000948:	b156      	cbz	r6, 8000960 <__udivmoddi4+0x208>
 800094a:	ebb0 0208 	subs.w	r2, r0, r8
 800094e:	eb64 040e 	sbc.w	r4, r4, lr
 8000952:	fa04 f707 	lsl.w	r7, r4, r7
 8000956:	40ca      	lsrs	r2, r1
 8000958:	40cc      	lsrs	r4, r1
 800095a:	4317      	orrs	r7, r2
 800095c:	e9c6 7400 	strd	r7, r4, [r6]
 8000960:	4618      	mov	r0, r3
 8000962:	2100      	movs	r1, #0
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	f1c3 0120 	rsb	r1, r3, #32
 800096c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000970:	fa20 f201 	lsr.w	r2, r0, r1
 8000974:	fa25 f101 	lsr.w	r1, r5, r1
 8000978:	409d      	lsls	r5, r3
 800097a:	432a      	orrs	r2, r5
 800097c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fbb1 f0f7 	udiv	r0, r1, r7
 8000988:	fb07 1510 	mls	r5, r7, r0, r1
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000992:	fb00 f50e 	mul.w	r5, r0, lr
 8000996:	428d      	cmp	r5, r1
 8000998:	fa04 f403 	lsl.w	r4, r4, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x258>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009a6:	d22f      	bcs.n	8000a08 <__udivmoddi4+0x2b0>
 80009a8:	428d      	cmp	r5, r1
 80009aa:	d92d      	bls.n	8000a08 <__udivmoddi4+0x2b0>
 80009ac:	3802      	subs	r0, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1b49      	subs	r1, r1, r5
 80009b2:	b292      	uxth	r2, r2
 80009b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80009b8:	fb07 1115 	mls	r1, r7, r5, r1
 80009bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c0:	fb05 f10e 	mul.w	r1, r5, lr
 80009c4:	4291      	cmp	r1, r2
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x282>
 80009c8:	eb1c 0202 	adds.w	r2, ip, r2
 80009cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d0:	d216      	bcs.n	8000a00 <__udivmoddi4+0x2a8>
 80009d2:	4291      	cmp	r1, r2
 80009d4:	d914      	bls.n	8000a00 <__udivmoddi4+0x2a8>
 80009d6:	3d02      	subs	r5, #2
 80009d8:	4462      	add	r2, ip
 80009da:	1a52      	subs	r2, r2, r1
 80009dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009e0:	e738      	b.n	8000854 <__udivmoddi4+0xfc>
 80009e2:	4631      	mov	r1, r6
 80009e4:	4630      	mov	r0, r6
 80009e6:	e708      	b.n	80007fa <__udivmoddi4+0xa2>
 80009e8:	4639      	mov	r1, r7
 80009ea:	e6e6      	b.n	80007ba <__udivmoddi4+0x62>
 80009ec:	4610      	mov	r0, r2
 80009ee:	e6fb      	b.n	80007e8 <__udivmoddi4+0x90>
 80009f0:	4548      	cmp	r0, r9
 80009f2:	d2a9      	bcs.n	8000948 <__udivmoddi4+0x1f0>
 80009f4:	ebb9 0802 	subs.w	r8, r9, r2
 80009f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009fc:	3b01      	subs	r3, #1
 80009fe:	e7a3      	b.n	8000948 <__udivmoddi4+0x1f0>
 8000a00:	4645      	mov	r5, r8
 8000a02:	e7ea      	b.n	80009da <__udivmoddi4+0x282>
 8000a04:	462b      	mov	r3, r5
 8000a06:	e794      	b.n	8000932 <__udivmoddi4+0x1da>
 8000a08:	4640      	mov	r0, r8
 8000a0a:	e7d1      	b.n	80009b0 <__udivmoddi4+0x258>
 8000a0c:	46d0      	mov	r8, sl
 8000a0e:	e77b      	b.n	8000908 <__udivmoddi4+0x1b0>
 8000a10:	3d02      	subs	r5, #2
 8000a12:	4462      	add	r2, ip
 8000a14:	e732      	b.n	800087c <__udivmoddi4+0x124>
 8000a16:	4608      	mov	r0, r1
 8000a18:	e70a      	b.n	8000830 <__udivmoddi4+0xd8>
 8000a1a:	4464      	add	r4, ip
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	e742      	b.n	80008a6 <__udivmoddi4+0x14e>

08000a20 <__aeabi_idiv0>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <writeReg+0x44>)
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <writeReg+0x48>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <writeReg+0x44>)
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <writeReg+0x4c>)
 8000a54:	f001 fefa 	bl	800284c <HAL_I2C_Mem_Write>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <writeReg+0x50>)
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000dc 	.word	0x200000dc
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000088 	.word	0x20000088
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
 8000a88:	88ba      	ldrh	r2, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <writeReg16Bit+0x44>)
 8000a8c:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <writeReg16Bit+0x48>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b299      	uxth	r1, r3
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	2364      	movs	r3, #100	; 0x64
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <writeReg16Bit+0x44>)
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <writeReg16Bit+0x4c>)
 8000aa8:	f001 fed0 	bl	800284c <HAL_I2C_Mem_Write>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <writeReg16Bit+0x50>)
 8000ab2:	701a      	strb	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000dc 	.word	0x200000dc
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000088 	.word	0x20000088
 8000ac8:	200000e0 	.word	0x200000e0

08000acc <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <readReg+0x48>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	b299      	uxth	r1, r3
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	2301      	movs	r3, #1
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <readReg+0x4c>)
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <readReg+0x50>)
 8000af6:	f001 ffbd 	bl	8002a74 <HAL_I2C_Mem_Read>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <readReg+0x54>)
 8000b00:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <readReg+0x4c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	73fb      	strb	r3, [r7, #15]

  return value;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200000dc 	.word	0x200000dc
 8000b1c:	20000088 	.word	0x20000088
 8000b20:	200000e0 	.word	0x200000e0

08000b24 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <readReg16Bit+0x48>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2302      	movs	r3, #2
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <readReg16Bit+0x4c>)
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <readReg16Bit+0x50>)
 8000b4e:	f001 ff91 	bl	8002a74 <HAL_I2C_Mem_Read>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <readReg16Bit+0x54>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <readReg16Bit+0x4c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000b5e:	81fb      	strh	r3, [r7, #14]

  return value;
 8000b60:	89fb      	ldrh	r3, [r7, #14]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	200000dc 	.word	0x200000dc
 8000b74:	20000088 	.word	0x20000088
 8000b78:	200000e0 	.word	0x200000e0

08000b7c <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	71bb      	strb	r3, [r7, #6]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3

  memcpy(msgBuffer, src, 4);
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <writeMulti+0x4c>)
 8000b94:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <writeMulti+0x50>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	9002      	str	r0, [sp, #8]
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <writeMulti+0x4c>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <writeMulti+0x54>)
 8000bb2:	f001 fe4b 	bl	800284c <HAL_I2C_Mem_Write>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <writeMulti+0x58>)
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000dc 	.word	0x200000dc
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000088 	.word	0x20000088
 8000bd4:	200000e0 	.word	0x200000e0

08000bd8 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <readMulti+0x48>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	b299      	uxth	r1, r3
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	9002      	str	r0, [sp, #8]
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <readMulti+0x4c>)
 8000c0a:	f001 ff33 	bl	8002a74 <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <readMulti+0x50>)
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000088 	.word	0x20000088
 8000c28:	200000e0 	.word	0x200000e0

08000c2c <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	4854      	ldr	r0, [pc, #336]	; (8000d90 <initVL53L0X+0x164>)
 8000c3e:	f004 ff83 	bl	8005b48 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <initVL53L0X+0x168>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <initVL53L0X+0x168>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <initVL53L0X+0x168>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8000c54:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <initVL53L0X+0x168>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00a      	beq.n	8000c76 <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8000c60:	2089      	movs	r0, #137	; 0x89
 8000c62:	f7ff ff33 	bl	8000acc <readReg>
 8000c66:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2089      	movs	r0, #137	; 0x89
 8000c72:	f7ff fed7 	bl	8000a24 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2088      	movs	r0, #136	; 0x88
 8000c7a:	f7ff fed3 	bl	8000a24 <writeReg>

  writeReg(0x80, 0x01);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2080      	movs	r0, #128	; 0x80
 8000c82:	f7ff fecf 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x01);
 8000c86:	2101      	movs	r1, #1
 8000c88:	20ff      	movs	r0, #255	; 0xff
 8000c8a:	f7ff fecb 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x00);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fec7 	bl	8000a24 <writeReg>
  g_stopVariable = readReg(0x91);
 8000c96:	2091      	movs	r0, #145	; 0x91
 8000c98:	f7ff ff18 	bl	8000acc <readReg>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <initVL53L0X+0x16c>)
 8000ca2:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff febc 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x00);
 8000cac:	2100      	movs	r1, #0
 8000cae:	20ff      	movs	r0, #255	; 0xff
 8000cb0:	f7ff feb8 	bl	8000a24 <writeReg>
  writeReg(0x80, 0x00);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2080      	movs	r0, #128	; 0x80
 8000cb8:	f7ff feb4 	bl	8000a24 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8000cbc:	2060      	movs	r0, #96	; 0x60
 8000cbe:	f7ff ff05 	bl	8000acc <readReg>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f043 0312 	orr.w	r3, r3, #18
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2060      	movs	r0, #96	; 0x60
 8000cce:	f7ff fea9 	bl	8000a24 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8000cd2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000cd6:	f000 fa07 	bl	80010e8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fea1 	bl	8000a24 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8000ce2:	f107 0213 	add.w	r2, r7, #19
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fd6d 	bl	80017cc <getSpadInfo>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <initVL53L0X+0xd0>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e1ee      	b.n	80010da <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2206      	movs	r2, #6
 8000d02:	4619      	mov	r1, r3
 8000d04:	20b0      	movs	r0, #176	; 0xb0
 8000d06:	f7ff ff67 	bl	8000bd8 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	f7ff fe89 	bl	8000a24 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000d12:	2100      	movs	r1, #0
 8000d14:	204f      	movs	r0, #79	; 0x4f
 8000d16:	f7ff fe85 	bl	8000a24 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000d1a:	212c      	movs	r1, #44	; 0x2c
 8000d1c:	204e      	movs	r0, #78	; 0x4e
 8000d1e:	f7ff fe81 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x00);
 8000d22:	2100      	movs	r1, #0
 8000d24:	20ff      	movs	r0, #255	; 0xff
 8000d26:	f7ff fe7d 	bl	8000a24 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000d2a:	21b4      	movs	r1, #180	; 0xb4
 8000d2c:	20b6      	movs	r0, #182	; 0xb6
 8000d2e:	f7ff fe79 	bl	8000a24 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000d32:	7cfb      	ldrb	r3, [r7, #19]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <initVL53L0X+0x110>
 8000d38:	230c      	movs	r3, #12
 8000d3a:	e000      	b.n	8000d3e <initVL53L0X+0x112>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	75bb      	strb	r3, [r7, #22]
 8000d48:	e03f      	b.n	8000dca <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000d4a:	7dba      	ldrb	r2, [r7, #22]
 8000d4c:	7d7b      	ldrb	r3, [r7, #21]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d303      	bcc.n	8000d5a <initVL53L0X+0x12e>
 8000d52:	7d3b      	ldrb	r3, [r7, #20]
 8000d54:	7dfa      	ldrb	r2, [r7, #23]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d120      	bne.n	8000d9c <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000d5a:	7dbb      	ldrb	r3, [r7, #22]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	b2d8      	uxtb	r0, r3
 8000d60:	4603      	mov	r3, r0
 8000d62:	3318      	adds	r3, #24
 8000d64:	443b      	add	r3, r7
 8000d66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	3318      	adds	r3, #24
 8000d88:	443b      	add	r3, r7
 8000d8a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000d8e:	e019      	b.n	8000dc4 <initVL53L0X+0x198>
 8000d90:	20000088 	.word	0x20000088
 8000d94:	200000dc 	.word	0x200000dc
 8000d98:	20000082 	.word	0x20000082
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000d9c:	7dbb      	ldrb	r3, [r7, #22]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	3318      	adds	r3, #24
 8000da4:	443b      	add	r3, r7
 8000da6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000daa:	461a      	mov	r2, r3
 8000dac:	7dbb      	ldrb	r3, [r7, #22]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	fa42 f303 	asr.w	r3, r2, r3
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000dc4:	7dbb      	ldrb	r3, [r7, #22]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	75bb      	strb	r3, [r7, #22]
 8000dca:	7dbb      	ldrb	r3, [r7, #22]
 8000dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8000dce:	d9bc      	bls.n	8000d4a <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	20b0      	movs	r0, #176	; 0xb0
 8000dda:	f7ff fecf 	bl	8000b7c <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8000dde:	2101      	movs	r1, #1
 8000de0:	20ff      	movs	r0, #255	; 0xff
 8000de2:	f7ff fe1f 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x00);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fe1b 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 8000dee:	2100      	movs	r1, #0
 8000df0:	20ff      	movs	r0, #255	; 0xff
 8000df2:	f7ff fe17 	bl	8000a24 <writeReg>
  writeReg(0x09, 0x00);
 8000df6:	2100      	movs	r1, #0
 8000df8:	2009      	movs	r0, #9
 8000dfa:	f7ff fe13 	bl	8000a24 <writeReg>
  writeReg(0x10, 0x00);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2010      	movs	r0, #16
 8000e02:	f7ff fe0f 	bl	8000a24 <writeReg>
  writeReg(0x11, 0x00);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2011      	movs	r0, #17
 8000e0a:	f7ff fe0b 	bl	8000a24 <writeReg>

  writeReg(0x24, 0x01);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2024      	movs	r0, #36	; 0x24
 8000e12:	f7ff fe07 	bl	8000a24 <writeReg>
  writeReg(0x25, 0xFF);
 8000e16:	21ff      	movs	r1, #255	; 0xff
 8000e18:	2025      	movs	r0, #37	; 0x25
 8000e1a:	f7ff fe03 	bl	8000a24 <writeReg>
  writeReg(0x75, 0x00);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2075      	movs	r0, #117	; 0x75
 8000e22:	f7ff fdff 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 8000e26:	2101      	movs	r1, #1
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	f7ff fdfb 	bl	8000a24 <writeReg>
  writeReg(0x4E, 0x2C);
 8000e2e:	212c      	movs	r1, #44	; 0x2c
 8000e30:	204e      	movs	r0, #78	; 0x4e
 8000e32:	f7ff fdf7 	bl	8000a24 <writeReg>
  writeReg(0x48, 0x00);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2048      	movs	r0, #72	; 0x48
 8000e3a:	f7ff fdf3 	bl	8000a24 <writeReg>
  writeReg(0x30, 0x20);
 8000e3e:	2120      	movs	r1, #32
 8000e40:	2030      	movs	r0, #48	; 0x30
 8000e42:	f7ff fdef 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 8000e46:	2100      	movs	r1, #0
 8000e48:	20ff      	movs	r0, #255	; 0xff
 8000e4a:	f7ff fdeb 	bl	8000a24 <writeReg>
  writeReg(0x30, 0x09);
 8000e4e:	2109      	movs	r1, #9
 8000e50:	2030      	movs	r0, #48	; 0x30
 8000e52:	f7ff fde7 	bl	8000a24 <writeReg>
  writeReg(0x54, 0x00);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2054      	movs	r0, #84	; 0x54
 8000e5a:	f7ff fde3 	bl	8000a24 <writeReg>
  writeReg(0x31, 0x04);
 8000e5e:	2104      	movs	r1, #4
 8000e60:	2031      	movs	r0, #49	; 0x31
 8000e62:	f7ff fddf 	bl	8000a24 <writeReg>
  writeReg(0x32, 0x03);
 8000e66:	2103      	movs	r1, #3
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f7ff fddb 	bl	8000a24 <writeReg>
  writeReg(0x40, 0x83);
 8000e6e:	2183      	movs	r1, #131	; 0x83
 8000e70:	2040      	movs	r0, #64	; 0x40
 8000e72:	f7ff fdd7 	bl	8000a24 <writeReg>
  writeReg(0x46, 0x25);
 8000e76:	2125      	movs	r1, #37	; 0x25
 8000e78:	2046      	movs	r0, #70	; 0x46
 8000e7a:	f7ff fdd3 	bl	8000a24 <writeReg>
  writeReg(0x60, 0x00);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2060      	movs	r0, #96	; 0x60
 8000e82:	f7ff fdcf 	bl	8000a24 <writeReg>
  writeReg(0x27, 0x00);
 8000e86:	2100      	movs	r1, #0
 8000e88:	2027      	movs	r0, #39	; 0x27
 8000e8a:	f7ff fdcb 	bl	8000a24 <writeReg>
  writeReg(0x50, 0x06);
 8000e8e:	2106      	movs	r1, #6
 8000e90:	2050      	movs	r0, #80	; 0x50
 8000e92:	f7ff fdc7 	bl	8000a24 <writeReg>
  writeReg(0x51, 0x00);
 8000e96:	2100      	movs	r1, #0
 8000e98:	2051      	movs	r0, #81	; 0x51
 8000e9a:	f7ff fdc3 	bl	8000a24 <writeReg>
  writeReg(0x52, 0x96);
 8000e9e:	2196      	movs	r1, #150	; 0x96
 8000ea0:	2052      	movs	r0, #82	; 0x52
 8000ea2:	f7ff fdbf 	bl	8000a24 <writeReg>
  writeReg(0x56, 0x08);
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	2056      	movs	r0, #86	; 0x56
 8000eaa:	f7ff fdbb 	bl	8000a24 <writeReg>
  writeReg(0x57, 0x30);
 8000eae:	2130      	movs	r1, #48	; 0x30
 8000eb0:	2057      	movs	r0, #87	; 0x57
 8000eb2:	f7ff fdb7 	bl	8000a24 <writeReg>
  writeReg(0x61, 0x00);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2061      	movs	r0, #97	; 0x61
 8000eba:	f7ff fdb3 	bl	8000a24 <writeReg>
  writeReg(0x62, 0x00);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2062      	movs	r0, #98	; 0x62
 8000ec2:	f7ff fdaf 	bl	8000a24 <writeReg>
  writeReg(0x64, 0x00);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f7ff fdab 	bl	8000a24 <writeReg>
  writeReg(0x65, 0x00);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2065      	movs	r0, #101	; 0x65
 8000ed2:	f7ff fda7 	bl	8000a24 <writeReg>
  writeReg(0x66, 0xA0);
 8000ed6:	21a0      	movs	r1, #160	; 0xa0
 8000ed8:	2066      	movs	r0, #102	; 0x66
 8000eda:	f7ff fda3 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	20ff      	movs	r0, #255	; 0xff
 8000ee2:	f7ff fd9f 	bl	8000a24 <writeReg>
  writeReg(0x22, 0x32);
 8000ee6:	2132      	movs	r1, #50	; 0x32
 8000ee8:	2022      	movs	r0, #34	; 0x22
 8000eea:	f7ff fd9b 	bl	8000a24 <writeReg>
  writeReg(0x47, 0x14);
 8000eee:	2114      	movs	r1, #20
 8000ef0:	2047      	movs	r0, #71	; 0x47
 8000ef2:	f7ff fd97 	bl	8000a24 <writeReg>
  writeReg(0x49, 0xFF);
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	2049      	movs	r0, #73	; 0x49
 8000efa:	f7ff fd93 	bl	8000a24 <writeReg>
  writeReg(0x4A, 0x00);
 8000efe:	2100      	movs	r1, #0
 8000f00:	204a      	movs	r0, #74	; 0x4a
 8000f02:	f7ff fd8f 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 8000f06:	2100      	movs	r1, #0
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	f7ff fd8b 	bl	8000a24 <writeReg>
  writeReg(0x7A, 0x0A);
 8000f0e:	210a      	movs	r1, #10
 8000f10:	207a      	movs	r0, #122	; 0x7a
 8000f12:	f7ff fd87 	bl	8000a24 <writeReg>
  writeReg(0x7B, 0x00);
 8000f16:	2100      	movs	r1, #0
 8000f18:	207b      	movs	r0, #123	; 0x7b
 8000f1a:	f7ff fd83 	bl	8000a24 <writeReg>
  writeReg(0x78, 0x21);
 8000f1e:	2121      	movs	r1, #33	; 0x21
 8000f20:	2078      	movs	r0, #120	; 0x78
 8000f22:	f7ff fd7f 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 8000f26:	2101      	movs	r1, #1
 8000f28:	20ff      	movs	r0, #255	; 0xff
 8000f2a:	f7ff fd7b 	bl	8000a24 <writeReg>
  writeReg(0x23, 0x34);
 8000f2e:	2134      	movs	r1, #52	; 0x34
 8000f30:	2023      	movs	r0, #35	; 0x23
 8000f32:	f7ff fd77 	bl	8000a24 <writeReg>
  writeReg(0x42, 0x00);
 8000f36:	2100      	movs	r1, #0
 8000f38:	2042      	movs	r0, #66	; 0x42
 8000f3a:	f7ff fd73 	bl	8000a24 <writeReg>
  writeReg(0x44, 0xFF);
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	2044      	movs	r0, #68	; 0x44
 8000f42:	f7ff fd6f 	bl	8000a24 <writeReg>
  writeReg(0x45, 0x26);
 8000f46:	2126      	movs	r1, #38	; 0x26
 8000f48:	2045      	movs	r0, #69	; 0x45
 8000f4a:	f7ff fd6b 	bl	8000a24 <writeReg>
  writeReg(0x46, 0x05);
 8000f4e:	2105      	movs	r1, #5
 8000f50:	2046      	movs	r0, #70	; 0x46
 8000f52:	f7ff fd67 	bl	8000a24 <writeReg>
  writeReg(0x40, 0x40);
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	2040      	movs	r0, #64	; 0x40
 8000f5a:	f7ff fd63 	bl	8000a24 <writeReg>
  writeReg(0x0E, 0x06);
 8000f5e:	2106      	movs	r1, #6
 8000f60:	200e      	movs	r0, #14
 8000f62:	f7ff fd5f 	bl	8000a24 <writeReg>
  writeReg(0x20, 0x1A);
 8000f66:	211a      	movs	r1, #26
 8000f68:	2020      	movs	r0, #32
 8000f6a:	f7ff fd5b 	bl	8000a24 <writeReg>
  writeReg(0x43, 0x40);
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	2043      	movs	r0, #67	; 0x43
 8000f72:	f7ff fd57 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 8000f76:	2100      	movs	r1, #0
 8000f78:	20ff      	movs	r0, #255	; 0xff
 8000f7a:	f7ff fd53 	bl	8000a24 <writeReg>
  writeReg(0x34, 0x03);
 8000f7e:	2103      	movs	r1, #3
 8000f80:	2034      	movs	r0, #52	; 0x34
 8000f82:	f7ff fd4f 	bl	8000a24 <writeReg>
  writeReg(0x35, 0x44);
 8000f86:	2144      	movs	r1, #68	; 0x44
 8000f88:	2035      	movs	r0, #53	; 0x35
 8000f8a:	f7ff fd4b 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	20ff      	movs	r0, #255	; 0xff
 8000f92:	f7ff fd47 	bl	8000a24 <writeReg>
  writeReg(0x31, 0x04);
 8000f96:	2104      	movs	r1, #4
 8000f98:	2031      	movs	r0, #49	; 0x31
 8000f9a:	f7ff fd43 	bl	8000a24 <writeReg>
  writeReg(0x4B, 0x09);
 8000f9e:	2109      	movs	r1, #9
 8000fa0:	204b      	movs	r0, #75	; 0x4b
 8000fa2:	f7ff fd3f 	bl	8000a24 <writeReg>
  writeReg(0x4C, 0x05);
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	204c      	movs	r0, #76	; 0x4c
 8000faa:	f7ff fd3b 	bl	8000a24 <writeReg>
  writeReg(0x4D, 0x04);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	204d      	movs	r0, #77	; 0x4d
 8000fb2:	f7ff fd37 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	20ff      	movs	r0, #255	; 0xff
 8000fba:	f7ff fd33 	bl	8000a24 <writeReg>
  writeReg(0x44, 0x00);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2044      	movs	r0, #68	; 0x44
 8000fc2:	f7ff fd2f 	bl	8000a24 <writeReg>
  writeReg(0x45, 0x20);
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	2045      	movs	r0, #69	; 0x45
 8000fca:	f7ff fd2b 	bl	8000a24 <writeReg>
  writeReg(0x47, 0x08);
 8000fce:	2108      	movs	r1, #8
 8000fd0:	2047      	movs	r0, #71	; 0x47
 8000fd2:	f7ff fd27 	bl	8000a24 <writeReg>
  writeReg(0x48, 0x28);
 8000fd6:	2128      	movs	r1, #40	; 0x28
 8000fd8:	2048      	movs	r0, #72	; 0x48
 8000fda:	f7ff fd23 	bl	8000a24 <writeReg>
  writeReg(0x67, 0x00);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2067      	movs	r0, #103	; 0x67
 8000fe2:	f7ff fd1f 	bl	8000a24 <writeReg>
  writeReg(0x70, 0x04);
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	2070      	movs	r0, #112	; 0x70
 8000fea:	f7ff fd1b 	bl	8000a24 <writeReg>
  writeReg(0x71, 0x01);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2071      	movs	r0, #113	; 0x71
 8000ff2:	f7ff fd17 	bl	8000a24 <writeReg>
  writeReg(0x72, 0xFE);
 8000ff6:	21fe      	movs	r1, #254	; 0xfe
 8000ff8:	2072      	movs	r0, #114	; 0x72
 8000ffa:	f7ff fd13 	bl	8000a24 <writeReg>
  writeReg(0x76, 0x00);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2076      	movs	r0, #118	; 0x76
 8001002:	f7ff fd0f 	bl	8000a24 <writeReg>
  writeReg(0x77, 0x00);
 8001006:	2100      	movs	r1, #0
 8001008:	2077      	movs	r0, #119	; 0x77
 800100a:	f7ff fd0b 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 800100e:	2101      	movs	r1, #1
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	f7ff fd07 	bl	8000a24 <writeReg>
  writeReg(0x0D, 0x01);
 8001016:	2101      	movs	r1, #1
 8001018:	200d      	movs	r0, #13
 800101a:	f7ff fd03 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 800101e:	2100      	movs	r1, #0
 8001020:	20ff      	movs	r0, #255	; 0xff
 8001022:	f7ff fcff 	bl	8000a24 <writeReg>
  writeReg(0x80, 0x01);
 8001026:	2101      	movs	r1, #1
 8001028:	2080      	movs	r0, #128	; 0x80
 800102a:	f7ff fcfb 	bl	8000a24 <writeReg>
  writeReg(0x01, 0xF8);
 800102e:	21f8      	movs	r1, #248	; 0xf8
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fcf7 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x01);
 8001036:	2101      	movs	r1, #1
 8001038:	20ff      	movs	r0, #255	; 0xff
 800103a:	f7ff fcf3 	bl	8000a24 <writeReg>
  writeReg(0x8E, 0x01);
 800103e:	2101      	movs	r1, #1
 8001040:	208e      	movs	r0, #142	; 0x8e
 8001042:	f7ff fcef 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x01);
 8001046:	2101      	movs	r1, #1
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fceb 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x00);
 800104e:	2100      	movs	r1, #0
 8001050:	20ff      	movs	r0, #255	; 0xff
 8001052:	f7ff fce7 	bl	8000a24 <writeReg>
  writeReg(0x80, 0x00);
 8001056:	2100      	movs	r1, #0
 8001058:	2080      	movs	r0, #128	; 0x80
 800105a:	f7ff fce3 	bl	8000a24 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800105e:	2104      	movs	r1, #4
 8001060:	200a      	movs	r0, #10
 8001062:	f7ff fcdf 	bl	8000a24 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001066:	2084      	movs	r0, #132	; 0x84
 8001068:	f7ff fd30 	bl	8000acc <readReg>
 800106c:	4603      	mov	r3, r0
 800106e:	f023 0310 	bic.w	r3, r3, #16
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2084      	movs	r0, #132	; 0x84
 8001078:	f7ff fcd4 	bl	8000a24 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800107c:	2101      	movs	r1, #1
 800107e:	200b      	movs	r0, #11
 8001080:	f7ff fcd0 	bl	8000a24 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001084:	f000 f8fe 	bl	8001284 <getMeasurementTimingBudget>
 8001088:	4603      	mov	r3, r0
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <initVL53L0X+0x4b8>)
 800108c:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800108e:	21e8      	movs	r1, #232	; 0xe8
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fcc7 	bl	8000a24 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <initVL53L0X+0x4b8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f85a 	bl	8001154 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80010a0:	2101      	movs	r1, #1
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fcbe 	bl	8000a24 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80010a8:	2040      	movs	r0, #64	; 0x40
 80010aa:	f000 fd49 	bl	8001b40 <performSingleRefCalibration>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <initVL53L0X+0x48c>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e010      	b.n	80010da <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80010b8:	2102      	movs	r1, #2
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff fcb2 	bl	8000a24 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 fd3d 	bl	8001b40 <performSingleRefCalibration>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <initVL53L0X+0x4a4>
 80010cc:	2300      	movs	r3, #0
 80010ce:	e004      	b.n	80010da <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80010d0:	21e8      	movs	r1, #232	; 0xe8
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fca6 	bl	8000a24 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000084 	.word	0x20000084

080010e8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	d40a      	bmi.n	8001116 <setSignalRateLimit+0x2e>
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff fa31 	bl	8000568 <__aeabi_f2d>
 8001106:	a311      	add	r3, pc, #68	; (adr r3, 800114c <setSignalRateLimit+0x64>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb02 	bl	8000714 <__aeabi_dcmpgt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <setSignalRateLimit+0x32>
 8001116:	2300      	movs	r3, #0
 8001118:	e00f      	b.n	800113a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800111a:	edd7 7a01 	vldr	s15, [r7, #4]
 800111e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001148 <setSignalRateLimit+0x60>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	b29b      	uxth	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	2044      	movs	r0, #68	; 0x44
 8001134:	f7ff fca0 	bl	8000a78 <writeReg16Bit>
  return true;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	43000000 	.word	0x43000000
 800114c:	0a3d70a4 	.word	0x0a3d70a4
 8001150:	407fffd7 	.word	0x407fffd7

08001154 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b092      	sub	sp, #72	; 0x48
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800115c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001160:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 8001164:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001168:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 800116a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800116e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8001170:	f240 234e 	movw	r3, #590	; 0x24e
 8001174:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 8001176:	f240 23b2 	movw	r3, #690	; 0x2b2
 800117a:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 800117c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001180:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001182:	f240 2326 	movw	r3, #550	; 0x226
 8001186:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8001188:	f644 6320 	movw	r3, #20000	; 0x4e20
 800118c:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	429a      	cmp	r2, r3
 8001194:	d201      	bcs.n	800119a <setMeasurementTimingBudget+0x46>
 8001196:	2300      	movs	r3, #0
 8001198:	e06e      	b.n	8001278 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800119a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800119e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80011a0:	4413      	add	r3, r2
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fba3 	bl	80018f4 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fbcd 	bl	8001958 <getSequenceStepTimeouts>

  if (enables.tcc)
 80011be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80011ca:	4413      	add	r3, r2
 80011cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011ce:	4413      	add	r3, r2
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 80011d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011e4:	4413      	add	r3, r2
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
 80011e8:	e009      	b.n	80011fe <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80011ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80011f6:	4413      	add	r3, r2
 80011f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011fa:	4413      	add	r3, r2
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800120a:	4413      	add	r3, r2
 800120c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800120e:	4413      	add	r3, r2
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8001212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001216:	2b00      	cmp	r3, #0
 8001218:	d02d      	beq.n	8001276 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800121a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800121c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800121e:	4413      	add	r3, r2
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d901      	bls.n	800122e <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800122a:	2300      	movs	r3, #0
 800122c:	e024      	b.n	8001278 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001236:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800123e:	f000 fc59 	bl	8001af4 <timeoutMicrosecondsToMclks>
 8001242:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8001248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001250:	8a7a      	ldrh	r2, [r7, #18]
 8001252:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001256:	4413      	add	r3, r2
 8001258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800125c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fbf3 	bl	8001a4c <encodeTimeout>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	2071      	movs	r0, #113	; 0x71
 800126c:	f7ff fc04 	bl	8000a78 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <setMeasurementTimingBudget+0x12c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  }
  return true;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3748      	adds	r7, #72	; 0x48
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000084 	.word	0x20000084

08001284 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800128a:	f240 7376 	movw	r3, #1910	; 0x776
 800128e:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8001290:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001294:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8001296:	f44f 7325 	mov.w	r3, #660	; 0x294
 800129a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 800129c:	f240 234e 	movw	r3, #590	; 0x24e
 80012a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 80012a2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80012a6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 80012a8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80012ac:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80012ae:	f240 2326 	movw	r3, #550	; 0x226
 80012b2:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80012b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80012b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b8:	4413      	add	r3, r2
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  getSequenceStepEnables(&enables);
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fb17 	bl	80018f4 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80012c6:	463a      	mov	r2, r7
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fb42 	bl	8001958 <getSequenceStepTimeouts>

  if (enables.tcc)
 80012d4:	7e3b      	ldrb	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012de:	4413      	add	r3, r2
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	4413      	add	r3, r2
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.dss)
 80012e6:	7ebb      	ldrb	r3, [r7, #26]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f6:	4413      	add	r3, r2
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fa:	e008      	b.n	800130e <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 80012fc:	7e7b      	ldrb	r3, [r7, #25]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001306:	4413      	add	r3, r2
 8001308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130a:	4413      	add	r3, r2
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.pre_range)
 800130e:	7efb      	ldrb	r3, [r7, #27]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	8c3b      	ldrh	r3, [r7, #32]
 8001318:	4413      	add	r3, r2
 800131a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131c:	4413      	add	r3, r2
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.final_range)
 8001320:	7f3b      	ldrb	r3, [r7, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	8bfb      	ldrh	r3, [r7, #30]
 800132a:	4413      	add	r3, r2
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	4413      	add	r3, r2
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <getMeasurementTimingBudget+0xc0>)
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800133a:	4618      	mov	r0, r3
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000084 	.word	0x20000084

08001348 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fac3 	bl	80018f4 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 faed 	bl	8001958 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d15d      	bne.n	8001440 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	3b0c      	subs	r3, #12
 8001388:	2b06      	cmp	r3, #6
 800138a:	d825      	bhi.n	80013d8 <setVcselPulsePeriod+0x90>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <setVcselPulsePeriod+0x4c>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013b1 	.word	0x080013b1
 8001398:	080013d9 	.word	0x080013d9
 800139c:	080013bb 	.word	0x080013bb
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	080013c5 	.word	0x080013c5
 80013a8:	080013d9 	.word	0x080013d9
 80013ac:	080013cf 	.word	0x080013cf
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80013b0:	2118      	movs	r1, #24
 80013b2:	2057      	movs	r0, #87	; 0x57
 80013b4:	f7ff fb36 	bl	8000a24 <writeReg>
        break;
 80013b8:	e010      	b.n	80013dc <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80013ba:	2130      	movs	r1, #48	; 0x30
 80013bc:	2057      	movs	r0, #87	; 0x57
 80013be:	f7ff fb31 	bl	8000a24 <writeReg>
        break;
 80013c2:	e00b      	b.n	80013dc <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	2057      	movs	r0, #87	; 0x57
 80013c8:	f7ff fb2c 	bl	8000a24 <writeReg>
        break;
 80013cc:	e006      	b.n	80013dc <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80013ce:	2150      	movs	r1, #80	; 0x50
 80013d0:	2057      	movs	r0, #87	; 0x57
 80013d2:	f7ff fb27 	bl	8000a24 <writeReg>
        break;
 80013d6:	e001      	b.n	80013dc <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 80013d8:	2300      	movs	r3, #0
 80013da:	e0fc      	b.n	80015d6 <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80013dc:	2108      	movs	r1, #8
 80013de:	2056      	movs	r0, #86	; 0x56
 80013e0:	f7ff fb20 	bl	8000a24 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80013e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013e8:	4619      	mov	r1, r3
 80013ea:	2050      	movs	r0, #80	; 0x50
 80013ec:	f7ff fb1a 	bl	8000a24 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fb7c 	bl	8001af4 <timeoutMicrosecondsToMclks>
 80013fc:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 80013fe:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001400:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fb22 	bl	8001a4c <encodeTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	2051      	movs	r0, #81	; 0x51
 800140e:	f7ff fb33 	bl	8000a78 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	79ba      	ldrb	r2, [r7, #6]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fb6b 	bl	8001af4 <timeoutMicrosecondsToMclks>
 800141e:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001420:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001428:	d804      	bhi.n	8001434 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800142a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800142c:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 800142e:	3b01      	subs	r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e000      	b.n	8001436 <setVcselPulsePeriod+0xee>
 8001434:	23ff      	movs	r3, #255	; 0xff
 8001436:	4619      	mov	r1, r3
 8001438:	2046      	movs	r0, #70	; 0x46
 800143a:	f7ff faf3 	bl	8000a24 <writeReg>
 800143e:	e0b1      	b.n	80015a4 <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b01      	cmp	r3, #1
 8001444:	f040 80ac 	bne.w	80015a0 <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	3b08      	subs	r3, #8
 800144c:	2b06      	cmp	r3, #6
 800144e:	f200 8085 	bhi.w	800155c <setVcselPulsePeriod+0x214>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <setVcselPulsePeriod+0x110>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001475 	.word	0x08001475
 800145c:	0800155d 	.word	0x0800155d
 8001460:	080014af 	.word	0x080014af
 8001464:	0800155d 	.word	0x0800155d
 8001468:	080014e9 	.word	0x080014e9
 800146c:	0800155d 	.word	0x0800155d
 8001470:	08001523 	.word	0x08001523
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001474:	2110      	movs	r1, #16
 8001476:	2048      	movs	r0, #72	; 0x48
 8001478:	f7ff fad4 	bl	8000a24 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800147c:	2108      	movs	r1, #8
 800147e:	2047      	movs	r0, #71	; 0x47
 8001480:	f7ff fad0 	bl	8000a24 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001484:	2102      	movs	r1, #2
 8001486:	2032      	movs	r0, #50	; 0x32
 8001488:	f7ff facc 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800148c:	210c      	movs	r1, #12
 800148e:	2030      	movs	r0, #48	; 0x30
 8001490:	f7ff fac8 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x01);
 8001494:	2101      	movs	r1, #1
 8001496:	20ff      	movs	r0, #255	; 0xff
 8001498:	f7ff fac4 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 800149c:	2130      	movs	r1, #48	; 0x30
 800149e:	2030      	movs	r0, #48	; 0x30
 80014a0:	f7ff fac0 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x00);
 80014a4:	2100      	movs	r1, #0
 80014a6:	20ff      	movs	r0, #255	; 0xff
 80014a8:	f7ff fabc 	bl	8000a24 <writeReg>
        break;
 80014ac:	e058      	b.n	8001560 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80014ae:	2128      	movs	r1, #40	; 0x28
 80014b0:	2048      	movs	r0, #72	; 0x48
 80014b2:	f7ff fab7 	bl	8000a24 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80014b6:	2108      	movs	r1, #8
 80014b8:	2047      	movs	r0, #71	; 0x47
 80014ba:	f7ff fab3 	bl	8000a24 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80014be:	2103      	movs	r1, #3
 80014c0:	2032      	movs	r0, #50	; 0x32
 80014c2:	f7ff faaf 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80014c6:	2109      	movs	r1, #9
 80014c8:	2030      	movs	r0, #48	; 0x30
 80014ca:	f7ff faab 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x01);
 80014ce:	2101      	movs	r1, #1
 80014d0:	20ff      	movs	r0, #255	; 0xff
 80014d2:	f7ff faa7 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80014d6:	2120      	movs	r1, #32
 80014d8:	2030      	movs	r0, #48	; 0x30
 80014da:	f7ff faa3 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	20ff      	movs	r0, #255	; 0xff
 80014e2:	f7ff fa9f 	bl	8000a24 <writeReg>
        break;
 80014e6:	e03b      	b.n	8001560 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80014e8:	2138      	movs	r1, #56	; 0x38
 80014ea:	2048      	movs	r0, #72	; 0x48
 80014ec:	f7ff fa9a 	bl	8000a24 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80014f0:	2108      	movs	r1, #8
 80014f2:	2047      	movs	r0, #71	; 0x47
 80014f4:	f7ff fa96 	bl	8000a24 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80014f8:	2103      	movs	r1, #3
 80014fa:	2032      	movs	r0, #50	; 0x32
 80014fc:	f7ff fa92 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001500:	2108      	movs	r1, #8
 8001502:	2030      	movs	r0, #48	; 0x30
 8001504:	f7ff fa8e 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x01);
 8001508:	2101      	movs	r1, #1
 800150a:	20ff      	movs	r0, #255	; 0xff
 800150c:	f7ff fa8a 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001510:	2120      	movs	r1, #32
 8001512:	2030      	movs	r0, #48	; 0x30
 8001514:	f7ff fa86 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x00);
 8001518:	2100      	movs	r1, #0
 800151a:	20ff      	movs	r0, #255	; 0xff
 800151c:	f7ff fa82 	bl	8000a24 <writeReg>
        break;
 8001520:	e01e      	b.n	8001560 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001522:	2148      	movs	r1, #72	; 0x48
 8001524:	2048      	movs	r0, #72	; 0x48
 8001526:	f7ff fa7d 	bl	8000a24 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800152a:	2108      	movs	r1, #8
 800152c:	2047      	movs	r0, #71	; 0x47
 800152e:	f7ff fa79 	bl	8000a24 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001532:	2103      	movs	r1, #3
 8001534:	2032      	movs	r0, #50	; 0x32
 8001536:	f7ff fa75 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800153a:	2107      	movs	r1, #7
 800153c:	2030      	movs	r0, #48	; 0x30
 800153e:	f7ff fa71 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x01);
 8001542:	2101      	movs	r1, #1
 8001544:	20ff      	movs	r0, #255	; 0xff
 8001546:	f7ff fa6d 	bl	8000a24 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800154a:	2120      	movs	r1, #32
 800154c:	2030      	movs	r0, #48	; 0x30
 800154e:	f7ff fa69 	bl	8000a24 <writeReg>
        writeReg(0xFF, 0x00);
 8001552:	2100      	movs	r1, #0
 8001554:	20ff      	movs	r0, #255	; 0xff
 8001556:	f7ff fa65 	bl	8000a24 <writeReg>
        break;
 800155a:	e001      	b.n	8001560 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e03a      	b.n	80015d6 <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001564:	4619      	mov	r1, r3
 8001566:	2070      	movs	r0, #112	; 0x70
 8001568:	f7ff fa5c 	bl	8000a24 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	79ba      	ldrb	r2, [r7, #6]
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fabe 	bl	8001af4 <timeoutMicrosecondsToMclks>
 8001578:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 800157a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001584:	89fa      	ldrh	r2, [r7, #14]
 8001586:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001588:	4413      	add	r3, r2
 800158a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800158c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fa5c 	bl	8001a4c <encodeTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	2071      	movs	r0, #113	; 0x71
 800159a:	f7ff fa6d 	bl	8000a78 <writeReg16Bit>
 800159e:	e001      	b.n	80015a4 <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e018      	b.n	80015d6 <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <setVcselPulsePeriod+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fdd3 	bl	8001154 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fa8c 	bl	8000acc <readReg>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015ba:	2102      	movs	r1, #2
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff fa31 	bl	8000a24 <writeReg>
  performSingleRefCalibration(0x0);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 fabc 	bl	8001b40 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80015c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015cc:	4619      	mov	r1, r3
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff fa28 	bl	8000a24 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000084 	.word	0x20000084

080015e4 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80015f4:	2050      	movs	r0, #80	; 0x50
 80015f6:	f7ff fa69 	bl	8000acc <readReg>
 80015fa:	4603      	mov	r3, r0
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	e00c      	b.n	8001620 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 800160c:	2070      	movs	r0, #112	; 0x70
 800160e:	f7ff fa5d 	bl	8000acc <readReg>
 8001612:	4603      	mov	r3, r0
 8001614:	3301      	adds	r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	e000      	b.n	8001620 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 800161e:	23ff      	movs	r3, #255	; 0xff
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8001630:	f000 fdec 	bl	800220c <HAL_GetTick>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <readRangeContinuousMillimeters+0xe0>)
 800163a:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 800163c:	e015      	b.n	800166a <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <readRangeContinuousMillimeters+0xe4>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d011      	beq.n	800166a <readRangeContinuousMillimeters+0x42>
 8001646:	f000 fde1 	bl	800220c <HAL_GetTick>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <readRangeContinuousMillimeters+0xe0>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a2d      	ldr	r2, [pc, #180]	; (800170c <readRangeContinuousMillimeters+0xe4>)
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	4293      	cmp	r3, r2
 800165c:	dd05      	ble.n	800166a <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <readRangeContinuousMillimeters+0xe8>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	e04a      	b.n	8001700 <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 800166a:	2013      	movs	r0, #19
 800166c:	f7ff fa2e 	bl	8000acc <readReg>
 8001670:	4603      	mov	r3, r0
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0e1      	beq.n	800163e <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8001680:	201e      	movs	r0, #30
 8001682:	f7ff fa4f 	bl	8000b24 <readReg16Bit>
 8001686:	4603      	mov	r3, r0
 8001688:	82fb      	strh	r3, [r7, #22]
 800168a:	e034      	b.n	80016f6 <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	220c      	movs	r2, #12
 8001692:	4619      	mov	r1, r3
 8001694:	2014      	movs	r0, #20
 8001696:	f7ff fa9f 	bl	8000bd8 <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 80016a4:	7abb      	ldrb	r3, [r7, #10]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 80016cc:	7c3b      	ldrb	r3, [r7, #16]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	7c7b      	ldrb	r3, [r7, #17]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8afa      	ldrh	r2, [r7, #22]
 80016f4:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016f6:	2101      	movs	r1, #1
 80016f8:	200b      	movs	r0, #11
 80016fa:	f7ff f993 	bl	8000a24 <writeReg>
  return temp;
 80016fe:	8afb      	ldrh	r3, [r7, #22]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000080 	.word	0x20000080
 800170c:	2000007c 	.word	0x2000007c
 8001710:	2000007e 	.word	0x2000007e

08001714 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 800171c:	2101      	movs	r1, #1
 800171e:	2080      	movs	r0, #128	; 0x80
 8001720:	f7ff f980 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x01);
 8001724:	2101      	movs	r1, #1
 8001726:	20ff      	movs	r0, #255	; 0xff
 8001728:	f7ff f97c 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x00);
 800172c:	2100      	movs	r1, #0
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff f978 	bl	8000a24 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <readRangeSingleMillimeters+0xa8>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	2091      	movs	r0, #145	; 0x91
 800173c:	f7ff f972 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x01);
 8001740:	2101      	movs	r1, #1
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff f96e 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x00);
 8001748:	2100      	movs	r1, #0
 800174a:	20ff      	movs	r0, #255	; 0xff
 800174c:	f7ff f96a 	bl	8000a24 <writeReg>
  writeReg(0x80, 0x00);
 8001750:	2100      	movs	r1, #0
 8001752:	2080      	movs	r0, #128	; 0x80
 8001754:	f7ff f966 	bl	8000a24 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001758:	2101      	movs	r1, #1
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff f962 	bl	8000a24 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8001760:	f000 fd54 	bl	800220c <HAL_GetTick>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <readRangeSingleMillimeters+0xac>)
 800176a:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 800176c:	e015      	b.n	800179a <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <readRangeSingleMillimeters+0xb0>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d011      	beq.n	800179a <readRangeSingleMillimeters+0x86>
 8001776:	f000 fd49 	bl	800220c <HAL_GetTick>
 800177a:	4603      	mov	r3, r0
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <readRangeSingleMillimeters+0xac>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <readRangeSingleMillimeters+0xb0>)
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	4293      	cmp	r3, r2
 800178c:	dd05      	ble.n	800179a <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <readRangeSingleMillimeters+0xb4>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001798:	e00b      	b.n	80017b2 <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff f996 	bl	8000acc <readReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e1      	bne.n	800176e <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff3c 	bl	8001628 <readRangeContinuousMillimeters>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000082 	.word	0x20000082
 80017c0:	20000080 	.word	0x20000080
 80017c4:	2000007c 	.word	0x2000007c
 80017c8:	2000007e 	.word	0x2000007e

080017cc <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80017d6:	2101      	movs	r1, #1
 80017d8:	2080      	movs	r0, #128	; 0x80
 80017da:	f7ff f923 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x01);
 80017de:	2101      	movs	r1, #1
 80017e0:	20ff      	movs	r0, #255	; 0xff
 80017e2:	f7ff f91f 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x00);
 80017e6:	2100      	movs	r1, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff f91b 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x06);
 80017ee:	2106      	movs	r1, #6
 80017f0:	20ff      	movs	r0, #255	; 0xff
 80017f2:	f7ff f917 	bl	8000a24 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80017f6:	2083      	movs	r0, #131	; 0x83
 80017f8:	f7ff f968 	bl	8000acc <readReg>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	2083      	movs	r0, #131	; 0x83
 8001808:	f7ff f90c 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x07);
 800180c:	2107      	movs	r1, #7
 800180e:	20ff      	movs	r0, #255	; 0xff
 8001810:	f7ff f908 	bl	8000a24 <writeReg>
  writeReg(0x81, 0x01);
 8001814:	2101      	movs	r1, #1
 8001816:	2081      	movs	r0, #129	; 0x81
 8001818:	f7ff f904 	bl	8000a24 <writeReg>

  writeReg(0x80, 0x01);
 800181c:	2101      	movs	r1, #1
 800181e:	2080      	movs	r0, #128	; 0x80
 8001820:	f7ff f900 	bl	8000a24 <writeReg>

  writeReg(0x94, 0x6b);
 8001824:	216b      	movs	r1, #107	; 0x6b
 8001826:	2094      	movs	r0, #148	; 0x94
 8001828:	f7ff f8fc 	bl	8000a24 <writeReg>
  writeReg(0x83, 0x00);
 800182c:	2100      	movs	r1, #0
 800182e:	2083      	movs	r0, #131	; 0x83
 8001830:	f7ff f8f8 	bl	8000a24 <writeReg>
  startTimeout();
 8001834:	f000 fcea 	bl	800220c <HAL_GetTick>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <getSpadInfo+0x120>)
 800183e:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001840:	e011      	b.n	8001866 <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <getSpadInfo+0x124>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <getSpadInfo+0x9a>
 800184a:	f000 fcdf 	bl	800220c <HAL_GetTick>
 800184e:	4603      	mov	r3, r0
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <getSpadInfo+0x120>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <getSpadInfo+0x124>)
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	4293      	cmp	r3, r2
 8001860:	dd01      	ble.n	8001866 <getSpadInfo+0x9a>
 8001862:	2300      	movs	r3, #0
 8001864:	e03d      	b.n	80018e2 <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8001866:	2083      	movs	r0, #131	; 0x83
 8001868:	f7ff f930 	bl	8000acc <readReg>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0e7      	beq.n	8001842 <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001872:	2101      	movs	r1, #1
 8001874:	2083      	movs	r0, #131	; 0x83
 8001876:	f7ff f8d5 	bl	8000a24 <writeReg>
  tmp = readReg(0x92);
 800187a:	2092      	movs	r0, #146	; 0x92
 800187c:	f7ff f926 	bl	8000acc <readReg>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188a:	b2da      	uxtb	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	09db      	lsrs	r3, r3, #7
 8001894:	b2da      	uxtb	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 800189a:	2100      	movs	r1, #0
 800189c:	2081      	movs	r0, #129	; 0x81
 800189e:	f7ff f8c1 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x06);
 80018a2:	2106      	movs	r1, #6
 80018a4:	20ff      	movs	r0, #255	; 0xff
 80018a6:	f7ff f8bd 	bl	8000a24 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80018aa:	2083      	movs	r0, #131	; 0x83
 80018ac:	f7ff f90e 	bl	8000acc <readReg>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	2083      	movs	r0, #131	; 0x83
 80018bc:	f7ff f8b2 	bl	8000a24 <writeReg>
  writeReg(0xFF, 0x01);
 80018c0:	2101      	movs	r1, #1
 80018c2:	20ff      	movs	r0, #255	; 0xff
 80018c4:	f7ff f8ae 	bl	8000a24 <writeReg>
  writeReg(0x00, 0x01);
 80018c8:	2101      	movs	r1, #1
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff f8aa 	bl	8000a24 <writeReg>

  writeReg(0xFF, 0x00);
 80018d0:	2100      	movs	r1, #0
 80018d2:	20ff      	movs	r0, #255	; 0xff
 80018d4:	f7ff f8a6 	bl	8000a24 <writeReg>
  writeReg(0x80, 0x00);
 80018d8:	2100      	movs	r1, #0
 80018da:	2080      	movs	r0, #128	; 0x80
 80018dc:	f7ff f8a2 	bl	8000a24 <writeReg>

  return true;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000080 	.word	0x20000080
 80018f0:	2000007c 	.word	0x2000007c

080018f4 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff f8e5 	bl	8000acc <readReg>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	09db      	lsrs	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	711a      	strb	r2, [r3, #4]
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fe3e 	bl	80015e4 <getVcselPulsePeriod>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001970:	2046      	movs	r0, #70	; 0x46
 8001972:	f7ff f8ab 	bl	8000acc <readReg>
 8001976:	4603      	mov	r3, r0
 8001978:	b29b      	uxth	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f000 f888 	bl	8001aa4 <timeoutMclksToMicroseconds>
 8001994:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800199a:	2051      	movs	r0, #81	; 0x51
 800199c:	f7ff f8c2 	bl	8000b24 <readReg16Bit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f83e 	bl	8001a24 <decodeTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f000 f871 	bl	8001aa4 <timeoutMclksToMicroseconds>
 80019c2:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fe0b 	bl	80015e4 <getVcselPulsePeriod>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80019d6:	2071      	movs	r0, #113	; 0x71
 80019d8:	f7ff f8a4 	bl	8000b24 <readReg16Bit>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f820 	bl	8001a24 <decodeTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	891a      	ldrh	r2, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	88db      	ldrh	r3, [r3, #6]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 f847 	bl	8001aa4 <timeoutMclksToMicroseconds>
 8001a16:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	615a      	str	r2, [r3, #20]
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	0a12      	lsrs	r2, r2, #8
 8001a36:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d018      	beq.n	8001a96 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001a6a:	e005      	b.n	8001a78 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	3301      	adds	r3, #1
 8001a76:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f4      	bne.n	8001a6c <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	e000      	b.n	8001a98 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	80fb      	strh	r3, [r7, #6]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <timeoutMclksToMicroseconds+0x48>)
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <timeoutMclksToMicroseconds+0x4c>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <timeoutMclksToMicroseconds+0x4c>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	099b      	lsrs	r3, r3, #6
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	003a2f00 	.word	0x003a2f00
 8001af0:	10624dd3 	.word	0x10624dd3

08001af4 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <timeoutMicrosecondsToMclks+0x44>)
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <timeoutMicrosecondsToMclks+0x48>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1c:	fb03 f202 	mul.w	r2, r3, r2
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	441a      	add	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	003a2f00 	.word	0x003a2f00
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7fe ff65 	bl	8000a24 <writeReg>

  startTimeout();
 8001b5a:	f000 fb57 	bl	800220c <HAL_GetTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <performSingleRefCalibration+0x78>)
 8001b64:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001b66:	e011      	b.n	8001b8c <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <performSingleRefCalibration+0x7c>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00d      	beq.n	8001b8c <performSingleRefCalibration+0x4c>
 8001b70:	f000 fb4c 	bl	800220c <HAL_GetTick>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <performSingleRefCalibration+0x78>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <performSingleRefCalibration+0x7c>)
 8001b82:	8812      	ldrh	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	dd01      	ble.n	8001b8c <performSingleRefCalibration+0x4c>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e010      	b.n	8001bae <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001b8c:	2013      	movs	r0, #19
 8001b8e:	f7fe ff9d 	bl	8000acc <readReg>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0e5      	beq.n	8001b68 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	200b      	movs	r0, #11
 8001ba0:	f7fe ff40 	bl	8000a24 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7fe ff3c 	bl	8000a24 <writeReg>

  return true;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000080 	.word	0x20000080
 8001bbc:	2000007c 	.word	0x2000007c

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc6:	f000 fab8 	bl	800213a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bca:	f000 f83f 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bce:	f000 f91b 	bl	8001e08 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001bd2:	f000 f88d 	bl	8001cf0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001bd6:	f000 f8cb 	bl	8001d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	// Initialise the VL53L0X
	statInfo_t_VL53L0X distanceStr;
	initVL53L0X(1, &hi2c2);
 8001bda:	4916      	ldr	r1, [pc, #88]	; (8001c34 <main+0x74>)
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff f825 	bl	8000c2c <initVL53L0X>

	// Configure the sensor for high accuracy and speed in 20 cm.
	setSignalRateLimit(200);
 8001be2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001c38 <main+0x78>
 8001be6:	f7ff fa7f 	bl	80010e8 <setSignalRateLimit>
	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 8001bea:	210a      	movs	r1, #10
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff fbab 	bl	8001348 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8001bf2:	210e      	movs	r1, #14
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff fba7 	bl	8001348 <setVcselPulsePeriod>
	setMeasurementTimingBudget(300 * 1000UL);
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <main+0x7c>)
 8001bfc:	f7ff faaa 	bl	8001154 <setMeasurementTimingBudget>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//	uint16_t distance is the distance in millimeters.
	//	statInfo_t_VL53L0X distanceStr is the statistics read from the sensor.
	distance = readRangeSingleMillimeters(&distanceStr);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fd86 	bl	8001714 <readRangeSingleMillimeters>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	81fb      	strh	r3, [r7, #14]

	sprintf(BUFFER, "Distance: %d\r\n", distance);
 8001c0c:	89fb      	ldrh	r3, [r7, #14]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	490b      	ldr	r1, [pc, #44]	; (8001c40 <main+0x80>)
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <main+0x84>)
 8001c14:	f003 ff44 	bl	8005aa0 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)BUFFER, sizeof(BUFFER), HAL_MAX_DELAY);
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	2264      	movs	r2, #100	; 0x64
 8001c1e:	4909      	ldr	r1, [pc, #36]	; (8001c44 <main+0x84>)
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <main+0x88>)
 8001c22:	f003 f895 	bl	8004d50 <HAL_UART_Transmit>
	memset(BUFFER, '\0', sizeof(BUFFER));
 8001c26:	2264      	movs	r2, #100	; 0x64
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <main+0x84>)
 8001c2c:	f003 ff58 	bl	8005ae0 <memset>
  {
 8001c30:	e7e6      	b.n	8001c00 <main+0x40>
 8001c32:	bf00      	nop
 8001c34:	200000e4 	.word	0x200000e4
 8001c38:	43480000 	.word	0x43480000
 8001c3c:	000493e0 	.word	0x000493e0
 8001c40:	08006400 	.word	0x08006400
 8001c44:	200001cc 	.word	0x200001cc
 8001c48:	20000138 	.word	0x20000138

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2244      	movs	r2, #68	; 0x44
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 ff40 	bl	8005ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c72:	f001 fb89 	bl	8003388 <HAL_PWREx_ControlVoltageScaling>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c7c:	f000 f8dc 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c80:	2310      	movs	r3, #16
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c90:	2302      	movs	r3, #2
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c94:	2301      	movs	r3, #1
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c9c:	2328      	movs	r3, #40	; 0x28
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fc0d 	bl	80034d0 <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001cbc:	f000 f8bc 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 f813 	bl	8003d04 <HAL_RCC_ClockConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ce4:	f000 f8a8 	bl	8001e38 <Error_Handler>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3758      	adds	r7, #88	; 0x58
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_I2C2_Init+0x78>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <MX_I2C2_Init+0x7c>)
 8001cfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d2c:	f000 fcf2 	bl	8002714 <HAL_I2C_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d36:	f000 f87f 	bl	8001e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d3e:	f001 fa6b 	bl	8003218 <HAL_I2CEx_ConfigAnalogFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d48:	f000 f876 	bl	8001e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d50:	f001 faad 	bl	80032ae <HAL_I2CEx_ConfigDigitalFilter>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d5a:	f000 f86d 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200000e4 	.word	0x200000e4
 8001d68:	40005800 	.word	0x40005800
 8001d6c:	10909cec 	.word	0x10909cec

08001d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <MX_USART1_UART_Init+0x94>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d96:	220c      	movs	r2, #12
 8001d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db8:	4811      	ldr	r0, [pc, #68]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001dba:	f002 ff79 	bl	8004cb0 <HAL_UART_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dc4:	f000 f838 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001dcc:	f003 fd9e 	bl	800590c <HAL_UARTEx_SetTxFifoThreshold>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dd6:	f000 f82f 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001dde:	f003 fdd3 	bl	8005988 <HAL_UARTEx_SetRxFifoThreshold>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001de8:	f000 f826 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_USART1_UART_Init+0x90>)
 8001dee:	f003 fd54 	bl	800589a <HAL_UARTEx_DisableFifoMode>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001df8:	f000 f81e 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000138 	.word	0x20000138
 8001e04:	40013800 	.word	0x40013800

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_GPIO_Init+0x2c>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <MX_GPIO_Init+0x2c>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_GPIO_Init+0x2c>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_MspInit+0x44>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_MspInit+0x44>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6613      	str	r3, [r2, #96]	; 0x60
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_MspInit+0x44>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_MspInit+0x44>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_MspInit+0x44>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_MspInit+0x44>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0ae      	sub	sp, #184	; 0xb8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	2294      	movs	r2, #148	; 0x94
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fe17 	bl	8005ae0 <memset>
  if(hi2c->Instance==I2C2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_I2C_MspInit+0xb0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d13b      	bne.n	8001f34 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 f9d9 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ed4:	f7ff ffb0 	bl	8001e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ef0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef8:	2312      	movs	r3, #18
 8001efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f14:	4619      	mov	r1, r3
 8001f16:	480b      	ldr	r0, [pc, #44]	; (8001f44 <HAL_I2C_MspInit+0xb8>)
 8001f18:	f000 fa6a 	bl	80023f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_I2C_MspInit+0xb4>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	37b8      	adds	r7, #184	; 0xb8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005800 	.word	0x40005800
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0ae      	sub	sp, #184	; 0xb8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	2294      	movs	r2, #148	; 0x94
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fdb9 	bl	8005ae0 <memset>
  if(huart->Instance==USART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_UART_MspInit+0xb0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d13a      	bne.n	8001fee <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 f97b 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f90:	f7ff ff52 	bl	8001e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_UART_MspInit+0xb4>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fdc:	2307      	movs	r3, #7
 8001fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_UART_MspInit+0xb8>)
 8001fea:	f000 fa01 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	37b8      	adds	r7, #184	; 0xb8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	48000400 	.word	0x48000400

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f8c8 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f003 fd32 	bl	8005af0 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200a0000 	.word	0x200a0000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	20000230 	.word	0x20000230
 80020c0:	20000380 	.word	0x20000380

080020c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ec:	f7ff ffea 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <LoopForever+0x6>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	; (8002128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <LoopForever+0xe>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	; (8002134 <LoopForever+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f003 fcf1 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211a:	f7ff fd51 	bl	8001bc0 <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002120:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800212c:	080064c4 	.word	0x080064c4
  ldr r2, =_sbss
 8002130:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002134:	20000380 	.word	0x20000380

08002138 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_IRQHandler>

0800213a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 f91f 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f80e 	bl	800216c <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	e001      	b.n	8002160 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800215c:	f7ff fe72 	bl	8001e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002160:	79fb      	ldrb	r3, [r7, #7]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_InitTick+0x6c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d023      	beq.n	80021c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_InitTick+0x70>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_InitTick+0x6c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f91d 	bl	80023d6 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d809      	bhi.n	80021bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f8f5 	bl	800239e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_InitTick+0x74>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e007      	b.n	80021cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e004      	b.n	80021cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e001      	b.n	80021cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000004 	.word	0x20000004
 80021e0:	20000008 	.word	0x20000008

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000000c 	.word	0x2000000c
 8002208:	20000234 	.word	0x20000234

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000234 	.word	0x20000234

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff47 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b0:	f7ff ff5c 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7ff ff8e 	bl	80022dc <NVIC_EncodePriority>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff5d 	bl	8002288 <__NVIC_SetPriority>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffb0 	bl	8002344 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e166      	b.n	80026ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8158 	beq.w	80026c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_GPIO_Init+0x40>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002466:	2201      	movs	r2, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80b2 	beq.w	80026c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_GPIO_Init+0x2fc>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_GPIO_Init+0x2fc>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6613      	str	r3, [r2, #96]	; 0x60
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_GPIO_Init+0x2fc>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800257c:	4a5c      	ldr	r2, [pc, #368]	; (80026f0 <HAL_GPIO_Init+0x300>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a6:	d02b      	beq.n	8002600 <HAL_GPIO_Init+0x210>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x304>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d025      	beq.n	80025fc <HAL_GPIO_Init+0x20c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_GPIO_Init+0x308>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01f      	beq.n	80025f8 <HAL_GPIO_Init+0x208>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_GPIO_Init+0x30c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d019      	beq.n	80025f4 <HAL_GPIO_Init+0x204>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_GPIO_Init+0x310>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_Init+0x200>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_GPIO_Init+0x314>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_Init+0x1fc>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x318>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_Init+0x1f8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x31c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_Init+0x1f4>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00e      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025e4:	2308      	movs	r3, #8
 80025e6:	e00c      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025e8:	2306      	movs	r3, #6
 80025ea:	e00a      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e008      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025f4:	2303      	movs	r3, #3
 80025f6:	e004      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x212>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_GPIO_Init+0x212>
 8002600:	2300      	movs	r3, #0
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	f002 0203 	and.w	r2, r2, #3
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	4093      	lsls	r3, r2
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002612:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_GPIO_Init+0x300>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_GPIO_Init+0x320>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002644:	4a32      	ldr	r2, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x320>)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_GPIO_Init+0x320>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x320>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_GPIO_Init+0x320>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x320>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_GPIO_Init+0x320>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_GPIO_Init+0x320>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f ae91 	bne.w	8002400 <HAL_GPIO_Init+0x10>
  }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000
 80026f4:	48000400 	.word	0x48000400
 80026f8:	48000800 	.word	0x48000800
 80026fc:	48000c00 	.word	0x48000c00
 8002700:	48001000 	.word	0x48001000
 8002704:	48001400 	.word	0x48001400
 8002708:	48001800 	.word	0x48001800
 800270c:	48001c00 	.word	0x48001c00
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08d      	b.n	8002842 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fba6 	bl	8001e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e006      	b.n	800279c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800279a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d108      	bne.n	80027b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	e007      	b.n	80027c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	f040 80f9 	bne.w	8002a66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_I2C_Mem_Write+0x34>
 800287a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0ed      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_I2C_Mem_Write+0x4e>
 8002896:	2302      	movs	r3, #2
 8002898:	e0e6      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a2:	f7ff fcb3 	bl	800220c <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fac3 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d1      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2221      	movs	r2, #33	; 0x21
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ec:	88f8      	ldrh	r0, [r7, #6]
 80028ee:	893a      	ldrh	r2, [r7, #8]
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4603      	mov	r3, r0
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f9d3 	bl	8002ca8 <I2C_RequestMemoryWrite>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0a9      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d90e      	bls.n	800293c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fc3d 	bl	80031b4 <I2C_TransferConfig>
 800293a:	e00f      	b.n	800295c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fc2c 	bl	80031b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fabc 	bl	8002ede <I2C_WaitOnTXISFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07b      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d034      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d130      	bne.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fa3f 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04d      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2bff      	cmp	r3, #255	; 0xff
 80029d4:	d90e      	bls.n	80029f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fbe1 	bl	80031b4 <I2C_TransferConfig>
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fbd0 	bl	80031b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19e      	bne.n	800295c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 faa2 	bl	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01a      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_I2C_Mem_Write+0x224>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fe00e800 	.word	0xfe00e800

08002a74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 80fd 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x34>
 8002aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0f1      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Mem_Read+0x4e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0ea      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aca:	f7ff fb9f 	bl	800220c <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f9af 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d5      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	; 0x22
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b14:	88f8      	ldrh	r0, [r7, #6]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	8979      	ldrh	r1, [r7, #10]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4603      	mov	r3, r0
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f913 	bl	8002d50 <I2C_RequestMemoryRead>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0ad      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2bff      	cmp	r3, #255	; 0xff
 8002b44:	d90e      	bls.n	8002b64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_I2C_Mem_Read+0x22c>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fb29 	bl	80031b4 <I2C_TransferConfig>
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_I2C_Mem_Read+0x22c>)
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fb18 	bl	80031b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f956 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d034      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d130      	bne.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f927 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04d      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d90e      	bls.n	8002c24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	2300      	movs	r3, #0
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fac9 	bl	80031b4 <I2C_TransferConfig>
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fab8 	bl	80031b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d19a      	bne.n	8002b84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f98a 	bl	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e01a      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_I2C_Mem_Read+0x230>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	80002400 	.word	0x80002400
 8002ca4:	fe00e800 	.word	0xfe00e800

08002ca8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	8979      	ldrh	r1, [r7, #10]
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <I2C_RequestMemoryWrite+0xa4>)
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa6f 	bl	80031b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8ff 	bl	8002ede <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e02c      	b.n	8002d44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfa:	e015      	b.n	8002d28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	69b9      	ldr	r1, [r7, #24]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8e5 	bl	8002ede <I2C_WaitOnTXISFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e012      	b.n	8002d44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f884 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	80002000 	.word	0x80002000

08002d50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	8979      	ldrh	r1, [r7, #10]
 8002d70:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <I2C_RequestMemoryRead+0xa4>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fa1c 	bl	80031b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f8ac 	bl	8002ede <I2C_WaitOnTXISFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e02c      	b.n	8002dea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002da0:	e015      	b.n	8002dce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f892 	bl	8002ede <I2C_WaitOnTXISFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e012      	b.n	8002dea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f831 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	80002000 	.word	0x80002000

08002df8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d103      	bne.n	8002e16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d007      	beq.n	8002e34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	619a      	str	r2, [r3, #24]
  }
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e50:	e031      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d02d      	beq.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7ff f9d7 	bl	800220c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d122      	bne.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699a      	ldr	r2, [r3, #24]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0be      	beq.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eea:	e033      	b.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f87f 	bl	8002ff4 <I2C_IsErrorOccurred>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e031      	b.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d025      	beq.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f08:	f7ff f980 	bl	800220c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11a      	bne.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d013      	beq.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d1c4      	bne.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f78:	e02f      	b.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f838 	bl	8002ff4 <I2C_IsErrorOccurred>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e02d      	b.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7ff f93d 	bl	800220c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11a      	bne.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d013      	beq.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d1c8      	bne.n	8002f7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d068      	beq.n	80030f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2210      	movs	r2, #16
 8003026:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003028:	e049      	b.n	80030be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d045      	beq.n	80030be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7ff f8eb 	bl	800220c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_IsErrorOccurred+0x54>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13a      	bne.n	80030be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003052:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306a:	d121      	bne.n	80030b0 <I2C_IsErrorOccurred+0xbc>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003072:	d01d      	beq.n	80030b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b20      	cmp	r3, #32
 8003078:	d01a      	beq.n	80030b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003088:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800308a:	f7ff f8bf 	bl	800220c <HAL_GetTick>
 800308e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003090:	e00e      	b.n	80030b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003092:	f7ff f8bb 	bl	800220c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b19      	cmp	r3, #25
 800309e:	d907      	bls.n	80030b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030ae:	e006      	b.n	80030be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d1e9      	bne.n	8003092 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d003      	beq.n	80030d4 <I2C_IsErrorOccurred+0xe0>
 80030cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0aa      	beq.n	800302a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2220      	movs	r2, #32
 80030e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003136:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01c      	beq.n	80031a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fe45 	bl	8002df8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <I2C_IsErrorOccurred+0x1bc>)
 800317a:	400b      	ands	r3, r1
 800317c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	fe00e800 	.word	0xfe00e800

080031b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	4613      	mov	r3, r2
 80031c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031cc:	7a7b      	ldrb	r3, [r7, #9]
 80031ce:	041b      	lsls	r3, r3, #16
 80031d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	4313      	orrs	r3, r2
 80031de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	0d5b      	lsrs	r3, r3, #21
 80031ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <I2C_TransferConfig+0x60>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	43db      	mvns	r3, r3
 80031f8:	ea02 0103 	and.w	r1, r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	03ff63ff 	.word	0x03ff63ff

08003218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	d138      	bne.n	80032a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003238:	2302      	movs	r3, #2
 800323a:	e032      	b.n	80032a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800326a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d139      	bne.n	8003338 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e033      	b.n	800333a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003300:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_PWREx_GetVoltageRange+0x3c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d102      	bne.n	8003360 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800335a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335e:	e00b      	b.n	8003378 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d102      	bne.n	8003376 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003374:	e000      	b.n	8003378 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003376:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d141      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003396:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d131      	bne.n	8003408 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033aa:	4a46      	ldr	r2, [pc, #280]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033bc:	4a41      	ldr	r2, [pc, #260]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033da:	e002      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d102      	bne.n	80033f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d158      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e057      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003418:	e04d      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d141      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d131      	bne.n	8003494 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2232      	movs	r2, #50	; 0x32
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	e002      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d102      	bne.n	8003482 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f2      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d112      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e011      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034a4:	e007      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40007000 	.word	0x40007000
 80034c8:	20000004 	.word	0x20000004
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f000 bc08 	b.w	8003cf4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e4:	4b96      	ldr	r3, [pc, #600]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ee:	4b94      	ldr	r3, [pc, #592]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80e4 	beq.w	80036ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_RCC_OscConfig+0x4c>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	f040 808b 	bne.w	800362a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 8087 	bne.w	800362a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800351c:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x64>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e3df      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	4b81      	ldr	r3, [pc, #516]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_RCC_OscConfig+0x7e>
 8003544:	4b7e      	ldr	r3, [pc, #504]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354c:	e005      	b.n	800355a <HAL_RCC_OscConfig+0x8a>
 800354e:	4b7c      	ldr	r3, [pc, #496]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355a:	4293      	cmp	r3, r2
 800355c:	d223      	bcs.n	80035a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fdcc 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e3c0      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003572:	4b73      	ldr	r3, [pc, #460]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a72      	ldr	r2, [pc, #456]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003578:	f043 0308 	orr.w	r3, r3, #8
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	496d      	ldr	r1, [pc, #436]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003590:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	4968      	ldr	r1, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	e025      	b.n	80035f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a6:	4b66      	ldr	r3, [pc, #408]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4960      	ldr	r1, [pc, #384]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c4:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	495b      	ldr	r1, [pc, #364]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fd8c 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e380      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f2:	f000 fcc1 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	4950      	ldr	r1, [pc, #320]	; (8003744 <HAL_RCC_OscConfig+0x274>)
 8003604:	5ccb      	ldrb	r3, [r1, r3]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_RCC_OscConfig+0x278>)
 8003610:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCC_OscConfig+0x27c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fda8 	bl	800216c <HAL_InitTick>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d052      	beq.n	80036cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	e364      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d032      	beq.n	8003698 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a42      	ldr	r2, [pc, #264]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800363e:	f7fe fde5 	bl	800220c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003646:	f7fe fde1 	bl	800220c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e34d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a35      	ldr	r2, [pc, #212]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4930      	ldr	r1, [pc, #192]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	492b      	ldr	r1, [pc, #172]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 8003696:	e01a      	b.n	80036ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fdb2 	bl	800220c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ac:	f7fe fdae 	bl	800220c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e31a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1dc>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d073      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x21c>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d10e      	bne.n	8003704 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d10b      	bne.n	8003704 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d063      	beq.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d15f      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e2f7      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x24c>
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e025      	b.n	8003768 <HAL_RCC_OscConfig+0x298>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d114      	bne.n	8003750 <HAL_RCC_OscConfig+0x280>
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a02      	ldr	r2, [pc, #8]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e013      	b.n	8003768 <HAL_RCC_OscConfig+0x298>
 8003740:	40021000 	.word	0x40021000
 8003744:	08006410 	.word	0x08006410
 8003748:	20000004 	.word	0x20000004
 800374c:	20000008 	.word	0x20000008
 8003750:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a9f      	ldr	r2, [pc, #636]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b9d      	ldr	r3, [pc, #628]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9c      	ldr	r2, [pc, #624]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fd4c 	bl	800220c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fd48 	bl	800220c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e2b4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378a:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x2a8>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fd38 	bl	800220c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe fd34 	bl	800220c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e2a0      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2d0>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d060      	beq.n	8003890 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_OscConfig+0x310>
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d119      	bne.n	800380e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d116      	bne.n	800380e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e0:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_OscConfig+0x328>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e27d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	4973      	ldr	r1, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380c:	e040      	b.n	8003890 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d023      	beq.n	800385e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003816:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe fcf3 	bl	800220c <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fe fcef 	bl	800220c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e25b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800383c:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	495f      	ldr	r1, [pc, #380]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	e018      	b.n	8003890 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe fccf 	bl	800220c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003872:	f7fe fccb 	bl	800220c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e237      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003884:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d03c      	beq.n	8003916 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01c      	beq.n	80038de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038aa:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe fcaa 	bl	800220c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fe fca6 	bl	800220c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e212      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ef      	beq.n	80038bc <HAL_RCC_OscConfig+0x3ec>
 80038dc:	e01b      	b.n	8003916 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038de:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80038e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e4:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ee:	f7fe fc8d 	bl	800220c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fe fc89 	bl	800220c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e1f5      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1ef      	bne.n	80038f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80a6 	beq.w	8003a70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394c:	2301      	movs	r3, #1
 800394e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003950:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_RCC_OscConfig+0x508>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d118      	bne.n	800398e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_OscConfig+0x508>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x508>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003968:	f7fe fc50 	bl	800220c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7fe fc4c 	bl	800220c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1b8      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x508>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4d8>
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a6:	e029      	b.n	80039fc <HAL_RCC_OscConfig+0x52c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d115      	bne.n	80039dc <HAL_RCC_OscConfig+0x50c>
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <HAL_RCC_OscConfig+0x504>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d0:	e014      	b.n	80039fc <HAL_RCC_OscConfig+0x52c>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	4b9d      	ldr	r3, [pc, #628]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a9c      	ldr	r2, [pc, #624]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ec:	4b99      	ldr	r3, [pc, #612]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a98      	ldr	r2, [pc, #608]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d016      	beq.n	8003a32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe fc02 	bl	800220c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fbfe 	bl	800220c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e168      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a22:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ed      	beq.n	8003a0c <HAL_RCC_OscConfig+0x53c>
 8003a30:	e015      	b.n	8003a5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fbeb 	bl	800220c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fbe7 	bl	800220c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e151      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a50:	4b80      	ldr	r3, [pc, #512]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ed      	bne.n	8003a3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d03c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01c      	beq.n	8003abe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a84:	4b73      	ldr	r3, [pc, #460]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a8a:	4a72      	ldr	r2, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fe fbba 	bl	800220c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a9c:	f7fe fbb6 	bl	800220c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e122      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aae:	4b69      	ldr	r3, [pc, #420]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ef      	beq.n	8003a9c <HAL_RCC_OscConfig+0x5cc>
 8003abc:	e01b      	b.n	8003af6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac4:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fe fb9d 	bl	800220c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad6:	f7fe fb99 	bl	800220c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e105      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ef      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80f9 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	f040 80cf 	bne.w	8003ca8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b0a:	4b52      	ldr	r3, [pc, #328]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0203 	and.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d12c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d123      	bne.n	8003b78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d11b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d113      	bne.n	8003b78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d109      	bne.n	8003b78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	3b01      	subs	r3, #1
 8003b72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d071      	beq.n	8003c5c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d068      	beq.n	8003c50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b7e:	4b35      	ldr	r3, [pc, #212]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b8a:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0ac      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba6:	f7fe fb31 	bl	800220c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe fb2d 	bl	800220c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e099      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RCC_OscConfig+0x788>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bdc:	3a01      	subs	r2, #1
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	4311      	orrs	r1, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003be6:	0212      	lsls	r2, r2, #8
 8003be8:	4311      	orrs	r1, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bee:	0852      	lsrs	r2, r2, #1
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0552      	lsls	r2, r2, #21
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0652      	lsls	r2, r2, #25
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c06:	06d2      	lsls	r2, r2, #27
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4912      	ldr	r1, [pc, #72]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c28:	f7fe faf0 	bl	800220c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe faec 	bl	800220c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <HAL_RCC_OscConfig+0x784>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4e:	e050      	b.n	8003cf2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
 8003c54:	40021000 	.word	0x40021000
 8003c58:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d144      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c80:	f7fe fac4 	bl	800220c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fac0 	bl	800220c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e02c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x7b8>
 8003ca6:	e024      	b.n	8003cf2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d01f      	beq.n	8003cee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fe faa7 	bl	800220c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe faa3 	bl	800220c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e00f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	4905      	ldr	r1, [pc, #20]	; (8003cfc <HAL_RCC_OscConfig+0x82c>)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x830>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
 8003cec:	e001      	b.n	8003cf2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	feeefffc 	.word	0xfeeefffc

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e11d      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d910      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b8d      	ldr	r3, [pc, #564]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 020f 	bic.w	r2, r3, #15
 8003d32:	498b      	ldr	r1, [pc, #556]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b89      	ldr	r3, [pc, #548]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e105      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d908      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b7e      	ldr	r3, [pc, #504]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	497b      	ldr	r1, [pc, #492]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d079      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d11e      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0dc      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003d9e:	f000 fa09 	bl	80041b4 <RCC_GetSysClockFreqFromPLLSource>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4a70      	ldr	r2, [pc, #448]	; (8003f68 <HAL_RCC_ClockConfig+0x264>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d946      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003daa:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d140      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003db6:	4b6b      	ldr	r3, [pc, #428]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbe:	4a69      	ldr	r2, [pc, #420]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e035      	b.n	8003e38 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd4:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d115      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0b9      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dec:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0ad      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0a5      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e0c:	f000 f8b4 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a55      	ldr	r2, [pc, #340]	; (8003f68 <HAL_RCC_ClockConfig+0x264>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d90f      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e18:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e24:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2c:	4a4d      	ldr	r2, [pc, #308]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e38:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 0203 	bic.w	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4947      	ldr	r1, [pc, #284]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4a:	f7fe f9df 	bl	800220c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e52:	f7fe f9db 	bl	800220c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e077      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 020c 	and.w	r2, r3, #12
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d1eb      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d208      	bcs.n	8003eba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	492b      	ldr	r1, [pc, #172]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eba:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d210      	bcs.n	8003eea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 020f 	bic.w	r2, r3, #15
 8003ed0:	4923      	ldr	r1, [pc, #140]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_RCC_ClockConfig+0x25c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e036      	b.n	8003f58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4918      	ldr	r1, [pc, #96]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4910      	ldr	r1, [pc, #64]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f28:	f000 f826 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <HAL_RCC_ClockConfig+0x268>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x26c>)
 8003f46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x270>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe f90d 	bl	800216c <HAL_InitTick>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40022000 	.word	0x40022000
 8003f64:	40021000 	.word	0x40021000
 8003f68:	04c4b400 	.word	0x04c4b400
 8003f6c:	08006410 	.word	0x08006410
 8003f70:	20000004 	.word	0x20000004
 8003f74:	20000008 	.word	0x20000008

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d121      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d11e      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fac:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d134      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0xa6>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d003      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xac>
 800401c:	e005      	b.n	800402a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8004020:	617b      	str	r3, [r7, #20]
      break;
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e002      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	617b      	str	r3, [r7, #20]
      break;
 800402e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	fb03 f202 	mul.w	r2, r3, r2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0e5b      	lsrs	r3, r3, #25
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	3301      	adds	r3, #1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	08006428 	.word	0x08006428
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000004 	.word	0x20000004

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	08006420 	.word	0x08006420

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040d8:	f7ff ffda 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08006420 	.word	0x08006420

08004100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004118:	f7ff f916 	bl	8003348 <HAL_PWREx_GetVoltageRange>
 800411c:	6178      	str	r0, [r7, #20]
 800411e:	e014      	b.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b22      	ldr	r3, [pc, #136]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a21      	ldr	r2, [pc, #132]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004138:	f7ff f906 	bl	8003348 <HAL_PWREx_GetVoltageRange>
 800413c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004150:	d10b      	bne.n	800416a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d913      	bls.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2ba0      	cmp	r3, #160	; 0xa0
 800415c:	d902      	bls.n	8004164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800415e:	2302      	movs	r3, #2
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e00d      	b.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	e00a      	b.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b7f      	cmp	r3, #127	; 0x7f
 800416e:	d902      	bls.n	8004176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004170:	2302      	movs	r3, #2
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	e004      	b.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d101      	bne.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800417c:	2301      	movs	r3, #1
 800417e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 020f 	bic.w	r2, r3, #15
 8004188:	4909      	ldr	r1, [pc, #36]	; (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40022000 	.word	0x40022000

080041b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d00b      	beq.n	80041e2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d825      	bhi.n	800421c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d008      	beq.n	80041e8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11f      	bne.n	800421c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041de:	613b      	str	r3, [r7, #16]
    break;
 80041e0:	e01f      	b.n	8004222 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80041e4:	613b      	str	r3, [r7, #16]
    break;
 80041e6:	e01c      	b.n	8004222 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e005      	b.n	8004210 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004210:	4a1a      	ldr	r2, [pc, #104]	; (800427c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004218:	613b      	str	r3, [r7, #16]
    break;
 800421a:	e002      	b.n	8004222 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
    break;
 8004220:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	3301      	adds	r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	fb03 f202 	mul.w	r2, r3, r2
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0e5b      	lsrs	r3, r3, #25
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004262:	683b      	ldr	r3, [r7, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40021000 	.word	0x40021000
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200
 800427c:	08006428 	.word	0x08006428

08004280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004288:	2300      	movs	r3, #0
 800428a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800428c:	2300      	movs	r3, #0
 800428e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004298:	2b00      	cmp	r3, #0
 800429a:	d040      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d02a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d825      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042a8:	2b60      	cmp	r3, #96	; 0x60
 80042aa:	d026      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042ac:	2b60      	cmp	r3, #96	; 0x60
 80042ae:	d821      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d006      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d81d      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d010      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80042c0:	e018      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042c2:	4b89      	ldr	r3, [pc, #548]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a88      	ldr	r2, [pc, #544]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ce:	e015      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2100      	movs	r1, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fb02 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3320      	adds	r3, #32
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fbed 	bl	8004ac8 <RCCEx_PLLSAI2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	74fb      	strb	r3, [r7, #19]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80042fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004302:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004308:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	4975      	ldr	r1, [pc, #468]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004318:	e001      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d047      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d030      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d82a      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800433a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433e:	d02a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004344:	d824      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434a:	d008      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d81e      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d010      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800435c:	e018      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800435e:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4a61      	ldr	r2, [pc, #388]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004368:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800436a:	e015      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fab4 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3320      	adds	r3, #32
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fb9f 	bl	8004ac8 <RCCEx_PLLSAI2_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	74fb      	strb	r3, [r7, #19]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800439e:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	494e      	ldr	r1, [pc, #312]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043b4:	e001      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 809f 	beq.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043cc:	4b46      	ldr	r3, [pc, #280]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
 80043ee:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800440a:	f7fd feff 	bl	800220c <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004410:	e009      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fd fefb 	bl	800220c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	74fb      	strb	r3, [r7, #19]
        break;
 8004424:	e005      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d15b      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004438:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01f      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	429a      	cmp	r2, r3
 8004454:	d019      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004482:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd feba 	bl	800220c <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00b      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd feb6 	bl	800220c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d902      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	74fb      	strb	r3, [r7, #19]
            break;
 80044b2:	e006      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ec      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f4:	7c7b      	ldrb	r3, [r7, #17]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d105      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4ba0      	ldr	r3, [pc, #640]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a9f      	ldr	r2, [pc, #636]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004512:	4b9a      	ldr	r3, [pc, #616]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	4996      	ldr	r1, [pc, #600]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004534:	4b91      	ldr	r3, [pc, #580]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 020c 	bic.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	498e      	ldr	r1, [pc, #568]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004556:	4b89      	ldr	r3, [pc, #548]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	4985      	ldr	r1, [pc, #532]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004578:	4b80      	ldr	r3, [pc, #512]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	497d      	ldr	r1, [pc, #500]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800459a:	4b78      	ldr	r3, [pc, #480]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	4974      	ldr	r1, [pc, #464]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ca:	496c      	ldr	r1, [pc, #432]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ec:	4963      	ldr	r1, [pc, #396]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004600:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460e:	495b      	ldr	r1, [pc, #364]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	4952      	ldr	r1, [pc, #328]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004644:	4b4d      	ldr	r3, [pc, #308]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	494a      	ldr	r1, [pc, #296]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	4941      	ldr	r1, [pc, #260]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004688:	4b3c      	ldr	r3, [pc, #240]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004696:	4939      	ldr	r1, [pc, #228]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d028      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046aa:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	4930      	ldr	r1, [pc, #192]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c8:	d106      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4a2b      	ldr	r2, [pc, #172]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d4:	60d3      	str	r3, [r2, #12]
 80046d6:	e011      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f8f9 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d04d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004710:	d108      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800471e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004722:	e012      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004730:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004752:	d106      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a08      	ldr	r2, [pc, #32]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475e:	60d3      	str	r3, [r2, #12]
 8004760:	e020      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476a:	d109      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a02      	ldr	r2, [pc, #8]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	60d3      	str	r3, [r2, #12]
 8004778:	e014      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	2101      	movs	r1, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f8a5 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d028      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b0:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047be:	4947      	ldr	r1, [pc, #284]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d106      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a41      	ldr	r2, [pc, #260]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047da:	60d3      	str	r3, [r2, #12]
 80047dc:	e011      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e6:	d10c      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f876 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01e      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800480e:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481e:	492f      	ldr	r1, [pc, #188]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f851 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800485e:	f023 0204 	bic.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	491c      	ldr	r1, [pc, #112]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004882:	f023 0218 	bic.w	r2, r3, #24
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	4913      	ldr	r1, [pc, #76]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d017      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	490a      	ldr	r1, [pc, #40]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a04      	ldr	r2, [pc, #16]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ee:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048fa:	4b6f      	ldr	r3, [pc, #444]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d103      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
       ||
 800490e:	2b00      	cmp	r3, #0
 8004910:	d142      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	e03f      	b.n	8004998 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d018      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x72>
 8004920:	2b03      	cmp	r3, #3
 8004922:	d825      	bhi.n	8004970 <RCCEx_PLLSAI1_Config+0x90>
 8004924:	2b01      	cmp	r3, #1
 8004926:	d002      	beq.n	800492e <RCCEx_PLLSAI1_Config+0x4e>
 8004928:	2b02      	cmp	r3, #2
 800492a:	d009      	beq.n	8004940 <RCCEx_PLLSAI1_Config+0x60>
 800492c:	e020      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800492e:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493e:	e01a      	b.n	8004976 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004940:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d116      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004950:	e013      	b.n	800497a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004952:	4b59      	ldr	r3, [pc, #356]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800495e:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800496e:	e006      	b.n	800497e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e004      	b.n	8004980 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800497e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4949      	ldr	r1, [pc, #292]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 8086 	bne.w	8004aac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049a0:	4b45      	ldr	r3, [pc, #276]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a44      	ldr	r2, [pc, #272]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd fc2e 	bl	800220c <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b4:	f7fd fc2a 	bl	800220c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049c8:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ef      	bne.n	80049b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d168      	bne.n	8004aac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d113      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6892      	ldr	r2, [r2, #8]
 80049ec:	0211      	lsls	r1, r2, #8
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	06d2      	lsls	r2, r2, #27
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6852      	ldr	r2, [r2, #4]
 80049fa:	3a01      	subs	r2, #1
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	430a      	orrs	r2, r1
 8004a00:	492d      	ldr	r1, [pc, #180]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	610b      	str	r3, [r1, #16]
 8004a06:	e02d      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d115      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0e:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	0211      	lsls	r1, r2, #8
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6912      	ldr	r2, [r2, #16]
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0552      	lsls	r2, r2, #21
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6852      	ldr	r2, [r2, #4]
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	430a      	orrs	r2, r1
 8004a32:	4921      	ldr	r1, [pc, #132]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	610b      	str	r3, [r1, #16]
 8004a38:	e014      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	0211      	lsls	r1, r2, #8
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6952      	ldr	r2, [r2, #20]
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0652      	lsls	r2, r2, #25
 8004a52:	4311      	orrs	r1, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6852      	ldr	r2, [r2, #4]
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	4916      	ldr	r1, [pc, #88]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fd fbcc 	bl	800220c <HAL_GetTick>
 8004a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a76:	e009      	b.n	8004a8c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a78:	f7fd fbc8 	bl	800220c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d902      	bls.n	8004a8c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	73fb      	strb	r3, [r7, #15]
          break;
 8004a8a:	e005      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ef      	beq.n	8004a78 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	07ff800f 	.word	0x07ff800f
 8004ac0:	ff9f800f 	.word	0xff9f800f
 8004ac4:	f9ff800f 	.word	0xf9ff800f

08004ac8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad6:	4b72      	ldr	r3, [pc, #456]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00e      	beq.n	8004b00 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ae2:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d103      	bne.n	8004afa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
       ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d142      	bne.n	8004b80 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e03f      	b.n	8004b80 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d018      	beq.n	8004b3a <RCCEx_PLLSAI2_Config+0x72>
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d825      	bhi.n	8004b58 <RCCEx_PLLSAI2_Config+0x90>
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d002      	beq.n	8004b16 <RCCEx_PLLSAI2_Config+0x4e>
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d009      	beq.n	8004b28 <RCCEx_PLLSAI2_Config+0x60>
 8004b14:	e020      	b.n	8004b58 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b16:	4b62      	ldr	r3, [pc, #392]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11d      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b26:	e01a      	b.n	8004b5e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b28:	4b5d      	ldr	r3, [pc, #372]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b38:	e013      	b.n	8004b62 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b3a:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b46:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b56:	e006      	b.n	8004b66 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	e004      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d108      	bne.n	8004b80 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4949      	ldr	r1, [pc, #292]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8086 	bne.w	8004c94 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b88:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a44      	ldr	r2, [pc, #272]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fd fb3a 	bl	800220c <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b9a:	e009      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b9c:	f7fd fb36 	bl	800220c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	73fb      	strb	r3, [r7, #15]
        break;
 8004bae:	e005      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ef      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d168      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc8:	4b35      	ldr	r3, [pc, #212]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6892      	ldr	r2, [r2, #8]
 8004bd4:	0211      	lsls	r1, r2, #8
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	06d2      	lsls	r2, r2, #27
 8004bdc:	4311      	orrs	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6852      	ldr	r2, [r2, #4]
 8004be2:	3a01      	subs	r2, #1
 8004be4:	0112      	lsls	r2, r2, #4
 8004be6:	430a      	orrs	r2, r1
 8004be8:	492d      	ldr	r1, [pc, #180]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	614b      	str	r3, [r1, #20]
 8004bee:	e02d      	b.n	8004c4c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d115      	bne.n	8004c22 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	0211      	lsls	r1, r2, #8
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6912      	ldr	r2, [r2, #16]
 8004c08:	0852      	lsrs	r2, r2, #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	0552      	lsls	r2, r2, #21
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6852      	ldr	r2, [r2, #4]
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	4921      	ldr	r1, [pc, #132]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	614b      	str	r3, [r1, #20]
 8004c20:	e014      	b.n	8004c4c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c22:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	4b21      	ldr	r3, [pc, #132]	; (8004cac <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6892      	ldr	r2, [r2, #8]
 8004c2e:	0211      	lsls	r1, r2, #8
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6952      	ldr	r2, [r2, #20]
 8004c34:	0852      	lsrs	r2, r2, #1
 8004c36:	3a01      	subs	r2, #1
 8004c38:	0652      	lsls	r2, r2, #25
 8004c3a:	4311      	orrs	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6852      	ldr	r2, [r2, #4]
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	430a      	orrs	r2, r1
 8004c46:	4916      	ldr	r1, [pc, #88]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fad8 	bl	800220c <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c5e:	e009      	b.n	8004c74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c60:	f7fd fad4 	bl	800220c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d902      	bls.n	8004c74 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	73fb      	strb	r3, [r7, #15]
          break;
 8004c72:	e005      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ef      	beq.n	8004c60 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	07ff800f 	.word	0x07ff800f
 8004ca8:	ff9f800f 	.word	0xff9f800f
 8004cac:	f9ff800f 	.word	0xf9ff800f

08004cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e042      	b.n	8004d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fd f937 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2224      	movs	r2, #36	; 0x24
 8004cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fbb4 	bl	8005468 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8b5 	bl	8004e70 <UART_SetConfig>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e01b      	b.n	8004d48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fc33 	bl	80055ac <UART_CheckIdleState>
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d17c      	bne.n	8004e64 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_UART_Transmit+0x26>
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e075      	b.n	8004e66 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2221      	movs	r2, #33	; 0x21
 8004d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d8a:	f7fd fa3f 	bl	800220c <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da8:	d108      	bne.n	8004dbc <HAL_UART_Transmit+0x6c>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e003      	b.n	8004dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dc4:	e031      	b.n	8004e2a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc95 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e03e      	b.n	8004e66 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3302      	adds	r3, #2
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e008      	b.n	8004e18 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1c7      	bne.n	8004dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2140      	movs	r1, #64	; 0x40
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fc5d 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b08c      	sub	sp, #48	; 0x30
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4baa      	ldr	r3, [pc, #680]	; (8005148 <UART_SetConfig+0x2d8>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a9f      	ldr	r2, [pc, #636]	; (800514c <UART_SetConfig+0x2dc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ee6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f023 010f 	bic.w	r1, r3, #15
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a90      	ldr	r2, [pc, #576]	; (8005150 <UART_SetConfig+0x2e0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d125      	bne.n	8004f60 <UART_SetConfig+0xf0>
 8004f14:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <UART_SetConfig+0x2e4>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d81a      	bhi.n	8004f58 <UART_SetConfig+0xe8>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xb8>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3e:	e116      	b.n	800516e <UART_SetConfig+0x2fe>
 8004f40:	2302      	movs	r3, #2
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f46:	e112      	b.n	800516e <UART_SetConfig+0x2fe>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4e:	e10e      	b.n	800516e <UART_SetConfig+0x2fe>
 8004f50:	2308      	movs	r3, #8
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f56:	e10a      	b.n	800516e <UART_SetConfig+0x2fe>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e106      	b.n	800516e <UART_SetConfig+0x2fe>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a7c      	ldr	r2, [pc, #496]	; (8005158 <UART_SetConfig+0x2e8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d138      	bne.n	8004fdc <UART_SetConfig+0x16c>
 8004f6a:	4b7a      	ldr	r3, [pc, #488]	; (8005154 <UART_SetConfig+0x2e4>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	d82d      	bhi.n	8004fd4 <UART_SetConfig+0x164>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x110>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fd5 	.word	0x08004fd5
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fd5 	.word	0x08004fd5
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fd5 	.word	0x08004fd5
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e0d8      	b.n	800516e <UART_SetConfig+0x2fe>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e0d4      	b.n	800516e <UART_SetConfig+0x2fe>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e0d0      	b.n	800516e <UART_SetConfig+0x2fe>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e0cc      	b.n	800516e <UART_SetConfig+0x2fe>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fda:	e0c8      	b.n	800516e <UART_SetConfig+0x2fe>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5e      	ldr	r2, [pc, #376]	; (800515c <UART_SetConfig+0x2ec>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d125      	bne.n	8005032 <UART_SetConfig+0x1c2>
 8004fe6:	4b5b      	ldr	r3, [pc, #364]	; (8005154 <UART_SetConfig+0x2e4>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d016      	beq.n	8005022 <UART_SetConfig+0x1b2>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d818      	bhi.n	800502a <UART_SetConfig+0x1ba>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d00a      	beq.n	8005012 <UART_SetConfig+0x1a2>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d814      	bhi.n	800502a <UART_SetConfig+0x1ba>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <UART_SetConfig+0x19a>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d008      	beq.n	800501a <UART_SetConfig+0x1aa>
 8005008:	e00f      	b.n	800502a <UART_SetConfig+0x1ba>
 800500a:	2300      	movs	r3, #0
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005010:	e0ad      	b.n	800516e <UART_SetConfig+0x2fe>
 8005012:	2302      	movs	r3, #2
 8005014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005018:	e0a9      	b.n	800516e <UART_SetConfig+0x2fe>
 800501a:	2304      	movs	r3, #4
 800501c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005020:	e0a5      	b.n	800516e <UART_SetConfig+0x2fe>
 8005022:	2308      	movs	r3, #8
 8005024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005028:	e0a1      	b.n	800516e <UART_SetConfig+0x2fe>
 800502a:	2310      	movs	r3, #16
 800502c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005030:	e09d      	b.n	800516e <UART_SetConfig+0x2fe>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4a      	ldr	r2, [pc, #296]	; (8005160 <UART_SetConfig+0x2f0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0x218>
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <UART_SetConfig+0x2e4>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005046:	2bc0      	cmp	r3, #192	; 0xc0
 8005048:	d016      	beq.n	8005078 <UART_SetConfig+0x208>
 800504a:	2bc0      	cmp	r3, #192	; 0xc0
 800504c:	d818      	bhi.n	8005080 <UART_SetConfig+0x210>
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d00a      	beq.n	8005068 <UART_SetConfig+0x1f8>
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d814      	bhi.n	8005080 <UART_SetConfig+0x210>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <UART_SetConfig+0x1f0>
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d008      	beq.n	8005070 <UART_SetConfig+0x200>
 800505e:	e00f      	b.n	8005080 <UART_SetConfig+0x210>
 8005060:	2300      	movs	r3, #0
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005066:	e082      	b.n	800516e <UART_SetConfig+0x2fe>
 8005068:	2302      	movs	r3, #2
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e07e      	b.n	800516e <UART_SetConfig+0x2fe>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005076:	e07a      	b.n	800516e <UART_SetConfig+0x2fe>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507e:	e076      	b.n	800516e <UART_SetConfig+0x2fe>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e072      	b.n	800516e <UART_SetConfig+0x2fe>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a35      	ldr	r2, [pc, #212]	; (8005164 <UART_SetConfig+0x2f4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d12a      	bne.n	80050e8 <UART_SetConfig+0x278>
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <UART_SetConfig+0x2e4>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a0:	d01a      	beq.n	80050d8 <UART_SetConfig+0x268>
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a6:	d81b      	bhi.n	80050e0 <UART_SetConfig+0x270>
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d00c      	beq.n	80050c8 <UART_SetConfig+0x258>
 80050ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b2:	d815      	bhi.n	80050e0 <UART_SetConfig+0x270>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x250>
 80050b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050bc:	d008      	beq.n	80050d0 <UART_SetConfig+0x260>
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x270>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e052      	b.n	800516e <UART_SetConfig+0x2fe>
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e04e      	b.n	800516e <UART_SetConfig+0x2fe>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e04a      	b.n	800516e <UART_SetConfig+0x2fe>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e046      	b.n	800516e <UART_SetConfig+0x2fe>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e042      	b.n	800516e <UART_SetConfig+0x2fe>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <UART_SetConfig+0x2dc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d13a      	bne.n	8005168 <UART_SetConfig+0x2f8>
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <UART_SetConfig+0x2e4>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005100:	d01a      	beq.n	8005138 <UART_SetConfig+0x2c8>
 8005102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005106:	d81b      	bhi.n	8005140 <UART_SetConfig+0x2d0>
 8005108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510c:	d00c      	beq.n	8005128 <UART_SetConfig+0x2b8>
 800510e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005112:	d815      	bhi.n	8005140 <UART_SetConfig+0x2d0>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <UART_SetConfig+0x2b0>
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	d008      	beq.n	8005130 <UART_SetConfig+0x2c0>
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x2d0>
 8005120:	2300      	movs	r3, #0
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e022      	b.n	800516e <UART_SetConfig+0x2fe>
 8005128:	2302      	movs	r3, #2
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e01e      	b.n	800516e <UART_SetConfig+0x2fe>
 8005130:	2304      	movs	r3, #4
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005136:	e01a      	b.n	800516e <UART_SetConfig+0x2fe>
 8005138:	2308      	movs	r3, #8
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e016      	b.n	800516e <UART_SetConfig+0x2fe>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e012      	b.n	800516e <UART_SetConfig+0x2fe>
 8005148:	cfff69f3 	.word	0xcfff69f3
 800514c:	40008000 	.word	0x40008000
 8005150:	40013800 	.word	0x40013800
 8005154:	40021000 	.word	0x40021000
 8005158:	40004400 	.word	0x40004400
 800515c:	40004800 	.word	0x40004800
 8005160:	40004c00 	.word	0x40004c00
 8005164:	40005000 	.word	0x40005000
 8005168:	2310      	movs	r3, #16
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4aae      	ldr	r2, [pc, #696]	; (800542c <UART_SetConfig+0x5bc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f040 8097 	bne.w	80052a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800517a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800517e:	2b08      	cmp	r3, #8
 8005180:	d823      	bhi.n	80051ca <UART_SetConfig+0x35a>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x318>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051cb 	.word	0x080051cb
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051cb 	.word	0x080051cb
 8005198:	080051bb 	.word	0x080051bb
 800519c:	080051cb 	.word	0x080051cb
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051cb 	.word	0x080051cb
 80051a8:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe ff7c 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80051b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b2:	e010      	b.n	80051d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b9e      	ldr	r3, [pc, #632]	; (8005430 <UART_SetConfig+0x5c0>)
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051b8:	e00d      	b.n	80051d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fe fedd 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80051be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051c0:	e009      	b.n	80051d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051c8:	e005      	b.n	80051d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8130 	beq.w	800543e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	4a94      	ldr	r2, [pc, #592]	; (8005434 <UART_SetConfig+0x5c4>)
 80051e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d305      	bcc.n	800520e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005214:	e113      	b.n	800543e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2200      	movs	r2, #0
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	60fa      	str	r2, [r7, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	4a84      	ldr	r2, [pc, #528]	; (8005434 <UART_SetConfig+0x5c4>)
 8005224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005228:	b29b      	uxth	r3, r3
 800522a:	2200      	movs	r2, #0
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005238:	f7fb fa76 	bl	8000728 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	020b      	lsls	r3, r1, #8
 800524e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005252:	0202      	lsls	r2, r0, #8
 8005254:	6979      	ldr	r1, [r7, #20]
 8005256:	6849      	ldr	r1, [r1, #4]
 8005258:	0849      	lsrs	r1, r1, #1
 800525a:	2000      	movs	r0, #0
 800525c:	460c      	mov	r4, r1
 800525e:	4605      	mov	r5, r0
 8005260:	eb12 0804 	adds.w	r8, r2, r4
 8005264:	eb43 0905 	adc.w	r9, r3, r5
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	469a      	mov	sl, r3
 8005270:	4693      	mov	fp, r2
 8005272:	4652      	mov	r2, sl
 8005274:	465b      	mov	r3, fp
 8005276:	4640      	mov	r0, r8
 8005278:	4649      	mov	r1, r9
 800527a:	f7fb fa55 	bl	8000728 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4613      	mov	r3, r2
 8005284:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528c:	d308      	bcc.n	80052a0 <UART_SetConfig+0x430>
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005294:	d204      	bcs.n	80052a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e0ce      	b.n	800543e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052a6:	e0ca      	b.n	800543e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	d166      	bne.n	8005380 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d827      	bhi.n	800530a <UART_SetConfig+0x49a>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x450>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fee0 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ea:	e014      	b.n	8005316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe fef2 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 80052f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f2:	e010      	b.n	8005316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b4e      	ldr	r3, [pc, #312]	; (8005430 <UART_SetConfig+0x5c0>)
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f8:	e00d      	b.n	8005316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fe fe3d 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005300:	e009      	b.n	8005316 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005308:	e005      	b.n	8005316 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8090 	beq.w	800543e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	4a44      	ldr	r2, [pc, #272]	; (8005434 <UART_SetConfig+0x5c4>)
 8005324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005328:	461a      	mov	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005330:	005a      	lsls	r2, r3, #1
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d916      	bls.n	8005378 <UART_SetConfig+0x508>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d212      	bcs.n	8005378 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f023 030f 	bic.w	r3, r3, #15
 800535a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	b29a      	uxth	r2, r3
 8005368:	8bfb      	ldrh	r3, [r7, #30]
 800536a:	4313      	orrs	r3, r2
 800536c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	8bfa      	ldrh	r2, [r7, #30]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e062      	b.n	800543e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800537e:	e05e      	b.n	800543e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005384:	2b08      	cmp	r3, #8
 8005386:	d828      	bhi.n	80053da <UART_SetConfig+0x56a>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x520>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe fe78 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053ba:	e014      	b.n	80053e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe fe8a 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <UART_SetConfig+0x5c0>)
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fdd5 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80053ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053e4:	bf00      	nop
    }

    if (pclk != 0U)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d028      	beq.n	800543e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	4a10      	ldr	r2, [pc, #64]	; (8005434 <UART_SetConfig+0x5c4>)
 80053f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	441a      	add	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d910      	bls.n	8005438 <UART_SetConfig+0x5c8>
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d20c      	bcs.n	8005438 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	b29a      	uxth	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e009      	b.n	800543e <UART_SetConfig+0x5ce>
 800542a:	bf00      	nop
 800542c:	40008000 	.word	0x40008000
 8005430:	00f42400 	.word	0x00f42400
 8005434:	08006458 	.word	0x08006458
      }
      else
      {
        ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2201      	movs	r2, #1
 8005442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2201      	movs	r2, #1
 800544a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800545a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800545e:	4618      	mov	r0, r3
 8005460:	3730      	adds	r7, #48	; 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005566:	d10a      	bne.n	800557e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b098      	sub	sp, #96	; 0x60
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055bc:	f7fc fe26 	bl	800220c <HAL_GetTick>
 80055c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d12f      	bne.n	8005630 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f88e 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d022      	beq.n	8005630 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
 800560a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800560e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e063      	b.n	80056f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b04      	cmp	r3, #4
 800563c:	d149      	bne.n	80056d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005646:	2200      	movs	r2, #0
 8005648:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f857 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d03c      	beq.n	80056d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	623b      	str	r3, [r7, #32]
   return(result);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800566c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005676:	633b      	str	r3, [r7, #48]	; 0x30
 8005678:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60fb      	str	r3, [r7, #12]
   return(result);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056aa:	61fa      	str	r2, [r7, #28]
 80056ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	69b9      	ldr	r1, [r7, #24]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	617b      	str	r3, [r7, #20]
   return(result);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e012      	b.n	80056f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3758      	adds	r7, #88	; 0x58
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	e049      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d045      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571a:	f7fc fd77 	bl	800220c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <UART_WaitOnFlagUntilTimeout+0x30>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e048      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d031      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d110      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2208      	movs	r2, #8
 8005756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f838 	bl	80057ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2208      	movs	r2, #8
 8005762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e029      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005780:	d111      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f81e 	bl	80057ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e00f      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d0a6      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b095      	sub	sp, #84	; 0x54
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	643b      	str	r3, [r7, #64]	; 0x40
 80057f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	61fb      	str	r3, [r7, #28]
   return(result);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e3      	bne.n	8005808 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d118      	bne.n	800587a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	60bb      	str	r3, [r7, #8]
   return(result);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f023 0310 	bic.w	r3, r3, #16
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6979      	ldr	r1, [r7, #20]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	613b      	str	r3, [r7, #16]
   return(result);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e6      	bne.n	8005848 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800588e:	bf00      	nop
 8005890:	3754      	adds	r7, #84	; 0x54
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e027      	b.n	8005900 <HAL_UARTEx_DisableFifoMode+0x66>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2224      	movs	r2, #36	; 0x24
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005920:	2302      	movs	r3, #2
 8005922:	e02d      	b.n	8005980 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f84f 	bl	8005a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e02d      	b.n	80059fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2224      	movs	r2, #36	; 0x24
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f811 	bl	8005a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a24:	e031      	b.n	8005a8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a26:	2308      	movs	r3, #8
 8005a28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	0e5b      	lsrs	r3, r3, #25
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	0f5b      	lsrs	r3, r3, #29
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	7b3a      	ldrb	r2, [r7, #12]
 8005a52:	4911      	ldr	r1, [pc, #68]	; (8005a98 <UARTEx_SetNbDataToProcess+0x94>)
 8005a54:	5c8a      	ldrb	r2, [r1, r2]
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a5a:	7b3a      	ldrb	r2, [r7, #12]
 8005a5c:	490f      	ldr	r1, [pc, #60]	; (8005a9c <UARTEx_SetNbDataToProcess+0x98>)
 8005a5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	7b7a      	ldrb	r2, [r7, #13]
 8005a70:	4909      	ldr	r1, [pc, #36]	; (8005a98 <UARTEx_SetNbDataToProcess+0x94>)
 8005a72:	5c8a      	ldrb	r2, [r1, r2]
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a78:	7b7a      	ldrb	r2, [r7, #13]
 8005a7a:	4908      	ldr	r1, [pc, #32]	; (8005a9c <UARTEx_SetNbDataToProcess+0x98>)
 8005a7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	08006470 	.word	0x08006470
 8005a9c:	08006478 	.word	0x08006478

08005aa0 <siprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	; 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab0:	4809      	ldr	r0, [pc, #36]	; (8005ad8 <siprintf+0x38>)
 8005ab2:	9107      	str	r1, [sp, #28]
 8005ab4:	9104      	str	r1, [sp, #16]
 8005ab6:	4909      	ldr	r1, [pc, #36]	; (8005adc <siprintf+0x3c>)
 8005ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	a902      	add	r1, sp, #8
 8005ac4:	f000 f9a0 	bl	8005e08 <_svfiprintf_r>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	b01c      	add	sp, #112	; 0x70
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	2000005c 	.word	0x2000005c
 8005adc:	ffff0208 	.word	0xffff0208

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000005c 	.word	0x2000005c

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 fc6a 	bl	80063e8 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	080064bc 	.word	0x080064bc
 8005b38:	080064bc 	.word	0x080064bc
 8005b3c:	080064bc 	.word	0x080064bc
 8005b40:	080064c0 	.word	0x080064c0

08005b44 <__retarget_lock_acquire_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <__retarget_lock_release_recursive>:
 8005b46:	4770      	bx	lr

08005b48 <memcpy>:
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	4770      	bx	lr
 8005b54:	b510      	push	{r4, lr}
 8005b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d1f9      	bne.n	8005b56 <memcpy+0xe>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <_free_r>:
 8005b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d044      	beq.n	8005bf4 <_free_r+0x90>
 8005b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6e:	9001      	str	r0, [sp, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f1a1 0404 	sub.w	r4, r1, #4
 8005b76:	bfb8      	it	lt
 8005b78:	18e4      	addlt	r4, r4, r3
 8005b7a:	f000 f8df 	bl	8005d3c <__malloc_lock>
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <_free_r+0x94>)
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x30>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b90:	f000 b8da 	b.w	8005d48 <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x46>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x22>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x50>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x46>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1855      	adds	r5, r2, r1
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x70>
 8005bbc:	6824      	ldr	r4, [r4, #0]
 8005bbe:	4421      	add	r1, r4
 8005bc0:	1854      	adds	r4, r2, r1
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x26>
 8005bc8:	681c      	ldr	r4, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	440c      	add	r4, r1
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x26>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x78>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x26>
 8005bdc:	6825      	ldr	r5, [r4, #0]
 8005bde:	1961      	adds	r1, r4, r5
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x26>
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
 8005bf8:	20000378 	.word	0x20000378

08005bfc <sbrk_aligned>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4e0e      	ldr	r6, [pc, #56]	; (8005c38 <sbrk_aligned+0x3c>)
 8005c00:	460c      	mov	r4, r1
 8005c02:	6831      	ldr	r1, [r6, #0]
 8005c04:	4605      	mov	r5, r0
 8005c06:	b911      	cbnz	r1, 8005c0e <sbrk_aligned+0x12>
 8005c08:	f000 fba6 	bl	8006358 <_sbrk_r>
 8005c0c:	6030      	str	r0, [r6, #0]
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 fba1 	bl	8006358 <_sbrk_r>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	d00a      	beq.n	8005c30 <sbrk_aligned+0x34>
 8005c1a:	1cc4      	adds	r4, r0, #3
 8005c1c:	f024 0403 	bic.w	r4, r4, #3
 8005c20:	42a0      	cmp	r0, r4
 8005c22:	d007      	beq.n	8005c34 <sbrk_aligned+0x38>
 8005c24:	1a21      	subs	r1, r4, r0
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fb96 	bl	8006358 <_sbrk_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d101      	bne.n	8005c34 <sbrk_aligned+0x38>
 8005c30:	f04f 34ff 	mov.w	r4, #4294967295
 8005c34:	4620      	mov	r0, r4
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	2000037c 	.word	0x2000037c

08005c3c <_malloc_r>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	1ccd      	adds	r5, r1, #3
 8005c42:	f025 0503 	bic.w	r5, r5, #3
 8005c46:	3508      	adds	r5, #8
 8005c48:	2d0c      	cmp	r5, #12
 8005c4a:	bf38      	it	cc
 8005c4c:	250c      	movcc	r5, #12
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	4607      	mov	r7, r0
 8005c52:	db01      	blt.n	8005c58 <_malloc_r+0x1c>
 8005c54:	42a9      	cmp	r1, r5
 8005c56:	d905      	bls.n	8005c64 <_malloc_r+0x28>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	4630      	mov	r0, r6
 8005c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d38 <_malloc_r+0xfc>
 8005c68:	f000 f868 	bl	8005d3c <__malloc_lock>
 8005c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c70:	461c      	mov	r4, r3
 8005c72:	bb5c      	cbnz	r4, 8005ccc <_malloc_r+0x90>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7ff ffc0 	bl	8005bfc <sbrk_aligned>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	4604      	mov	r4, r0
 8005c80:	d155      	bne.n	8005d2e <_malloc_r+0xf2>
 8005c82:	f8d8 4000 	ldr.w	r4, [r8]
 8005c86:	4626      	mov	r6, r4
 8005c88:	2e00      	cmp	r6, #0
 8005c8a:	d145      	bne.n	8005d18 <_malloc_r+0xdc>
 8005c8c:	2c00      	cmp	r4, #0
 8005c8e:	d048      	beq.n	8005d22 <_malloc_r+0xe6>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	4631      	mov	r1, r6
 8005c94:	4638      	mov	r0, r7
 8005c96:	eb04 0903 	add.w	r9, r4, r3
 8005c9a:	f000 fb5d 	bl	8006358 <_sbrk_r>
 8005c9e:	4581      	cmp	r9, r0
 8005ca0:	d13f      	bne.n	8005d22 <_malloc_r+0xe6>
 8005ca2:	6821      	ldr	r1, [r4, #0]
 8005ca4:	1a6d      	subs	r5, r5, r1
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7ff ffa7 	bl	8005bfc <sbrk_aligned>
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d037      	beq.n	8005d22 <_malloc_r+0xe6>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	442b      	add	r3, r5
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d038      	beq.n	8005d32 <_malloc_r+0xf6>
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	42a2      	cmp	r2, r4
 8005cc4:	d12b      	bne.n	8005d1e <_malloc_r+0xe2>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	e00f      	b.n	8005cec <_malloc_r+0xb0>
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	1b52      	subs	r2, r2, r5
 8005cd0:	d41f      	bmi.n	8005d12 <_malloc_r+0xd6>
 8005cd2:	2a0b      	cmp	r2, #11
 8005cd4:	d917      	bls.n	8005d06 <_malloc_r+0xca>
 8005cd6:	1961      	adds	r1, r4, r5
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	6025      	str	r5, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	6059      	strne	r1, [r3, #4]
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	bf08      	it	eq
 8005ce4:	f8c8 1000 	streq.w	r1, [r8]
 8005ce8:	5162      	str	r2, [r4, r5]
 8005cea:	604b      	str	r3, [r1, #4]
 8005cec:	4638      	mov	r0, r7
 8005cee:	f104 060b 	add.w	r6, r4, #11
 8005cf2:	f000 f829 	bl	8005d48 <__malloc_unlock>
 8005cf6:	f026 0607 	bic.w	r6, r6, #7
 8005cfa:	1d23      	adds	r3, r4, #4
 8005cfc:	1af2      	subs	r2, r6, r3
 8005cfe:	d0ae      	beq.n	8005c5e <_malloc_r+0x22>
 8005d00:	1b9b      	subs	r3, r3, r6
 8005d02:	50a3      	str	r3, [r4, r2]
 8005d04:	e7ab      	b.n	8005c5e <_malloc_r+0x22>
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	6862      	ldr	r2, [r4, #4]
 8005d0a:	d1dd      	bne.n	8005cc8 <_malloc_r+0x8c>
 8005d0c:	f8c8 2000 	str.w	r2, [r8]
 8005d10:	e7ec      	b.n	8005cec <_malloc_r+0xb0>
 8005d12:	4623      	mov	r3, r4
 8005d14:	6864      	ldr	r4, [r4, #4]
 8005d16:	e7ac      	b.n	8005c72 <_malloc_r+0x36>
 8005d18:	4634      	mov	r4, r6
 8005d1a:	6876      	ldr	r6, [r6, #4]
 8005d1c:	e7b4      	b.n	8005c88 <_malloc_r+0x4c>
 8005d1e:	4613      	mov	r3, r2
 8005d20:	e7cc      	b.n	8005cbc <_malloc_r+0x80>
 8005d22:	230c      	movs	r3, #12
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	4638      	mov	r0, r7
 8005d28:	f000 f80e 	bl	8005d48 <__malloc_unlock>
 8005d2c:	e797      	b.n	8005c5e <_malloc_r+0x22>
 8005d2e:	6025      	str	r5, [r4, #0]
 8005d30:	e7dc      	b.n	8005cec <_malloc_r+0xb0>
 8005d32:	605b      	str	r3, [r3, #4]
 8005d34:	deff      	udf	#255	; 0xff
 8005d36:	bf00      	nop
 8005d38:	20000378 	.word	0x20000378

08005d3c <__malloc_lock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	; (8005d44 <__malloc_lock+0x8>)
 8005d3e:	f7ff bf01 	b.w	8005b44 <__retarget_lock_acquire_recursive>
 8005d42:	bf00      	nop
 8005d44:	20000374 	.word	0x20000374

08005d48 <__malloc_unlock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	; (8005d50 <__malloc_unlock+0x8>)
 8005d4a:	f7ff befc 	b.w	8005b46 <__retarget_lock_release_recursive>
 8005d4e:	bf00      	nop
 8005d50:	20000374 	.word	0x20000374

08005d54 <__ssputs_r>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	688e      	ldr	r6, [r1, #8]
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	42be      	cmp	r6, r7
 8005d5e:	680b      	ldr	r3, [r1, #0]
 8005d60:	4682      	mov	sl, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	4690      	mov	r8, r2
 8005d66:	d82c      	bhi.n	8005dc2 <__ssputs_r+0x6e>
 8005d68:	898a      	ldrh	r2, [r1, #12]
 8005d6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d6e:	d026      	beq.n	8005dbe <__ssputs_r+0x6a>
 8005d70:	6965      	ldr	r5, [r4, #20]
 8005d72:	6909      	ldr	r1, [r1, #16]
 8005d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d78:	eba3 0901 	sub.w	r9, r3, r1
 8005d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d80:	1c7b      	adds	r3, r7, #1
 8005d82:	444b      	add	r3, r9
 8005d84:	106d      	asrs	r5, r5, #1
 8005d86:	429d      	cmp	r5, r3
 8005d88:	bf38      	it	cc
 8005d8a:	461d      	movcc	r5, r3
 8005d8c:	0553      	lsls	r3, r2, #21
 8005d8e:	d527      	bpl.n	8005de0 <__ssputs_r+0x8c>
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7ff ff53 	bl	8005c3c <_malloc_r>
 8005d96:	4606      	mov	r6, r0
 8005d98:	b360      	cbz	r0, 8005df4 <__ssputs_r+0xa0>
 8005d9a:	6921      	ldr	r1, [r4, #16]
 8005d9c:	464a      	mov	r2, r9
 8005d9e:	f7ff fed3 	bl	8005b48 <memcpy>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	6126      	str	r6, [r4, #16]
 8005db0:	6165      	str	r5, [r4, #20]
 8005db2:	444e      	add	r6, r9
 8005db4:	eba5 0509 	sub.w	r5, r5, r9
 8005db8:	6026      	str	r6, [r4, #0]
 8005dba:	60a5      	str	r5, [r4, #8]
 8005dbc:	463e      	mov	r6, r7
 8005dbe:	42be      	cmp	r6, r7
 8005dc0:	d900      	bls.n	8005dc4 <__ssputs_r+0x70>
 8005dc2:	463e      	mov	r6, r7
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	4641      	mov	r1, r8
 8005dca:	f000 faab 	bl	8006324 <memmove>
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	1b9b      	subs	r3, r3, r6
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	4433      	add	r3, r6
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	462a      	mov	r2, r5
 8005de2:	f000 fac9 	bl	8006378 <_realloc_r>
 8005de6:	4606      	mov	r6, r0
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1e0      	bne.n	8005dae <__ssputs_r+0x5a>
 8005dec:	6921      	ldr	r1, [r4, #16]
 8005dee:	4650      	mov	r0, sl
 8005df0:	f7ff feb8 	bl	8005b64 <_free_r>
 8005df4:	230c      	movs	r3, #12
 8005df6:	f8ca 3000 	str.w	r3, [sl]
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	e7e9      	b.n	8005ddc <__ssputs_r+0x88>

08005e08 <_svfiprintf_r>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	4698      	mov	r8, r3
 8005e0e:	898b      	ldrh	r3, [r1, #12]
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	b09d      	sub	sp, #116	; 0x74
 8005e14:	4607      	mov	r7, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	d50e      	bpl.n	8005e3a <_svfiprintf_r+0x32>
 8005e1c:	690b      	ldr	r3, [r1, #16]
 8005e1e:	b963      	cbnz	r3, 8005e3a <_svfiprintf_r+0x32>
 8005e20:	2140      	movs	r1, #64	; 0x40
 8005e22:	f7ff ff0b 	bl	8005c3c <_malloc_r>
 8005e26:	6028      	str	r0, [r5, #0]
 8005e28:	6128      	str	r0, [r5, #16]
 8005e2a:	b920      	cbnz	r0, 8005e36 <_svfiprintf_r+0x2e>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	e0d0      	b.n	8005fd8 <_svfiprintf_r+0x1d0>
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	616b      	str	r3, [r5, #20]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e3e:	2320      	movs	r3, #32
 8005e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e48:	2330      	movs	r3, #48	; 0x30
 8005e4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ff0 <_svfiprintf_r+0x1e8>
 8005e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e52:	f04f 0901 	mov.w	r9, #1
 8005e56:	4623      	mov	r3, r4
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e5e:	b10a      	cbz	r2, 8005e64 <_svfiprintf_r+0x5c>
 8005e60:	2a25      	cmp	r2, #37	; 0x25
 8005e62:	d1f9      	bne.n	8005e58 <_svfiprintf_r+0x50>
 8005e64:	ebba 0b04 	subs.w	fp, sl, r4
 8005e68:	d00b      	beq.n	8005e82 <_svfiprintf_r+0x7a>
 8005e6a:	465b      	mov	r3, fp
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4638      	mov	r0, r7
 8005e72:	f7ff ff6f 	bl	8005d54 <__ssputs_r>
 8005e76:	3001      	adds	r0, #1
 8005e78:	f000 80a9 	beq.w	8005fce <_svfiprintf_r+0x1c6>
 8005e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e7e:	445a      	add	r2, fp
 8005e80:	9209      	str	r2, [sp, #36]	; 0x24
 8005e82:	f89a 3000 	ldrb.w	r3, [sl]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80a1 	beq.w	8005fce <_svfiprintf_r+0x1c6>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e96:	f10a 0a01 	add.w	sl, sl, #1
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	9307      	str	r3, [sp, #28]
 8005e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ea4:	4654      	mov	r4, sl
 8005ea6:	2205      	movs	r2, #5
 8005ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eac:	4850      	ldr	r0, [pc, #320]	; (8005ff0 <_svfiprintf_r+0x1e8>)
 8005eae:	f7fa f9a7 	bl	8000200 <memchr>
 8005eb2:	9a04      	ldr	r2, [sp, #16]
 8005eb4:	b9d8      	cbnz	r0, 8005eee <_svfiprintf_r+0xe6>
 8005eb6:	06d0      	lsls	r0, r2, #27
 8005eb8:	bf44      	itt	mi
 8005eba:	2320      	movmi	r3, #32
 8005ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ec0:	0711      	lsls	r1, r2, #28
 8005ec2:	bf44      	itt	mi
 8005ec4:	232b      	movmi	r3, #43	; 0x2b
 8005ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eca:	f89a 3000 	ldrb.w	r3, [sl]
 8005ece:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed0:	d015      	beq.n	8005efe <_svfiprintf_r+0xf6>
 8005ed2:	9a07      	ldr	r2, [sp, #28]
 8005ed4:	4654      	mov	r4, sl
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f04f 0c0a 	mov.w	ip, #10
 8005edc:	4621      	mov	r1, r4
 8005ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee2:	3b30      	subs	r3, #48	; 0x30
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d94d      	bls.n	8005f84 <_svfiprintf_r+0x17c>
 8005ee8:	b1b0      	cbz	r0, 8005f18 <_svfiprintf_r+0x110>
 8005eea:	9207      	str	r2, [sp, #28]
 8005eec:	e014      	b.n	8005f18 <_svfiprintf_r+0x110>
 8005eee:	eba0 0308 	sub.w	r3, r0, r8
 8005ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	46a2      	mov	sl, r4
 8005efc:	e7d2      	b.n	8005ea4 <_svfiprintf_r+0x9c>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	1d19      	adds	r1, r3, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	9103      	str	r1, [sp, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfbb      	ittet	lt
 8005f0a:	425b      	neglt	r3, r3
 8005f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f10:	9307      	strge	r3, [sp, #28]
 8005f12:	9307      	strlt	r3, [sp, #28]
 8005f14:	bfb8      	it	lt
 8005f16:	9204      	strlt	r2, [sp, #16]
 8005f18:	7823      	ldrb	r3, [r4, #0]
 8005f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1c:	d10c      	bne.n	8005f38 <_svfiprintf_r+0x130>
 8005f1e:	7863      	ldrb	r3, [r4, #1]
 8005f20:	2b2a      	cmp	r3, #42	; 0x2a
 8005f22:	d134      	bne.n	8005f8e <_svfiprintf_r+0x186>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9203      	str	r2, [sp, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bfb8      	it	lt
 8005f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f34:	3402      	adds	r4, #2
 8005f36:	9305      	str	r3, [sp, #20]
 8005f38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006000 <_svfiprintf_r+0x1f8>
 8005f3c:	7821      	ldrb	r1, [r4, #0]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	4650      	mov	r0, sl
 8005f42:	f7fa f95d 	bl	8000200 <memchr>
 8005f46:	b138      	cbz	r0, 8005f58 <_svfiprintf_r+0x150>
 8005f48:	9b04      	ldr	r3, [sp, #16]
 8005f4a:	eba0 000a 	sub.w	r0, r0, sl
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	4082      	lsls	r2, r0
 8005f52:	4313      	orrs	r3, r2
 8005f54:	3401      	adds	r4, #1
 8005f56:	9304      	str	r3, [sp, #16]
 8005f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5c:	4825      	ldr	r0, [pc, #148]	; (8005ff4 <_svfiprintf_r+0x1ec>)
 8005f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f62:	2206      	movs	r2, #6
 8005f64:	f7fa f94c 	bl	8000200 <memchr>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d038      	beq.n	8005fde <_svfiprintf_r+0x1d6>
 8005f6c:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <_svfiprintf_r+0x1f0>)
 8005f6e:	bb1b      	cbnz	r3, 8005fb8 <_svfiprintf_r+0x1b0>
 8005f70:	9b03      	ldr	r3, [sp, #12]
 8005f72:	3307      	adds	r3, #7
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	3308      	adds	r3, #8
 8005f7a:	9303      	str	r3, [sp, #12]
 8005f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7e:	4433      	add	r3, r6
 8005f80:	9309      	str	r3, [sp, #36]	; 0x24
 8005f82:	e768      	b.n	8005e56 <_svfiprintf_r+0x4e>
 8005f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f88:	460c      	mov	r4, r1
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e7a6      	b.n	8005edc <_svfiprintf_r+0xd4>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	3401      	adds	r4, #1
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f04f 0c0a 	mov.w	ip, #10
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa0:	3a30      	subs	r2, #48	; 0x30
 8005fa2:	2a09      	cmp	r2, #9
 8005fa4:	d903      	bls.n	8005fae <_svfiprintf_r+0x1a6>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0c6      	beq.n	8005f38 <_svfiprintf_r+0x130>
 8005faa:	9105      	str	r1, [sp, #20]
 8005fac:	e7c4      	b.n	8005f38 <_svfiprintf_r+0x130>
 8005fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e7f0      	b.n	8005f9a <_svfiprintf_r+0x192>
 8005fb8:	ab03      	add	r3, sp, #12
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <_svfiprintf_r+0x1f4>)
 8005fc0:	a904      	add	r1, sp, #16
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f3af 8000 	nop.w
 8005fc8:	1c42      	adds	r2, r0, #1
 8005fca:	4606      	mov	r6, r0
 8005fcc:	d1d6      	bne.n	8005f7c <_svfiprintf_r+0x174>
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	065b      	lsls	r3, r3, #25
 8005fd2:	f53f af2d 	bmi.w	8005e30 <_svfiprintf_r+0x28>
 8005fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fd8:	b01d      	add	sp, #116	; 0x74
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	ab03      	add	r3, sp, #12
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <_svfiprintf_r+0x1f4>)
 8005fe6:	a904      	add	r1, sp, #16
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f000 f879 	bl	80060e0 <_printf_i>
 8005fee:	e7eb      	b.n	8005fc8 <_svfiprintf_r+0x1c0>
 8005ff0:	08006480 	.word	0x08006480
 8005ff4:	0800648a 	.word	0x0800648a
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	08005d55 	.word	0x08005d55
 8006000:	08006486 	.word	0x08006486

08006004 <_printf_common>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	4616      	mov	r6, r2
 800600a:	4699      	mov	r9, r3
 800600c:	688a      	ldr	r2, [r1, #8]
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006014:	4293      	cmp	r3, r2
 8006016:	bfb8      	it	lt
 8006018:	4613      	movlt	r3, r2
 800601a:	6033      	str	r3, [r6, #0]
 800601c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006020:	4607      	mov	r7, r0
 8006022:	460c      	mov	r4, r1
 8006024:	b10a      	cbz	r2, 800602a <_printf_common+0x26>
 8006026:	3301      	adds	r3, #1
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	0699      	lsls	r1, r3, #26
 800602e:	bf42      	ittt	mi
 8006030:	6833      	ldrmi	r3, [r6, #0]
 8006032:	3302      	addmi	r3, #2
 8006034:	6033      	strmi	r3, [r6, #0]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	f015 0506 	ands.w	r5, r5, #6
 800603c:	d106      	bne.n	800604c <_printf_common+0x48>
 800603e:	f104 0a19 	add.w	sl, r4, #25
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	6832      	ldr	r2, [r6, #0]
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	42ab      	cmp	r3, r5
 800604a:	dc26      	bgt.n	800609a <_printf_common+0x96>
 800604c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006050:	1e13      	subs	r3, r2, #0
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	2301      	movne	r3, #1
 8006058:	0692      	lsls	r2, r2, #26
 800605a:	d42b      	bmi.n	80060b4 <_printf_common+0xb0>
 800605c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006060:	4649      	mov	r1, r9
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d01e      	beq.n	80060a8 <_printf_common+0xa4>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	6922      	ldr	r2, [r4, #16]
 800606e:	f003 0306 	and.w	r3, r3, #6
 8006072:	2b04      	cmp	r3, #4
 8006074:	bf02      	ittt	eq
 8006076:	68e5      	ldreq	r5, [r4, #12]
 8006078:	6833      	ldreq	r3, [r6, #0]
 800607a:	1aed      	subeq	r5, r5, r3
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	bf0c      	ite	eq
 8006080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006084:	2500      	movne	r5, #0
 8006086:	4293      	cmp	r3, r2
 8006088:	bfc4      	itt	gt
 800608a:	1a9b      	subgt	r3, r3, r2
 800608c:	18ed      	addgt	r5, r5, r3
 800608e:	2600      	movs	r6, #0
 8006090:	341a      	adds	r4, #26
 8006092:	42b5      	cmp	r5, r6
 8006094:	d11a      	bne.n	80060cc <_printf_common+0xc8>
 8006096:	2000      	movs	r0, #0
 8006098:	e008      	b.n	80060ac <_printf_common+0xa8>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4649      	mov	r1, r9
 80060a0:	4638      	mov	r0, r7
 80060a2:	47c0      	blx	r8
 80060a4:	3001      	adds	r0, #1
 80060a6:	d103      	bne.n	80060b0 <_printf_common+0xac>
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	3501      	adds	r5, #1
 80060b2:	e7c6      	b.n	8006042 <_printf_common+0x3e>
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	2030      	movs	r0, #48	; 0x30
 80060ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060be:	4422      	add	r2, r4
 80060c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c8:	3302      	adds	r3, #2
 80060ca:	e7c7      	b.n	800605c <_printf_common+0x58>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4622      	mov	r2, r4
 80060d0:	4649      	mov	r1, r9
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c0      	blx	r8
 80060d6:	3001      	adds	r0, #1
 80060d8:	d0e6      	beq.n	80060a8 <_printf_common+0xa4>
 80060da:	3601      	adds	r6, #1
 80060dc:	e7d9      	b.n	8006092 <_printf_common+0x8e>
	...

080060e0 <_printf_i>:
 80060e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	7e0f      	ldrb	r7, [r1, #24]
 80060e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e8:	2f78      	cmp	r7, #120	; 0x78
 80060ea:	4691      	mov	r9, r2
 80060ec:	4680      	mov	r8, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	469a      	mov	sl, r3
 80060f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060f6:	d807      	bhi.n	8006108 <_printf_i+0x28>
 80060f8:	2f62      	cmp	r7, #98	; 0x62
 80060fa:	d80a      	bhi.n	8006112 <_printf_i+0x32>
 80060fc:	2f00      	cmp	r7, #0
 80060fe:	f000 80d4 	beq.w	80062aa <_printf_i+0x1ca>
 8006102:	2f58      	cmp	r7, #88	; 0x58
 8006104:	f000 80c0 	beq.w	8006288 <_printf_i+0x1a8>
 8006108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006110:	e03a      	b.n	8006188 <_printf_i+0xa8>
 8006112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006116:	2b15      	cmp	r3, #21
 8006118:	d8f6      	bhi.n	8006108 <_printf_i+0x28>
 800611a:	a101      	add	r1, pc, #4	; (adr r1, 8006120 <_printf_i+0x40>)
 800611c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006120:	08006179 	.word	0x08006179
 8006124:	0800618d 	.word	0x0800618d
 8006128:	08006109 	.word	0x08006109
 800612c:	08006109 	.word	0x08006109
 8006130:	08006109 	.word	0x08006109
 8006134:	08006109 	.word	0x08006109
 8006138:	0800618d 	.word	0x0800618d
 800613c:	08006109 	.word	0x08006109
 8006140:	08006109 	.word	0x08006109
 8006144:	08006109 	.word	0x08006109
 8006148:	08006109 	.word	0x08006109
 800614c:	08006291 	.word	0x08006291
 8006150:	080061b9 	.word	0x080061b9
 8006154:	0800624b 	.word	0x0800624b
 8006158:	08006109 	.word	0x08006109
 800615c:	08006109 	.word	0x08006109
 8006160:	080062b3 	.word	0x080062b3
 8006164:	08006109 	.word	0x08006109
 8006168:	080061b9 	.word	0x080061b9
 800616c:	08006109 	.word	0x08006109
 8006170:	08006109 	.word	0x08006109
 8006174:	08006253 	.word	0x08006253
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	602a      	str	r2, [r5, #0]
 8006180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006188:	2301      	movs	r3, #1
 800618a:	e09f      	b.n	80062cc <_printf_i+0x1ec>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	0607      	lsls	r7, r0, #24
 8006192:	f103 0104 	add.w	r1, r3, #4
 8006196:	6029      	str	r1, [r5, #0]
 8006198:	d501      	bpl.n	800619e <_printf_i+0xbe>
 800619a:	681e      	ldr	r6, [r3, #0]
 800619c:	e003      	b.n	80061a6 <_printf_i+0xc6>
 800619e:	0646      	lsls	r6, r0, #25
 80061a0:	d5fb      	bpl.n	800619a <_printf_i+0xba>
 80061a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	da03      	bge.n	80061b2 <_printf_i+0xd2>
 80061aa:	232d      	movs	r3, #45	; 0x2d
 80061ac:	4276      	negs	r6, r6
 80061ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b2:	485a      	ldr	r0, [pc, #360]	; (800631c <_printf_i+0x23c>)
 80061b4:	230a      	movs	r3, #10
 80061b6:	e012      	b.n	80061de <_printf_i+0xfe>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1d19      	adds	r1, r3, #4
 80061be:	6029      	str	r1, [r5, #0]
 80061c0:	0605      	lsls	r5, r0, #24
 80061c2:	d501      	bpl.n	80061c8 <_printf_i+0xe8>
 80061c4:	681e      	ldr	r6, [r3, #0]
 80061c6:	e002      	b.n	80061ce <_printf_i+0xee>
 80061c8:	0641      	lsls	r1, r0, #25
 80061ca:	d5fb      	bpl.n	80061c4 <_printf_i+0xe4>
 80061cc:	881e      	ldrh	r6, [r3, #0]
 80061ce:	4853      	ldr	r0, [pc, #332]	; (800631c <_printf_i+0x23c>)
 80061d0:	2f6f      	cmp	r7, #111	; 0x6f
 80061d2:	bf0c      	ite	eq
 80061d4:	2308      	moveq	r3, #8
 80061d6:	230a      	movne	r3, #10
 80061d8:	2100      	movs	r1, #0
 80061da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061de:	6865      	ldr	r5, [r4, #4]
 80061e0:	60a5      	str	r5, [r4, #8]
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	bfa2      	ittt	ge
 80061e6:	6821      	ldrge	r1, [r4, #0]
 80061e8:	f021 0104 	bicge.w	r1, r1, #4
 80061ec:	6021      	strge	r1, [r4, #0]
 80061ee:	b90e      	cbnz	r6, 80061f4 <_printf_i+0x114>
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	d04b      	beq.n	800628c <_printf_i+0x1ac>
 80061f4:	4615      	mov	r5, r2
 80061f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061fa:	fb03 6711 	mls	r7, r3, r1, r6
 80061fe:	5dc7      	ldrb	r7, [r0, r7]
 8006200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006204:	4637      	mov	r7, r6
 8006206:	42bb      	cmp	r3, r7
 8006208:	460e      	mov	r6, r1
 800620a:	d9f4      	bls.n	80061f6 <_printf_i+0x116>
 800620c:	2b08      	cmp	r3, #8
 800620e:	d10b      	bne.n	8006228 <_printf_i+0x148>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	07de      	lsls	r6, r3, #31
 8006214:	d508      	bpl.n	8006228 <_printf_i+0x148>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	4299      	cmp	r1, r3
 800621c:	bfde      	ittt	le
 800621e:	2330      	movle	r3, #48	; 0x30
 8006220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006228:	1b52      	subs	r2, r2, r5
 800622a:	6122      	str	r2, [r4, #16]
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	464b      	mov	r3, r9
 8006232:	aa03      	add	r2, sp, #12
 8006234:	4621      	mov	r1, r4
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff fee4 	bl	8006004 <_printf_common>
 800623c:	3001      	adds	r0, #1
 800623e:	d14a      	bne.n	80062d6 <_printf_i+0x1f6>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b004      	add	sp, #16
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	4833      	ldr	r0, [pc, #204]	; (8006320 <_printf_i+0x240>)
 8006254:	2778      	movs	r7, #120	; 0x78
 8006256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	6829      	ldr	r1, [r5, #0]
 800625e:	061f      	lsls	r7, r3, #24
 8006260:	f851 6b04 	ldr.w	r6, [r1], #4
 8006264:	d402      	bmi.n	800626c <_printf_i+0x18c>
 8006266:	065f      	lsls	r7, r3, #25
 8006268:	bf48      	it	mi
 800626a:	b2b6      	uxthmi	r6, r6
 800626c:	07df      	lsls	r7, r3, #31
 800626e:	bf48      	it	mi
 8006270:	f043 0320 	orrmi.w	r3, r3, #32
 8006274:	6029      	str	r1, [r5, #0]
 8006276:	bf48      	it	mi
 8006278:	6023      	strmi	r3, [r4, #0]
 800627a:	b91e      	cbnz	r6, 8006284 <_printf_i+0x1a4>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	f023 0320 	bic.w	r3, r3, #32
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	2310      	movs	r3, #16
 8006286:	e7a7      	b.n	80061d8 <_printf_i+0xf8>
 8006288:	4824      	ldr	r0, [pc, #144]	; (800631c <_printf_i+0x23c>)
 800628a:	e7e4      	b.n	8006256 <_printf_i+0x176>
 800628c:	4615      	mov	r5, r2
 800628e:	e7bd      	b.n	800620c <_printf_i+0x12c>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	6826      	ldr	r6, [r4, #0]
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	1d18      	adds	r0, r3, #4
 8006298:	6028      	str	r0, [r5, #0]
 800629a:	0635      	lsls	r5, r6, #24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0x1c4>
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0x1ca>
 80062a4:	0670      	lsls	r0, r6, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0x1c0>
 80062a8:	8019      	strh	r1, [r3, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	4615      	mov	r5, r2
 80062b0:	e7bc      	b.n	800622c <_printf_i+0x14c>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	2100      	movs	r1, #0
 80062be:	4628      	mov	r0, r5
 80062c0:	f7f9 ff9e 	bl	8000200 <memchr>
 80062c4:	b108      	cbz	r0, 80062ca <_printf_i+0x1ea>
 80062c6:	1b40      	subs	r0, r0, r5
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d4:	e7aa      	b.n	800622c <_printf_i+0x14c>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	462a      	mov	r2, r5
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d0ad      	beq.n	8006240 <_printf_i+0x160>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	d413      	bmi.n	8006312 <_printf_i+0x232>
 80062ea:	68e0      	ldr	r0, [r4, #12]
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	4298      	cmp	r0, r3
 80062f0:	bfb8      	it	lt
 80062f2:	4618      	movlt	r0, r3
 80062f4:	e7a6      	b.n	8006244 <_printf_i+0x164>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d09d      	beq.n	8006240 <_printf_i+0x160>
 8006304:	3501      	adds	r5, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	9903      	ldr	r1, [sp, #12]
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	42ab      	cmp	r3, r5
 800630e:	dcf2      	bgt.n	80062f6 <_printf_i+0x216>
 8006310:	e7eb      	b.n	80062ea <_printf_i+0x20a>
 8006312:	2500      	movs	r5, #0
 8006314:	f104 0619 	add.w	r6, r4, #25
 8006318:	e7f5      	b.n	8006306 <_printf_i+0x226>
 800631a:	bf00      	nop
 800631c:	08006491 	.word	0x08006491
 8006320:	080064a2 	.word	0x080064a2

08006324 <memmove>:
 8006324:	4288      	cmp	r0, r1
 8006326:	b510      	push	{r4, lr}
 8006328:	eb01 0402 	add.w	r4, r1, r2
 800632c:	d902      	bls.n	8006334 <memmove+0x10>
 800632e:	4284      	cmp	r4, r0
 8006330:	4623      	mov	r3, r4
 8006332:	d807      	bhi.n	8006344 <memmove+0x20>
 8006334:	1e43      	subs	r3, r0, #1
 8006336:	42a1      	cmp	r1, r4
 8006338:	d008      	beq.n	800634c <memmove+0x28>
 800633a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006342:	e7f8      	b.n	8006336 <memmove+0x12>
 8006344:	4402      	add	r2, r0
 8006346:	4601      	mov	r1, r0
 8006348:	428a      	cmp	r2, r1
 800634a:	d100      	bne.n	800634e <memmove+0x2a>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006356:	e7f7      	b.n	8006348 <memmove+0x24>

08006358 <_sbrk_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d06      	ldr	r5, [pc, #24]	; (8006374 <_sbrk_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fb fe78 	bl	8002058 <_sbrk>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_sbrk_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_sbrk_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000370 	.word	0x20000370

08006378 <_realloc_r>:
 8006378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637c:	4680      	mov	r8, r0
 800637e:	4614      	mov	r4, r2
 8006380:	460e      	mov	r6, r1
 8006382:	b921      	cbnz	r1, 800638e <_realloc_r+0x16>
 8006384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	4611      	mov	r1, r2
 800638a:	f7ff bc57 	b.w	8005c3c <_malloc_r>
 800638e:	b92a      	cbnz	r2, 800639c <_realloc_r+0x24>
 8006390:	f7ff fbe8 	bl	8005b64 <_free_r>
 8006394:	4625      	mov	r5, r4
 8006396:	4628      	mov	r0, r5
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	f000 f81b 	bl	80063d6 <_malloc_usable_size_r>
 80063a0:	4284      	cmp	r4, r0
 80063a2:	4607      	mov	r7, r0
 80063a4:	d802      	bhi.n	80063ac <_realloc_r+0x34>
 80063a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063aa:	d812      	bhi.n	80063d2 <_realloc_r+0x5a>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4640      	mov	r0, r8
 80063b0:	f7ff fc44 	bl	8005c3c <_malloc_r>
 80063b4:	4605      	mov	r5, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0ed      	beq.n	8006396 <_realloc_r+0x1e>
 80063ba:	42bc      	cmp	r4, r7
 80063bc:	4622      	mov	r2, r4
 80063be:	4631      	mov	r1, r6
 80063c0:	bf28      	it	cs
 80063c2:	463a      	movcs	r2, r7
 80063c4:	f7ff fbc0 	bl	8005b48 <memcpy>
 80063c8:	4631      	mov	r1, r6
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff fbca 	bl	8005b64 <_free_r>
 80063d0:	e7e1      	b.n	8006396 <_realloc_r+0x1e>
 80063d2:	4635      	mov	r5, r6
 80063d4:	e7df      	b.n	8006396 <_realloc_r+0x1e>

080063d6 <_malloc_usable_size_r>:
 80063d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063da:	1f18      	subs	r0, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfbc      	itt	lt
 80063e0:	580b      	ldrlt	r3, [r1, r0]
 80063e2:	18c0      	addlt	r0, r0, r3
 80063e4:	4770      	bx	lr
	...

080063e8 <_init>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr

080063f4 <_fini>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr
